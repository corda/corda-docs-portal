#!groovy
class Configuration {
    String branch
    String cdn
    boolean defaultPublish
    String s3BucketName
    String roleArn
    Configuration(String cdn, String s3BucketName, String roleArn, boolean defaultPublish) {
        this.cdn = cdn
        this.defaultPublish = defaultPublish
        this.s3BucketName = s3BucketName
        this.roleArn = roleArn
    }
}
def previews = [
    default: [cdn: 'EBTM5ZO4TERSS', s3Bucket: 'website-docs-preview'],
    baldwin : [cdn: "E1A3IG9C04W1O2", s3Bucket: "website-baldwin-preview"],
    banks : [cdn:  "E3KOZY3IAZ3X1J", s3Bucket: "website-banks-preview"],
    borges: [cdn: "E33YOVSRJLVL1R", s3Bucket: "website-borges-preview"],
    dickens: [cdn: "E248NFWPQCMJCN", s3Bucket: "website-dickens-preview"],
    hardy: [cdn: "E2FGJJ58A94497",  s3Bucket: "website-hardy-preview"],
    lewis: [cdn: "E5R24D2FGGIDU", s3Bucket: "website-lewis-preview"],
    seel: [cdn: "EWRT1W87C2APH", s3Bucket: "website-seel-preview"],
    tolkien: [cdn: "E90BP6WLHDAQR", s3Bucket: "website-tolkien-preview"]
]

Configuration[] configs
switch (env.BRANCH_NAME) {
// TODO: uncomment and update CDN id, once it has been created
//    case ~/publish-.*$/:
//        configs = [
//            new Configuration('E1TWWVXNUWIX3J', 'docs.r3.com-website', 'arn:aws:iam::598547986761:role/DocsiteUploaderFromBltProd', true),
//        ]
//        break
    case "main":
        configs = [
            new Configuration('E1VJ08R1FFUVRT', 'docs.staging.docs.r3.com', 'arn:aws:iam::491552082744:role/DocsiteUploaderFromBltProd', true),
        ]
        break
    default:
        def selectedPreview = params.PREVIEW ?: 'default'
        def preview = previews[selectedPreview]
        configs = [new Configuration(preview.cdn, preview.s3Bucket, 'arn:aws:iam::491552082744:role/DocsiteUploaderFromBltProd', false)]
        break
}

configs.each {config -> config.branch = env.BRANCH_NAME }

def MAKE_PARAMS = [
    'S3_BUCKET="${S3_BUCKET}"',             // do not change the quotes! Variable is for Linux Shell!!
    'DISTRIBUTION_ID="${DISTRIBUTION_ID}"', // do not change the quotes! Variable is for Linux Shell!!
    'ROLE_ARN="${ROLE_ARN}"',               // do not change the quotes! Variable is for Linux Shell!!
]

def MAKE_BUILD_TARGETS = [
    'prod-hugo-build',
]

def MAKE_PUBLISH_TARGETS = [
    'publish',
]

pipeline {
    agent { label "docs-builder" }

    parameters {
        booleanParam defaultValue: configs[0].defaultPublish, description: 'Publishing Corda Docs?', name: 'DO_PUBLISH'
        choice(name: 'PREVIEW', choices: "${(previews.keySet() as List).join("\n")}", description: 'Preview site')
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds() // this makes killAllExistingBuildsForJob always do nothing
        buildDiscarder(logRotator(daysToKeepStr: '7', artifactDaysToKeepStr: '7'))
        ansiColor('xterm')
    }

    stages {
        stage('Build') {
            steps {
                script {
                    def retryAttempt = 0
                    retry(3) {
                        if (retryAttempt > 0) {
                            // progressively longer sleep between tries
                            sleep(2 * 60 + 2 * 60 * retryAttempt) // in seconds
                        }
                        retryAttempt = retryAttempt + 1
                        sh """
                            make ${MAKE_BUILD_TARGETS.join(' ')}
                        """
                    }
                }
            }
        }

        stage('Publish & Deploy') {
            when {
                expression { params.DO_PUBLISH }
                beforeAgent true
            }
            steps {
                script {
                    configs.each { config ->
                        withEnv([
                            "DISTRIBUTION_ID=${config.cdn}",
                            "S3_BUCKET=${config.s3BucketName}",
                            "ROLE_ARN=${config.roleArn}",
                        ]) {
                            sh """\
                                make ${MAKE_PARAMS.join(' ')} ${MAKE_PUBLISH_TARGETS.join(' ')}
                            """.stripIndent()
                        }
                    }
                }
            }
        }
    }

    post {
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
