[{"name":"ALL","description":"net.corda.core.flows.DistributionRecordType.ALL","location":"docs/net.corda.core.flows/-distribution-record-type/-a-l-l/index.html","searchKeys":["ALL","ALL","net.corda.core.flows.DistributionRecordType.ALL"]},{"name":"ALL","description":"net.corda.core.node.services.Vault.RelevancyStatus.ALL","location":"docs/net.corda.core.node.services/-vault/-relevancy-status/-a-l-l/index.html","searchKeys":["ALL","ALL","net.corda.core.node.services.Vault.RelevancyStatus.ALL"]},{"name":"ALL","description":"net.corda.core.node.services.Vault.StateStatus.ALL","location":"docs/net.corda.core.node.services/-vault/-state-status/-a-l-l/index.html","searchKeys":["ALL","ALL","net.corda.core.node.services.Vault.StateStatus.ALL"]},{"name":"ALL_VISIBLE","description":"net.corda.core.node.StatesToRecord.ALL_VISIBLE","location":"docs/net.corda.core.node/-states-to-record/-a-l-l_-v-i-s-i-b-l-e/index.html","searchKeys":["ALL_VISIBLE","ALL_VISIBLE","net.corda.core.node.StatesToRecord.ALL_VISIBLE"]},{"name":"ALWAYS_ACCEPT","description":"net.corda.core.node.services.Vault.ConstraintInfo.Type.ALWAYS_ACCEPT","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-type/-a-l-w-a-y-s_-a-c-c-e-p-t/index.html","searchKeys":["ALWAYS_ACCEPT","ALWAYS_ACCEPT","net.corda.core.node.services.Vault.ConstraintInfo.Type.ALWAYS_ACCEPT"]},{"name":"AND","description":"net.corda.core.node.services.vault.BinaryLogicalOperator.AND","location":"docs/net.corda.core.node.services.vault/-binary-logical-operator/-a-n-d/index.html","searchKeys":["AND","AND","net.corda.core.node.services.vault.BinaryLogicalOperator.AND"]},{"name":"ASC","description":"net.corda.core.node.services.vault.Sort.Direction.ASC","location":"docs/net.corda.core.node.services.vault/-sort/-direction/-a-s-c/index.html","searchKeys":["ASC","ASC","net.corda.core.node.services.vault.Sort.Direction.ASC"]},{"name":"ATTACHMENT","description":"net.corda.core.internal.FetchDataFlow.DataType.ATTACHMENT","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/-a-t-t-a-c-h-m-e-n-t/index.html","searchKeys":["ATTACHMENT","ATTACHMENT","net.corda.core.internal.FetchDataFlow.DataType.ATTACHMENT"]},{"name":"ATTACHMENTS_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.ATTACHMENTS_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-a-t-t-a-c-h-m-e-n-t-s_-g-r-o-u-p/index.html","searchKeys":["ATTACHMENTS_GROUP","ATTACHMENTS_GROUP","net.corda.core.contracts.ComponentGroupEnum.ATTACHMENTS_GROUP"]},{"name":"ATTACHMENTS_V2_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.ATTACHMENTS_V2_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-a-t-t-a-c-h-m-e-n-t-s_-v2_-g-r-o-u-p/index.html","searchKeys":["ATTACHMENTS_V2_GROUP","ATTACHMENTS_V2_GROUP","net.corda.core.contracts.ComponentGroupEnum.ATTACHMENTS_V2_GROUP"]},{"name":"AVG","description":"net.corda.core.node.services.vault.AggregateFunctionType.AVG","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/-a-v-g/index.html","searchKeys":["AVG","AVG","net.corda.core.node.services.vault.AggregateFunctionType.AVG"]},{"name":"Actual","description":"net.corda.finance.contracts.DateRollConvention.Actual","location":"docs/net.corda.finance.contracts/-date-roll-convention/-actual/index.html","searchKeys":["Actual","Actual","net.corda.finance.contracts.DateRollConvention.Actual"]},{"name":"Adjusted","description":"net.corda.finance.contracts.AccrualAdjustment.Adjusted","location":"docs/net.corda.finance.contracts/-accrual-adjustment/-adjusted/index.html","searchKeys":["Adjusted","Adjusted","net.corda.finance.contracts.AccrualAdjustment.Adjusted"]},{"name":"Annual","description":"net.corda.finance.contracts.Frequency.Annual","location":"docs/net.corda.finance.contracts/-frequency/-annual/index.html","searchKeys":["Annual","Annual","net.corda.finance.contracts.Frequency.Annual"]},{"name":"BACKWARD","description":"net.corda.finance.contracts.DateRollDirection.BACKWARD","location":"docs/net.corda.finance.contracts/-date-roll-direction/-b-a-c-k-w-a-r-d/index.html","searchKeys":["BACKWARD","BACKWARD","net.corda.finance.contracts.DateRollDirection.BACKWARD"]},{"name":"BATCH_TRANSACTION","description":"net.corda.core.internal.FetchDataFlow.DataType.BATCH_TRANSACTION","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/-b-a-t-c-h_-t-r-a-n-s-a-c-t-i-o-n/index.html","searchKeys":["BATCH_TRANSACTION","BATCH_TRANSACTION","net.corda.core.internal.FetchDataFlow.DataType.BATCH_TRANSACTION"]},{"name":"BEFORE_STATE_MACHINE_START","description":"net.corda.core.node.services.ServiceLifecycleEvent.BEFORE_STATE_MACHINE_START","location":"docs/net.corda.core.node.services/-service-lifecycle-event/-b-e-f-o-r-e_-s-t-a-t-e_-m-a-c-h-i-n-e_-s-t-a-r-t/index.html","searchKeys":["BEFORE_STATE_MACHINE_START","BEFORE_STATE_MACHINE_START","net.corda.core.node.services.ServiceLifecycleEvent.BEFORE_STATE_MACHINE_START"]},{"name":"BiWeekly","description":"net.corda.finance.contracts.Frequency.BiWeekly","location":"docs/net.corda.finance.contracts/-frequency/-bi-weekly/index.html","searchKeys":["BiWeekly","BiWeekly","net.corda.finance.contracts.Frequency.BiWeekly"]},{"name":"CLOSED","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.CLOSED","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/-c-l-o-s-e-d/index.html","searchKeys":["CLOSED","CLOSED","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.CLOSED"]},{"name":"CLOSE_OUT","description":"net.corda.finance.contracts.NetType.CLOSE_OUT","location":"docs/net.corda.finance.contracts/-net-type/-c-l-o-s-e_-o-u-t/index.html","searchKeys":["CLOSE_OUT","CLOSE_OUT","net.corda.finance.contracts.NetType.CLOSE_OUT"]},{"name":"COMMANDS_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.COMMANDS_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-c-o-m-m-a-n-d-s_-g-r-o-u-p/index.html","searchKeys":["COMMANDS_GROUP","COMMANDS_GROUP","net.corda.core.contracts.ComponentGroupEnum.COMMANDS_GROUP"]},{"name":"CONFIDENTIAL_LEGAL_IDENTITY","description":"net.corda.core.internal.CertRole.CONFIDENTIAL_LEGAL_IDENTITY","location":"docs/net.corda.core.internal/-cert-role/-c-o-n-f-i-d-e-n-t-i-a-l_-l-e-g-a-l_-i-d-e-n-t-i-t-y/index.html","searchKeys":["CONFIDENTIAL_LEGAL_IDENTITY","CONFIDENTIAL_LEGAL_IDENTITY","net.corda.core.internal.CertRole.CONFIDENTIAL_LEGAL_IDENTITY"]},{"name":"CONNECTED","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.CONNECTED","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/-c-o-n-n-e-c-t-e-d/index.html","searchKeys":["CONNECTED","CONNECTED","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.CONNECTED"]},{"name":"CONNECTING","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.CONNECTING","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/-c-o-n-n-e-c-t-i-n-g/index.html","searchKeys":["CONNECTING","CONNECTING","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.CONNECTING"]},{"name":"CONSTRAINT_TYPE","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.CONSTRAINT_TYPE","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/-c-o-n-s-t-r-a-i-n-t_-t-y-p-e/index.html","searchKeys":["CONSTRAINT_TYPE","CONSTRAINT_TYPE","net.corda.core.node.services.vault.Sort.VaultStateAttribute.CONSTRAINT_TYPE"]},{"name":"CONSUMED","description":"net.corda.core.node.services.Vault.StateStatus.CONSUMED","location":"docs/net.corda.core.node.services/-vault/-state-status/-c-o-n-s-u-m-e-d/index.html","searchKeys":["CONSUMED","CONSUMED","net.corda.core.node.services.Vault.StateStatus.CONSUMED"]},{"name":"CONSUMED","description":"net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.CONSUMED","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-instant-type/-c-o-n-s-u-m-e-d/index.html","searchKeys":["CONSUMED","CONSUMED","net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.CONSUMED"]},{"name":"CONSUMED_TIME","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.CONSUMED_TIME","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/-c-o-n-s-u-m-e-d_-t-i-m-e/index.html","searchKeys":["CONSUMED_TIME","CONSUMED_TIME","net.corda.core.node.services.vault.Sort.VaultStateAttribute.CONSUMED_TIME"]},{"name":"CONTRACT_STATE_TYPE","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.CONTRACT_STATE_TYPE","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/-c-o-n-t-r-a-c-t_-s-t-a-t-e_-t-y-p-e/index.html","searchKeys":["CONTRACT_STATE_TYPE","CONTRACT_STATE_TYPE","net.corda.core.node.services.vault.Sort.VaultStateAttribute.CONTRACT_STATE_TYPE"]},{"name":"CONTRACT_UPGRADE","description":"net.corda.core.node.services.Vault.UpdateType.CONTRACT_UPGRADE","location":"docs/net.corda.core.node.services/-vault/-update-type/-c-o-n-t-r-a-c-t_-u-p-g-r-a-d-e/index.html","searchKeys":["CONTRACT_UPGRADE","CONTRACT_UPGRADE","net.corda.core.node.services.Vault.UpdateType.CONTRACT_UPGRADE"]},{"name":"COUNT","description":"net.corda.core.node.services.vault.AggregateFunctionType.COUNT","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/-c-o-u-n-t/index.html","searchKeys":["COUNT","COUNT","net.corda.core.node.services.vault.AggregateFunctionType.COUNT"]},{"name":"CZ_WHITELISTED","description":"net.corda.core.node.services.Vault.ConstraintInfo.Type.CZ_WHITELISTED","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-type/-c-z_-w-h-i-t-e-l-i-s-t-e-d/index.html","searchKeys":["CZ_WHITELISTED","CZ_WHITELISTED","net.corda.core.node.services.Vault.ConstraintInfo.Type.CZ_WHITELISTED"]},{"name":"D30","description":"net.corda.finance.contracts.DayCountBasisDay.D30","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d30/index.html","searchKeys":["D30","D30","net.corda.finance.contracts.DayCountBasisDay.D30"]},{"name":"D30E","description":"net.corda.finance.contracts.DayCountBasisDay.D30E","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d30-e/index.html","searchKeys":["D30E","D30E","net.corda.finance.contracts.DayCountBasisDay.D30E"]},{"name":"D30F","description":"net.corda.finance.contracts.DayCountBasisDay.D30F","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d30-f/index.html","searchKeys":["D30F","D30F","net.corda.finance.contracts.DayCountBasisDay.D30F"]},{"name":"D30G","description":"net.corda.finance.contracts.DayCountBasisDay.D30G","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d30-g/index.html","searchKeys":["D30G","D30G","net.corda.finance.contracts.DayCountBasisDay.D30G"]},{"name":"D30N","description":"net.corda.finance.contracts.DayCountBasisDay.D30N","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d30-n/index.html","searchKeys":["D30N","D30N","net.corda.finance.contracts.DayCountBasisDay.D30N"]},{"name":"D30P","description":"net.corda.finance.contracts.DayCountBasisDay.D30P","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d30-p/index.html","searchKeys":["D30P","D30P","net.corda.finance.contracts.DayCountBasisDay.D30P"]},{"name":"D30Z","description":"net.corda.finance.contracts.DayCountBasisDay.D30Z","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d30-z/index.html","searchKeys":["D30Z","D30Z","net.corda.finance.contracts.DayCountBasisDay.D30Z"]},{"name":"DActual","description":"net.corda.finance.contracts.DayCountBasisDay.DActual","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d-actual/index.html","searchKeys":["DActual","DActual","net.corda.finance.contracts.DayCountBasisDay.DActual"]},{"name":"DActualJ","description":"net.corda.finance.contracts.DayCountBasisDay.DActualJ","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d-actual-j/index.html","searchKeys":["DActualJ","DActualJ","net.corda.finance.contracts.DayCountBasisDay.DActualJ"]},{"name":"DBus_SaoPaulo","description":"net.corda.finance.contracts.DayCountBasisDay.DBus_SaoPaulo","location":"docs/net.corda.finance.contracts/-day-count-basis-day/-d-bus_-sao-paulo/index.html","searchKeys":["DBus_SaoPaulo","DBus_SaoPaulo","net.corda.finance.contracts.DayCountBasisDay.DBus_SaoPaulo"]},{"name":"DEFAULTED","description":"net.corda.finance.contracts.asset.Obligation.Lifecycle.DEFAULTED","location":"docs/net.corda.finance.contracts.asset/-obligation/-lifecycle/-d-e-f-a-u-l-t-e-d/index.html","searchKeys":["DEFAULTED","DEFAULTED","net.corda.finance.contracts.asset.Obligation.Lifecycle.DEFAULTED"]},{"name":"DESC","description":"net.corda.core.node.services.vault.Sort.Direction.DESC","location":"docs/net.corda.core.node.services.vault/-sort/-direction/-d-e-s-c/index.html","searchKeys":["DESC","DESC","net.corda.core.node.services.vault.Sort.Direction.DESC"]},{"name":"DIED","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.DIED","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/-d-i-e-d/index.html","searchKeys":["DIED","DIED","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.DIED"]},{"name":"DOORMAN_CA","description":"net.corda.core.internal.CertRole.DOORMAN_CA","location":"docs/net.corda.core.internal/-cert-role/-d-o-o-r-m-a-n_-c-a/index.html","searchKeys":["DOORMAN_CA","DOORMAN_CA","net.corda.core.internal.CertRole.DOORMAN_CA"]},{"name":"Daily","description":"net.corda.finance.contracts.Frequency.Daily","location":"docs/net.corda.finance.contracts/-frequency/-daily/index.html","searchKeys":["Daily","Daily","net.corda.finance.contracts.Frequency.Daily"]},{"name":"Day","description":"net.corda.finance.contracts.Tenor.TimeUnit.Day","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/-day/index.html","searchKeys":["Day","Day","net.corda.finance.contracts.Tenor.TimeUnit.Day"]},{"name":"EQUAL","description":"net.corda.core.node.services.vault.EqualityComparisonOperator.EQUAL","location":"docs/net.corda.core.node.services.vault/-equality-comparison-operator/-e-q-u-a-l/index.html","searchKeys":["EQUAL","EQUAL","net.corda.core.node.services.vault.EqualityComparisonOperator.EQUAL"]},{"name":"EQUAL_IGNORE_CASE","description":"net.corda.core.node.services.vault.EqualityComparisonOperator.EQUAL_IGNORE_CASE","location":"docs/net.corda.core.node.services.vault/-equality-comparison-operator/-e-q-u-a-l_-i-g-n-o-r-e_-c-a-s-e/index.html","searchKeys":["EQUAL_IGNORE_CASE","EQUAL_IGNORE_CASE","net.corda.core.node.services.vault.EqualityComparisonOperator.EQUAL_IGNORE_CASE"]},{"name":"ERROR","description":"net.corda.core.internal.telemetry.TelemetryStatusCode.ERROR","location":"docs/net.corda.core.internal.telemetry/-telemetry-status-code/-e-r-r-o-r/index.html","searchKeys":["ERROR","ERROR","net.corda.core.internal.telemetry.TelemetryStatusCode.ERROR"]},{"name":"EXTERNAL_ID","description":"net.corda.core.node.services.vault.Sort.LinearStateAttribute.EXTERNAL_ID","location":"docs/net.corda.core.node.services.vault/-sort/-linear-state-attribute/-e-x-t-e-r-n-a-l_-i-d/index.html","searchKeys":["EXTERNAL_ID","EXTERNAL_ID","net.corda.core.node.services.vault.Sort.LinearStateAttribute.EXTERNAL_ID"]},{"name":"FILENAME","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.FILENAME","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/-f-i-l-e-n-a-m-e/index.html","searchKeys":["FILENAME","FILENAME","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.FILENAME"]},{"name":"FORWARD","description":"net.corda.finance.contracts.DateRollDirection.FORWARD","location":"docs/net.corda.finance.contracts/-date-roll-direction/-f-o-r-w-a-r-d/index.html","searchKeys":["FORWARD","FORWARD","net.corda.finance.contracts.DateRollDirection.FORWARD"]},{"name":"FULL","description":"net.corda.core.internal.LegalNameValidator.Validation.FULL","location":"docs/net.corda.core.internal/-legal-name-validator/-validation/-f-u-l-l/index.html","searchKeys":["FULL","FULL","net.corda.core.internal.LegalNameValidator.Validation.FULL"]},{"name":"Following","description":"net.corda.finance.contracts.DateRollConvention.Following","location":"docs/net.corda.finance.contracts/-date-roll-convention/-following/index.html","searchKeys":["Following","Following","net.corda.finance.contracts.DateRollConvention.Following"]},{"name":"GENERAL","description":"net.corda.core.node.services.Vault.UpdateType.GENERAL","location":"docs/net.corda.core.node.services/-vault/-update-type/-g-e-n-e-r-a-l/index.html","searchKeys":["GENERAL","GENERAL","net.corda.core.node.services.Vault.UpdateType.GENERAL"]},{"name":"GREATER_THAN","description":"net.corda.core.node.services.vault.BinaryComparisonOperator.GREATER_THAN","location":"docs/net.corda.core.node.services.vault/-binary-comparison-operator/-g-r-e-a-t-e-r_-t-h-a-n/index.html","searchKeys":["GREATER_THAN","GREATER_THAN","net.corda.core.node.services.vault.BinaryComparisonOperator.GREATER_THAN"]},{"name":"GREATER_THAN_OR_EQUAL","description":"net.corda.core.node.services.vault.BinaryComparisonOperator.GREATER_THAN_OR_EQUAL","location":"docs/net.corda.core.node.services.vault/-binary-comparison-operator/-g-r-e-a-t-e-r_-t-h-a-n_-o-r_-e-q-u-a-l/index.html","searchKeys":["GREATER_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","net.corda.core.node.services.vault.BinaryComparisonOperator.GREATER_THAN_OR_EQUAL"]},{"name":"HASH","description":"net.corda.core.node.services.Vault.ConstraintInfo.Type.HASH","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-type/-h-a-s-h/index.html","searchKeys":["HASH","HASH","net.corda.core.node.services.Vault.ConstraintInfo.Type.HASH"]},{"name":"IN","description":"net.corda.core.node.services.vault.CollectionOperator.IN","location":"docs/net.corda.core.node.services.vault/-collection-operator/-i-n/index.html","searchKeys":["IN","IN","net.corda.core.node.services.vault.CollectionOperator.IN"]},{"name":"INPUT","description":"net.corda.core.contracts.TransactionVerificationException.Direction.INPUT","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-direction/-i-n-p-u-t/index.html","searchKeys":["INPUT","INPUT","net.corda.core.contracts.TransactionVerificationException.Direction.INPUT"]},{"name":"INPUTS","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.INPUTS","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/-i-n-p-u-t-s/index.html","searchKeys":["INPUTS","INPUTS","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.INPUTS"]},{"name":"INPUTS","description":"net.corda.core.transactions.NotaryChangeWireTransaction.Component.INPUTS","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-component/-i-n-p-u-t-s/index.html","searchKeys":["INPUTS","INPUTS","net.corda.core.transactions.NotaryChangeWireTransaction.Component.INPUTS"]},{"name":"INPUTS_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.INPUTS_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-i-n-p-u-t-s_-g-r-o-u-p/index.html","searchKeys":["INPUTS_GROUP","INPUTS_GROUP","net.corda.core.contracts.ComponentGroupEnum.INPUTS_GROUP"]},{"name":"INPUT_STATE","description":"net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.INPUT_STATE","location":"docs/net.corda.core.flows/-state-consumption-details/-consumed-state-type/-i-n-p-u-t_-s-t-a-t-e/index.html","searchKeys":["INPUT_STATE","INPUT_STATE","net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.INPUT_STATE"]},{"name":"INSERTION_DATE","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.INSERTION_DATE","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/-i-n-s-e-r-t-i-o-n_-d-a-t-e/index.html","searchKeys":["INSERTION_DATE","INSERTION_DATE","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.INSERTION_DATE"]},{"name":"IN_FLIGHT","description":"net.corda.core.node.services.TransactionStatus.IN_FLIGHT","location":"docs/net.corda.core.node.services/-transaction-status/-i-n_-f-l-i-g-h-t/index.html","searchKeys":["IN_FLIGHT","IN_FLIGHT","net.corda.core.node.services.TransactionStatus.IN_FLIGHT"]},{"name":"IN_IGNORE_CASE","description":"net.corda.core.node.services.vault.CollectionOperator.IN_IGNORE_CASE","location":"docs/net.corda.core.node.services.vault/-collection-operator/-i-n_-i-g-n-o-r-e_-c-a-s-e/index.html","searchKeys":["IN_IGNORE_CASE","IN_IGNORE_CASE","net.corda.core.node.services.vault.CollectionOperator.IN_IGNORE_CASE"]},{"name":"ISSUER_REF","description":"net.corda.core.node.services.vault.Sort.FungibleStateAttribute.ISSUER_REF","location":"docs/net.corda.core.node.services.vault/-sort/-fungible-state-attribute/-i-s-s-u-e-r_-r-e-f/index.html","searchKeys":["ISSUER_REF","ISSUER_REF","net.corda.core.node.services.vault.Sort.FungibleStateAttribute.ISSUER_REF"]},{"name":"IS_NULL","description":"net.corda.core.node.services.vault.NullOperator.IS_NULL","location":"docs/net.corda.core.node.services.vault/-null-operator/-i-s_-n-u-l-l/index.html","searchKeys":["IS_NULL","IS_NULL","net.corda.core.node.services.vault.NullOperator.IS_NULL"]},{"name":"InAdvance","description":"net.corda.finance.contracts.PaymentRule.InAdvance","location":"docs/net.corda.finance.contracts/-payment-rule/-in-advance/index.html","searchKeys":["InAdvance","InAdvance","net.corda.finance.contracts.PaymentRule.InAdvance"]},{"name":"InArrears","description":"net.corda.finance.contracts.PaymentRule.InArrears","location":"docs/net.corda.finance.contracts/-payment-rule/-in-arrears/index.html","searchKeys":["InArrears","InArrears","net.corda.finance.contracts.PaymentRule.InArrears"]},{"name":"InMemory","description":"net.corda.testing.driver.VerifierType.InMemory","location":"docs/net.corda.testing.driver/-verifier-type/-in-memory/index.html","searchKeys":["InMemory","InMemory","net.corda.testing.driver.VerifierType.InMemory"]},{"name":"LEGACY_ATTACHMENT","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.LEGACY_ATTACHMENT","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/-l-e-g-a-c-y_-a-t-t-a-c-h-m-e-n-t/index.html","searchKeys":["LEGACY_ATTACHMENT","LEGACY_ATTACHMENT","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.LEGACY_ATTACHMENT"]},{"name":"LEGAL_IDENTITY","description":"net.corda.core.internal.CertRole.LEGAL_IDENTITY","location":"docs/net.corda.core.internal/-cert-role/-l-e-g-a-l_-i-d-e-n-t-i-t-y/index.html","searchKeys":["LEGAL_IDENTITY","LEGAL_IDENTITY","net.corda.core.internal.CertRole.LEGAL_IDENTITY"]},{"name":"LESS_THAN","description":"net.corda.core.node.services.vault.BinaryComparisonOperator.LESS_THAN","location":"docs/net.corda.core.node.services.vault/-binary-comparison-operator/-l-e-s-s_-t-h-a-n/index.html","searchKeys":["LESS_THAN","LESS_THAN","net.corda.core.node.services.vault.BinaryComparisonOperator.LESS_THAN"]},{"name":"LESS_THAN_OR_EQUAL","description":"net.corda.core.node.services.vault.BinaryComparisonOperator.LESS_THAN_OR_EQUAL","location":"docs/net.corda.core.node.services.vault/-binary-comparison-operator/-l-e-s-s_-t-h-a-n_-o-r_-e-q-u-a-l/index.html","searchKeys":["LESS_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","net.corda.core.node.services.vault.BinaryComparisonOperator.LESS_THAN_OR_EQUAL"]},{"name":"LIKE","description":"net.corda.core.node.services.vault.LikenessOperator.LIKE","location":"docs/net.corda.core.node.services.vault/-likeness-operator/-l-i-k-e/index.html","searchKeys":["LIKE","LIKE","net.corda.core.node.services.vault.LikenessOperator.LIKE"]},{"name":"LIKE_IGNORE_CASE","description":"net.corda.core.node.services.vault.LikenessOperator.LIKE_IGNORE_CASE","location":"docs/net.corda.core.node.services.vault/-likeness-operator/-l-i-k-e_-i-g-n-o-r-e_-c-a-s-e/index.html","searchKeys":["LIKE_IGNORE_CASE","LIKE_IGNORE_CASE","net.corda.core.node.services.vault.LikenessOperator.LIKE_IGNORE_CASE"]},{"name":"LOCKED_ONLY","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.LOCKED_ONLY","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-type/-l-o-c-k-e-d_-o-n-l-y/index.html","searchKeys":["LOCKED_ONLY","LOCKED_ONLY","net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.LOCKED_ONLY"]},{"name":"LOCK_ID","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.LOCK_ID","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/-l-o-c-k_-i-d/index.html","searchKeys":["LOCK_ID","LOCK_ID","net.corda.core.node.services.vault.Sort.VaultStateAttribute.LOCK_ID"]},{"name":"MAX","description":"net.corda.core.node.services.vault.AggregateFunctionType.MAX","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/-m-a-x/index.html","searchKeys":["MAX","MAX","net.corda.core.node.services.vault.AggregateFunctionType.MAX"]},{"name":"MIN","description":"net.corda.core.node.services.vault.AggregateFunctionType.MIN","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/-m-i-n/index.html","searchKeys":["MIN","MIN","net.corda.core.node.services.vault.AggregateFunctionType.MIN"]},{"name":"MINIMAL","description":"net.corda.core.internal.LegalNameValidator.Validation.MINIMAL","location":"docs/net.corda.core.internal/-legal-name-validator/-validation/-m-i-n-i-m-a-l/index.html","searchKeys":["MINIMAL","MINIMAL","net.corda.core.internal.LegalNameValidator.Validation.MINIMAL"]},{"name":"ModifiedFollowing","description":"net.corda.finance.contracts.DateRollConvention.ModifiedFollowing","location":"docs/net.corda.finance.contracts/-date-roll-convention/-modified-following/index.html","searchKeys":["ModifiedFollowing","ModifiedFollowing","net.corda.finance.contracts.DateRollConvention.ModifiedFollowing"]},{"name":"ModifiedPrevious","description":"net.corda.finance.contracts.DateRollConvention.ModifiedPrevious","location":"docs/net.corda.finance.contracts/-date-roll-convention/-modified-previous/index.html","searchKeys":["ModifiedPrevious","ModifiedPrevious","net.corda.finance.contracts.DateRollConvention.ModifiedPrevious"]},{"name":"Month","description":"net.corda.finance.contracts.Tenor.TimeUnit.Month","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/-month/index.html","searchKeys":["Month","Month","net.corda.finance.contracts.Tenor.TimeUnit.Month"]},{"name":"Monthly","description":"net.corda.finance.contracts.Frequency.Monthly","location":"docs/net.corda.finance.contracts/-frequency/-monthly/index.html","searchKeys":["Monthly","Monthly","net.corda.finance.contracts.Frequency.Monthly"]},{"name":"NETWORK_MAP","description":"net.corda.core.internal.CertRole.NETWORK_MAP","location":"docs/net.corda.core.internal/-cert-role/-n-e-t-w-o-r-k_-m-a-p/index.html","searchKeys":["NETWORK_MAP","NETWORK_MAP","net.corda.core.internal.CertRole.NETWORK_MAP"]},{"name":"NETWORK_PARAMETERS","description":"net.corda.core.internal.CertRole.NETWORK_PARAMETERS","location":"docs/net.corda.core.internal/-cert-role/-n-e-t-w-o-r-k_-p-a-r-a-m-e-t-e-r-s/index.html","searchKeys":["NETWORK_PARAMETERS","NETWORK_PARAMETERS","net.corda.core.internal.CertRole.NETWORK_PARAMETERS"]},{"name":"NEW_NOTARY","description":"net.corda.core.transactions.NotaryChangeWireTransaction.Component.NEW_NOTARY","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-component/-n-e-w_-n-o-t-a-r-y/index.html","searchKeys":["NEW_NOTARY","NEW_NOTARY","net.corda.core.transactions.NotaryChangeWireTransaction.Component.NEW_NOTARY"]},{"name":"NODE_CA","description":"net.corda.core.internal.CertRole.NODE_CA","location":"docs/net.corda.core.internal/-cert-role/-n-o-d-e_-c-a/index.html","searchKeys":["NODE_CA","NODE_CA","net.corda.core.internal.CertRole.NODE_CA"]},{"name":"NONE","description":"net.corda.core.node.StatesToRecord.NONE","location":"docs/net.corda.core.node/-states-to-record/-n-o-n-e/index.html","searchKeys":["NONE","NONE","net.corda.core.node.StatesToRecord.NONE"]},{"name":"NORMAL","description":"net.corda.finance.contracts.asset.Obligation.Lifecycle.NORMAL","location":"docs/net.corda.finance.contracts.asset/-obligation/-lifecycle/-n-o-r-m-a-l/index.html","searchKeys":["NORMAL","NORMAL","net.corda.finance.contracts.asset.Obligation.Lifecycle.NORMAL"]},{"name":"NOTARY","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.NOTARY","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/-n-o-t-a-r-y/index.html","searchKeys":["NOTARY","NOTARY","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.NOTARY"]},{"name":"NOTARY","description":"net.corda.core.transactions.NotaryChangeWireTransaction.Component.NOTARY","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-component/-n-o-t-a-r-y/index.html","searchKeys":["NOTARY","NOTARY","net.corda.core.transactions.NotaryChangeWireTransaction.Component.NOTARY"]},{"name":"NOTARY_CHANGE","description":"net.corda.core.node.services.Vault.UpdateType.NOTARY_CHANGE","location":"docs/net.corda.core.node.services/-vault/-update-type/-n-o-t-a-r-y_-c-h-a-n-g-e/index.html","searchKeys":["NOTARY_CHANGE","NOTARY_CHANGE","net.corda.core.node.services.Vault.UpdateType.NOTARY_CHANGE"]},{"name":"NOTARY_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.NOTARY_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-n-o-t-a-r-y_-g-r-o-u-p/index.html","searchKeys":["NOTARY_GROUP","NOTARY_GROUP","net.corda.core.contracts.ComponentGroupEnum.NOTARY_GROUP"]},{"name":"NOTARY_NAME","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.NOTARY_NAME","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/-n-o-t-a-r-y_-n-a-m-e/index.html","searchKeys":["NOTARY_NAME","NOTARY_NAME","net.corda.core.node.services.vault.Sort.VaultStateAttribute.NOTARY_NAME"]},{"name":"NOT_EQUAL","description":"net.corda.core.node.services.vault.EqualityComparisonOperator.NOT_EQUAL","location":"docs/net.corda.core.node.services.vault/-equality-comparison-operator/-n-o-t_-e-q-u-a-l/index.html","searchKeys":["NOT_EQUAL","NOT_EQUAL","net.corda.core.node.services.vault.EqualityComparisonOperator.NOT_EQUAL"]},{"name":"NOT_EQUAL_IGNORE_CASE","description":"net.corda.core.node.services.vault.EqualityComparisonOperator.NOT_EQUAL_IGNORE_CASE","location":"docs/net.corda.core.node.services.vault/-equality-comparison-operator/-n-o-t_-e-q-u-a-l_-i-g-n-o-r-e_-c-a-s-e/index.html","searchKeys":["NOT_EQUAL_IGNORE_CASE","NOT_EQUAL_IGNORE_CASE","net.corda.core.node.services.vault.EqualityComparisonOperator.NOT_EQUAL_IGNORE_CASE"]},{"name":"NOT_IN","description":"net.corda.core.node.services.vault.CollectionOperator.NOT_IN","location":"docs/net.corda.core.node.services.vault/-collection-operator/-n-o-t_-i-n/index.html","searchKeys":["NOT_IN","NOT_IN","net.corda.core.node.services.vault.CollectionOperator.NOT_IN"]},{"name":"NOT_IN_IGNORE_CASE","description":"net.corda.core.node.services.vault.CollectionOperator.NOT_IN_IGNORE_CASE","location":"docs/net.corda.core.node.services.vault/-collection-operator/-n-o-t_-i-n_-i-g-n-o-r-e_-c-a-s-e/index.html","searchKeys":["NOT_IN_IGNORE_CASE","NOT_IN_IGNORE_CASE","net.corda.core.node.services.vault.CollectionOperator.NOT_IN_IGNORE_CASE"]},{"name":"NOT_LIKE","description":"net.corda.core.node.services.vault.LikenessOperator.NOT_LIKE","location":"docs/net.corda.core.node.services.vault/-likeness-operator/-n-o-t_-l-i-k-e/index.html","searchKeys":["NOT_LIKE","NOT_LIKE","net.corda.core.node.services.vault.LikenessOperator.NOT_LIKE"]},{"name":"NOT_LIKE_IGNORE_CASE","description":"net.corda.core.node.services.vault.LikenessOperator.NOT_LIKE_IGNORE_CASE","location":"docs/net.corda.core.node.services.vault/-likeness-operator/-n-o-t_-l-i-k-e_-i-g-n-o-r-e_-c-a-s-e/index.html","searchKeys":["NOT_LIKE_IGNORE_CASE","NOT_LIKE_IGNORE_CASE","net.corda.core.node.services.vault.LikenessOperator.NOT_LIKE_IGNORE_CASE"]},{"name":"NOT_NULL","description":"net.corda.core.node.services.vault.NullOperator.NOT_NULL","location":"docs/net.corda.core.node.services.vault/-null-operator/-n-o-t_-n-u-l-l/index.html","searchKeys":["NOT_NULL","NOT_NULL","net.corda.core.node.services.vault.NullOperator.NOT_NULL"]},{"name":"NOT_RELEVANT","description":"net.corda.core.node.services.Vault.RelevancyStatus.NOT_RELEVANT","location":"docs/net.corda.core.node.services/-vault/-relevancy-status/-n-o-t_-r-e-l-e-v-a-n-t/index.html","searchKeys":["NOT_RELEVANT","NOT_RELEVANT","net.corda.core.node.services.Vault.RelevancyStatus.NOT_RELEVANT"]},{"name":"OK","description":"net.corda.core.internal.telemetry.TelemetryStatusCode.OK","location":"docs/net.corda.core.internal.telemetry/-telemetry-status-code/-o-k/index.html","searchKeys":["OK","OK","net.corda.core.internal.telemetry.TelemetryStatusCode.OK"]},{"name":"ONLY_RELEVANT","description":"net.corda.core.node.StatesToRecord.ONLY_RELEVANT","location":"docs/net.corda.core.node/-states-to-record/-o-n-l-y_-r-e-l-e-v-a-n-t/index.html","searchKeys":["ONLY_RELEVANT","ONLY_RELEVANT","net.corda.core.node.StatesToRecord.ONLY_RELEVANT"]},{"name":"OR","description":"net.corda.core.node.services.vault.BinaryLogicalOperator.OR","location":"docs/net.corda.core.node.services.vault/-binary-logical-operator/-o-r/index.html","searchKeys":["OR","OR","net.corda.core.node.services.vault.BinaryLogicalOperator.OR"]},{"name":"OUTPUT","description":"net.corda.core.contracts.TransactionVerificationException.Direction.OUTPUT","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-direction/-o-u-t-p-u-t/index.html","searchKeys":["OUTPUT","OUTPUT","net.corda.core.contracts.TransactionVerificationException.Direction.OUTPUT"]},{"name":"OUTPUTS_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.OUTPUTS_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-o-u-t-p-u-t-s_-g-r-o-u-p/index.html","searchKeys":["OUTPUTS_GROUP","OUTPUTS_GROUP","net.corda.core.contracts.ComponentGroupEnum.OUTPUTS_GROUP"]},{"name":"P2P","description":"net.corda.core.serialization.SerializationContext.UseCase.P2P","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/-p2-p/index.html","searchKeys":["P2P","P2P","net.corda.core.serialization.SerializationContext.UseCase.P2P"]},{"name":"PARAMETERS","description":"net.corda.core.internal.FetchDataFlow.DataType.PARAMETERS","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/-p-a-r-a-m-e-t-e-r-s/index.html","searchKeys":["PARAMETERS","PARAMETERS","net.corda.core.internal.FetchDataFlow.DataType.PARAMETERS"]},{"name":"PARAMETERS_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.PARAMETERS_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-p-a-r-a-m-e-t-e-r-s_-g-r-o-u-p/index.html","searchKeys":["PARAMETERS_GROUP","PARAMETERS_GROUP","net.corda.core.contracts.ComponentGroupEnum.PARAMETERS_GROUP"]},{"name":"PARAMETERS_HASH","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.PARAMETERS_HASH","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/-p-a-r-a-m-e-t-e-r-s_-h-a-s-h/index.html","searchKeys":["PARAMETERS_HASH","PARAMETERS_HASH","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.PARAMETERS_HASH"]},{"name":"PARAMETERS_HASH","description":"net.corda.core.transactions.NotaryChangeWireTransaction.Component.PARAMETERS_HASH","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-component/-p-a-r-a-m-e-t-e-r-s_-h-a-s-h/index.html","searchKeys":["PARAMETERS_HASH","PARAMETERS_HASH","net.corda.core.transactions.NotaryChangeWireTransaction.Component.PARAMETERS_HASH"]},{"name":"PAYMENT","description":"net.corda.finance.contracts.NetType.PAYMENT","location":"docs/net.corda.finance.contracts/-net-type/-p-a-y-m-e-n-t/index.html","searchKeys":["PAYMENT","PAYMENT","net.corda.finance.contracts.NetType.PAYMENT"]},{"name":"Previous","description":"net.corda.finance.contracts.DateRollConvention.Previous","location":"docs/net.corda.finance.contracts/-date-roll-convention/-previous/index.html","searchKeys":["Previous","Previous","net.corda.finance.contracts.DateRollConvention.Previous"]},{"name":"QUANTITY","description":"net.corda.core.node.services.vault.Sort.FungibleStateAttribute.QUANTITY","location":"docs/net.corda.core.node.services.vault/-sort/-fungible-state-attribute/-q-u-a-n-t-i-t-y/index.html","searchKeys":["QUANTITY","QUANTITY","net.corda.core.node.services.vault.Sort.FungibleStateAttribute.QUANTITY"]},{"name":"Quarterly","description":"net.corda.finance.contracts.Frequency.Quarterly","location":"docs/net.corda.finance.contracts/-frequency/-quarterly/index.html","searchKeys":["Quarterly","Quarterly","net.corda.finance.contracts.Frequency.Quarterly"]},{"name":"RECEIVER","description":"net.corda.core.flows.DistributionRecordType.RECEIVER","location":"docs/net.corda.core.flows/-distribution-record-type/-r-e-c-e-i-v-e-r/index.html","searchKeys":["RECEIVER","RECEIVER","net.corda.core.flows.DistributionRecordType.RECEIVER"]},{"name":"RECORDED","description":"net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.RECORDED","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-instant-type/-r-e-c-o-r-d-e-d/index.html","searchKeys":["RECORDED","RECORDED","net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.RECORDED"]},{"name":"RECORDED_TIME","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.RECORDED_TIME","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/-r-e-c-o-r-d-e-d_-t-i-m-e/index.html","searchKeys":["RECORDED_TIME","RECORDED_TIME","net.corda.core.node.services.vault.Sort.VaultStateAttribute.RECORDED_TIME"]},{"name":"REFERENCES_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.REFERENCES_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-r-e-f-e-r-e-n-c-e-s_-g-r-o-u-p/index.html","searchKeys":["REFERENCES_GROUP","REFERENCES_GROUP","net.corda.core.contracts.ComponentGroupEnum.REFERENCES_GROUP"]},{"name":"REFERENCE_INPUT_STATE","description":"net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.REFERENCE_INPUT_STATE","location":"docs/net.corda.core.flows/-state-consumption-details/-consumed-state-type/-r-e-f-e-r-e-n-c-e_-i-n-p-u-t_-s-t-a-t-e/index.html","searchKeys":["REFERENCE_INPUT_STATE","REFERENCE_INPUT_STATE","net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.REFERENCE_INPUT_STATE"]},{"name":"RELEVANT","description":"net.corda.core.node.services.Vault.RelevancyStatus.RELEVANT","location":"docs/net.corda.core.node.services/-vault/-relevancy-status/-r-e-l-e-v-a-n-t/index.html","searchKeys":["RELEVANT","RELEVANT","net.corda.core.node.services.Vault.RelevancyStatus.RELEVANT"]},{"name":"RPCClient","description":"net.corda.core.serialization.SerializationContext.UseCase.RPCClient","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/-r-p-c-client/index.html","searchKeys":["RPCClient","RPCClient","net.corda.core.serialization.SerializationContext.UseCase.RPCClient"]},{"name":"RPCServer","description":"net.corda.core.serialization.SerializationContext.UseCase.RPCServer","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/-r-p-c-server/index.html","searchKeys":["RPCServer","RPCServer","net.corda.core.serialization.SerializationContext.UseCase.RPCServer"]},{"name":"SENDER","description":"net.corda.core.flows.DistributionRecordType.SENDER","location":"docs/net.corda.core.flows/-distribution-record-type/-s-e-n-d-e-r/index.html","searchKeys":["SENDER","SENDER","net.corda.core.flows.DistributionRecordType.SENDER"]},{"name":"SERIALIZERS","description":"net.corda.core.serialization.ContextPropertyKeys.SERIALIZERS","location":"docs/net.corda.core.serialization/-context-property-keys/-s-e-r-i-a-l-i-z-e-r-s/index.html","searchKeys":["SERIALIZERS","SERIALIZERS","net.corda.core.serialization.ContextPropertyKeys.SERIALIZERS"]},{"name":"SERVICE_IDENTITY","description":"net.corda.core.internal.CertRole.SERVICE_IDENTITY","location":"docs/net.corda.core.internal/-cert-role/-s-e-r-v-i-c-e_-i-d-e-n-t-i-t-y/index.html","searchKeys":["SERVICE_IDENTITY","SERVICE_IDENTITY","net.corda.core.internal.CertRole.SERVICE_IDENTITY"]},{"name":"SIGNATURE","description":"net.corda.core.node.services.Vault.ConstraintInfo.Type.SIGNATURE","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-type/-s-i-g-n-a-t-u-r-e/index.html","searchKeys":["SIGNATURE","SIGNATURE","net.corda.core.node.services.Vault.ConstraintInfo.Type.SIGNATURE"]},{"name":"SIGNERS_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.SIGNERS_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-s-i-g-n-e-r-s_-g-r-o-u-p/index.html","searchKeys":["SIGNERS_GROUP","SIGNERS_GROUP","net.corda.core.contracts.ComponentGroupEnum.SIGNERS_GROUP"]},{"name":"SPECIFIED","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.SPECIFIED","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-type/-s-p-e-c-i-f-i-e-d/index.html","searchKeys":["SPECIFIED","SPECIFIED","net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.SPECIFIED"]},{"name":"STATE_MACHINE_STARTED","description":"net.corda.core.node.services.ServiceLifecycleEvent.STATE_MACHINE_STARTED","location":"docs/net.corda.core.node.services/-service-lifecycle-event/-s-t-a-t-e_-m-a-c-h-i-n-e_-s-t-a-r-t-e-d/index.html","searchKeys":["STATE_MACHINE_STARTED","STATE_MACHINE_STARTED","net.corda.core.node.services.ServiceLifecycleEvent.STATE_MACHINE_STARTED"]},{"name":"STATE_REF","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute.STATE_REF","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/-s-t-a-t-e_-r-e-f/index.html","searchKeys":["STATE_REF","STATE_REF","net.corda.core.node.services.vault.Sort.CommonStateAttribute.STATE_REF"]},{"name":"STATE_REF_INDEX","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute.STATE_REF_INDEX","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/-s-t-a-t-e_-r-e-f_-i-n-d-e-x/index.html","searchKeys":["STATE_REF_INDEX","STATE_REF_INDEX","net.corda.core.node.services.vault.Sort.CommonStateAttribute.STATE_REF_INDEX"]},{"name":"STATE_REF_TXN_ID","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute.STATE_REF_TXN_ID","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/-s-t-a-t-e_-r-e-f_-t-x-n_-i-d/index.html","searchKeys":["STATE_REF_TXN_ID","STATE_REF_TXN_ID","net.corda.core.node.services.vault.Sort.CommonStateAttribute.STATE_REF_TXN_ID"]},{"name":"STATE_STATUS","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.STATE_STATUS","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/-s-t-a-t-e_-s-t-a-t-u-s/index.html","searchKeys":["STATE_STATUS","STATE_STATUS","net.corda.core.node.services.vault.Sort.VaultStateAttribute.STATE_STATUS"]},{"name":"SUM","description":"net.corda.core.node.services.vault.AggregateFunctionType.SUM","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/-s-u-m/index.html","searchKeys":["SUM","SUM","net.corda.core.node.services.vault.AggregateFunctionType.SUM"]},{"name":"SemiAnnual","description":"net.corda.finance.contracts.Frequency.SemiAnnual","location":"docs/net.corda.finance.contracts/-frequency/-semi-annual/index.html","searchKeys":["SemiAnnual","SemiAnnual","net.corda.finance.contracts.Frequency.SemiAnnual"]},{"name":"Storage","description":"net.corda.core.serialization.SerializationContext.UseCase.Storage","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/-storage/index.html","searchKeys":["Storage","Storage","net.corda.core.serialization.SerializationContext.UseCase.Storage"]},{"name":"TIMEWINDOW_GROUP","description":"net.corda.core.contracts.ComponentGroupEnum.TIMEWINDOW_GROUP","location":"docs/net.corda.core.contracts/-component-group-enum/-t-i-m-e-w-i-n-d-o-w_-g-r-o-u-p/index.html","searchKeys":["TIMEWINDOW_GROUP","TIMEWINDOW_GROUP","net.corda.core.contracts.ComponentGroupEnum.TIMEWINDOW_GROUP"]},{"name":"TLS","description":"net.corda.core.internal.CertRole.TLS","location":"docs/net.corda.core.internal/-cert-role/-t-l-s/index.html","searchKeys":["TLS","TLS","net.corda.core.internal.CertRole.TLS"]},{"name":"TRANSACTION","description":"net.corda.core.internal.FetchDataFlow.DataType.TRANSACTION","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/-t-r-a-n-s-a-c-t-i-o-n/index.html","searchKeys":["TRANSACTION","TRANSACTION","net.corda.core.internal.FetchDataFlow.DataType.TRANSACTION"]},{"name":"TRANSACTION_RECOVERY","description":"net.corda.core.internal.FetchDataFlow.DataType.TRANSACTION_RECOVERY","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/-t-r-a-n-s-a-c-t-i-o-n_-r-e-c-o-v-e-r-y/index.html","searchKeys":["TRANSACTION_RECOVERY","TRANSACTION_RECOVERY","net.corda.core.internal.FetchDataFlow.DataType.TRANSACTION_RECOVERY"]},{"name":"Testing","description":"net.corda.core.serialization.SerializationContext.UseCase.Testing","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/-testing/index.html","searchKeys":["Testing","Testing","net.corda.core.serialization.SerializationContext.UseCase.Testing"]},{"name":"UNCONNECTED","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.UNCONNECTED","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/-u-n-c-o-n-n-e-c-t-e-d/index.html","searchKeys":["UNCONNECTED","UNCONNECTED","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.UNCONNECTED"]},{"name":"UNCONSUMED","description":"net.corda.core.node.services.Vault.StateStatus.UNCONSUMED","location":"docs/net.corda.core.node.services/-vault/-state-status/-u-n-c-o-n-s-u-m-e-d/index.html","searchKeys":["UNCONSUMED","UNCONSUMED","net.corda.core.node.services.Vault.StateStatus.UNCONSUMED"]},{"name":"UNKNOWN","description":"net.corda.core.internal.FetchDataFlow.DataType.UNKNOWN","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/-u-n-k-n-o-w-n/index.html","searchKeys":["UNKNOWN","UNKNOWN","net.corda.core.internal.FetchDataFlow.DataType.UNKNOWN"]},{"name":"UNLOCKED_AND_SPECIFIED","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.UNLOCKED_AND_SPECIFIED","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-type/-u-n-l-o-c-k-e-d_-a-n-d_-s-p-e-c-i-f-i-e-d/index.html","searchKeys":["UNLOCKED_AND_SPECIFIED","UNLOCKED_AND_SPECIFIED","net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.UNLOCKED_AND_SPECIFIED"]},{"name":"UNLOCKED_ONLY","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.UNLOCKED_ONLY","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-type/-u-n-l-o-c-k-e-d_-o-n-l-y/index.html","searchKeys":["UNLOCKED_ONLY","UNLOCKED_ONLY","net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.UNLOCKED_ONLY"]},{"name":"UNSET","description":"net.corda.core.internal.telemetry.TelemetryStatusCode.UNSET","location":"docs/net.corda.core.internal.telemetry/-telemetry-status-code/-u-n-s-e-t/index.html","searchKeys":["UNSET","UNSET","net.corda.core.internal.telemetry.TelemetryStatusCode.UNSET"]},{"name":"UNVERIFIED","description":"net.corda.core.node.services.TransactionStatus.UNVERIFIED","location":"docs/net.corda.core.node.services/-transaction-status/-u-n-v-e-r-i-f-i-e-d/index.html","searchKeys":["UNVERIFIED","UNVERIFIED","net.corda.core.node.services.TransactionStatus.UNVERIFIED"]},{"name":"UPGRADED_ATTACHMENT","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.UPGRADED_ATTACHMENT","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/-u-p-g-r-a-d-e-d_-a-t-t-a-c-h-m-e-n-t/index.html","searchKeys":["UPGRADED_ATTACHMENT","UPGRADED_ATTACHMENT","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.UPGRADED_ATTACHMENT"]},{"name":"UPGRADED_CONTRACT","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.UPGRADED_CONTRACT","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/-u-p-g-r-a-d-e-d_-c-o-n-t-r-a-c-t/index.html","searchKeys":["UPGRADED_CONTRACT","UPGRADED_CONTRACT","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.UPGRADED_CONTRACT"]},{"name":"UPLOADER","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.UPLOADER","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/-u-p-l-o-a-d-e-r/index.html","searchKeys":["UPLOADER","UPLOADER","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.UPLOADER"]},{"name":"UUID","description":"net.corda.core.node.services.vault.Sort.LinearStateAttribute.UUID","location":"docs/net.corda.core.node.services.vault/-sort/-linear-state-attribute/-u-u-i-d/index.html","searchKeys":["UUID","UUID","net.corda.core.node.services.vault.Sort.LinearStateAttribute.UUID"]},{"name":"Unadjusted","description":"net.corda.finance.contracts.AccrualAdjustment.Unadjusted","location":"docs/net.corda.finance.contracts/-accrual-adjustment/-unadjusted/index.html","searchKeys":["Unadjusted","Unadjusted","net.corda.finance.contracts.AccrualAdjustment.Unadjusted"]},{"name":"VERIFIED","description":"net.corda.core.node.services.TransactionStatus.VERIFIED","location":"docs/net.corda.core.node.services/-transaction-status/-v-e-r-i-f-i-e-d/index.html","searchKeys":["VERIFIED","VERIFIED","net.corda.core.node.services.TransactionStatus.VERIFIED"]},{"name":"VERSION","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.VERSION","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/-v-e-r-s-i-o-n/index.html","searchKeys":["VERSION","VERSION","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.VERSION"]},{"name":"Week","description":"net.corda.finance.contracts.Tenor.TimeUnit.Week","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/-week/index.html","searchKeys":["Week","Week","net.corda.finance.contracts.Tenor.TimeUnit.Week"]},{"name":"Weekly","description":"net.corda.finance.contracts.Frequency.Weekly","location":"docs/net.corda.finance.contracts/-frequency/-weekly/index.html","searchKeys":["Weekly","Weekly","net.corda.finance.contracts.Frequency.Weekly"]},{"name":"Y252","description":"net.corda.finance.contracts.DayCountBasisYear.Y252","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y252/index.html","searchKeys":["Y252","Y252","net.corda.finance.contracts.DayCountBasisYear.Y252"]},{"name":"Y360","description":"net.corda.finance.contracts.DayCountBasisYear.Y360","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y360/index.html","searchKeys":["Y360","Y360","net.corda.finance.contracts.DayCountBasisYear.Y360"]},{"name":"Y365","description":"net.corda.finance.contracts.DayCountBasisYear.Y365","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y365/index.html","searchKeys":["Y365","Y365","net.corda.finance.contracts.DayCountBasisYear.Y365"]},{"name":"Y365B","description":"net.corda.finance.contracts.DayCountBasisYear.Y365B","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y365-b/index.html","searchKeys":["Y365B","Y365B","net.corda.finance.contracts.DayCountBasisYear.Y365B"]},{"name":"Y365F","description":"net.corda.finance.contracts.DayCountBasisYear.Y365F","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y365-f/index.html","searchKeys":["Y365F","Y365F","net.corda.finance.contracts.DayCountBasisYear.Y365F"]},{"name":"Y365L","description":"net.corda.finance.contracts.DayCountBasisYear.Y365L","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y365-l/index.html","searchKeys":["Y365L","Y365L","net.corda.finance.contracts.DayCountBasisYear.Y365L"]},{"name":"Y365Q","description":"net.corda.finance.contracts.DayCountBasisYear.Y365Q","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y365-q/index.html","searchKeys":["Y365Q","Y365Q","net.corda.finance.contracts.DayCountBasisYear.Y365Q"]},{"name":"Y366","description":"net.corda.finance.contracts.DayCountBasisYear.Y366","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y366/index.html","searchKeys":["Y366","Y366","net.corda.finance.contracts.DayCountBasisYear.Y366"]},{"name":"YActual","description":"net.corda.finance.contracts.DayCountBasisYear.YActual","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y-actual/index.html","searchKeys":["YActual","YActual","net.corda.finance.contracts.DayCountBasisYear.YActual"]},{"name":"YActualA","description":"net.corda.finance.contracts.DayCountBasisYear.YActualA","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y-actual-a/index.html","searchKeys":["YActualA","YActualA","net.corda.finance.contracts.DayCountBasisYear.YActualA"]},{"name":"YICMA","description":"net.corda.finance.contracts.DayCountBasisYear.YICMA","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y-i-c-m-a/index.html","searchKeys":["YICMA","YICMA","net.corda.finance.contracts.DayCountBasisYear.YICMA"]},{"name":"YISDA","description":"net.corda.finance.contracts.DayCountBasisYear.YISDA","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y-i-s-d-a/index.html","searchKeys":["YISDA","YISDA","net.corda.finance.contracts.DayCountBasisYear.YISDA"]},{"name":"YISMA","description":"net.corda.finance.contracts.DayCountBasisYear.YISMA","location":"docs/net.corda.finance.contracts/-day-count-basis-year/-y-i-s-m-a/index.html","searchKeys":["YISMA","YISMA","net.corda.finance.contracts.DayCountBasisYear.YISMA"]},{"name":"Year","description":"net.corda.finance.contracts.Tenor.TimeUnit.Year","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/-year/index.html","searchKeys":["Year","Year","net.corda.finance.contracts.Tenor.TimeUnit.Year"]},{"name":"abstract class AbstractAttachment(dataLoader: () -> ByteArray, val uploader: String?) : Attachment","description":"net.corda.core.internal.AbstractAttachment","location":"docs/net.corda.core.internal/-abstract-attachment/index.html","searchKeys":["AbstractAttachment","abstract class AbstractAttachment(dataLoader: () -> ByteArray, val uploader: String?) : Attachment","net.corda.core.internal.AbstractAttachment"]},{"name":"abstract class AbstractCashFlow<out T>(val progressTracker: ProgressTracker) : FlowLogic<T> ","description":"net.corda.finance.flows.AbstractCashFlow","location":"docs/net.corda.finance.flows/-abstract-cash-flow/index.html","searchKeys":["AbstractCashFlow","abstract class AbstractCashFlow<out T>(val progressTracker: ProgressTracker) : FlowLogic<T> ","net.corda.finance.flows.AbstractCashFlow"]},{"name":"abstract class AbstractCashSelection(maxRetries: Int = 8, retrySleep: Int = 100, retryCap: Int = 2000)","description":"net.corda.finance.workflows.asset.selection.AbstractCashSelection","location":"docs/net.corda.finance.workflows.asset.selection/-abstract-cash-selection/index.html","searchKeys":["AbstractCashSelection","abstract class AbstractCashSelection(maxRetries: Int = 8, retrySleep: Int = 100, retryCap: Int = 2000)","net.corda.finance.workflows.asset.selection.AbstractCashSelection"]},{"name":"abstract class AbstractParty(val owningKey: PublicKey) : Destination","description":"net.corda.core.identity.AbstractParty","location":"docs/net.corda.core.identity/-abstract-party/index.html","searchKeys":["AbstractParty","abstract class AbstractParty(val owningKey: PublicKey) : Destination","net.corda.core.identity.AbstractParty"]},{"name":"abstract class AbstractRequest(val amount: Amount<Currency>)","description":"net.corda.finance.flows.AbstractCashFlow.AbstractRequest","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-abstract-request/index.html","searchKeys":["AbstractRequest","abstract class AbstractRequest(val amount: Amount<Currency>)","net.corda.finance.flows.AbstractCashFlow.AbstractRequest"]},{"name":"abstract class AbstractStateReplacementFlow","description":"net.corda.core.flows.AbstractStateReplacementFlow","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/index.html","searchKeys":["AbstractStateReplacementFlow","abstract class AbstractStateReplacementFlow","net.corda.core.flows.AbstractStateReplacementFlow"]},{"name":"abstract class AbstractVerifier(ltx: LedgerTransaction, transactionClassLoader: ClassLoader) : Verifier","description":"net.corda.core.internal.verification.AbstractVerifier","location":"docs/net.corda.core.internal.verification/-abstract-verifier/index.html","searchKeys":["AbstractVerifier","abstract class AbstractVerifier(ltx: LedgerTransaction, transactionClassLoader: ClassLoader) : Verifier","net.corda.core.internal.verification.AbstractVerifier"]},{"name":"abstract class Acceptor<in T>(val initiatingSession: FlowSession, val progressTracker: ProgressTracker = Acceptor.tracker()) : FlowLogic<Void?> ","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/index.html","searchKeys":["Acceptor","abstract class Acceptor<in T>(val initiatingSession: FlowSession, val progressTracker: ProgressTracker = Acceptor.tracker()) : FlowLogic<Void?> ","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor"]},{"name":"abstract class BackpressureAwareTimedFlow<ResultType> : FlowLogic<ResultType> , TimedFlow","description":"net.corda.core.internal.BackpressureAwareTimedFlow","location":"docs/net.corda.core.internal/-backpressure-aware-timed-flow/index.html","searchKeys":["BackpressureAwareTimedFlow","abstract class BackpressureAwareTimedFlow<ResultType> : FlowLogic<ResultType> , TimedFlow","net.corda.core.internal.BackpressureAwareTimedFlow"]},{"name":"abstract class BaseSort","description":"net.corda.core.node.services.vault.BaseSort","location":"docs/net.corda.core.node.services.vault/-base-sort/index.html","searchKeys":["BaseSort","abstract class BaseSort","net.corda.core.node.services.vault.BaseSort"]},{"name":"abstract class BaseTransaction : NamedByHash","description":"net.corda.core.transactions.BaseTransaction","location":"docs/net.corda.core.transactions/-base-transaction/index.html","searchKeys":["BaseTransaction","abstract class BaseTransaction : NamedByHash","net.corda.core.transactions.BaseTransaction"]},{"name":"abstract class ClusterSpec","description":"net.corda.testing.node.ClusterSpec","location":"docs/net.corda.testing.node/-cluster-spec/index.html","searchKeys":["ClusterSpec","abstract class ClusterSpec","net.corda.testing.node.ClusterSpec"]},{"name":"abstract class CommonQueryCriteria : QueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/index.html","searchKeys":["CommonQueryCriteria","abstract class CommonQueryCriteria : QueryCriteria","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria"]},{"name":"abstract class CoreTransaction : BaseTransaction","description":"net.corda.core.transactions.CoreTransaction","location":"docs/net.corda.core.transactions/-core-transaction/index.html","searchKeys":["CoreTransaction","abstract class CoreTransaction : BaseTransaction","net.corda.core.transactions.CoreTransaction"]},{"name":"abstract class DistributionRecord : NamedByHash","description":"net.corda.core.flows.DistributionRecord","location":"docs/net.corda.core.flows/-distribution-record/index.html","searchKeys":["DistributionRecord","abstract class DistributionRecord : NamedByHash","net.corda.core.flows.DistributionRecord"]},{"name":"abstract class FlowLogic<out T>","description":"net.corda.core.flows.FlowLogic","location":"docs/net.corda.core.flows/-flow-logic/index.html","searchKeys":["FlowLogic","abstract class FlowLogic<out T>","net.corda.core.flows.FlowLogic"]},{"name":"abstract class FlowSession","description":"net.corda.core.flows.FlowSession","location":"docs/net.corda.core.flows/-flow-session/index.html","searchKeys":["FlowSession","abstract class FlowSession","net.corda.core.flows.FlowSession"]},{"name":"abstract class FullTransaction : BaseTransaction","description":"net.corda.core.transactions.FullTransaction","location":"docs/net.corda.core.transactions/-full-transaction/index.html","searchKeys":["FullTransaction","abstract class FullTransaction : BaseTransaction","net.corda.core.transactions.FullTransaction"]},{"name":"abstract class Instigator<out S : ContractState, out T : ContractState, out M>(val originalState: StateAndRef<S>, val modification: M, val progressTracker: ProgressTracker = Instigator.tracker()) : FlowLogic<StateAndRef<T>> ","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/index.html","searchKeys":["Instigator","abstract class Instigator<out S : ContractState, out T : ContractState, out M>(val originalState: StateAndRef<S>, val modification: M, val progressTracker: ProgressTracker = Instigator.tracker()) : FlowLogic<StateAndRef<T>> ","net.corda.core.flows.AbstractStateReplacementFlow.Instigator"]},{"name":"abstract class MessagingServiceSpy","description":"net.corda.testing.node.internal.MessagingServiceSpy","location":"docs/net.corda.testing.node.internal/-messaging-service-spy/index.html","searchKeys":["MessagingServiceSpy","abstract class MessagingServiceSpy","net.corda.testing.node.internal.MessagingServiceSpy"]},{"name":"abstract class NodeBasedTest constructor(cordappPackages: Set<TestCordappInternal> = emptySet(), notaries: List<CordaX500Name> = emptyList())","description":"net.corda.testing.node.internal.NodeBasedTest","location":"docs/net.corda.testing.node.internal/-node-based-test/index.html","searchKeys":["NodeBasedTest","abstract class NodeBasedTest constructor(cordappPackages: Set<TestCordappInternal> = emptySet(), notaries: List<CordaX500Name> = emptyList())","net.corda.testing.node.internal.NodeBasedTest"]},{"name":"abstract class NotaryService : SingletonSerializeAsToken","description":"net.corda.core.internal.notary.NotaryService","location":"docs/net.corda.core.internal.notary/-notary-service/index.html","searchKeys":["NotaryService","abstract class NotaryService : SingletonSerializeAsToken","net.corda.core.internal.notary.NotaryService"]},{"name":"abstract class NotaryServiceFlow(val otherSideSession: FlowSession, val service: SinglePartyNotaryService, etaThreshold: Duration) : FlowLogic<Void?> ","description":"net.corda.core.internal.notary.NotaryServiceFlow","location":"docs/net.corda.core.internal.notary/-notary-service-flow/index.html","searchKeys":["NotaryServiceFlow","abstract class NotaryServiceFlow(val otherSideSession: FlowSession, val service: SinglePartyNotaryService, etaThreshold: Duration) : FlowLogic<Void?> ","net.corda.core.internal.notary.NotaryServiceFlow"]},{"name":"abstract class OnLedgerAsset<T : Any, out C : CommandData, S : FungibleAsset<T>> : Contract","description":"net.corda.finance.contracts.asset.OnLedgerAsset","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/index.html","searchKeys":["OnLedgerAsset","abstract class OnLedgerAsset<T : Any, out C : CommandData, S : FungibleAsset<T>> : Contract","net.corda.finance.contracts.asset.OnLedgerAsset"]},{"name":"abstract class PortAllocation","description":"net.corda.testing.driver.PortAllocation","location":"docs/net.corda.testing.driver/-port-allocation/index.html","searchKeys":["PortAllocation","abstract class PortAllocation","net.corda.testing.driver.PortAllocation"]},{"name":"abstract class Primary(val progressTracker: ProgressTracker = Primary.tracker()) : FlowLogic<SignedTransaction> ","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/index.html","searchKeys":["Primary","abstract class Primary(val progressTracker: ProgressTracker = Primary.tracker()) : FlowLogic<SignedTransaction> ","net.corda.finance.flows.TwoPartyDealFlow.Primary"]},{"name":"abstract class Secondary<U>(val progressTracker: ProgressTracker = Secondary.tracker()) : FlowLogic<SignedTransaction> ","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/index.html","searchKeys":["Secondary","abstract class Secondary<U>(val progressTracker: ProgressTracker = Secondary.tracker()) : FlowLogic<SignedTransaction> ","net.corda.finance.flows.TwoPartyDealFlow.Secondary"]},{"name":"abstract class SerializationFactory","description":"net.corda.core.serialization.SerializationFactory","location":"docs/net.corda.core.serialization/-serialization-factory/index.html","searchKeys":["SerializationFactory","abstract class SerializationFactory","net.corda.core.serialization.SerializationFactory"]},{"name":"abstract class SignTransactionFlow constructor(val otherSideSession: FlowSession, val progressTracker: ProgressTracker = tracker()) : FlowLogic<SignedTransaction> ","description":"net.corda.core.flows.SignTransactionFlow","location":"docs/net.corda.core.flows/-sign-transaction-flow/index.html","searchKeys":["SignTransactionFlow","abstract class SignTransactionFlow constructor(val otherSideSession: FlowSession, val progressTracker: ProgressTracker = tracker()) : FlowLogic<SignedTransaction> ","net.corda.core.flows.SignTransactionFlow"]},{"name":"abstract class SignedTransactionMixin","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/index.html","searchKeys":["SignedTransactionMixin","abstract class SignedTransactionMixin","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin"]},{"name":"abstract class SimpleDeserializer<T>(func: <Error class: unknown class>.() -> T)","description":"net.corda.client.jackson.internal.SimpleDeserializer","location":"docs/net.corda.client.jackson.internal/-simple-deserializer/index.html","searchKeys":["SimpleDeserializer","abstract class SimpleDeserializer<T>(func: <Error class: unknown class>.() -> T)","net.corda.client.jackson.internal.SimpleDeserializer"]},{"name":"abstract class SinglePartyNotaryService : NotaryService","description":"net.corda.core.internal.notary.SinglePartyNotaryService","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/index.html","searchKeys":["SinglePartyNotaryService","abstract class SinglePartyNotaryService : NotaryService","net.corda.core.internal.notary.SinglePartyNotaryService"]},{"name":"abstract class SingletonSerializeAsToken : SerializeAsToken","description":"net.corda.core.serialization.SingletonSerializeAsToken","location":"docs/net.corda.core.serialization/-singleton-serialize-as-token/index.html","searchKeys":["SingletonSerializeAsToken","abstract class SingletonSerializeAsToken : SerializeAsToken","net.corda.core.serialization.SingletonSerializeAsToken"]},{"name":"abstract class TestCordapp","description":"net.corda.testing.node.TestCordapp","location":"docs/net.corda.testing.node/-test-cordapp/index.html","searchKeys":["TestCordapp","abstract class TestCordapp","net.corda.testing.node.TestCordapp"]},{"name":"abstract class TestCordappInternal : TestCordapp","description":"net.corda.testing.node.internal.TestCordappInternal","location":"docs/net.corda.testing.node.internal/-test-cordapp-internal/index.html","searchKeys":["TestCordappInternal","abstract class TestCordappInternal : TestCordapp","net.corda.testing.node.internal.TestCordappInternal"]},{"name":"abstract class TimeWindow","description":"net.corda.core.contracts.TimeWindow","location":"docs/net.corda.core.contracts/-time-window/index.html","searchKeys":["TimeWindow","abstract class TimeWindow","net.corda.core.contracts.TimeWindow"]},{"name":"abstract class ToggleField<T>(val name: String)","description":"net.corda.core.internal.ToggleField","location":"docs/net.corda.core.internal/-toggle-field/index.html","searchKeys":["ToggleField","abstract class ToggleField<T>(val name: String)","net.corda.core.internal.ToggleField"]},{"name":"abstract class TransactionVerificationException(val txId: SecureHash, message: String, cause: Throwable?) : FlowException","description":"net.corda.core.contracts.TransactionVerificationException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/index.html","searchKeys":["TransactionVerificationException","abstract class TransactionVerificationException(val txId: SecureHash, message: String, cause: Throwable?) : FlowException","net.corda.core.contracts.TransactionVerificationException"]},{"name":"abstract class TraversableTransaction(val componentGroups: List<ComponentGroup>, val digestService: DigestService) : CoreTransaction","description":"net.corda.core.transactions.TraversableTransaction","location":"docs/net.corda.core.transactions/-traversable-transaction/index.html","searchKeys":["TraversableTransaction","abstract class TraversableTransaction(val componentGroups: List<ComponentGroup>, val digestService: DigestService) : CoreTransaction","net.corda.core.transactions.TraversableTransaction"]},{"name":"abstract class TypeOnlyCommandData : CommandData","description":"net.corda.core.contracts.TypeOnlyCommandData","location":"docs/net.corda.core.contracts/-type-only-command-data/index.html","searchKeys":["TypeOnlyCommandData","abstract class TypeOnlyCommandData : CommandData","net.corda.core.contracts.TypeOnlyCommandData"]},{"name":"abstract class WireTransactionMixin","description":"net.corda.client.jackson.JacksonSupport.WireTransactionMixin","location":"docs/net.corda.client.jackson/-jackson-support/-wire-transaction-mixin/index.html","searchKeys":["WireTransactionMixin","abstract class WireTransactionMixin","net.corda.client.jackson.JacksonSupport.WireTransactionMixin"]},{"name":"abstract fun <A> pickNext(service: InMemoryMessagingNetwork.DistributedServiceHandle, pickFrom: List<A>): A","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.pickNext","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/pick-next.html","searchKeys":["pickNext","abstract fun <A> pickNext(service: InMemoryMessagingNetwork.DistributedServiceHandle, pickFrom: List<A>): A","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.pickNext"]},{"name":"abstract fun <A> pollUntilNonNull(pollName: String, pollInterval: Duration = DEFAULT_POLL_INTERVAL, warnCount: Int = DEFAULT_WARN_COUNT, check: () -> A?): CordaFuture<A>","description":"net.corda.testing.node.internal.InternalDriverDSL.pollUntilNonNull","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/poll-until-non-null.html","searchKeys":["pollUntilNonNull","abstract fun <A> pollUntilNonNull(pollName: String, pollInterval: Duration = DEFAULT_POLL_INTERVAL, warnCount: Int = DEFAULT_WARN_COUNT, check: () -> A?): CordaFuture<A>","net.corda.testing.node.internal.InternalDriverDSL.pollUntilNonNull"]},{"name":"abstract fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String): <Error class: unknown class><K, V>","description":"net.corda.core.internal.NamedCacheFactory.buildNamed","location":"docs/net.corda.core.internal/-named-cache-factory/build-named.html","searchKeys":["buildNamed","abstract fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String): <Error class: unknown class><K, V>","net.corda.core.internal.NamedCacheFactory.buildNamed"]},{"name":"abstract fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","description":"net.corda.core.internal.NamedCacheFactory.buildNamed","location":"docs/net.corda.core.internal/-named-cache-factory/build-named.html","searchKeys":["buildNamed","abstract fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","net.corda.core.internal.NamedCacheFactory.buildNamed"]},{"name":"abstract fun <L : StatePersistable> parseCriteria(criteria: QueryCriteria.VaultCustomQueryCriteria<L>): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria","location":"docs/net.corda.core.node.services.vault/-i-query-criteria-parser/parse-criteria.html","searchKeys":["parseCriteria","abstract fun <L : StatePersistable> parseCriteria(criteria: QueryCriteria.VaultCustomQueryCriteria<L>): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria"]},{"name":"abstract fun <R : Any> receive(receiveType: Class<R>): UntrustworthyData<R>","description":"net.corda.core.flows.FlowSession.receive","location":"docs/net.corda.core.flows/-flow-session/receive.html","searchKeys":["receive","abstract fun <R : Any> receive(receiveType: Class<R>): UntrustworthyData<R>","net.corda.core.flows.FlowSession.receive"]},{"name":"abstract fun <R : Any> receive(receiveType: Class<R>, maySkipCheckpoint: Boolean): UntrustworthyData<R>","description":"net.corda.core.flows.FlowSession.receive","location":"docs/net.corda.core.flows/-flow-session/receive.html","searchKeys":["receive","abstract fun <R : Any> receive(receiveType: Class<R>, maySkipCheckpoint: Boolean): UntrustworthyData<R>","net.corda.core.flows.FlowSession.receive"]},{"name":"abstract fun <R : Any> sendAndReceive(receiveType: Class<R>, payload: Any): UntrustworthyData<R>","description":"net.corda.core.flows.FlowSession.sendAndReceive","location":"docs/net.corda.core.flows/-flow-session/send-and-receive.html","searchKeys":["sendAndReceive","abstract fun <R : Any> sendAndReceive(receiveType: Class<R>, payload: Any): UntrustworthyData<R>","net.corda.core.flows.FlowSession.sendAndReceive"]},{"name":"abstract fun <R : Any> sendAndReceive(receiveType: Class<R>, payload: Any, maySkipCheckpoint: Boolean): UntrustworthyData<R>","description":"net.corda.core.flows.FlowSession.sendAndReceive","location":"docs/net.corda.core.flows/-flow-session/send-and-receive.html","searchKeys":["sendAndReceive","abstract fun <R : Any> sendAndReceive(receiveType: Class<R>, payload: Any, maySkipCheckpoint: Boolean): UntrustworthyData<R>","net.corda.core.flows.FlowSession.sendAndReceive"]},{"name":"abstract fun <S : ContractState> retrieveOutputStateAndRef(clazz: Class<S>, label: String): StateAndRef<S>","description":"net.corda.testing.dsl.OutputStateLookup.retrieveOutputStateAndRef","location":"docs/net.corda.testing.dsl/-output-state-lookup/retrieve-output-state-and-ref.html","searchKeys":["retrieveOutputStateAndRef","abstract fun <S : ContractState> retrieveOutputStateAndRef(clazz: Class<S>, label: String): StateAndRef<S>","net.corda.testing.dsl.OutputStateLookup.retrieveOutputStateAndRef"]},{"name":"abstract fun <SUBFLOWRETURN> subFlow(currentFlow: FlowLogic<*>, subFlow: FlowLogic<SUBFLOWRETURN>): SUBFLOWRETURN","description":"net.corda.core.internal.FlowStateMachine.subFlow","location":"docs/net.corda.core.internal/-flow-state-machine/sub-flow.html","searchKeys":["subFlow","abstract fun <SUBFLOWRETURN> subFlow(currentFlow: FlowLogic<*>, subFlow: FlowLogic<SUBFLOWRETURN>): SUBFLOWRETURN","net.corda.core.internal.FlowStateMachine.subFlow"]},{"name":"abstract fun <SUSPENDRETURN : Any> suspend(ioRequest: FlowIORequest<SUSPENDRETURN>, maySkipCheckpoint: Boolean): SUSPENDRETURN","description":"net.corda.core.internal.FlowStateMachine.suspend","location":"docs/net.corda.core.internal/-flow-state-machine/suspend.html","searchKeys":["suspend","abstract fun <SUSPENDRETURN : Any> suspend(ioRequest: FlowIORequest<SUSPENDRETURN>, maySkipCheckpoint: Boolean): SUSPENDRETURN","net.corda.core.internal.FlowStateMachine.suspend"]},{"name":"abstract fun <T : Any> deserialize(byteSequence: ByteSequence, clazz: Class<T>, context: CheckpointSerializationContext): T","description":"net.corda.core.serialization.internal.CheckpointSerializer.deserialize","location":"docs/net.corda.core.serialization.internal/-checkpoint-serializer/deserialize.html","searchKeys":["deserialize","abstract fun <T : Any> deserialize(byteSequence: ByteSequence, clazz: Class<T>, context: CheckpointSerializationContext): T","net.corda.core.serialization.internal.CheckpointSerializer.deserialize"]},{"name":"abstract fun <T : Any> deserialize(byteSequence: ByteSequence, clazz: Class<T>, context: SerializationContext): T","description":"net.corda.core.serialization.SerializationFactory.deserialize","location":"docs/net.corda.core.serialization/-serialization-factory/deserialize.html","searchKeys":["deserialize","abstract fun <T : Any> deserialize(byteSequence: ByteSequence, clazz: Class<T>, context: SerializationContext): T","net.corda.core.serialization.SerializationFactory.deserialize"]},{"name":"abstract fun <T : Any> deserialize(bytes: ByteSequence, clazz: Class<T>, context: SerializationSchemeContext): T","description":"net.corda.core.serialization.CustomSerializationScheme.deserialize","location":"docs/net.corda.core.serialization/-custom-serialization-scheme/deserialize.html","searchKeys":["deserialize","abstract fun <T : Any> deserialize(bytes: ByteSequence, clazz: Class<T>, context: SerializationSchemeContext): T","net.corda.core.serialization.CustomSerializationScheme.deserialize"]},{"name":"abstract fun <T : Any> deserializeWithCompatibleContext(byteSequence: ByteSequence, clazz: Class<T>, context: SerializationContext): ObjectWithCompatibleContext<T>","description":"net.corda.core.serialization.SerializationFactory.deserializeWithCompatibleContext","location":"docs/net.corda.core.serialization/-serialization-factory/deserialize-with-compatible-context.html","searchKeys":["deserializeWithCompatibleContext","abstract fun <T : Any> deserializeWithCompatibleContext(byteSequence: ByteSequence, clazz: Class<T>, context: SerializationContext): ObjectWithCompatibleContext<T>","net.corda.core.serialization.SerializationFactory.deserializeWithCompatibleContext"]},{"name":"abstract fun <T : Any> serialize(obj: T, context: CheckpointSerializationContext): SerializedBytes<T>","description":"net.corda.core.serialization.internal.CheckpointSerializer.serialize","location":"docs/net.corda.core.serialization.internal/-checkpoint-serializer/serialize.html","searchKeys":["serialize","abstract fun <T : Any> serialize(obj: T, context: CheckpointSerializationContext): SerializedBytes<T>","net.corda.core.serialization.internal.CheckpointSerializer.serialize"]},{"name":"abstract fun <T : Any> serialize(obj: T, context: SerializationContext): SerializedBytes<T>","description":"net.corda.core.serialization.SerializationFactory.serialize","location":"docs/net.corda.core.serialization/-serialization-factory/serialize.html","searchKeys":["serialize","abstract fun <T : Any> serialize(obj: T, context: SerializationContext): SerializedBytes<T>","net.corda.core.serialization.SerializationFactory.serialize"]},{"name":"abstract fun <T : Any> serialize(obj: T, context: SerializationSchemeContext): ByteSequence","description":"net.corda.core.serialization.CustomSerializationScheme.serialize","location":"docs/net.corda.core.serialization/-custom-serialization-scheme/serialize.html","searchKeys":["serialize","abstract fun <T : Any> serialize(obj: T, context: SerializationSchemeContext): ByteSequence","net.corda.core.serialization.CustomSerializationScheme.serialize"]},{"name":"abstract fun <T : ContractState> _queryBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): Vault.Page<T>","description":"net.corda.core.node.services.VaultService._queryBy","location":"docs/net.corda.core.node.services/-vault-service/_query-by.html","searchKeys":["_queryBy","abstract fun <T : ContractState> _queryBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): Vault.Page<T>","net.corda.core.node.services.VaultService._queryBy"]},{"name":"abstract fun <T : ContractState> _trackBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.VaultService._trackBy","location":"docs/net.corda.core.node.services/-vault-service/_track-by.html","searchKeys":["_trackBy","abstract fun <T : ContractState> _trackBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.VaultService._trackBy"]},{"name":"abstract fun <T : ContractState> vaultQuery(contractStateType: Class<out T>): Vault.Page<T>","description":"net.corda.core.messaging.CordaRPCOps.vaultQuery","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-query.html","searchKeys":["vaultQuery","abstract fun <T : ContractState> vaultQuery(contractStateType: Class<out T>): Vault.Page<T>","net.corda.core.messaging.CordaRPCOps.vaultQuery"]},{"name":"abstract fun <T : ContractState> vaultQueryBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): Vault.Page<T>","description":"net.corda.core.messaging.CordaRPCOps.vaultQueryBy","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-query-by.html","searchKeys":["vaultQueryBy","abstract fun <T : ContractState> vaultQueryBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): Vault.Page<T>","net.corda.core.messaging.CordaRPCOps.vaultQueryBy"]},{"name":"abstract fun <T : ContractState> vaultQueryByCriteria(criteria: QueryCriteria, contractStateType: Class<out T>): Vault.Page<T>","description":"net.corda.core.messaging.CordaRPCOps.vaultQueryByCriteria","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-query-by-criteria.html","searchKeys":["vaultQueryByCriteria","abstract fun <T : ContractState> vaultQueryByCriteria(criteria: QueryCriteria, contractStateType: Class<out T>): Vault.Page<T>","net.corda.core.messaging.CordaRPCOps.vaultQueryByCriteria"]},{"name":"abstract fun <T : ContractState> vaultQueryByWithPagingSpec(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): Vault.Page<T>","description":"net.corda.core.messaging.CordaRPCOps.vaultQueryByWithPagingSpec","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-query-by-with-paging-spec.html","searchKeys":["vaultQueryByWithPagingSpec","abstract fun <T : ContractState> vaultQueryByWithPagingSpec(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): Vault.Page<T>","net.corda.core.messaging.CordaRPCOps.vaultQueryByWithPagingSpec"]},{"name":"abstract fun <T : ContractState> vaultQueryByWithSorting(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): Vault.Page<T>","description":"net.corda.core.messaging.CordaRPCOps.vaultQueryByWithSorting","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-query-by-with-sorting.html","searchKeys":["vaultQueryByWithSorting","abstract fun <T : ContractState> vaultQueryByWithSorting(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): Vault.Page<T>","net.corda.core.messaging.CordaRPCOps.vaultQueryByWithSorting"]},{"name":"abstract fun <T : ContractState> vaultTrack(contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.messaging.CordaRPCOps.vaultTrack","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-track.html","searchKeys":["vaultTrack","abstract fun <T : ContractState> vaultTrack(contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.messaging.CordaRPCOps.vaultTrack"]},{"name":"abstract fun <T : ContractState> vaultTrackBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.messaging.CordaRPCOps.vaultTrackBy","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-track-by.html","searchKeys":["vaultTrackBy","abstract fun <T : ContractState> vaultTrackBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort, contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.messaging.CordaRPCOps.vaultTrackBy"]},{"name":"abstract fun <T : ContractState> vaultTrackByCriteria(contractStateType: Class<out T>, criteria: QueryCriteria): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.messaging.CordaRPCOps.vaultTrackByCriteria","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-track-by-criteria.html","searchKeys":["vaultTrackByCriteria","abstract fun <T : ContractState> vaultTrackByCriteria(contractStateType: Class<out T>, criteria: QueryCriteria): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.messaging.CordaRPCOps.vaultTrackByCriteria"]},{"name":"abstract fun <T : ContractState> vaultTrackByWithPagingSpec(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.messaging.CordaRPCOps.vaultTrackByWithPagingSpec","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-track-by-with-paging-spec.html","searchKeys":["vaultTrackByWithPagingSpec","abstract fun <T : ContractState> vaultTrackByWithPagingSpec(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.messaging.CordaRPCOps.vaultTrackByWithPagingSpec"]},{"name":"abstract fun <T : ContractState> vaultTrackByWithSorting(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.messaging.CordaRPCOps.vaultTrackByWithSorting","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/vault-track-by-with-sorting.html","searchKeys":["vaultTrackByWithSorting","abstract fun <T : ContractState> vaultTrackByWithSorting(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.messaging.CordaRPCOps.vaultTrackByWithSorting"]},{"name":"abstract fun <T : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<T>): <Error class: unknown class><T>","description":"net.corda.testing.driver.InProcess.registerInitiatedFlow","location":"docs/net.corda.testing.driver/-in-process/register-initiated-flow.html","searchKeys":["registerInitiatedFlow","abstract fun <T : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<T>): <Error class: unknown class><T>","net.corda.testing.driver.InProcess.registerInitiatedFlow"]},{"name":"abstract fun <T : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<T>, track: Boolean = false): <Error class: unknown class><T>","description":"net.corda.testing.node.internal.TestStartedNode.registerInitiatedFlow","location":"docs/net.corda.testing.node.internal/-test-started-node/register-initiated-flow.html","searchKeys":["registerInitiatedFlow","abstract fun <T : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<T>, track: Boolean = false): <Error class: unknown class><T>","net.corda.testing.node.internal.TestStartedNode.registerInitiatedFlow"]},{"name":"abstract fun <T : FlowLogic<*>> registerInitiatedFlow(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<T>, track: Boolean = false): <Error class: unknown class><T>","description":"net.corda.testing.node.internal.TestStartedNode.registerInitiatedFlow","location":"docs/net.corda.testing.node.internal/-test-started-node/register-initiated-flow.html","searchKeys":["registerInitiatedFlow","abstract fun <T : FlowLogic<*>> registerInitiatedFlow(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<T>, track: Boolean = false): <Error class: unknown class><T>","net.corda.testing.node.internal.TestStartedNode.registerInitiatedFlow"]},{"name":"abstract fun <T : FungibleState<*>> tryLockFungibleStatesForSpending(lockId: UUID, eligibleStatesQuery: QueryCriteria, amount: Amount<*>, contractStateType: Class<out T>): List<StateAndRef<T>>","description":"net.corda.core.node.services.VaultService.tryLockFungibleStatesForSpending","location":"docs/net.corda.core.node.services/-vault-service/try-lock-fungible-states-for-spending.html","searchKeys":["tryLockFungibleStatesForSpending","abstract fun <T : FungibleState<*>> tryLockFungibleStatesForSpending(lockId: UUID, eligibleStatesQuery: QueryCriteria, amount: Amount<*>, contractStateType: Class<out T>): List<StateAndRef<T>>","net.corda.core.node.services.VaultService.tryLockFungibleStatesForSpending"]},{"name":"abstract fun <T : SerializeAsToken> cordaService(type: Class<T>): T","description":"net.corda.core.node.ServiceHub.cordaService","location":"docs/net.corda.core.node/-service-hub/corda-service.html","searchKeys":["cordaService","abstract fun <T : SerializeAsToken> cordaService(type: Class<T>): T","net.corda.core.node.ServiceHub.cordaService"]},{"name":"abstract fun <T : TelemetryComponent> cordaTelemetryComponent(type: Class<T>): T","description":"net.corda.core.node.ServiceHub.cordaTelemetryComponent","location":"docs/net.corda.core.node/-service-hub/corda-telemetry-component.html","searchKeys":["cordaTelemetryComponent","abstract fun <T : TelemetryComponent> cordaTelemetryComponent(type: Class<T>): T","net.corda.core.node.ServiceHub.cordaTelemetryComponent"]},{"name":"abstract fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","description":"net.corda.client.rpc.RPCConnection.getTelemetryHandle","location":"docs/net.corda.client.rpc/-r-p-c-connection/get-telemetry-handle.html","searchKeys":["getTelemetryHandle","abstract fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","net.corda.client.rpc.RPCConnection.getTelemetryHandle"]},{"name":"abstract fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","description":"net.corda.core.node.services.TelemetryService.getTelemetryHandle","location":"docs/net.corda.core.node.services/-telemetry-service/get-telemetry-handle.html","searchKeys":["getTelemetryHandle","abstract fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","net.corda.core.node.services.TelemetryService.getTelemetryHandle"]},{"name":"abstract fun <T> reattachFlowWithClientId(clientId: String): FlowHandleWithClientId<T>?","description":"net.corda.core.messaging.CordaRPCOps.reattachFlowWithClientId","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/reattach-flow-with-client-id.html","searchKeys":["reattachFlowWithClientId","abstract fun <T> reattachFlowWithClientId(clientId: String): FlowHandleWithClientId<T>?","net.corda.core.messaging.CordaRPCOps.reattachFlowWithClientId"]},{"name":"abstract fun <T> startFlow(flow: FlowLogic<T>): FlowHandle<T>","description":"net.corda.core.node.AppServiceHub.startFlow","location":"docs/net.corda.core.node/-app-service-hub/start-flow.html","searchKeys":["startFlow","abstract fun <T> startFlow(flow: FlowLogic<T>): FlowHandle<T>","net.corda.core.node.AppServiceHub.startFlow"]},{"name":"abstract fun <T> startFlowDynamic(logicType: Class<out FlowLogic<T>>, vararg args: Any?): FlowHandle<T>","description":"net.corda.core.messaging.CordaRPCOps.startFlowDynamic","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/start-flow-dynamic.html","searchKeys":["startFlowDynamic","abstract fun <T> startFlowDynamic(logicType: Class<out FlowLogic<T>>, vararg args: Any?): FlowHandle<T>","net.corda.core.messaging.CordaRPCOps.startFlowDynamic"]},{"name":"abstract fun <T> startFlowDynamicWithClientId(clientId: String, logicType: Class<out FlowLogic<T>>, vararg args: Any?): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.CordaRPCOps.startFlowDynamicWithClientId","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/start-flow-dynamic-with-client-id.html","searchKeys":["startFlowDynamicWithClientId","abstract fun <T> startFlowDynamicWithClientId(clientId: String, logicType: Class<out FlowLogic<T>>, vararg args: Any?): FlowHandleWithClientId<T>","net.corda.core.messaging.CordaRPCOps.startFlowDynamicWithClientId"]},{"name":"abstract fun <T> startTrackedFlow(flow: FlowLogic<T>): FlowProgressHandle<T>","description":"net.corda.core.node.AppServiceHub.startTrackedFlow","location":"docs/net.corda.core.node/-app-service-hub/start-tracked-flow.html","searchKeys":["startTrackedFlow","abstract fun <T> startTrackedFlow(flow: FlowLogic<T>): FlowProgressHandle<T>","net.corda.core.node.AppServiceHub.startTrackedFlow"]},{"name":"abstract fun <T> startTrackedFlowDynamic(logicType: Class<out FlowLogic<T>>, vararg args: Any?): FlowProgressHandle<T>","description":"net.corda.core.messaging.CordaRPCOps.startTrackedFlowDynamic","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/start-tracked-flow-dynamic.html","searchKeys":["startTrackedFlowDynamic","abstract fun <T> startTrackedFlowDynamic(logicType: Class<out FlowLogic<T>>, vararg args: Any?): FlowProgressHandle<T>","net.corda.core.messaging.CordaRPCOps.startTrackedFlowDynamic"]},{"name":"abstract fun <T> transaction(statement: SessionScope.() -> T): T","description":"net.corda.core.node.services.vault.CordaTransactionSupport.transaction","location":"docs/net.corda.core.node.services.vault/-corda-transaction-support/transaction.html","searchKeys":["transaction","abstract fun <T> transaction(statement: SessionScope.() -> T): T","net.corda.core.node.services.vault.CordaTransactionSupport.transaction"]},{"name":"abstract fun <T> withEntityManager(block: <Error class: unknown class>.() -> T): T","description":"net.corda.core.node.ServiceHub.withEntityManager","location":"docs/net.corda.core.node/-service-hub/with-entity-manager.html","searchKeys":["withEntityManager","abstract fun <T> withEntityManager(block: <Error class: unknown class>.() -> T): T","net.corda.core.node.ServiceHub.withEntityManager"]},{"name":"abstract fun <W> then(callback: (CordaFuture<V>) -> W)","description":"net.corda.core.concurrent.CordaFuture.then","location":"docs/net.corda.core.concurrent/-corda-future/then.html","searchKeys":["then","abstract fun <W> then(callback: (CordaFuture<V>) -> W)","net.corda.core.concurrent.CordaFuture.then"]},{"name":"abstract fun _attachment(contractClassName: ContractClassName)","description":"net.corda.testing.dsl.TransactionDSLInterpreter._attachment","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/_attachment.html","searchKeys":["_attachment","abstract fun _attachment(contractClassName: ContractClassName)","net.corda.testing.dsl.TransactionDSLInterpreter._attachment"]},{"name":"abstract fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>)","description":"net.corda.testing.dsl.TransactionDSLInterpreter._attachment","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/_attachment.html","searchKeys":["_attachment","abstract fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>)","net.corda.testing.dsl.TransactionDSLInterpreter._attachment"]},{"name":"abstract fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>, jarManifestAttributes: Map<String, String>)","description":"net.corda.testing.dsl.TransactionDSLInterpreter._attachment","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/_attachment.html","searchKeys":["_attachment","abstract fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>, jarManifestAttributes: Map<String, String>)","net.corda.testing.dsl.TransactionDSLInterpreter._attachment"]},{"name":"abstract fun _transaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: T.() -> EnforceVerifyOrFail): WireTransaction","description":"net.corda.testing.dsl.LedgerDSLInterpreter._transaction","location":"docs/net.corda.testing.dsl/-ledger-d-s-l-interpreter/_transaction.html","searchKeys":["_transaction","abstract fun _transaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: T.() -> EnforceVerifyOrFail): WireTransaction","net.corda.testing.dsl.LedgerDSLInterpreter._transaction"]},{"name":"abstract fun _tweak(dsl: LedgerDSLInterpreter<T>.() -> Unit)","description":"net.corda.testing.dsl.LedgerDSLInterpreter._tweak","location":"docs/net.corda.testing.dsl/-ledger-d-s-l-interpreter/_tweak.html","searchKeys":["_tweak","abstract fun _tweak(dsl: LedgerDSLInterpreter<T>.() -> Unit)","net.corda.testing.dsl.LedgerDSLInterpreter._tweak"]},{"name":"abstract fun _tweak(dsl: TransactionDSLInterpreter.() -> EnforceVerifyOrFail): EnforceVerifyOrFail","description":"net.corda.testing.dsl.TransactionDSLInterpreter._tweak","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/_tweak.html","searchKeys":["_tweak","abstract fun _tweak(dsl: TransactionDSLInterpreter.() -> EnforceVerifyOrFail): EnforceVerifyOrFail","net.corda.testing.dsl.TransactionDSLInterpreter._tweak"]},{"name":"abstract fun _unverifiedTransaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: T.() -> Unit): WireTransaction","description":"net.corda.testing.dsl.LedgerDSLInterpreter._unverifiedTransaction","location":"docs/net.corda.testing.dsl/-ledger-d-s-l-interpreter/_unverified-transaction.html","searchKeys":["_unverifiedTransaction","abstract fun _unverifiedTransaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: T.() -> Unit): WireTransaction","net.corda.testing.dsl.LedgerDSLInterpreter._unverifiedTransaction"]},{"name":"abstract fun acceptEncoding(encoding: SerializationEncoding): Boolean","description":"net.corda.core.serialization.EncodingWhitelist.acceptEncoding","location":"docs/net.corda.core.serialization/-encoding-whitelist/accept-encoding.html","searchKeys":["acceptEncoding","abstract fun acceptEncoding(encoding: SerializationEncoding): Boolean","net.corda.core.serialization.EncodingWhitelist.acceptEncoding"]},{"name":"abstract fun acceptNewNetworkParameters(parametersHash: SecureHash)","description":"net.corda.core.messaging.CordaRPCOps.acceptNewNetworkParameters","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/accept-new-network-parameters.html","searchKeys":["acceptNewNetworkParameters","abstract fun acceptNewNetworkParameters(parametersHash: SecureHash)","net.corda.core.messaging.CordaRPCOps.acceptNewNetworkParameters"]},{"name":"abstract fun addNoteToTransaction(txnId: SecureHash, noteText: String)","description":"net.corda.core.node.services.VaultService.addNoteToTransaction","location":"docs/net.corda.core.node.services/-vault-service/add-note-to-transaction.html","searchKeys":["addNoteToTransaction","abstract fun addNoteToTransaction(txnId: SecureHash, noteText: String)","net.corda.core.node.services.VaultService.addNoteToTransaction"]},{"name":"abstract fun addSuppressed(suppressed: Array<Throwable>)","description":"net.corda.core.CordaThrowable.addSuppressed","location":"docs/net.corda.core/-corda-throwable/add-suppressed.html","searchKeys":["addSuppressed","abstract fun addSuppressed(suppressed: Array<Throwable>)","net.corda.core.CordaThrowable.addSuppressed"]},{"name":"abstract fun addVaultTransactionNote(txnId: SecureHash, txnNote: String)","description":"net.corda.core.messaging.CordaRPCOps.addVaultTransactionNote","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/add-vault-transaction-note.html","searchKeys":["addVaultTransactionNote","abstract fun addVaultTransactionNote(txnId: SecureHash, txnNote: String)","net.corda.core.messaging.CordaRPCOps.addVaultTransactionNote"]},{"name":"abstract fun asSigned(): TestCordapp","description":"net.corda.testing.node.TestCordapp.asSigned","location":"docs/net.corda.testing.node/-test-cordapp/as-signed.html","searchKeys":["asSigned","abstract fun asSigned(): TestCordapp","net.corda.testing.node.TestCordapp.asSigned"]},{"name":"abstract fun attachment(attachment: InputStream): SecureHash","description":"net.corda.testing.dsl.LedgerDSLInterpreter.attachment","location":"docs/net.corda.testing.dsl/-ledger-d-s-l-interpreter/attachment.html","searchKeys":["attachment","abstract fun attachment(attachment: InputStream): SecureHash","net.corda.testing.dsl.LedgerDSLInterpreter.attachment"]},{"name":"abstract fun attachment(attachmentId: SecureHash)","description":"net.corda.testing.dsl.TransactionDSLInterpreter.attachment","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/attachment.html","searchKeys":["attachment","abstract fun attachment(attachmentId: SecureHash)","net.corda.testing.dsl.TransactionDSLInterpreter.attachment"]},{"name":"abstract fun attachmentExists(id: SecureHash): Boolean","description":"net.corda.core.messaging.CordaRPCOps.attachmentExists","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/attachment-exists.html","searchKeys":["attachmentExists","abstract fun attachmentExists(id: SecureHash): Boolean","net.corda.core.messaging.CordaRPCOps.attachmentExists"]},{"name":"abstract fun baseDirectory(nodeName: CordaX500Name): Path","description":"net.corda.testing.driver.DriverDSL.baseDirectory","location":"docs/net.corda.testing.driver/-driver-d-s-l/base-directory.html","searchKeys":["baseDirectory","abstract fun baseDirectory(nodeName: CordaX500Name): Path","net.corda.testing.driver.DriverDSL.baseDirectory"]},{"name":"abstract fun between(sender: SingleMessageRecipient, receiver: SingleMessageRecipient): Duration","description":"net.corda.testing.node.InMemoryMessagingNetwork.LatencyCalculator.between","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-latency-calculator/between.html","searchKeys":["between","abstract fun between(sender: SingleMessageRecipient, receiver: SingleMessageRecipient): Duration","net.corda.testing.node.InMemoryMessagingNetwork.LatencyCalculator.between"]},{"name":"abstract fun borrow(algorithm: String, provider: Provider?): Signature","description":"net.corda.core.crypto.internal.SignatureFactory.borrow","location":"docs/net.corda.core.crypto.internal/-signature-factory/borrow.html","searchKeys":["borrow","abstract fun borrow(algorithm: String, provider: Provider?): Signature","net.corda.core.crypto.internal.SignatureFactory.borrow"]},{"name":"abstract fun calculate(attachment: Attachment): Boolean","description":"net.corda.core.internal.AttachmentTrustCalculator.calculate","location":"docs/net.corda.core.internal/-attachment-trust-calculator/calculate.html","searchKeys":["calculate","abstract fun calculate(attachment: Attachment): Boolean","net.corda.core.internal.AttachmentTrustCalculator.calculate"]},{"name":"abstract fun calculateAllTrustInfo(): List<AttachmentTrustInfo>","description":"net.corda.core.internal.AttachmentTrustCalculator.calculateAllTrustInfo","location":"docs/net.corda.core.internal/-attachment-trust-calculator/calculate-all-trust-info.html","searchKeys":["calculateAllTrustInfo","abstract fun calculateAllTrustInfo(): List<AttachmentTrustInfo>","net.corda.core.internal.AttachmentTrustCalculator.calculateAllTrustInfo"]},{"name":"abstract fun call(): T","description":"net.corda.core.flows.FlowLogic.call","location":"docs/net.corda.core.flows/-flow-logic/call.html","searchKeys":["call","abstract fun call(): T","net.corda.core.flows.FlowLogic.call"]},{"name":"abstract fun certificateFromKey(owningKey: PublicKey): PartyAndCertificate?","description":"net.corda.core.node.services.IdentityService.certificateFromKey","location":"docs/net.corda.core.node.services/-identity-service/certificate-from-key.html","searchKeys":["certificateFromKey","abstract fun certificateFromKey(owningKey: PublicKey): PartyAndCertificate?","net.corda.core.node.services.IdentityService.certificateFromKey"]},{"name":"abstract fun checkFlowPermission(permissionName: String, extraAuditData: Map<String, String>)","description":"net.corda.core.internal.FlowStateMachine.checkFlowPermission","location":"docs/net.corda.core.internal/-flow-state-machine/check-flow-permission.html","searchKeys":["checkFlowPermission","abstract fun checkFlowPermission(permissionName: String, extraAuditData: Map<String, String>)","net.corda.core.internal.FlowStateMachine.checkFlowPermission"]},{"name":"abstract fun checkProposal(stx: SignedTransaction)","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.checkProposal","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/check-proposal.html","searchKeys":["checkProposal","abstract fun checkProposal(stx: SignedTransaction)","net.corda.finance.flows.TwoPartyDealFlow.Primary.checkProposal"]},{"name":"abstract fun choose(original: T, interned: T): T","description":"net.corda.core.internal.utilities.IternabilityVerifier.choose","location":"docs/net.corda.core.internal.utilities/-iternability-verifier/choose.html","searchKeys":["choose","abstract fun choose(original: T, interned: T): T","net.corda.core.internal.utilities.IternabilityVerifier.choose"]},{"name":"abstract fun clearNetworkMapCache()","description":"net.corda.core.messaging.CordaRPCOps.clearNetworkMapCache","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/clear-network-map-cache.html","searchKeys":["clearNetworkMapCache","abstract fun clearNetworkMapCache()","net.corda.core.messaging.CordaRPCOps.clearNetworkMapCache"]},{"name":"abstract fun clearNetworkMapCache()","description":"net.corda.core.node.services.NetworkMapCacheBase.clearNetworkMapCache","location":"docs/net.corda.core.node.services/-network-map-cache-base/clear-network-map-cache.html","searchKeys":["clearNetworkMapCache","abstract fun clearNetworkMapCache()","net.corda.core.node.services.NetworkMapCacheBase.clearNetworkMapCache"]},{"name":"abstract fun close()","description":"net.corda.core.flows.FlowSession.close","location":"docs/net.corda.core.flows/-flow-session/close.html","searchKeys":["close","abstract fun close()","net.corda.core.flows.FlowSession.close"]},{"name":"abstract fun command(signers: List<PublicKey>, commandData: CommandData)","description":"net.corda.testing.dsl.TransactionDSLInterpreter.command","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/command.html","searchKeys":["command","abstract fun command(signers: List<PublicKey>, commandData: CommandData)","net.corda.testing.dsl.TransactionDSLInterpreter.command"]},{"name":"abstract fun commit(states: List<StateRef>, txId: SecureHash, callerIdentity: Party, requestSignature: NotarisationRequestSignature, timeWindow: TimeWindow? = null, references: List<StateRef> = emptyList()): CordaFuture<UniquenessProvider.Result>","description":"net.corda.core.internal.notary.UniquenessProvider.commit","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/commit.html","searchKeys":["commit","abstract fun commit(states: List<StateRef>, txId: SecureHash, callerIdentity: Party, requestSignature: NotarisationRequestSignature, timeWindow: TimeWindow? = null, references: List<StateRef> = emptyList()): CordaFuture<UniquenessProvider.Result>","net.corda.core.internal.notary.UniquenessProvider.commit"]},{"name":"abstract fun computeIfAbsent(key: AttachmentsClassLoaderKey, mappingFunction: (AttachmentsClassLoaderKey) -> SerializationContext): SerializationContext","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderCache.computeIfAbsent","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-cache/compute-if-absent.html","searchKeys":["computeIfAbsent","abstract fun computeIfAbsent(key: AttachmentsClassLoaderKey, mappingFunction: (AttachmentsClassLoaderKey) -> SerializationContext): SerializationContext","net.corda.core.serialization.internal.AttachmentsClassLoaderCache.computeIfAbsent"]},{"name":"abstract fun config(): <Error class: unknown class>","description":"net.corda.testing.node.internal.CompatibilityZoneParams.config","location":"docs/net.corda.testing.node.internal/-compatibility-zone-params/config.html","searchKeys":["config","abstract fun config(): <Error class: unknown class>","net.corda.testing.node.internal.CompatibilityZoneParams.config"]},{"name":"abstract fun create(): DigestAlgorithm","description":"net.corda.core.crypto.internal.DigestAlgorithmFactory.create","location":"docs/net.corda.core.crypto.internal/-digest-algorithm-factory/create.html","searchKeys":["create","abstract fun create(): DigestAlgorithm","net.corda.core.crypto.internal.DigestAlgorithmFactory.create"]},{"name":"abstract fun create(flowClass: Class<out FlowLogic<*>>, vararg args: Any?): FlowLogicRef","description":"net.corda.core.flows.FlowLogicRefFactory.create","location":"docs/net.corda.core.flows/-flow-logic-ref-factory/create.html","searchKeys":["create","abstract fun create(flowClass: Class<out FlowLogic<*>>, vararg args: Any?): FlowLogicRef","net.corda.core.flows.FlowLogicRefFactory.create"]},{"name":"abstract fun create(flowClassName: String, vararg args: Any?): FlowLogicRef","description":"net.corda.core.flows.FlowLogicRefFactory.create","location":"docs/net.corda.core.flows/-flow-logic-ref-factory/create.html","searchKeys":["create","abstract fun create(flowClassName: String, vararg args: Any?): FlowLogicRef","net.corda.core.flows.FlowLogicRefFactory.create"]},{"name":"abstract fun createServiceFlow(otherPartySession: FlowSession): FlowLogic<Void?>","description":"net.corda.core.internal.notary.NotaryService.createServiceFlow","location":"docs/net.corda.core.internal.notary/-notary-service/create-service-flow.html","searchKeys":["createServiceFlow","abstract fun createServiceFlow(otherPartySession: FlowSession): FlowLogic<Void?>","net.corda.core.internal.notary.NotaryService.createServiceFlow"]},{"name":"abstract fun createTransactionsResolver(flow: ResolveTransactionsFlow): TransactionsResolver","description":"net.corda.core.internal.ServiceHubCoreInternal.createTransactionsResolver","location":"docs/net.corda.core.internal/-service-hub-core-internal/create-transactions-resolver.html","searchKeys":["createTransactionsResolver","abstract fun createTransactionsResolver(flow: ResolveTransactionsFlow): TransactionsResolver","net.corda.core.internal.ServiceHubCoreInternal.createTransactionsResolver"]},{"name":"abstract fun currentNodeTime(): Instant","description":"net.corda.core.messaging.CordaRPCOps.currentNodeTime","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/current-node-time.html","searchKeys":["currentNodeTime","abstract fun currentNodeTime(): Instant","net.corda.core.messaging.CordaRPCOps.currentNodeTime"]},{"name":"abstract fun debugCheckpoints()","description":"net.corda.core.internal.messaging.FlowManagerRPCOps.debugCheckpoints","location":"docs/net.corda.core.internal.messaging/-flow-manager-r-p-c-ops/debug-checkpoints.html","searchKeys":["debugCheckpoints","abstract fun debugCheckpoints()","net.corda.core.internal.messaging.FlowManagerRPCOps.debugCheckpoints"]},{"name":"abstract fun debugCheckpoints()","description":"net.corda.core.messaging.flows.FlowManagerRPCOps.debugCheckpoints","location":"docs/net.corda.core.messaging.flows/-flow-manager-r-p-c-ops/debug-checkpoints.html","searchKeys":["debugCheckpoints","abstract fun debugCheckpoints()","net.corda.core.messaging.flows.FlowManagerRPCOps.debugCheckpoints"]},{"name":"abstract fun deriveState(txState: TransactionState<S>, amount: Amount<Issued<T>>, owner: AbstractParty): TransactionState<S>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.deriveState","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/derive-state.html","searchKeys":["deriveState","abstract fun deriveState(txState: TransactionState<S>, amount: Amount<Issued<T>>, owner: AbstractParty): TransactionState<S>","net.corda.finance.contracts.asset.OnLedgerAsset.deriveState"]},{"name":"abstract fun digest(bytes: ByteArray): ByteArray","description":"net.corda.core.crypto.DigestAlgorithm.digest","location":"docs/net.corda.core.crypto/-digest-algorithm/digest.html","searchKeys":["digest","abstract fun digest(bytes: ByteArray): ByteArray","net.corda.core.crypto.DigestAlgorithm.digest"]},{"name":"abstract fun doormanURL(): URL","description":"net.corda.testing.node.internal.CompatibilityZoneParams.doormanURL","location":"docs/net.corda.testing.node.internal/-compatibility-zone-params/doorman-u-r-l.html","searchKeys":["doormanURL","abstract fun doormanURL(): URL","net.corda.testing.node.internal.CompatibilityZoneParams.doormanURL"]},{"name":"abstract fun downloadDependencies(batchMode: Boolean, recoveryMode: Boolean)","description":"net.corda.core.internal.TransactionsResolver.downloadDependencies","location":"docs/net.corda.core.internal/-transactions-resolver/download-dependencies.html","searchKeys":["downloadDependencies","abstract fun downloadDependencies(batchMode: Boolean, recoveryMode: Boolean)","net.corda.core.internal.TransactionsResolver.downloadDependencies"]},{"name":"abstract fun dumpCheckpoints()","description":"net.corda.core.internal.messaging.FlowManagerRPCOps.dumpCheckpoints","location":"docs/net.corda.core.internal.messaging/-flow-manager-r-p-c-ops/dump-checkpoints.html","searchKeys":["dumpCheckpoints","abstract fun dumpCheckpoints()","net.corda.core.internal.messaging.FlowManagerRPCOps.dumpCheckpoints"]},{"name":"abstract fun dumpCheckpoints()","description":"net.corda.core.messaging.flows.FlowManagerRPCOps.dumpCheckpoints","location":"docs/net.corda.core.messaging.flows/-flow-manager-r-p-c-ops/dump-checkpoints.html","searchKeys":["dumpCheckpoints","abstract fun dumpCheckpoints()","net.corda.core.messaging.flows.FlowManagerRPCOps.dumpCheckpoints"]},{"name":"abstract fun enforceSuccess(): LedgerTransaction?","description":"net.corda.core.internal.verification.VerificationResult.enforceSuccess","location":"docs/net.corda.core.internal.verification/-verification-result/enforce-success.html","searchKeys":["enforceSuccess","abstract fun enforceSuccess(): LedgerTransaction?","net.corda.core.internal.verification.VerificationResult.enforceSuccess"]},{"name":"abstract fun execute(deduplicationId: String): CompletableFuture<R>","description":"net.corda.core.flows.FlowExternalAsyncOperation.execute","location":"docs/net.corda.core.flows/-flow-external-async-operation/execute.html","searchKeys":["execute","abstract fun execute(deduplicationId: String): CompletableFuture<R>","net.corda.core.flows.FlowExternalAsyncOperation.execute"]},{"name":"abstract fun execute(deduplicationId: String): CordaFuture<R>","description":"net.corda.core.internal.FlowAsyncOperation.execute","location":"docs/net.corda.core.internal/-flow-async-operation/execute.html","searchKeys":["execute","abstract fun execute(deduplicationId: String): CordaFuture<R>","net.corda.core.internal.FlowAsyncOperation.execute"]},{"name":"abstract fun execute(deduplicationId: String): R","description":"net.corda.core.flows.FlowExternalOperation.execute","location":"docs/net.corda.core.flows/-flow-external-operation/execute.html","searchKeys":["execute","abstract fun execute(deduplicationId: String): R","net.corda.core.flows.FlowExternalOperation.execute"]},{"name":"abstract fun exists(path: String): Boolean","description":"net.corda.core.cordapp.CordappConfig.exists","location":"docs/net.corda.core.cordapp/-cordapp-config/exists.html","searchKeys":["exists","abstract fun exists(path: String): Boolean","net.corda.core.cordapp.CordappConfig.exists"]},{"name":"abstract fun externalIdForPublicKey(publicKey: PublicKey): UUID?","description":"net.corda.core.node.services.IdentityService.externalIdForPublicKey","location":"docs/net.corda.core.node.services/-identity-service/external-id-for-public-key.html","searchKeys":["externalIdForPublicKey","abstract fun externalIdForPublicKey(publicKey: PublicKey): UUID?","net.corda.core.node.services.IdentityService.externalIdForPublicKey"]},{"name":"abstract fun extractCommands(commands: Collection<CommandWithParties<CommandData>>): Collection<CommandWithParties<C>>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.extractCommands","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/extract-commands.html","searchKeys":["extractCommands","abstract fun extractCommands(commands: Collection<CommandWithParties<CommandData>>): Collection<CommandWithParties<C>>","net.corda.finance.contracts.asset.OnLedgerAsset.extractCommands"]},{"name":"abstract fun filterMyKeys(candidateKeys: Iterable<PublicKey>): Iterable<PublicKey>","description":"net.corda.core.node.services.KeyManagementService.filterMyKeys","location":"docs/net.corda.core.node.services/-key-management-service/filter-my-keys.html","searchKeys":["filterMyKeys","abstract fun filterMyKeys(candidateKeys: Iterable<PublicKey>): Iterable<PublicKey>","net.corda.core.node.services.KeyManagementService.filterMyKeys"]},{"name":"abstract fun finalizeTransaction(txn: SignedTransaction, statesToRecord: StatesToRecord)","description":"net.corda.core.internal.ServiceHubCoreInternal.finalizeTransaction","location":"docs/net.corda.core.internal/-service-hub-core-internal/finalize-transaction.html","searchKeys":["finalizeTransaction","abstract fun finalizeTransaction(txn: SignedTransaction, statesToRecord: StatesToRecord)","net.corda.core.internal.ServiceHubCoreInternal.finalizeTransaction"]},{"name":"abstract fun finalizeTransactionWithExtraSignatures(txn: SignedTransaction, sigs: Collection<TransactionSignature>, statesToRecord: StatesToRecord)","description":"net.corda.core.internal.ServiceHubCoreInternal.finalizeTransactionWithExtraSignatures","location":"docs/net.corda.core.internal/-service-hub-core-internal/finalize-transaction-with-extra-signatures.html","searchKeys":["finalizeTransactionWithExtraSignatures","abstract fun finalizeTransactionWithExtraSignatures(txn: SignedTransaction, sigs: Collection<TransactionSignature>, statesToRecord: StatesToRecord)","net.corda.core.internal.ServiceHubCoreInternal.finalizeTransactionWithExtraSignatures"]},{"name":"abstract fun finishedFlowsWithClientIds(): Map<String, Boolean>","description":"net.corda.core.messaging.CordaRPCOps.finishedFlowsWithClientIds","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/finished-flows-with-client-ids.html","searchKeys":["finishedFlowsWithClientIds","abstract fun finishedFlowsWithClientIds(): Map<String, Boolean>","net.corda.core.messaging.CordaRPCOps.finishedFlowsWithClientIds"]},{"name":"abstract fun finishedFlowsWithClientIdsAsAdmin(): Map<String, Boolean>","description":"net.corda.core.messaging.CordaRPCOps.finishedFlowsWithClientIdsAsAdmin","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/finished-flows-with-client-ids-as-admin.html","searchKeys":["finishedFlowsWithClientIdsAsAdmin","abstract fun finishedFlowsWithClientIdsAsAdmin(): Map<String, Boolean>","net.corda.core.messaging.CordaRPCOps.finishedFlowsWithClientIdsAsAdmin"]},{"name":"abstract fun fixupAttachmentIds(attachmentIds: Collection<SecureHash>): Set<SecureHash>","description":"net.corda.core.internal.verification.VerificationSupport.fixupAttachmentIds","location":"docs/net.corda.core.internal.verification/-verification-support/fixup-attachment-ids.html","searchKeys":["fixupAttachmentIds","abstract fun fixupAttachmentIds(attachmentIds: Collection<SecureHash>): Set<SecureHash>","net.corda.core.internal.verification.VerificationSupport.fixupAttachmentIds"]},{"name":"abstract fun flowStackSnapshot(flowClass: Class<out FlowLogic<*>>): FlowStackSnapshot?","description":"net.corda.core.internal.FlowStateMachine.flowStackSnapshot","location":"docs/net.corda.core.internal/-flow-state-machine/flow-stack-snapshot.html","searchKeys":["flowStackSnapshot","abstract fun flowStackSnapshot(flowClass: Class<out FlowLogic<*>>): FlowStackSnapshot?","net.corda.core.internal.FlowStateMachine.flowStackSnapshot"]},{"name":"abstract fun forceClose()","description":"net.corda.client.rpc.RPCConnection.forceClose","location":"docs/net.corda.client.rpc/-r-p-c-connection/force-close.html","searchKeys":["forceClose","abstract fun forceClose()","net.corda.client.rpc.RPCConnection.forceClose"]},{"name":"abstract fun freshKey(): PublicKey","description":"net.corda.core.node.services.KeyManagementService.freshKey","location":"docs/net.corda.core.node.services/-key-management-service/fresh-key.html","searchKeys":["freshKey","abstract fun freshKey(): PublicKey","net.corda.core.node.services.KeyManagementService.freshKey"]},{"name":"abstract fun freshKey(externalId: UUID): PublicKey","description":"net.corda.core.node.services.KeyManagementService.freshKey","location":"docs/net.corda.core.node.services/-key-management-service/fresh-key.html","searchKeys":["freshKey","abstract fun freshKey(externalId: UUID): PublicKey","net.corda.core.node.services.KeyManagementService.freshKey"]},{"name":"abstract fun freshKeyAndCert(identity: PartyAndCertificate, revocationEnabled: Boolean): PartyAndCertificate","description":"net.corda.core.node.services.KeyManagementService.freshKeyAndCert","location":"docs/net.corda.core.node.services/-key-management-service/fresh-key-and-cert.html","searchKeys":["freshKeyAndCert","abstract fun freshKeyAndCert(identity: PartyAndCertificate, revocationEnabled: Boolean): PartyAndCertificate","net.corda.core.node.services.KeyManagementService.freshKeyAndCert"]},{"name":"abstract fun freshKeyAndCert(identity: PartyAndCertificate, revocationEnabled: Boolean, externalId: UUID): PartyAndCertificate","description":"net.corda.core.node.services.KeyManagementService.freshKeyAndCert","location":"docs/net.corda.core.node.services/-key-management-service/fresh-key-and-cert.html","searchKeys":["freshKeyAndCert","abstract fun freshKeyAndCert(identity: PartyAndCertificate, revocationEnabled: Boolean, externalId: UUID): PartyAndCertificate","net.corda.core.node.services.KeyManagementService.freshKeyAndCert"]},{"name":"abstract fun fromProxy(proxy: PROXY): OBJ","description":"net.corda.core.serialization.CheckpointCustomSerializer.fromProxy","location":"docs/net.corda.core.serialization/-checkpoint-custom-serializer/from-proxy.html","searchKeys":["fromProxy","abstract fun fromProxy(proxy: PROXY): OBJ","net.corda.core.serialization.CheckpointCustomSerializer.fromProxy"]},{"name":"abstract fun fromProxy(proxy: PROXY): OBJ","description":"net.corda.core.serialization.SerializationCustomSerializer.fromProxy","location":"docs/net.corda.core.serialization/-serialization-custom-serializer/from-proxy.html","searchKeys":["fromProxy","abstract fun fromProxy(proxy: PROXY): OBJ","net.corda.core.serialization.SerializationCustomSerializer.fromProxy"]},{"name":"abstract fun fromToken(context: SerializeAsTokenContext): Any","description":"net.corda.core.serialization.SerializationToken.fromToken","location":"docs/net.corda.core.serialization/-serialization-token/from-token.html","searchKeys":["fromToken","abstract fun fromToken(context: SerializeAsTokenContext): Any","net.corda.core.serialization.SerializationToken.fromToken"]},{"name":"abstract fun generateAgreement(notary: Party): TransactionBuilder","description":"net.corda.finance.contracts.DealState.generateAgreement","location":"docs/net.corda.finance.contracts/-deal-state/generate-agreement.html","searchKeys":["generateAgreement","abstract fun generateAgreement(notary: Party): TransactionBuilder","net.corda.finance.contracts.DealState.generateAgreement"]},{"name":"abstract fun generateExitCommand(amount: Amount<Issued<T>>): CommandData","description":"net.corda.finance.contracts.asset.OnLedgerAsset.generateExitCommand","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/generate-exit-command.html","searchKeys":["generateExitCommand","abstract fun generateExitCommand(amount: Amount<Issued<T>>): CommandData","net.corda.finance.contracts.asset.OnLedgerAsset.generateExitCommand"]},{"name":"abstract fun generateFix(ptx: TransactionBuilder, oldState: StateAndRef<*>, fix: Fix)","description":"net.corda.finance.contracts.FixableDealState.generateFix","location":"docs/net.corda.finance.contracts/-fixable-deal-state/generate-fix.html","searchKeys":["generateFix","abstract fun generateFix(ptx: TransactionBuilder, oldState: StateAndRef<*>, fix: Fix)","net.corda.finance.contracts.FixableDealState.generateFix"]},{"name":"abstract fun generateMappedObject(schema: MappedSchema): PersistentState","description":"net.corda.core.schemas.QueryableState.generateMappedObject","location":"docs/net.corda.core.schemas/-queryable-state/generate-mapped-object.html","searchKeys":["generateMappedObject","abstract fun generateMappedObject(schema: MappedSchema): PersistentState","net.corda.core.schemas.QueryableState.generateMappedObject"]},{"name":"abstract fun generateMoveCommand(): MoveCommand","description":"net.corda.finance.contracts.asset.OnLedgerAsset.generateMoveCommand","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/generate-move-command.html","searchKeys":["generateMoveCommand","abstract fun generateMoveCommand(): MoveCommand","net.corda.finance.contracts.asset.OnLedgerAsset.generateMoveCommand"]},{"name":"abstract fun get(): T?","description":"net.corda.core.internal.ToggleField.get","location":"docs/net.corda.core.internal/-toggle-field/get.html","searchKeys":["get","abstract fun get(): T?","net.corda.core.internal.ToggleField.get"]},{"name":"abstract fun get(path: String): Any","description":"net.corda.core.cordapp.CordappConfig.get","location":"docs/net.corda.core.cordapp/-cordapp-config/get.html","searchKeys":["get","abstract fun get(path: String): Any","net.corda.core.cordapp.CordappConfig.get"]},{"name":"abstract fun getAllIdentities(): Iterable<PartyAndCertificate>","description":"net.corda.core.node.services.IdentityService.getAllIdentities","location":"docs/net.corda.core.node.services/-identity-service/get-all-identities.html","searchKeys":["getAllIdentities","abstract fun getAllIdentities(): Iterable<PartyAndCertificate>","net.corda.core.node.services.IdentityService.getAllIdentities"]},{"name":"abstract fun getAppContext(): CordappContext","description":"net.corda.core.cordapp.CordappProvider.getAppContext","location":"docs/net.corda.core.cordapp/-cordapp-provider/get-app-context.html","searchKeys":["getAppContext","abstract fun getAppContext(): CordappContext","net.corda.core.cordapp.CordappProvider.getAppContext"]},{"name":"abstract fun getAttachment(id: SecureHash): Attachment?","description":"net.corda.core.internal.verification.VerificationSupport.getAttachment","location":"docs/net.corda.core.internal.verification/-verification-support/get-attachment.html","searchKeys":["getAttachment","abstract fun getAttachment(id: SecureHash): Attachment?","net.corda.core.internal.verification.VerificationSupport.getAttachment"]},{"name":"abstract fun getAuthorisedContractUpgrade(ref: StateRef): String?","description":"net.corda.core.node.services.ContractUpgradeService.getAuthorisedContractUpgrade","location":"docs/net.corda.core.node.services/-contract-upgrade-service/get-authorised-contract-upgrade.html","searchKeys":["getAuthorisedContractUpgrade","abstract fun getAuthorisedContractUpgrade(ref: StateRef): String?","net.corda.core.node.services.ContractUpgradeService.getAuthorisedContractUpgrade"]},{"name":"abstract fun getAvailableComponentHashes(): List<SecureHash>","description":"net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getAvailableComponentHashes","location":"docs/net.corda.client.jackson/-jackson-support/-wire-transaction-mixin/get-available-component-hashes.html","searchKeys":["getAvailableComponentHashes","abstract fun getAvailableComponentHashes(): List<SecureHash>","net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getAvailableComponentHashes"]},{"name":"abstract fun getAvailableComponents(): List<Any>","description":"net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getAvailableComponents","location":"docs/net.corda.client.jackson/-jackson-support/-wire-transaction-mixin/get-available-components.html","searchKeys":["getAvailableComponents","abstract fun getAvailableComponents(): List<Any>","net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getAvailableComponents"]},{"name":"abstract fun getBoolean(path: String): Boolean","description":"net.corda.core.cordapp.CordappConfig.getBoolean","location":"docs/net.corda.core.cordapp/-cordapp-config/get-boolean.html","searchKeys":["getBoolean","abstract fun getBoolean(path: String): Boolean","net.corda.core.cordapp.CordappConfig.getBoolean"]},{"name":"abstract fun getContractAttachmentID(contractClassName: ContractClassName): AttachmentId?","description":"net.corda.core.cordapp.CordappProvider.getContractAttachmentID","location":"docs/net.corda.core.cordapp/-cordapp-provider/get-contract-attachment-i-d.html","searchKeys":["getContractAttachmentID","abstract fun getContractAttachmentID(contractClassName: ContractClassName): AttachmentId?","net.corda.core.cordapp.CordappProvider.getContractAttachmentID"]},{"name":"abstract fun getContractAttachments(contractClassName: ContractClassName): ContractAttachmentWithLegacy?","description":"net.corda.core.internal.cordapp.CordappProviderInternal.getContractAttachments","location":"docs/net.corda.core.internal.cordapp/-cordapp-provider-internal/get-contract-attachments.html","searchKeys":["getContractAttachments","abstract fun getContractAttachments(contractClassName: ContractClassName): ContractAttachmentWithLegacy?","net.corda.core.internal.cordapp.CordappProviderInternal.getContractAttachments"]},{"name":"abstract fun getCordappForFlow(flowLogic: FlowLogic<*>): Cordapp?","description":"net.corda.core.internal.cordapp.CordappProviderInternal.getCordappForFlow","location":"docs/net.corda.core.internal.cordapp/-cordapp-provider-internal/get-cordapp-for-flow.html","searchKeys":["getCordappForFlow","abstract fun getCordappForFlow(flowLogic: FlowLogic<*>): Cordapp?","net.corda.core.internal.cordapp.CordappProviderInternal.getCordappForFlow"]},{"name":"abstract fun getCounterpartyFlowInfo(): FlowInfo","description":"net.corda.core.flows.FlowSession.getCounterpartyFlowInfo","location":"docs/net.corda.core.flows/-flow-session/get-counterparty-flow-info.html","searchKeys":["getCounterpartyFlowInfo","abstract fun getCounterpartyFlowInfo(): FlowInfo","net.corda.core.flows.FlowSession.getCounterpartyFlowInfo"]},{"name":"abstract fun getCounterpartyFlowInfo(maySkipCheckpoint: Boolean): FlowInfo","description":"net.corda.core.flows.FlowSession.getCounterpartyFlowInfo","location":"docs/net.corda.core.flows/-flow-session/get-counterparty-flow-info.html","searchKeys":["getCounterpartyFlowInfo","abstract fun getCounterpartyFlowInfo(maySkipCheckpoint: Boolean): FlowInfo","net.corda.core.flows.FlowSession.getCounterpartyFlowInfo"]},{"name":"abstract fun getCurrentBaggage(): Map<String, String>","description":"net.corda.core.internal.telemetry.TelemetryComponent.getCurrentBaggage","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/get-current-baggage.html","searchKeys":["getCurrentBaggage","abstract fun getCurrentBaggage(): Map<String, String>","net.corda.core.internal.telemetry.TelemetryComponent.getCurrentBaggage"]},{"name":"abstract fun getCurrentSpanId(): String","description":"net.corda.core.internal.telemetry.TelemetryComponent.getCurrentSpanId","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/get-current-span-id.html","searchKeys":["getCurrentSpanId","abstract fun getCurrentSpanId(): String","net.corda.core.internal.telemetry.TelemetryComponent.getCurrentSpanId"]},{"name":"abstract fun getCurrentTelemetryData(): TelemetryDataItem","description":"net.corda.core.internal.telemetry.TelemetryComponent.getCurrentTelemetryData","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/get-current-telemetry-data.html","searchKeys":["getCurrentTelemetryData","abstract fun getCurrentTelemetryData(): TelemetryDataItem","net.corda.core.internal.telemetry.TelemetryComponent.getCurrentTelemetryData"]},{"name":"abstract fun getCurrentTelemetryId(): UUID","description":"net.corda.core.internal.telemetry.TelemetryComponent.getCurrentTelemetryId","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/get-current-telemetry-id.html","searchKeys":["getCurrentTelemetryId","abstract fun getCurrentTelemetryId(): UUID","net.corda.core.internal.telemetry.TelemetryComponent.getCurrentTelemetryId"]},{"name":"abstract fun getCurrentTraceId(): String","description":"net.corda.core.internal.telemetry.TelemetryComponent.getCurrentTraceId","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/get-current-trace-id.html","searchKeys":["getCurrentTraceId","abstract fun getCurrentTraceId(): String","net.corda.core.internal.telemetry.TelemetryComponent.getCurrentTraceId"]},{"name":"abstract fun getDouble(path: String): Double","description":"net.corda.core.cordapp.CordappConfig.getDouble","location":"docs/net.corda.core.cordapp/-cordapp-config/get-double.html","searchKeys":["getDouble","abstract fun getDouble(path: String): Double","net.corda.core.cordapp.CordappConfig.getDouble"]},{"name":"abstract fun getEpochFromHash(hash: SecureHash): Int?","description":"net.corda.core.internal.NetworkParametersStorage.getEpochFromHash","location":"docs/net.corda.core.internal/-network-parameters-storage/get-epoch-from-hash.html","searchKeys":["getEpochFromHash","abstract fun getEpochFromHash(hash: SecureHash): Int?","net.corda.core.internal.NetworkParametersStorage.getEpochFromHash"]},{"name":"abstract fun getFloat(path: String): Float","description":"net.corda.core.cordapp.CordappConfig.getFloat","location":"docs/net.corda.core.cordapp/-cordapp-config/get-float.html","searchKeys":["getFloat","abstract fun getFloat(path: String): Float","net.corda.core.cordapp.CordappConfig.getFloat"]},{"name":"abstract fun getHistoricNotary(party: Party): NotaryInfo?","description":"net.corda.core.internal.NetworkParametersStorage.getHistoricNotary","location":"docs/net.corda.core.internal/-network-parameters-storage/get-historic-notary.html","searchKeys":["getHistoricNotary","abstract fun getHistoricNotary(party: Party): NotaryInfo?","net.corda.core.internal.NetworkParametersStorage.getHistoricNotary"]},{"name":"abstract fun getId(): SecureHash","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getId","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/get-id.html","searchKeys":["getId","abstract fun getId(): SecureHash","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getId"]},{"name":"abstract fun getInputs(): List<StateRef>","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getInputs","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/get-inputs.html","searchKeys":["getInputs","abstract fun getInputs(): List<StateRef>","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getInputs"]},{"name":"abstract fun getInt(path: String): Int","description":"net.corda.core.cordapp.CordappConfig.getInt","location":"docs/net.corda.core.cordapp/-cordapp-config/get-int.html","searchKeys":["getInt","abstract fun getInt(path: String): Int","net.corda.core.cordapp.CordappConfig.getInt"]},{"name":"abstract fun getKey(key: URL): URL?","description":"net.corda.core.serialization.internal.AttachmentsHolder.getKey","location":"docs/net.corda.core.serialization.internal/-attachments-holder/get-key.html","searchKeys":["getKey","abstract fun getKey(key: URL): URL?","net.corda.core.serialization.internal.AttachmentsHolder.getKey"]},{"name":"abstract fun getKeyDescriptions(keys: Set<PublicKey>): List<String>","description":"net.corda.core.transactions.TransactionWithSignatures.getKeyDescriptions","location":"docs/net.corda.core.transactions/-transaction-with-signatures/get-key-descriptions.html","searchKeys":["getKeyDescriptions","abstract fun getKeyDescriptions(keys: Set<PublicKey>): List<String>","net.corda.core.transactions.TransactionWithSignatures.getKeyDescriptions"]},{"name":"abstract fun getLatestContractAttachments(contractClassName: String, minContractVersion: Int = DEFAULT_CORDAPP_VERSION): List<AttachmentId>","description":"net.corda.core.node.services.AttachmentStorage.getLatestContractAttachments","location":"docs/net.corda.core.node.services/-attachment-storage/get-latest-contract-attachments.html","searchKeys":["getLatestContractAttachments","abstract fun getLatestContractAttachments(contractClassName: String, minContractVersion: Int = DEFAULT_CORDAPP_VERSION): List<AttachmentId>","net.corda.core.node.services.AttachmentStorage.getLatestContractAttachments"]},{"name":"abstract fun getLong(path: String): Long","description":"net.corda.core.cordapp.CordappConfig.getLong","location":"docs/net.corda.core.cordapp/-cordapp-config/get-long.html","searchKeys":["getLong","abstract fun getLong(path: String): Long","net.corda.core.cordapp.CordappConfig.getLong"]},{"name":"abstract fun getMerkleTree(): MerkleTree","description":"net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getMerkleTree","location":"docs/net.corda.client.jackson/-jackson-support/-wire-transaction-mixin/get-merkle-tree.html","searchKeys":["getMerkleTree","abstract fun getMerkleTree(): MerkleTree","net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getMerkleTree"]},{"name":"abstract fun getNetworkParameters(id: SecureHash?): NetworkParameters?","description":"net.corda.core.internal.verification.VerificationSupport.getNetworkParameters","location":"docs/net.corda.core.internal.verification/-verification-support/get-network-parameters.html","searchKeys":["getNetworkParameters","abstract fun getNetworkParameters(id: SecureHash?): NetworkParameters?","net.corda.core.internal.verification.VerificationSupport.getNetworkParameters"]},{"name":"abstract fun getNodeByAddress(address: NetworkHostAndPort): NodeInfo?","description":"net.corda.core.node.services.NetworkMapCacheBase.getNodeByAddress","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-node-by-address.html","searchKeys":["getNodeByAddress","abstract fun getNodeByAddress(address: NetworkHostAndPort): NodeInfo?","net.corda.core.node.services.NetworkMapCacheBase.getNodeByAddress"]},{"name":"abstract fun getNodeByLegalIdentity(party: AbstractParty): NodeInfo?","description":"net.corda.core.node.services.NetworkMapCache.getNodeByLegalIdentity","location":"docs/net.corda.core.node.services/-network-map-cache/get-node-by-legal-identity.html","searchKeys":["getNodeByLegalIdentity","abstract fun getNodeByLegalIdentity(party: AbstractParty): NodeInfo?","net.corda.core.node.services.NetworkMapCache.getNodeByLegalIdentity"]},{"name":"abstract fun getNodeByLegalName(name: CordaX500Name): NodeInfo?","description":"net.corda.core.node.services.NetworkMapCacheBase.getNodeByLegalName","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-node-by-legal-name.html","searchKeys":["getNodeByLegalName","abstract fun getNodeByLegalName(name: CordaX500Name): NodeInfo?","net.corda.core.node.services.NetworkMapCacheBase.getNodeByLegalName"]},{"name":"abstract fun getNodesByLegalIdentityKey(identityKey: PublicKey): List<NodeInfo>","description":"net.corda.core.node.services.NetworkMapCacheBase.getNodesByLegalIdentityKey","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-nodes-by-legal-identity-key.html","searchKeys":["getNodesByLegalIdentityKey","abstract fun getNodesByLegalIdentityKey(identityKey: PublicKey): List<NodeInfo>","net.corda.core.node.services.NetworkMapCacheBase.getNodesByLegalIdentityKey"]},{"name":"abstract fun getNodesByLegalName(name: CordaX500Name): List<NodeInfo>","description":"net.corda.core.node.services.NetworkMapCacheBase.getNodesByLegalName","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-nodes-by-legal-name.html","searchKeys":["getNodesByLegalName","abstract fun getNodesByLegalName(name: CordaX500Name): List<NodeInfo>","net.corda.core.node.services.NetworkMapCacheBase.getNodesByLegalName"]},{"name":"abstract fun getNotary(): Party?","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getNotary","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/get-notary.html","searchKeys":["getNotary","abstract fun getNotary(): Party?","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getNotary"]},{"name":"abstract fun getNotaryChangeTx(): NotaryChangeWireTransaction","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getNotaryChangeTx","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/get-notary-change-tx.html","searchKeys":["getNotaryChangeTx","abstract fun getNotaryChangeTx(): NotaryChangeWireTransaction","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getNotaryChangeTx"]},{"name":"abstract fun getNumber(path: String): Number","description":"net.corda.core.cordapp.CordappConfig.getNumber","location":"docs/net.corda.core.cordapp/-cordapp-config/get-number.html","searchKeys":["getNumber","abstract fun getNumber(path: String): Number","net.corda.core.cordapp.CordappConfig.getNumber"]},{"name":"abstract fun getOrThrow(): A","description":"net.corda.core.utilities.Try.getOrThrow","location":"docs/net.corda.core.utilities/-try/get-or-throw.html","searchKeys":["getOrThrow","abstract fun getOrThrow(): A","net.corda.core.utilities.Try.getOrThrow"]},{"name":"abstract fun getOutputStates(): List<ContractState>","description":"net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getOutputStates","location":"docs/net.corda.client.jackson/-jackson-support/-wire-transaction-mixin/get-output-states.html","searchKeys":["getOutputStates","abstract fun getOutputStates(): List<ContractState>","net.corda.client.jackson.JacksonSupport.WireTransactionMixin.getOutputStates"]},{"name":"abstract fun getParties(keys: Collection<PublicKey>): List<Party?>","description":"net.corda.core.internal.verification.VerificationSupport.getParties","location":"docs/net.corda.core.internal.verification/-verification-support/get-parties.html","searchKeys":["getParties","abstract fun getParties(keys: Collection<PublicKey>): List<Party?>","net.corda.core.internal.verification.VerificationSupport.getParties"]},{"name":"abstract fun getPartyInfo(party: Party): PartyInfo?","description":"net.corda.core.node.services.NetworkMapCacheBase.getPartyInfo","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-party-info.html","searchKeys":["getPartyInfo","abstract fun getPartyInfo(party: Party): PartyInfo?","net.corda.core.node.services.NetworkMapCacheBase.getPartyInfo"]},{"name":"abstract fun getPeerCertificateByLegalName(name: CordaX500Name): PartyAndCertificate?","description":"net.corda.core.node.services.NetworkMapCacheBase.getPeerCertificateByLegalName","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-peer-certificate-by-legal-name.html","searchKeys":["getPeerCertificateByLegalName","abstract fun getPeerCertificateByLegalName(name: CordaX500Name): PartyAndCertificate?","net.corda.core.node.services.NetworkMapCacheBase.getPeerCertificateByLegalName"]},{"name":"abstract fun getRequiredSigningKeys(): Set<PublicKey>","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getRequiredSigningKeys","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/get-required-signing-keys.html","searchKeys":["getRequiredSigningKeys","abstract fun getRequiredSigningKeys(): Set<PublicKey>","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getRequiredSigningKeys"]},{"name":"abstract fun getSchemeId(): Int","description":"net.corda.core.serialization.CustomSerializationScheme.getSchemeId","location":"docs/net.corda.core.serialization/-custom-serialization-scheme/get-scheme-id.html","searchKeys":["getSchemeId","abstract fun getSchemeId(): Int","net.corda.core.serialization.CustomSerializationScheme.getSchemeId"]},{"name":"abstract fun getSerializedState(stateRef: StateRef): SerializedTransactionState","description":"net.corda.core.internal.verification.VerificationSupport.getSerializedState","location":"docs/net.corda.core.internal.verification/-verification-support/get-serialized-state.html","searchKeys":["getSerializedState","abstract fun getSerializedState(stateRef: StateRef): SerializedTransactionState","net.corda.core.internal.verification.VerificationSupport.getSerializedState"]},{"name":"abstract fun getSingleton(className: String): SerializeAsToken","description":"net.corda.core.serialization.SerializeAsTokenContext.getSingleton","location":"docs/net.corda.core.serialization/-serialize-as-token-context/get-singleton.html","searchKeys":["getSingleton","abstract fun getSingleton(className: String): SerializeAsToken","net.corda.core.serialization.SerializeAsTokenContext.getSingleton"]},{"name":"abstract fun getString(path: String): String","description":"net.corda.core.cordapp.CordappConfig.getString","location":"docs/net.corda.core.cordapp/-cordapp-config/get-string.html","searchKeys":["getString","abstract fun getString(path: String): String","net.corda.core.cordapp.CordappConfig.getString"]},{"name":"abstract fun getTelemetryHandles(): List<Any>","description":"net.corda.core.internal.telemetry.TelemetryComponent.getTelemetryHandles","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/get-telemetry-handles.html","searchKeys":["getTelemetryHandles","abstract fun getTelemetryHandles(): List<Any>","net.corda.core.internal.telemetry.TelemetryComponent.getTelemetryHandles"]},{"name":"abstract fun getTransaction(id: SecureHash): SignedTransaction?","description":"net.corda.core.node.services.TransactionStorage.getTransaction","location":"docs/net.corda.core.node.services/-transaction-storage/get-transaction.html","searchKeys":["getTransaction","abstract fun getTransaction(id: SecureHash): SignedTransaction?","net.corda.core.node.services.TransactionStorage.getTransaction"]},{"name":"abstract fun getTransactionNotes(txnId: SecureHash): Iterable<String>","description":"net.corda.core.node.services.VaultService.getTransactionNotes","location":"docs/net.corda.core.node.services/-vault-service/get-transaction-notes.html","searchKeys":["getTransactionNotes","abstract fun getTransactionNotes(txnId: SecureHash): Iterable<String>","net.corda.core.node.services.VaultService.getTransactionNotes"]},{"name":"abstract fun getTransactionWithStatus(id: SecureHash): SignedTransactionWithStatus?","description":"net.corda.core.node.services.TransactionStorage.getTransactionWithStatus","location":"docs/net.corda.core.node.services/-transaction-storage/get-transaction-with-status.html","searchKeys":["getTransactionWithStatus","abstract fun getTransactionWithStatus(id: SecureHash): SignedTransactionWithStatus?","net.corda.core.node.services.TransactionStorage.getTransactionWithStatus"]},{"name":"abstract fun getTrustedClassAttachments(className: String): List<Attachment>","description":"net.corda.core.internal.verification.VerificationSupport.getTrustedClassAttachments","location":"docs/net.corda.core.internal.verification/-verification-support/get-trusted-class-attachments.html","searchKeys":["getTrustedClassAttachments","abstract fun getTrustedClassAttachments(className: String): List<Attachment>","net.corda.core.internal.verification.VerificationSupport.getTrustedClassAttachments"]},{"name":"abstract fun getTx(): WireTransaction","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getTx","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/get-tx.html","searchKeys":["getTx","abstract fun getTx(): WireTransaction","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getTx"]},{"name":"abstract fun getTxBits(): SerializedBytes<CoreTransaction>","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getTxBits","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/get-tx-bits.html","searchKeys":["getTxBits","abstract fun getTxBits(): SerializedBytes<CoreTransaction>","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.getTxBits"]},{"name":"abstract fun getVaultTransactionNotes(txnId: SecureHash): Iterable<String>","description":"net.corda.core.messaging.CordaRPCOps.getVaultTransactionNotes","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/get-vault-transaction-notes.html","searchKeys":["getVaultTransactionNotes","abstract fun getVaultTransactionNotes(txnId: SecureHash): Iterable<String>","net.corda.core.messaging.CordaRPCOps.getVaultTransactionNotes"]},{"name":"abstract fun hasAttachment(attachmentId: AttachmentId): Boolean","description":"net.corda.core.node.services.AttachmentStorage.hasAttachment","location":"docs/net.corda.core.node.services/-attachment-storage/has-attachment.html","searchKeys":["hasAttachment","abstract fun hasAttachment(attachmentId: AttachmentId): Boolean","net.corda.core.node.services.AttachmentStorage.hasAttachment"]},{"name":"abstract fun hasListed(type: Class<*>): Boolean","description":"net.corda.core.serialization.ClassWhitelist.hasListed","location":"docs/net.corda.core.serialization/-class-whitelist/has-listed.html","searchKeys":["hasListed","abstract fun hasListed(type: Class<*>): Boolean","net.corda.core.serialization.ClassWhitelist.hasListed"]},{"name":"abstract fun hasParameters(hash: SecureHash): Boolean","description":"net.corda.core.internal.NetworkParametersStorage.hasParameters","location":"docs/net.corda.core.internal/-network-parameters-storage/has-parameters.html","searchKeys":["hasParameters","abstract fun hasParameters(hash: SecureHash): Boolean","net.corda.core.internal.NetworkParametersStorage.hasParameters"]},{"name":"abstract fun hasUnknownFields(): Boolean","description":"net.corda.core.cordapp.Cordapp.Info.hasUnknownFields","location":"docs/net.corda.core.cordapp/-cordapp/-info/has-unknown-fields.html","searchKeys":["hasUnknownFields","abstract fun hasUnknownFields(): Boolean","net.corda.core.cordapp.Cordapp.Info.hasUnknownFields"]},{"name":"abstract fun importAttachment(jar: InputStream): AttachmentId","description":"net.corda.core.node.services.AttachmentStorage.importAttachment","location":"docs/net.corda.core.node.services/-attachment-storage/import-attachment.html","searchKeys":["importAttachment","abstract fun importAttachment(jar: InputStream): AttachmentId","net.corda.core.node.services.AttachmentStorage.importAttachment"]},{"name":"abstract fun importAttachment(jar: InputStream, uploader: String, filename: String?): AttachmentId","description":"net.corda.core.node.services.AttachmentStorage.importAttachment","location":"docs/net.corda.core.node.services/-attachment-storage/import-attachment.html","searchKeys":["importAttachment","abstract fun importAttachment(jar: InputStream, uploader: String, filename: String?): AttachmentId","net.corda.core.node.services.AttachmentStorage.importAttachment"]},{"name":"abstract fun importOrGetAttachment(jar: InputStream): AttachmentId","description":"net.corda.core.node.services.AttachmentStorage.importOrGetAttachment","location":"docs/net.corda.core.node.services/-attachment-storage/import-or-get-attachment.html","searchKeys":["importOrGetAttachment","abstract fun importOrGetAttachment(jar: InputStream): AttachmentId","net.corda.core.node.services.AttachmentStorage.importOrGetAttachment"]},{"name":"abstract fun initiateFlow(destination: Destination, wellKnownParty: Party, serializedTelemetry: SerializedTelemetry?): FlowSession","description":"net.corda.core.internal.FlowStateMachine.initiateFlow","location":"docs/net.corda.core.internal/-flow-state-machine/initiate-flow.html","searchKeys":["initiateFlow","abstract fun initiateFlow(destination: Destination, wellKnownParty: Party, serializedTelemetry: SerializedTelemetry?): FlowSession","net.corda.core.internal.FlowStateMachine.initiateFlow"]},{"name":"abstract fun input(stateRef: StateRef)","description":"net.corda.testing.dsl.TransactionDSLInterpreter.input","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/input.html","searchKeys":["input","abstract fun input(stateRef: StateRef)","net.corda.testing.dsl.TransactionDSLInterpreter.input"]},{"name":"abstract fun isAttachmentTrusted(attachment: Attachment): Boolean","description":"net.corda.core.internal.verification.VerificationSupport.isAttachmentTrusted","location":"docs/net.corda.core.internal.verification/-verification-support/is-attachment-trusted.html","searchKeys":["isAttachmentTrusted","abstract fun isAttachmentTrusted(attachment: Attachment): Boolean","net.corda.core.internal.verification.VerificationSupport.isAttachmentTrusted"]},{"name":"abstract fun isEnabled(): Boolean","description":"net.corda.core.internal.telemetry.TelemetryComponent.isEnabled","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/is-enabled.html","searchKeys":["isEnabled","abstract fun isEnabled(): Boolean","net.corda.core.internal.telemetry.TelemetryComponent.isEnabled"]},{"name":"abstract fun isFlowsDrainingModeEnabled(): Boolean","description":"net.corda.core.messaging.CordaRPCOps.isFlowsDrainingModeEnabled","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/is-flows-draining-mode-enabled.html","searchKeys":["isFlowsDrainingModeEnabled","abstract fun isFlowsDrainingModeEnabled(): Boolean","net.corda.core.messaging.CordaRPCOps.isFlowsDrainingModeEnabled"]},{"name":"abstract fun isNotary(party: Party): Boolean","description":"net.corda.core.node.services.NetworkMapCacheBase.isNotary","location":"docs/net.corda.core.node.services/-network-map-cache-base/is-notary.html","searchKeys":["isNotary","abstract fun isNotary(party: Party): Boolean","net.corda.core.node.services.NetworkMapCacheBase.isNotary"]},{"name":"abstract fun isSatisfiedBy(attachment: Attachment): Boolean","description":"net.corda.core.contracts.AttachmentConstraint.isSatisfiedBy","location":"docs/net.corda.core.contracts/-attachment-constraint/is-satisfied-by.html","searchKeys":["isSatisfiedBy","abstract fun isSatisfiedBy(attachment: Attachment): Boolean","net.corda.core.contracts.AttachmentConstraint.isSatisfiedBy"]},{"name":"abstract fun isValidatingNotary(party: Party): Boolean","description":"net.corda.core.node.services.NetworkMapCacheBase.isValidatingNotary","location":"docs/net.corda.core.node.services/-network-map-cache-base/is-validating-notary.html","searchKeys":["isValidatingNotary","abstract fun isValidatingNotary(party: Party): Boolean","net.corda.core.node.services.NetworkMapCacheBase.isValidatingNotary"]},{"name":"abstract fun isWaitingForShutdown(): Boolean","description":"net.corda.core.messaging.CordaRPCOps.isWaitingForShutdown","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/is-waiting-for-shutdown.html","searchKeys":["isWaitingForShutdown","abstract fun isWaitingForShutdown(): Boolean","net.corda.core.messaging.CordaRPCOps.isWaitingForShutdown"]},{"name":"abstract fun jdbcSession(): Connection","description":"net.corda.core.node.ServiceHub.jdbcSession","location":"docs/net.corda.core.node/-service-hub/jdbc-session.html","searchKeys":["jdbcSession","abstract fun jdbcSession(): Connection","net.corda.core.node.ServiceHub.jdbcSession"]},{"name":"abstract fun killFlow(id: StateMachineRunId): Boolean","description":"net.corda.core.messaging.CordaRPCOps.killFlow","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/kill-flow.html","searchKeys":["killFlow","abstract fun killFlow(id: StateMachineRunId): Boolean","net.corda.core.messaging.CordaRPCOps.killFlow"]},{"name":"abstract fun loadContractAttachment(stateRef: StateRef): Attachment","description":"net.corda.core.node.ServicesForResolution.loadContractAttachment","location":"docs/net.corda.core.node/-services-for-resolution/load-contract-attachment.html","searchKeys":["loadContractAttachment","abstract fun loadContractAttachment(stateRef: StateRef): Attachment","net.corda.core.node.ServicesForResolution.loadContractAttachment"]},{"name":"abstract fun loadState(stateRef: StateRef): TransactionState<*>","description":"net.corda.core.node.ServicesForResolution.loadState","location":"docs/net.corda.core.node/-services-for-resolution/load-state.html","searchKeys":["loadState","abstract fun loadState(stateRef: StateRef): TransactionState<*>","net.corda.core.node.ServicesForResolution.loadState"]},{"name":"abstract fun loadStates(stateRefs: Set<StateRef>): Set<StateAndRef<ContractState>>","description":"net.corda.core.node.ServicesForResolution.loadStates","location":"docs/net.corda.core.node/-services-for-resolution/load-states.html","searchKeys":["loadStates","abstract fun loadStates(stateRefs: Set<StateRef>): Set<StateAndRef<ContractState>>","net.corda.core.node.ServicesForResolution.loadStates"]},{"name":"abstract fun lookup(hash: SecureHash): NetworkParameters?","description":"net.corda.core.node.services.NetworkParametersService.lookup","location":"docs/net.corda.core.node.services/-network-parameters-service/lookup.html","searchKeys":["lookup","abstract fun lookup(hash: SecureHash): NetworkParameters?","net.corda.core.node.services.NetworkParametersService.lookup"]},{"name":"abstract fun lookupSigned(hash: SecureHash): SignedDataWithCert<NetworkParameters>?","description":"net.corda.core.internal.NetworkParametersStorage.lookupSigned","location":"docs/net.corda.core.internal/-network-parameters-storage/lookup-signed.html","searchKeys":["lookupSigned","abstract fun lookupSigned(hash: SecureHash): SignedDataWithCert<NetworkParameters>?","net.corda.core.internal.NetworkParametersStorage.lookupSigned"]},{"name":"abstract fun name(): String","description":"net.corda.core.internal.telemetry.TelemetryComponent.name","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/name.html","searchKeys":["name","abstract fun name(): String","net.corda.core.internal.telemetry.TelemetryComponent.name"]},{"name":"abstract fun name(): String","description":"net.corda.core.internal.telemetry.TelemetryComponentId.name","location":"docs/net.corda.core.internal.telemetry/-telemetry-component-id/name.html","searchKeys":["name","abstract fun name(): String","net.corda.core.internal.telemetry.TelemetryComponentId.name"]},{"name":"abstract fun nameOrNull(): CordaX500Name?","description":"net.corda.core.identity.AbstractParty.nameOrNull","location":"docs/net.corda.core.identity/-abstract-party/name-or-null.html","searchKeys":["nameOrNull","abstract fun nameOrNull(): CordaX500Name?","net.corda.core.identity.AbstractParty.nameOrNull"]},{"name":"abstract fun net(other: N): N","description":"net.corda.finance.contracts.BilateralNettableState.net","location":"docs/net.corda.finance.contracts/-bilateral-nettable-state/net.html","searchKeys":["net","abstract fun net(other: N): N","net.corda.finance.contracts.BilateralNettableState.net"]},{"name":"abstract fun networkMapFeed(): DataFeed<List<NodeInfo>, NetworkMapCache.MapChange>","description":"net.corda.core.messaging.CordaRPCOps.networkMapFeed","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/network-map-feed.html","searchKeys":["networkMapFeed","abstract fun networkMapFeed(): DataFeed<List<NodeInfo>, NetworkMapCache.MapChange>","net.corda.core.messaging.CordaRPCOps.networkMapFeed"]},{"name":"abstract fun networkMapSnapshot(): List<NodeInfo>","description":"net.corda.core.messaging.CordaRPCOps.networkMapSnapshot","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/network-map-snapshot.html","searchKeys":["networkMapSnapshot","abstract fun networkMapSnapshot(): List<NodeInfo>","net.corda.core.messaging.CordaRPCOps.networkMapSnapshot"]},{"name":"abstract fun networkMapURL(): URL","description":"net.corda.testing.node.internal.CompatibilityZoneParams.networkMapURL","location":"docs/net.corda.testing.node.internal/-compatibility-zone-params/network-map-u-r-l.html","searchKeys":["networkMapURL","abstract fun networkMapURL(): URL","net.corda.testing.node.internal.CompatibilityZoneParams.networkMapURL"]},{"name":"abstract fun networkParametersFeed(): DataFeed<ParametersUpdateInfo?, ParametersUpdateInfo>","description":"net.corda.core.messaging.CordaRPCOps.networkParametersFeed","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/network-parameters-feed.html","searchKeys":["networkParametersFeed","abstract fun networkParametersFeed(): DataFeed<ParametersUpdateInfo?, ParametersUpdateInfo>","net.corda.core.messaging.CordaRPCOps.networkParametersFeed"]},{"name":"abstract fun nextFixingOf(): FixOf?","description":"net.corda.finance.contracts.FixableDealState.nextFixingOf","location":"docs/net.corda.finance.contracts/-fixable-deal-state/next-fixing-of.html","searchKeys":["nextFixingOf","abstract fun nextFixingOf(): FixOf?","net.corda.finance.contracts.FixableDealState.nextFixingOf"]},{"name":"abstract fun nextPort(): Int","description":"net.corda.testing.driver.PortAllocation.nextPort","location":"docs/net.corda.testing.driver/-port-allocation/next-port.html","searchKeys":["nextPort","abstract fun nextPort(): Int","net.corda.testing.driver.PortAllocation.nextPort"]},{"name":"abstract fun nextScheduledActivity(thisStateRef: StateRef, flowLogicRefFactory: FlowLogicRefFactory): ScheduledActivity?","description":"net.corda.core.contracts.SchedulableState.nextScheduledActivity","location":"docs/net.corda.core.contracts/-schedulable-state/next-scheduled-activity.html","searchKeys":["nextScheduledActivity","abstract fun nextScheduledActivity(thisStateRef: StateRef, flowLogicRefFactory: FlowLogicRefFactory): ScheduledActivity?","net.corda.core.contracts.SchedulableState.nextScheduledActivity"]},{"name":"abstract fun nodeDiagnosticInfo(): NodeDiagnosticInfo","description":"net.corda.core.messaging.CordaRPCOps.nodeDiagnosticInfo","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/node-diagnostic-info.html","searchKeys":["nodeDiagnosticInfo","abstract fun nodeDiagnosticInfo(): NodeDiagnosticInfo","net.corda.core.messaging.CordaRPCOps.nodeDiagnosticInfo"]},{"name":"abstract fun nodeInfo(): NodeInfo","description":"net.corda.core.messaging.CordaRPCOps.nodeInfo","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/node-info.html","searchKeys":["nodeInfo","abstract fun nodeInfo(): NodeInfo","net.corda.core.messaging.CordaRPCOps.nodeInfo"]},{"name":"abstract fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","description":"net.corda.client.jackson.JacksonSupport.PartyObjectMapper.nodeInfoFromParty","location":"docs/net.corda.client.jackson/-jackson-support/-party-object-mapper/node-info-from-party.html","searchKeys":["nodeInfoFromParty","abstract fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","net.corda.client.jackson.JacksonSupport.PartyObjectMapper.nodeInfoFromParty"]},{"name":"abstract fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","description":"net.corda.core.messaging.CordaRPCOps.nodeInfoFromParty","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/node-info-from-party.html","searchKeys":["nodeInfoFromParty","abstract fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","net.corda.core.messaging.CordaRPCOps.nodeInfoFromParty"]},{"name":"abstract fun nodeVersionInfo(): NodeVersionInfo","description":"net.corda.core.node.services.diagnostics.DiagnosticsService.nodeVersionInfo","location":"docs/net.corda.core.node.services.diagnostics/-diagnostics-service/node-version-info.html","searchKeys":["nodeVersionInfo","abstract fun nodeVersionInfo(): NodeVersionInfo","net.corda.core.node.services.diagnostics.DiagnosticsService.nodeVersionInfo"]},{"name":"abstract fun notaryIdentities(): List<Party>","description":"net.corda.core.messaging.CordaRPCOps.notaryIdentities","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/notary-identities.html","searchKeys":["notaryIdentities","abstract fun notaryIdentities(): List<Party>","net.corda.core.messaging.CordaRPCOps.notaryIdentities"]},{"name":"abstract fun notaryPartyFromX500Name(x500Name: CordaX500Name): Party?","description":"net.corda.core.messaging.CordaRPCOps.notaryPartyFromX500Name","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/notary-party-from-x500-name.html","searchKeys":["notaryPartyFromX500Name","abstract fun notaryPartyFromX500Name(x500Name: CordaX500Name): Party?","net.corda.core.messaging.CordaRPCOps.notaryPartyFromX500Name"]},{"name":"abstract fun notifyServerAndClose()","description":"net.corda.client.rpc.RPCConnection.notifyServerAndClose","location":"docs/net.corda.client.rpc/-r-p-c-connection/notify-server-and-close.html","searchKeys":["notifyServerAndClose","abstract fun notifyServerAndClose()","net.corda.client.rpc.RPCConnection.notifyServerAndClose"]},{"name":"abstract fun onConnect(context: RPCConnectionListener.ConnectionContext<I>)","description":"net.corda.client.rpc.ext.RPCConnectionListener.onConnect","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/on-connect.html","searchKeys":["onConnect","abstract fun onConnect(context: RPCConnectionListener.ConnectionContext<I>)","net.corda.client.rpc.ext.RPCConnectionListener.onConnect"]},{"name":"abstract fun onDisconnect(context: RPCConnectionListener.ConnectionContext<I>)","description":"net.corda.client.rpc.ext.RPCConnectionListener.onDisconnect","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/on-disconnect.html","searchKeys":["onDisconnect","abstract fun onDisconnect(context: RPCConnectionListener.ConnectionContext<I>)","net.corda.client.rpc.ext.RPCConnectionListener.onDisconnect"]},{"name":"abstract fun onPermanentFailure(context: RPCConnectionListener.ConnectionContext<I>)","description":"net.corda.client.rpc.ext.RPCConnectionListener.onPermanentFailure","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/on-permanent-failure.html","searchKeys":["onPermanentFailure","abstract fun onPermanentFailure(context: RPCConnectionListener.ConnectionContext<I>)","net.corda.client.rpc.ext.RPCConnectionListener.onPermanentFailure"]},{"name":"abstract fun onServiceLifecycleEvent(event: ServiceLifecycleEvent)","description":"net.corda.core.node.services.ServiceLifecycleObserver.onServiceLifecycleEvent","location":"docs/net.corda.core.node.services/-service-lifecycle-observer/on-service-lifecycle-event.html","searchKeys":["onServiceLifecycleEvent","abstract fun onServiceLifecycleEvent(event: ServiceLifecycleEvent)","net.corda.core.node.services.ServiceLifecycleObserver.onServiceLifecycleEvent"]},{"name":"abstract fun onTelemetryEvent(event: TelemetryEvent)","description":"net.corda.core.internal.telemetry.TelemetryComponent.onTelemetryEvent","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/on-telemetry-event.html","searchKeys":["onTelemetryEvent","abstract fun onTelemetryEvent(event: TelemetryEvent)","net.corda.core.internal.telemetry.TelemetryComponent.onTelemetryEvent"]},{"name":"abstract fun open(): InputStream","description":"net.corda.core.contracts.Attachment.open","location":"docs/net.corda.core.contracts/-attachment/open.html","searchKeys":["open","abstract fun open(): InputStream","net.corda.core.contracts.Attachment.open"]},{"name":"abstract fun openAttachment(id: AttachmentId): Attachment?","description":"net.corda.core.node.services.AttachmentStorage.openAttachment","location":"docs/net.corda.core.node.services/-attachment-storage/open-attachment.html","searchKeys":["openAttachment","abstract fun openAttachment(id: AttachmentId): Attachment?","net.corda.core.node.services.AttachmentStorage.openAttachment"]},{"name":"abstract fun openAttachment(id: SecureHash): InputStream","description":"net.corda.core.messaging.CordaRPCOps.openAttachment","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/open-attachment.html","searchKeys":["openAttachment","abstract fun openAttachment(id: SecureHash): InputStream","net.corda.core.messaging.CordaRPCOps.openAttachment"]},{"name":"abstract fun output(contractClassName: ContractClassName, label: String?, notary: Party, encumbrance: Int?, attachmentConstraint: AttachmentConstraint, contractState: ContractState)","description":"net.corda.testing.dsl.TransactionDSLInterpreter.output","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/output.html","searchKeys":["output","abstract fun output(contractClassName: ContractClassName, label: String?, notary: Party, encumbrance: Int?, attachmentConstraint: AttachmentConstraint, contractState: ContractState)","net.corda.testing.dsl.TransactionDSLInterpreter.output"]},{"name":"abstract fun parse(criteria: Q, sorting: S? = null): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.BaseQueryCriteriaParser.parse","location":"docs/net.corda.core.node.services.vault/-base-query-criteria-parser/parse.html","searchKeys":["parse","abstract fun parse(criteria: Q, sorting: S? = null): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.BaseQueryCriteriaParser.parse"]},{"name":"abstract fun parseAnd(left: Q, right: Q): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.BaseQueryCriteriaParser.parseAnd","location":"docs/net.corda.core.node.services.vault/-base-query-criteria-parser/parse-and.html","searchKeys":["parseAnd","abstract fun parseAnd(left: Q, right: Q): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.BaseQueryCriteriaParser.parseAnd"]},{"name":"abstract fun parseCriteria(criteria: AttachmentQueryCriteria.AttachmentsQueryCriteria): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser.parseCriteria","location":"docs/net.corda.core.node.services.vault/-attachments-query-criteria-parser/parse-criteria.html","searchKeys":["parseCriteria","abstract fun parseCriteria(criteria: AttachmentQueryCriteria.AttachmentsQueryCriteria): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser.parseCriteria"]},{"name":"abstract fun parseCriteria(criteria: QueryCriteria.CommonQueryCriteria): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria","location":"docs/net.corda.core.node.services.vault/-i-query-criteria-parser/parse-criteria.html","searchKeys":["parseCriteria","abstract fun parseCriteria(criteria: QueryCriteria.CommonQueryCriteria): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria"]},{"name":"abstract fun parseCriteria(criteria: QueryCriteria.FungibleAssetQueryCriteria): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria","location":"docs/net.corda.core.node.services.vault/-i-query-criteria-parser/parse-criteria.html","searchKeys":["parseCriteria","abstract fun parseCriteria(criteria: QueryCriteria.FungibleAssetQueryCriteria): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria"]},{"name":"abstract fun parseCriteria(criteria: QueryCriteria.LinearStateQueryCriteria): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria","location":"docs/net.corda.core.node.services.vault/-i-query-criteria-parser/parse-criteria.html","searchKeys":["parseCriteria","abstract fun parseCriteria(criteria: QueryCriteria.LinearStateQueryCriteria): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria"]},{"name":"abstract fun parseCriteria(criteria: QueryCriteria.VaultQueryCriteria): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria","location":"docs/net.corda.core.node.services.vault/-i-query-criteria-parser/parse-criteria.html","searchKeys":["parseCriteria","abstract fun parseCriteria(criteria: QueryCriteria.VaultQueryCriteria): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.IQueryCriteriaParser.parseCriteria"]},{"name":"abstract fun parseOr(left: Q, right: Q): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.BaseQueryCriteriaParser.parseOr","location":"docs/net.corda.core.node.services.vault/-base-query-criteria-parser/parse-or.html","searchKeys":["parseOr","abstract fun parseOr(left: Q, right: Q): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.BaseQueryCriteriaParser.parseOr"]},{"name":"abstract fun partiesFromName(query: String): Set<Party>","description":"net.corda.client.jackson.JacksonSupport.PartyObjectMapper.partiesFromName","location":"docs/net.corda.client.jackson/-jackson-support/-party-object-mapper/parties-from-name.html","searchKeys":["partiesFromName","abstract fun partiesFromName(query: String): Set<Party>","net.corda.client.jackson.JacksonSupport.PartyObjectMapper.partiesFromName"]},{"name":"abstract fun partiesFromName(query: String, exactMatch: Boolean): Set<Party>","description":"net.corda.core.messaging.CordaRPCOps.partiesFromName","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/parties-from-name.html","searchKeys":["partiesFromName","abstract fun partiesFromName(query: String, exactMatch: Boolean): Set<Party>","net.corda.core.messaging.CordaRPCOps.partiesFromName"]},{"name":"abstract fun partiesFromName(query: String, exactMatch: Boolean): Set<Party>","description":"net.corda.core.node.services.IdentityService.partiesFromName","location":"docs/net.corda.core.node.services/-identity-service/parties-from-name.html","searchKeys":["partiesFromName","abstract fun partiesFromName(query: String, exactMatch: Boolean): Set<Party>","net.corda.core.node.services.IdentityService.partiesFromName"]},{"name":"abstract fun partyFromKey(key: PublicKey): Party?","description":"net.corda.core.messaging.CordaRPCOps.partyFromKey","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/party-from-key.html","searchKeys":["partyFromKey","abstract fun partyFromKey(key: PublicKey): Party?","net.corda.core.messaging.CordaRPCOps.partyFromKey"]},{"name":"abstract fun partyFromKey(key: PublicKey): Party?","description":"net.corda.core.node.services.IdentityService.partyFromKey","location":"docs/net.corda.core.node.services/-identity-service/party-from-key.html","searchKeys":["partyFromKey","abstract fun partyFromKey(key: PublicKey): Party?","net.corda.core.node.services.IdentityService.partyFromKey"]},{"name":"abstract fun partyFromKey(owningKey: PublicKey): Party?","description":"net.corda.client.jackson.JacksonSupport.PartyObjectMapper.partyFromKey","location":"docs/net.corda.client.jackson/-jackson-support/-party-object-mapper/party-from-key.html","searchKeys":["partyFromKey","abstract fun partyFromKey(owningKey: PublicKey): Party?","net.corda.client.jackson.JacksonSupport.PartyObjectMapper.partyFromKey"]},{"name":"abstract fun persistFlowStackSnapshot(flowClass: Class<out FlowLogic<*>>)","description":"net.corda.core.internal.FlowStateMachine.persistFlowStackSnapshot","location":"docs/net.corda.core.internal/-flow-state-machine/persist-flow-stack-snapshot.html","searchKeys":["persistFlowStackSnapshot","abstract fun persistFlowStackSnapshot(flowClass: Class<out FlowLogic<*>>)","net.corda.core.internal.FlowStateMachine.persistFlowStackSnapshot"]},{"name":"abstract fun principal(): Principal","description":"net.corda.core.context.InvocationOrigin.principal","location":"docs/net.corda.core.context/-invocation-origin/principal.html","searchKeys":["principal","abstract fun principal(): Principal","net.corda.core.context.InvocationOrigin.principal"]},{"name":"abstract fun publicKeysForExternalId(externalId: UUID): Iterable<PublicKey>","description":"net.corda.core.node.services.IdentityService.publicKeysForExternalId","location":"docs/net.corda.core.node.services/-identity-service/public-keys-for-external-id.html","searchKeys":["publicKeysForExternalId","abstract fun publicKeysForExternalId(externalId: UUID): Iterable<PublicKey>","net.corda.core.node.services.IdentityService.publicKeysForExternalId"]},{"name":"abstract fun putSingleton(toBeTokenized: SerializeAsToken)","description":"net.corda.core.serialization.SerializeAsTokenContext.putSingleton","location":"docs/net.corda.core.serialization/-serialize-as-token-context/put-singleton.html","searchKeys":["putSingleton","abstract fun putSingleton(toBeTokenized: SerializeAsToken)","net.corda.core.serialization.SerializeAsTokenContext.putSingleton"]},{"name":"abstract fun queryAttachments(criteria: AttachmentQueryCriteria, sorting: AttachmentSort? = null): List<AttachmentId>","description":"net.corda.core.node.services.AttachmentStorage.queryAttachments","location":"docs/net.corda.core.node.services/-attachment-storage/query-attachments.html","searchKeys":["queryAttachments","abstract fun queryAttachments(criteria: AttachmentQueryCriteria, sorting: AttachmentSort? = null): List<AttachmentId>","net.corda.core.node.services.AttachmentStorage.queryAttachments"]},{"name":"abstract fun queryAttachments(query: AttachmentQueryCriteria, sorting: AttachmentSort?): List<AttachmentId>","description":"net.corda.core.messaging.CordaRPCOps.queryAttachments","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/query-attachments.html","searchKeys":["queryAttachments","abstract fun queryAttachments(query: AttachmentQueryCriteria, sorting: AttachmentSort?): List<AttachmentId>","net.corda.core.messaging.CordaRPCOps.queryAttachments"]},{"name":"abstract fun recordAuditEvent(eventType: String, comment: String, extraAuditData: Map<String, String>)","description":"net.corda.core.internal.FlowStateMachine.recordAuditEvent","location":"docs/net.corda.core.internal/-flow-state-machine/record-audit-event.html","searchKeys":["recordAuditEvent","abstract fun recordAuditEvent(eventType: String, comment: String, extraAuditData: Map<String, String>)","net.corda.core.internal.FlowStateMachine.recordAuditEvent"]},{"name":"abstract fun recordDependencies(usedStatesToRecord: StatesToRecord)","description":"net.corda.core.internal.TransactionsResolver.recordDependencies","location":"docs/net.corda.core.internal/-transactions-resolver/record-dependencies.html","searchKeys":["recordDependencies","abstract fun recordDependencies(usedStatesToRecord: StatesToRecord)","net.corda.core.internal.TransactionsResolver.recordDependencies"]},{"name":"abstract fun recordReceiverTransactionRecoveryMetadata(txnId: SecureHash, sender: CordaX500Name, txnMetadata: TransactionMetadata)","description":"net.corda.core.internal.ServiceHubCoreInternal.recordReceiverTransactionRecoveryMetadata","location":"docs/net.corda.core.internal/-service-hub-core-internal/record-receiver-transaction-recovery-metadata.html","searchKeys":["recordReceiverTransactionRecoveryMetadata","abstract fun recordReceiverTransactionRecoveryMetadata(txnId: SecureHash, sender: CordaX500Name, txnMetadata: TransactionMetadata)","net.corda.core.internal.ServiceHubCoreInternal.recordReceiverTransactionRecoveryMetadata"]},{"name":"abstract fun recordSenderTransactionRecoveryMetadata(txnId: SecureHash, txnMetadata: TransactionMetadata): ByteArray?","description":"net.corda.core.internal.ServiceHubCoreInternal.recordSenderTransactionRecoveryMetadata","location":"docs/net.corda.core.internal/-service-hub-core-internal/record-sender-transaction-recovery-metadata.html","searchKeys":["recordSenderTransactionRecoveryMetadata","abstract fun recordSenderTransactionRecoveryMetadata(txnId: SecureHash, txnMetadata: TransactionMetadata): ByteArray?","net.corda.core.internal.ServiceHubCoreInternal.recordSenderTransactionRecoveryMetadata"]},{"name":"abstract fun recordTransactions(statesToRecord: StatesToRecord, txs: Iterable<SignedTransaction>)","description":"net.corda.core.node.ServiceHub.recordTransactions","location":"docs/net.corda.core.node/-service-hub/record-transactions.html","searchKeys":["recordTransactions","abstract fun recordTransactions(statesToRecord: StatesToRecord, txs: Iterable<SignedTransaction>)","net.corda.core.node.ServiceHub.recordTransactions"]},{"name":"abstract fun recordUnnotarisedTransaction(txn: SignedTransaction)","description":"net.corda.core.internal.ServiceHubCoreInternal.recordUnnotarisedTransaction","location":"docs/net.corda.core.internal/-service-hub-core-internal/record-unnotarised-transaction.html","searchKeys":["recordUnnotarisedTransaction","abstract fun recordUnnotarisedTransaction(txn: SignedTransaction)","net.corda.core.internal.ServiceHubCoreInternal.recordUnnotarisedTransaction"]},{"name":"abstract fun ref(bytes: OpaqueBytes): PartyAndReference","description":"net.corda.core.identity.AbstractParty.ref","location":"docs/net.corda.core.identity/-abstract-party/ref.html","searchKeys":["ref","abstract fun ref(bytes: OpaqueBytes): PartyAndReference","net.corda.core.identity.AbstractParty.ref"]},{"name":"abstract fun reference(stateRef: StateRef)","description":"net.corda.testing.dsl.TransactionDSLInterpreter.reference","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/reference.html","searchKeys":["reference","abstract fun reference(stateRef: StateRef)","net.corda.testing.dsl.TransactionDSLInterpreter.reference"]},{"name":"abstract fun refreshNetworkMapCache()","description":"net.corda.core.messaging.CordaRPCOps.refreshNetworkMapCache","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/refresh-network-map-cache.html","searchKeys":["refreshNetworkMapCache","abstract fun refreshNetworkMapCache()","net.corda.core.messaging.CordaRPCOps.refreshNetworkMapCache"]},{"name":"abstract fun register(priority: Int = SERVICE_PRIORITY_NORMAL, observer: ServiceLifecycleObserver)","description":"net.corda.core.node.AppServiceHub.register","location":"docs/net.corda.core.node/-app-service-hub/register.html","searchKeys":["register","abstract fun register(priority: Int = SERVICE_PRIORITY_NORMAL, observer: ServiceLifecycleObserver)","net.corda.core.node.AppServiceHub.register"]},{"name":"abstract fun registerKey(publicKey: PublicKey, party: Party, externalId: UUID? = null)","description":"net.corda.core.node.services.IdentityService.registerKey","location":"docs/net.corda.core.node.services/-identity-service/register-key.html","searchKeys":["registerKey","abstract fun registerKey(publicKey: PublicKey, party: Party, externalId: UUID? = null)","net.corda.core.node.services.IdentityService.registerKey"]},{"name":"abstract fun registerUnloadHandler(runOnStop: () -> Unit)","description":"net.corda.core.node.ServiceHub.registerUnloadHandler","location":"docs/net.corda.core.node/-service-hub/register-unload-handler.html","searchKeys":["registerUnloadHandler","abstract fun registerUnloadHandler(runOnStop: () -> Unit)","net.corda.core.node.ServiceHub.registerUnloadHandler"]},{"name":"abstract fun registeredFlows(): List<String>","description":"net.corda.core.messaging.CordaRPCOps.registeredFlows","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/registered-flows.html","searchKeys":["registeredFlows","abstract fun registeredFlows(): List<String>","net.corda.core.messaging.CordaRPCOps.registeredFlows"]},{"name":"abstract fun removeAuthorisedContractUpgrade(ref: StateRef)","description":"net.corda.core.node.services.ContractUpgradeService.removeAuthorisedContractUpgrade","location":"docs/net.corda.core.node.services/-contract-upgrade-service/remove-authorised-contract-upgrade.html","searchKeys":["removeAuthorisedContractUpgrade","abstract fun removeAuthorisedContractUpgrade(ref: StateRef)","net.corda.core.node.services.ContractUpgradeService.removeAuthorisedContractUpgrade"]},{"name":"abstract fun removeClientId(clientId: String): Boolean","description":"net.corda.core.messaging.CordaRPCOps.removeClientId","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/remove-client-id.html","searchKeys":["removeClientId","abstract fun removeClientId(clientId: String): Boolean","net.corda.core.messaging.CordaRPCOps.removeClientId"]},{"name":"abstract fun removeClientIdAsAdmin(clientId: String): Boolean","description":"net.corda.core.messaging.CordaRPCOps.removeClientIdAsAdmin","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/remove-client-id-as-admin.html","searchKeys":["removeClientIdAsAdmin","abstract fun removeClientIdAsAdmin(clientId: String): Boolean","net.corda.core.messaging.CordaRPCOps.removeClientIdAsAdmin"]},{"name":"abstract fun removeUnnotarisedTransaction(id: SecureHash)","description":"net.corda.core.internal.ServiceHubCoreInternal.removeUnnotarisedTransaction","location":"docs/net.corda.core.internal/-service-hub-core-internal/remove-unnotarised-transaction.html","searchKeys":["removeUnnotarisedTransaction","abstract fun removeUnnotarisedTransaction(id: SecureHash)","net.corda.core.internal.ServiceHubCoreInternal.removeUnnotarisedTransaction"]},{"name":"abstract fun resolve(ltx: LedgerTransaction): StateAndRef<T>","description":"net.corda.core.contracts.StatePointer.resolve","location":"docs/net.corda.core.contracts/-state-pointer/resolve.html","searchKeys":["resolve","abstract fun resolve(ltx: LedgerTransaction): StateAndRef<T>","net.corda.core.contracts.StatePointer.resolve"]},{"name":"abstract fun resolve(services: ServiceHub): StateAndRef<T>","description":"net.corda.core.contracts.StatePointer.resolve","location":"docs/net.corda.core.contracts/-state-pointer/resolve.html","searchKeys":["resolve","abstract fun resolve(services: ServiceHub): StateAndRef<T>","net.corda.core.contracts.StatePointer.resolve"]},{"name":"abstract fun saveParameters(signedNetworkParameters: SignedDataWithCert<NetworkParameters>)","description":"net.corda.core.internal.NetworkParametersStorage.saveParameters","location":"docs/net.corda.core.internal/-network-parameters-storage/save-parameters.html","searchKeys":["saveParameters","abstract fun saveParameters(signedNetworkParameters: SignedDataWithCert<NetworkParameters>)","net.corda.core.internal.NetworkParametersStorage.saveParameters"]},{"name":"abstract fun send(message: <Error class: unknown class>, target: MessageRecipients, sequenceKey: Any)","description":"net.corda.testing.node.internal.MessagingServiceSpy.send","location":"docs/net.corda.testing.node.internal/-messaging-service-spy/send.html","searchKeys":["send","abstract fun send(message: <Error class: unknown class>, target: MessageRecipients, sequenceKey: Any)","net.corda.testing.node.internal.MessagingServiceSpy.send"]},{"name":"abstract fun send(payload: Any)","description":"net.corda.core.flows.FlowSession.send","location":"docs/net.corda.core.flows/-flow-session/send.html","searchKeys":["send","abstract fun send(payload: Any)","net.corda.core.flows.FlowSession.send"]},{"name":"abstract fun send(payload: Any, maySkipCheckpoint: Boolean)","description":"net.corda.core.flows.FlowSession.send","location":"docs/net.corda.core.flows/-flow-session/send.html","searchKeys":["send","abstract fun send(payload: Any, maySkipCheckpoint: Boolean)","net.corda.core.flows.FlowSession.send"]},{"name":"abstract fun serialize(payloads: Map<FlowSession, Any>): Map<FlowSession, SerializedBytes<Any>>","description":"net.corda.core.internal.FlowStateMachine.serialize","location":"docs/net.corda.core.internal/-flow-state-machine/serialize.html","searchKeys":["serialize","abstract fun serialize(payloads: Map<FlowSession, Any>): Map<FlowSession, SerializedBytes<Any>>","net.corda.core.internal.FlowStateMachine.serialize"]},{"name":"abstract fun set(value: V): Boolean","description":"net.corda.core.internal.concurrent.ValueOrException.set","location":"docs/net.corda.core.internal.concurrent/-value-or-exception/set.html","searchKeys":["set","abstract fun set(value: V): Boolean","net.corda.core.internal.concurrent.ValueOrException.set"]},{"name":"abstract fun setCause(cause: Throwable?)","description":"net.corda.core.CordaThrowable.setCause","location":"docs/net.corda.core/-corda-throwable/set-cause.html","searchKeys":["setCause","abstract fun setCause(cause: Throwable?)","net.corda.core.CordaThrowable.setCause"]},{"name":"abstract fun setCurrentParameters(currentSignedParameters: SignedDataWithCert<NetworkParameters>, trustRoots: Set<X509Certificate>)","description":"net.corda.core.internal.NetworkParametersStorage.setCurrentParameters","location":"docs/net.corda.core.internal/-network-parameters-storage/set-current-parameters.html","searchKeys":["setCurrentParameters","abstract fun setCurrentParameters(currentSignedParameters: SignedDataWithCert<NetworkParameters>, trustRoots: Set<X509Certificate>)","net.corda.core.internal.NetworkParametersStorage.setCurrentParameters"]},{"name":"abstract fun setCurrentTelemetryId(id: UUID)","description":"net.corda.core.internal.telemetry.TelemetryComponent.setCurrentTelemetryId","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/set-current-telemetry-id.html","searchKeys":["setCurrentTelemetryId","abstract fun setCurrentTelemetryId(id: UUID)","net.corda.core.internal.telemetry.TelemetryComponent.setCurrentTelemetryId"]},{"name":"abstract fun setException(t: Throwable): Boolean","description":"net.corda.core.internal.concurrent.ValueOrException.setException","location":"docs/net.corda.core.internal.concurrent/-value-or-exception/set-exception.html","searchKeys":["setException","abstract fun setException(t: Throwable): Boolean","net.corda.core.internal.concurrent.ValueOrException.setException"]},{"name":"abstract fun setFlowsDrainingModeEnabled(enabled: Boolean)","description":"net.corda.core.messaging.CordaRPCOps.setFlowsDrainingModeEnabled","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/set-flows-draining-mode-enabled.html","searchKeys":["setFlowsDrainingModeEnabled","abstract fun setFlowsDrainingModeEnabled(enabled: Boolean)","net.corda.core.messaging.CordaRPCOps.setFlowsDrainingModeEnabled"]},{"name":"abstract fun setMessage(message: String?)","description":"net.corda.core.CordaThrowable.setMessage","location":"docs/net.corda.core/-corda-throwable/set-message.html","searchKeys":["setMessage","abstract fun setMessage(message: String?)","net.corda.core.CordaThrowable.setMessage"]},{"name":"abstract fun shutdown()","description":"net.corda.core.messaging.CordaRPCOps.shutdown","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/shutdown.html","searchKeys":["shutdown","abstract fun shutdown()","net.corda.core.messaging.CordaRPCOps.shutdown"]},{"name":"abstract fun shutdown()","description":"net.corda.testing.node.internal.InternalDriverDSL.shutdown","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/shutdown.html","searchKeys":["shutdown","abstract fun shutdown()","net.corda.testing.node.internal.InternalDriverDSL.shutdown"]},{"name":"abstract fun shutdown()","description":"net.corda.testing.node.internal.ShutdownManager.Follower.shutdown","location":"docs/net.corda.testing.node.internal/-shutdown-manager/-follower/shutdown.html","searchKeys":["shutdown","abstract fun shutdown()","net.corda.testing.node.internal.ShutdownManager.Follower.shutdown"]},{"name":"abstract fun sign(bytes: ByteArray, publicKey: PublicKey): DigitalSignature.WithKey","description":"net.corda.core.node.services.KeyManagementService.sign","location":"docs/net.corda.core.node.services/-key-management-service/sign.html","searchKeys":["sign","abstract fun sign(bytes: ByteArray, publicKey: PublicKey): DigitalSignature.WithKey","net.corda.core.node.services.KeyManagementService.sign"]},{"name":"abstract fun sign(signableData: SignableData, publicKey: PublicKey): TransactionSignature","description":"net.corda.core.node.services.KeyManagementService.sign","location":"docs/net.corda.core.node.services/-key-management-service/sign.html","searchKeys":["sign","abstract fun sign(signableData: SignableData, publicKey: PublicKey): TransactionSignature","net.corda.core.node.services.KeyManagementService.sign"]},{"name":"abstract fun softLockRelease(lockId: UUID, stateRefs: NonEmptySet<StateRef>? = null)","description":"net.corda.core.node.services.VaultService.softLockRelease","location":"docs/net.corda.core.node.services/-vault-service/soft-lock-release.html","searchKeys":["softLockRelease","abstract fun softLockRelease(lockId: UUID, stateRefs: NonEmptySet<StateRef>? = null)","net.corda.core.node.services.VaultService.softLockRelease"]},{"name":"abstract fun softLockReserve(lockId: UUID, stateRefs: NonEmptySet<StateRef>)","description":"net.corda.core.node.services.VaultService.softLockReserve","location":"docs/net.corda.core.node.services/-vault-service/soft-lock-reserve.html","searchKeys":["softLockReserve","abstract fun softLockReserve(lockId: UUID, stateRefs: NonEmptySet<StateRef>)","net.corda.core.node.services.VaultService.softLockReserve"]},{"name":"abstract fun start()","description":"net.corda.core.internal.notary.NotaryService.start","location":"docs/net.corda.core.internal.notary/-notary-service/start.html","searchKeys":["start","abstract fun start()","net.corda.core.internal.notary.NotaryService.start"]},{"name":"abstract fun start()","description":"net.corda.testing.node.internal.InternalDriverDSL.start","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/start.html","searchKeys":["start","abstract fun start()","net.corda.testing.node.internal.InternalDriverDSL.start"]},{"name":"abstract fun startNode(parameters: NodeParameters = NodeParameters(), bytemanPort: Int? = null): CordaFuture<NodeHandle>","description":"net.corda.testing.node.internal.InternalDriverDSL.startNode","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/start-node.html","searchKeys":["startNode","abstract fun startNode(parameters: NodeParameters = NodeParameters(), bytemanPort: Int? = null): CordaFuture<NodeHandle>","net.corda.testing.node.internal.InternalDriverDSL.startNode"]},{"name":"abstract fun startNode(parameters: NodeParameters): CordaFuture<NodeHandle>","description":"net.corda.testing.driver.DriverDSL.startNode","location":"docs/net.corda.testing.driver/-driver-d-s-l/start-node.html","searchKeys":["startNode","abstract fun startNode(parameters: NodeParameters): CordaFuture<NodeHandle>","net.corda.testing.driver.DriverDSL.startNode"]},{"name":"abstract fun startWebserver(handle: NodeHandle, maximumHeapSize: String): CordaFuture<WebserverHandle>","description":"net.corda.testing.driver.DriverDSL.startWebserver","location":"docs/net.corda.testing.driver/-driver-d-s-l/start-webserver.html","searchKeys":["startWebserver","abstract fun startWebserver(handle: NodeHandle, maximumHeapSize: String): CordaFuture<WebserverHandle>","net.corda.testing.driver.DriverDSL.startWebserver"]},{"name":"abstract fun stateMachineRecordedTransactionMappingFeed(): DataFeed<List<StateMachineTransactionMapping>, StateMachineTransactionMapping>","description":"net.corda.core.messaging.CordaRPCOps.stateMachineRecordedTransactionMappingFeed","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/state-machine-recorded-transaction-mapping-feed.html","searchKeys":["stateMachineRecordedTransactionMappingFeed","abstract fun stateMachineRecordedTransactionMappingFeed(): DataFeed<List<StateMachineTransactionMapping>, StateMachineTransactionMapping>","net.corda.core.messaging.CordaRPCOps.stateMachineRecordedTransactionMappingFeed"]},{"name":"abstract fun stateMachineRecordedTransactionMappingSnapshot(): List<StateMachineTransactionMapping>","description":"net.corda.core.messaging.CordaRPCOps.stateMachineRecordedTransactionMappingSnapshot","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/state-machine-recorded-transaction-mapping-snapshot.html","searchKeys":["stateMachineRecordedTransactionMappingSnapshot","abstract fun stateMachineRecordedTransactionMappingSnapshot(): List<StateMachineTransactionMapping>","net.corda.core.messaging.CordaRPCOps.stateMachineRecordedTransactionMappingSnapshot"]},{"name":"abstract fun stateMachinesFeed(): DataFeed<List<StateMachineInfo>, StateMachineUpdate>","description":"net.corda.core.messaging.CordaRPCOps.stateMachinesFeed","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/state-machines-feed.html","searchKeys":["stateMachinesFeed","abstract fun stateMachinesFeed(): DataFeed<List<StateMachineInfo>, StateMachineUpdate>","net.corda.core.messaging.CordaRPCOps.stateMachinesFeed"]},{"name":"abstract fun stateMachinesSnapshot(): List<StateMachineInfo>","description":"net.corda.core.messaging.CordaRPCOps.stateMachinesSnapshot","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/state-machines-snapshot.html","searchKeys":["stateMachinesSnapshot","abstract fun stateMachinesSnapshot(): List<StateMachineInfo>","net.corda.core.messaging.CordaRPCOps.stateMachinesSnapshot"]},{"name":"abstract fun stop()","description":"net.corda.core.internal.notary.NotaryService.stop","location":"docs/net.corda.core.internal.notary/-notary-service/stop.html","searchKeys":["stop","abstract fun stop()","net.corda.core.internal.notary.NotaryService.stop"]},{"name":"abstract fun stop()","description":"net.corda.testing.driver.NodeHandle.stop","location":"docs/net.corda.testing.driver/-node-handle/stop.html","searchKeys":["stop","abstract fun stop()","net.corda.testing.driver.NodeHandle.stop"]},{"name":"abstract fun storeAuthorisedContractUpgrade(ref: StateRef, upgradedContractClass: Class<out UpgradedContract<*, *>>)","description":"net.corda.core.node.services.ContractUpgradeService.storeAuthorisedContractUpgrade","location":"docs/net.corda.core.node.services/-contract-upgrade-service/store-authorised-contract-upgrade.html","searchKeys":["storeAuthorisedContractUpgrade","abstract fun storeAuthorisedContractUpgrade(ref: StateRef, upgradedContractClass: Class<out UpgradedContract<*, *>>)","net.corda.core.node.services.ContractUpgradeService.storeAuthorisedContractUpgrade"]},{"name":"abstract fun supportedSchemas(): Iterable<MappedSchema>","description":"net.corda.core.schemas.QueryableState.supportedSchemas","location":"docs/net.corda.core.schemas/-queryable-state/supported-schemas.html","searchKeys":["supportedSchemas","abstract fun supportedSchemas(): Iterable<MappedSchema>","net.corda.core.schemas.QueryableState.supportedSchemas"]},{"name":"abstract fun terminate(drainPendingFlows: Boolean = false)","description":"net.corda.core.messaging.CordaRPCOps.terminate","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/terminate.html","searchKeys":["terminate","abstract fun terminate(drainPendingFlows: Boolean = false)","net.corda.core.messaging.CordaRPCOps.terminate"]},{"name":"abstract fun timeWindow(data: TimeWindow)","description":"net.corda.testing.dsl.TransactionDSLInterpreter.timeWindow","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/time-window.html","searchKeys":["timeWindow","abstract fun timeWindow(data: TimeWindow)","net.corda.testing.dsl.TransactionDSLInterpreter.timeWindow"]},{"name":"abstract fun toCompletableFuture(): CompletableFuture<V>","description":"net.corda.core.concurrent.CordaFuture.toCompletableFuture","location":"docs/net.corda.core.concurrent/-corda-future/to-completable-future.html","searchKeys":["toCompletableFuture","abstract fun toCompletableFuture(): CompletableFuture<V>","net.corda.core.concurrent.CordaFuture.toCompletableFuture"]},{"name":"abstract fun toFlowLogic(ref: FlowLogicRef): FlowLogic<*>","description":"net.corda.core.flows.FlowLogicRefFactory.toFlowLogic","location":"docs/net.corda.core.flows/-flow-logic-ref-factory/to-flow-logic.html","searchKeys":["toFlowLogic","abstract fun toFlowLogic(ref: FlowLogicRef): FlowLogic<*>","net.corda.core.flows.FlowLogicRefFactory.toFlowLogic"]},{"name":"abstract fun toProxy(obj: OBJ): PROXY","description":"net.corda.core.serialization.CheckpointCustomSerializer.toProxy","location":"docs/net.corda.core.serialization/-checkpoint-custom-serializer/to-proxy.html","searchKeys":["toProxy","abstract fun toProxy(obj: OBJ): PROXY","net.corda.core.serialization.CheckpointCustomSerializer.toProxy"]},{"name":"abstract fun toProxy(obj: OBJ): PROXY","description":"net.corda.core.serialization.SerializationCustomSerializer.toProxy","location":"docs/net.corda.core.serialization/-serialization-custom-serializer/to-proxy.html","searchKeys":["toProxy","abstract fun toProxy(obj: OBJ): PROXY","net.corda.core.serialization.SerializationCustomSerializer.toProxy"]},{"name":"abstract fun toToken(context: SerializeAsTokenContext): SerializationToken","description":"net.corda.core.serialization.SerializeAsToken.toToken","location":"docs/net.corda.core.serialization/-serialize-as-token/to-token.html","searchKeys":["toToken","abstract fun toToken(context: SerializeAsTokenContext): SerializationToken","net.corda.core.serialization.SerializeAsToken.toToken"]},{"name":"abstract fun track(): DataFeed<List<NodeInfo>, NetworkMapCache.MapChange>","description":"net.corda.core.node.services.NetworkMapCacheBase.track","location":"docs/net.corda.core.node.services/-network-map-cache-base/track.html","searchKeys":["track","abstract fun track(): DataFeed<List<NodeInfo>, NetworkMapCache.MapChange>","net.corda.core.node.services.NetworkMapCacheBase.track"]},{"name":"abstract fun track(): DataFeed<List<SignedTransaction>, SignedTransaction>","description":"net.corda.core.node.services.TransactionStorage.track","location":"docs/net.corda.core.node.services/-transaction-storage/track.html","searchKeys":["track","abstract fun track(): DataFeed<List<SignedTransaction>, SignedTransaction>","net.corda.core.node.services.TransactionStorage.track"]},{"name":"abstract fun trackTransaction(id: SecureHash): CordaFuture<SignedTransaction>","description":"net.corda.core.node.services.TransactionStorage.trackTransaction","location":"docs/net.corda.core.node.services/-transaction-storage/track-transaction.html","searchKeys":["trackTransaction","abstract fun trackTransaction(id: SecureHash): CordaFuture<SignedTransaction>","net.corda.core.node.services.TransactionStorage.trackTransaction"]},{"name":"abstract fun unfollow()","description":"net.corda.testing.node.internal.ShutdownManager.Follower.unfollow","location":"docs/net.corda.testing.node.internal/-shutdown-manager/-follower/unfollow.html","searchKeys":["unfollow","abstract fun unfollow()","net.corda.testing.node.internal.ShutdownManager.Follower.unfollow"]},{"name":"abstract fun updateTimedFlowTimeout(timeoutSeconds: Long)","description":"net.corda.core.internal.FlowStateMachine.updateTimedFlowTimeout","location":"docs/net.corda.core.internal/-flow-state-machine/update-timed-flow-timeout.html","searchKeys":["updateTimedFlowTimeout","abstract fun updateTimedFlowTimeout(timeoutSeconds: Long)","net.corda.core.internal.FlowStateMachine.updateTimedFlowTimeout"]},{"name":"abstract fun upgrade(state: OldState): NewState","description":"net.corda.core.contracts.UpgradedContract.upgrade","location":"docs/net.corda.core.contracts/-upgraded-contract/upgrade.html","searchKeys":["upgrade","abstract fun upgrade(state: OldState): NewState","net.corda.core.contracts.UpgradedContract.upgrade"]},{"name":"abstract fun uploadAttachment(jar: InputStream): SecureHash","description":"net.corda.core.messaging.CordaRPCOps.uploadAttachment","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/upload-attachment.html","searchKeys":["uploadAttachment","abstract fun uploadAttachment(jar: InputStream): SecureHash","net.corda.core.messaging.CordaRPCOps.uploadAttachment"]},{"name":"abstract fun uploadAttachmentWithMetadata(jar: InputStream, uploader: String, filename: String): SecureHash","description":"net.corda.core.messaging.CordaRPCOps.uploadAttachmentWithMetadata","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/upload-attachment-with-metadata.html","searchKeys":["uploadAttachmentWithMetadata","abstract fun uploadAttachmentWithMetadata(jar: InputStream, uploader: String, filename: String): SecureHash","net.corda.core.messaging.CordaRPCOps.uploadAttachmentWithMetadata"]},{"name":"abstract fun validate(data: T): R","description":"net.corda.core.utilities.UntrustworthyData.Validator.validate","location":"docs/net.corda.core.utilities/-untrustworthy-data/-validator/validate.html","searchKeys":["validate","abstract fun validate(data: T): R","net.corda.core.utilities.UntrustworthyData.Validator.validate"]},{"name":"abstract fun validate(legalName: T)","description":"net.corda.core.internal.LegalNameValidator.Rule.validate","location":"docs/net.corda.core.internal/-legal-name-validator/-rule/validate.html","searchKeys":["validate","abstract fun validate(legalName: T)","net.corda.core.internal.LegalNameValidator.Rule.validate"]},{"name":"abstract fun verifies(): EnforceVerifyOrFail","description":"net.corda.testing.dsl.Verifies.verifies","location":"docs/net.corda.testing.dsl/-verifies/verifies.html","searchKeys":["verifies","abstract fun verifies(): EnforceVerifyOrFail","net.corda.testing.dsl.Verifies.verifies"]},{"name":"abstract fun verify()","description":"net.corda.core.internal.verification.Verifier.verify","location":"docs/net.corda.core.internal.verification/-verifier/verify.html","searchKeys":["verify","abstract fun verify()","net.corda.core.internal.verification.Verifier.verify"]},{"name":"abstract fun verify(tx: LedgerTransaction)","description":"net.corda.core.contracts.Contract.verify","location":"docs/net.corda.core.contracts/-contract/verify.html","searchKeys":["verify","abstract fun verify(tx: LedgerTransaction)","net.corda.core.contracts.Contract.verify"]},{"name":"abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate?","description":"net.corda.core.node.services.IdentityService.verifyAndRegisterIdentity","location":"docs/net.corda.core.node.services/-identity-service/verify-and-register-identity.html","searchKeys":["verifyAndRegisterIdentity","abstract fun verifyAndRegisterIdentity(identity: PartyAndCertificate): PartyAndCertificate?","net.corda.core.node.services.IdentityService.verifyAndRegisterIdentity"]},{"name":"abstract fun verifyTransaction(ctx: CoreTransaction)","description":"net.corda.core.internal.verification.ExternalVerifierHandle.verifyTransaction","location":"docs/net.corda.core.internal.verification/-external-verifier-handle/verify-transaction.html","searchKeys":["verifyTransaction","abstract fun verifyTransaction(ctx: CoreTransaction)","net.corda.core.internal.verification.ExternalVerifierHandle.verifyTransaction"]},{"name":"abstract fun verifyTransaction(requestPayload: NotarisationPayload)","description":"net.corda.core.internal.notary.NotaryServiceFlow.verifyTransaction","location":"docs/net.corda.core.internal.notary/-notary-service-flow/verify-transaction.html","searchKeys":["verifyTransaction","abstract fun verifyTransaction(requestPayload: NotarisationPayload)","net.corda.core.internal.notary.NotaryServiceFlow.verifyTransaction"]},{"name":"abstract fun visit(parser: P): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.GenericQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/visit.html","searchKeys":["visit","abstract fun visit(parser: P): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.GenericQueryCriteria.visit"]},{"name":"abstract fun waitFor()","description":"net.corda.testing.node.internal.DriverDSLImpl.Waitable.waitFor","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-waitable/wait-for.html","searchKeys":["waitFor","abstract fun waitFor()","net.corda.testing.node.internal.DriverDSLImpl.Waitable.waitFor"]},{"name":"abstract fun waitUntilNetworkReady(): CordaFuture<Void?>","description":"net.corda.core.messaging.CordaRPCOps.waitUntilNetworkReady","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/wait-until-network-ready.html","searchKeys":["waitUntilNetworkReady","abstract fun waitUntilNetworkReady(): CordaFuture<Void?>","net.corda.core.messaging.CordaRPCOps.waitUntilNetworkReady"]},{"name":"abstract fun wellKnownPartyFromAnonymous(party: AbstractParty): Party?","description":"net.corda.core.messaging.CordaRPCOps.wellKnownPartyFromAnonymous","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/well-known-party-from-anonymous.html","searchKeys":["wellKnownPartyFromAnonymous","abstract fun wellKnownPartyFromAnonymous(party: AbstractParty): Party?","net.corda.core.messaging.CordaRPCOps.wellKnownPartyFromAnonymous"]},{"name":"abstract fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","description":"net.corda.client.jackson.JacksonSupport.PartyObjectMapper.wellKnownPartyFromX500Name","location":"docs/net.corda.client.jackson/-jackson-support/-party-object-mapper/well-known-party-from-x500-name.html","searchKeys":["wellKnownPartyFromX500Name","abstract fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","net.corda.client.jackson.JacksonSupport.PartyObjectMapper.wellKnownPartyFromX500Name"]},{"name":"abstract fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","description":"net.corda.core.node.services.IdentityService.wellKnownPartyFromX500Name","location":"docs/net.corda.core.node.services/-identity-service/well-known-party-from-x500-name.html","searchKeys":["wellKnownPartyFromX500Name","abstract fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","net.corda.core.node.services.IdentityService.wellKnownPartyFromX500Name"]},{"name":"abstract fun wellKnownPartyFromX500Name(x500Name: CordaX500Name): Party?","description":"net.corda.core.messaging.CordaRPCOps.wellKnownPartyFromX500Name","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/well-known-party-from-x500-name.html","searchKeys":["wellKnownPartyFromX500Name","abstract fun wellKnownPartyFromX500Name(x500Name: CordaX500Name): Party?","net.corda.core.messaging.CordaRPCOps.wellKnownPartyFromX500Name"]},{"name":"abstract fun withAttachmentsClassLoader(attachmentHashes: List<SecureHash>): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withAttachmentsClassLoader","location":"docs/net.corda.core.serialization/-serialization-context/with-attachments-class-loader.html","searchKeys":["withAttachmentsClassLoader","abstract fun withAttachmentsClassLoader(attachmentHashes: List<SecureHash>): SerializationContext","net.corda.core.serialization.SerializationContext.withAttachmentsClassLoader"]},{"name":"abstract fun withCheckpointCustomSerializers(checkpointCustomSerializers: Iterable<CheckpointCustomSerializer<*, *>>): CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.withCheckpointCustomSerializers","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/with-checkpoint-custom-serializers.html","searchKeys":["withCheckpointCustomSerializers","abstract fun withCheckpointCustomSerializers(checkpointCustomSerializers: Iterable<CheckpointCustomSerializer<*, *>>): CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext.withCheckpointCustomSerializers"]},{"name":"abstract fun withClassLoader(classLoader: ClassLoader): CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.withClassLoader","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/with-class-loader.html","searchKeys":["withClassLoader","abstract fun withClassLoader(classLoader: ClassLoader): CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext.withClassLoader"]},{"name":"abstract fun withClassLoader(classLoader: ClassLoader): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withClassLoader","location":"docs/net.corda.core.serialization/-serialization-context/with-class-loader.html","searchKeys":["withClassLoader","abstract fun withClassLoader(classLoader: ClassLoader): SerializationContext","net.corda.core.serialization.SerializationContext.withClassLoader"]},{"name":"abstract fun withConfig(config: Map<String, Any>): TestCordapp","description":"net.corda.testing.node.TestCordapp.withConfig","location":"docs/net.corda.testing.node/-test-cordapp/with-config.html","searchKeys":["withConfig","abstract fun withConfig(config: Map<String, Any>): TestCordapp","net.corda.testing.node.TestCordapp.withConfig"]},{"name":"abstract fun withCustomSerializers(serializers: Set<SerializationCustomSerializer<*, *>>): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withCustomSerializers","location":"docs/net.corda.core.serialization/-serialization-context/with-custom-serializers.html","searchKeys":["withCustomSerializers","abstract fun withCustomSerializers(serializers: Set<SerializationCustomSerializer<*, *>>): SerializationContext","net.corda.core.serialization.SerializationContext.withCustomSerializers"]},{"name":"abstract fun withEncoding(encoding: SerializationEncoding?): CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.withEncoding","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/with-encoding.html","searchKeys":["withEncoding","abstract fun withEncoding(encoding: SerializationEncoding?): CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext.withEncoding"]},{"name":"abstract fun withEncoding(encoding: SerializationEncoding?): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withEncoding","location":"docs/net.corda.core.serialization/-serialization-context/with-encoding.html","searchKeys":["withEncoding","abstract fun withEncoding(encoding: SerializationEncoding?): SerializationContext","net.corda.core.serialization.SerializationContext.withEncoding"]},{"name":"abstract fun withEncodingWhitelist(encodingWhitelist: EncodingWhitelist): CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.withEncodingWhitelist","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/with-encoding-whitelist.html","searchKeys":["withEncodingWhitelist","abstract fun withEncodingWhitelist(encodingWhitelist: EncodingWhitelist): CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext.withEncodingWhitelist"]},{"name":"abstract fun withEncodingWhitelist(encodingWhitelist: EncodingWhitelist): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withEncodingWhitelist","location":"docs/net.corda.core.serialization/-serialization-context/with-encoding-whitelist.html","searchKeys":["withEncodingWhitelist","abstract fun withEncodingWhitelist(encodingWhitelist: EncodingWhitelist): SerializationContext","net.corda.core.serialization.SerializationContext.withEncodingWhitelist"]},{"name":"abstract fun withEntityManager(block: Consumer<<Error class: unknown class>>)","description":"net.corda.core.node.ServiceHub.withEntityManager","location":"docs/net.corda.core.node/-service-hub/with-entity-manager.html","searchKeys":["withEntityManager","abstract fun withEntityManager(block: Consumer<<Error class: unknown class>>)","net.corda.core.node.ServiceHub.withEntityManager"]},{"name":"abstract fun withLenientCarpenter(): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withLenientCarpenter","location":"docs/net.corda.core.serialization/-serialization-context/with-lenient-carpenter.html","searchKeys":["withLenientCarpenter","abstract fun withLenientCarpenter(): SerializationContext","net.corda.core.serialization.SerializationContext.withLenientCarpenter"]},{"name":"abstract fun withNewOwner(newOwner: AbstractParty): CommandAndState","description":"net.corda.core.contracts.OwnableState.withNewOwner","location":"docs/net.corda.core.contracts/-ownable-state/with-new-owner.html","searchKeys":["withNewOwner","abstract fun withNewOwner(newOwner: AbstractParty): CommandAndState","net.corda.core.contracts.OwnableState.withNewOwner"]},{"name":"abstract fun withNewOwnerAndAmount(newAmount: Amount<Issued<T>>, newOwner: AbstractParty): FungibleAsset<T>","description":"net.corda.core.contracts.FungibleAsset.withNewOwnerAndAmount","location":"docs/net.corda.core.contracts/-fungible-asset/with-new-owner-and-amount.html","searchKeys":["withNewOwnerAndAmount","abstract fun withNewOwnerAndAmount(newAmount: Amount<Issued<T>>, newOwner: AbstractParty): FungibleAsset<T>","net.corda.core.contracts.FungibleAsset.withNewOwnerAndAmount"]},{"name":"abstract fun withOnlyJarContents(): TestCordappInternal","description":"net.corda.testing.node.internal.TestCordappInternal.withOnlyJarContents","location":"docs/net.corda.testing.node.internal/-test-cordapp-internal/with-only-jar-contents.html","searchKeys":["withOnlyJarContents","abstract fun withOnlyJarContents(): TestCordappInternal","net.corda.testing.node.internal.TestCordappInternal.withOnlyJarContents"]},{"name":"abstract fun withPreferredSerializationVersion(magic: SerializationMagic): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withPreferredSerializationVersion","location":"docs/net.corda.core.serialization/-serialization-context/with-preferred-serialization-version.html","searchKeys":["withPreferredSerializationVersion","abstract fun withPreferredSerializationVersion(magic: SerializationMagic): SerializationContext","net.corda.core.serialization.SerializationContext.withPreferredSerializationVersion"]},{"name":"abstract fun withPreventDataLoss(): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withPreventDataLoss","location":"docs/net.corda.core.serialization/-serialization-context/with-prevent-data-loss.html","searchKeys":["withPreventDataLoss","abstract fun withPreventDataLoss(): SerializationContext","net.corda.core.serialization.SerializationContext.withPreventDataLoss"]},{"name":"abstract fun withProperties(extraProperties: Map<Any, Any>): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withProperties","location":"docs/net.corda.core.serialization/-serialization-context/with-properties.html","searchKeys":["withProperties","abstract fun withProperties(extraProperties: Map<Any, Any>): SerializationContext","net.corda.core.serialization.SerializationContext.withProperties"]},{"name":"abstract fun withProperty(property: Any, value: Any): CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.withProperty","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/with-property.html","searchKeys":["withProperty","abstract fun withProperty(property: Any, value: Any): CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext.withProperty"]},{"name":"abstract fun withProperty(property: Any, value: Any): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withProperty","location":"docs/net.corda.core.serialization/-serialization-context/with-property.html","searchKeys":["withProperty","abstract fun withProperty(property: Any, value: Any): SerializationContext","net.corda.core.serialization.SerializationContext.withProperty"]},{"name":"abstract fun withWhitelisted(clazz: Class<*>): CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.withWhitelisted","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/with-whitelisted.html","searchKeys":["withWhitelisted","abstract fun withWhitelisted(clazz: Class<*>): CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext.withWhitelisted"]},{"name":"abstract fun withWhitelisted(clazz: Class<*>): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withWhitelisted","location":"docs/net.corda.core.serialization/-serialization-context/with-whitelisted.html","searchKeys":["withWhitelisted","abstract fun withWhitelisted(clazz: Class<*>): SerializationContext","net.corda.core.serialization.SerializationContext.withWhitelisted"]},{"name":"abstract fun withoutCarpenter(): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withoutCarpenter","location":"docs/net.corda.core.serialization/-serialization-context/without-carpenter.html","searchKeys":["withoutCarpenter","abstract fun withoutCarpenter(): SerializationContext","net.corda.core.serialization.SerializationContext.withoutCarpenter"]},{"name":"abstract fun withoutReferences(): CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.withoutReferences","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/without-references.html","searchKeys":["withoutReferences","abstract fun withoutReferences(): CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext.withoutReferences"]},{"name":"abstract fun withoutReferences(): SerializationContext","description":"net.corda.core.serialization.SerializationContext.withoutReferences","location":"docs/net.corda.core.serialization/-serialization-context/without-references.html","searchKeys":["withoutReferences","abstract fun withoutReferences(): SerializationContext","net.corda.core.serialization.SerializationContext.withoutReferences"]},{"name":"abstract infix fun and(criteria: Q): Q","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.and","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/and.html","searchKeys":["and","abstract infix fun and(criteria: Q): Q","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.and"]},{"name":"abstract infix fun or(criteria: Q): Q","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.or","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/or.html","searchKeys":["or","abstract infix fun or(criteria: Q): Q","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.or"]},{"name":"abstract operator fun contains(instant: Instant): Boolean","description":"net.corda.core.contracts.TimeWindow.contains","location":"docs/net.corda.core.contracts/-time-window/contains.html","searchKeys":["contains","abstract operator fun contains(instant: Instant): Boolean","net.corda.core.contracts.TimeWindow.contains"]},{"name":"abstract operator fun get(key: URL): Attachment?","description":"net.corda.core.serialization.internal.AttachmentsHolder.get","location":"docs/net.corda.core.serialization.internal/-attachments-holder/get.html","searchKeys":["get","abstract operator fun get(key: URL): Attachment?","net.corda.core.serialization.internal.AttachmentsHolder.get"]},{"name":"abstract operator fun getValue(thisRef: Any?, property: KProperty<*>): T","description":"net.corda.core.utilities.PropertyDelegate.getValue","location":"docs/net.corda.core.utilities/-property-delegate/get-value.html","searchKeys":["getValue","abstract operator fun getValue(thisRef: Any?, property: KProperty<*>): T","net.corda.core.utilities.PropertyDelegate.getValue"]},{"name":"abstract operator fun set(key: URL, value: Attachment)","description":"net.corda.core.serialization.internal.AttachmentsHolder.set","location":"docs/net.corda.core.serialization.internal/-attachments-holder/set.html","searchKeys":["set","abstract operator fun set(key: URL, value: Attachment)","net.corda.core.serialization.internal.AttachmentsHolder.set"]},{"name":"abstract operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T)","description":"net.corda.core.utilities.VariablePropertyDelegate.setValue","location":"docs/net.corda.core.utilities/-variable-property-delegate/set-value.html","searchKeys":["setValue","abstract operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T)","net.corda.core.utilities.VariablePropertyDelegate.setValue"]},{"name":"abstract override fun close()","description":"net.corda.core.messaging.FlowHandle.close","location":"docs/net.corda.core.messaging/-flow-handle/close.html","searchKeys":["close","abstract override fun close()","net.corda.core.messaging.FlowHandle.close"]},{"name":"abstract override fun close()","description":"net.corda.core.messaging.FlowProgressHandle.close","location":"docs/net.corda.core.messaging/-flow-progress-handle/close.html","searchKeys":["close","abstract override fun close()","net.corda.core.messaging.FlowProgressHandle.close"]},{"name":"abstract override fun toString(): String","description":"net.corda.finance.workflows.asset.selection.AbstractCashSelection.toString","location":"docs/net.corda.finance.workflows.asset.selection/-abstract-cash-selection/to-string.html","searchKeys":["toString","abstract override fun toString(): String","net.corda.finance.workflows.asset.selection.AbstractCashSelection.toString"]},{"name":"abstract override val amount: Amount<Issued<T>>","description":"net.corda.core.contracts.FungibleAsset.amount","location":"docs/net.corda.core.contracts/-fungible-asset/amount.html","searchKeys":["amount","abstract override val amount: Amount<Issued<T>>","net.corda.core.contracts.FungibleAsset.amount"]},{"name":"abstract override val inputs: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.FullTransaction.inputs","location":"docs/net.corda.core.transactions/-full-transaction/inputs.html","searchKeys":["inputs","abstract override val inputs: List<StateAndRef<ContractState>>","net.corda.core.transactions.FullTransaction.inputs"]},{"name":"abstract override val inputs: List<StateRef>","description":"net.corda.core.transactions.CoreTransaction.inputs","location":"docs/net.corda.core.transactions/-core-transaction/inputs.html","searchKeys":["inputs","abstract override val inputs: List<StateRef>","net.corda.core.transactions.CoreTransaction.inputs"]},{"name":"abstract override val references: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.FullTransaction.references","location":"docs/net.corda.core.transactions/-full-transaction/references.html","searchKeys":["references","abstract override val references: List<StateAndRef<ContractState>>","net.corda.core.transactions.FullTransaction.references"]},{"name":"abstract override val references: List<StateRef>","description":"net.corda.core.transactions.CoreTransaction.references","location":"docs/net.corda.core.transactions/-core-transaction/references.html","searchKeys":["references","abstract override val references: List<StateRef>","net.corda.core.transactions.CoreTransaction.references"]},{"name":"abstract val a: Q","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor.a","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-and-visitor/a.html","searchKeys":["a","abstract val a: Q","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor.a"]},{"name":"abstract val a: Q","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor.a","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-or-visitor/a.html","searchKeys":["a","abstract val a: Q","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor.a"]},{"name":"abstract val algorithm: String","description":"net.corda.core.crypto.DigestAlgorithm.algorithm","location":"docs/net.corda.core.crypto/-digest-algorithm/algorithm.html","searchKeys":["algorithm","abstract val algorithm: String","net.corda.core.crypto.DigestAlgorithm.algorithm"]},{"name":"abstract val algorithm: String","description":"net.corda.core.crypto.internal.DigestAlgorithmFactory.algorithm","location":"docs/net.corda.core.crypto.internal/-digest-algorithm-factory/algorithm.html","searchKeys":["algorithm","abstract val algorithm: String","net.corda.core.crypto.internal.DigestAlgorithmFactory.algorithm"]},{"name":"abstract val allFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.cordapp.Cordapp.allFlows","location":"docs/net.corda.core.cordapp/-cordapp/all-flows.html","searchKeys":["allFlows","abstract val allFlows: List<Class<out FlowLogic<*>>>","net.corda.core.cordapp.Cordapp.allFlows"]},{"name":"abstract val allNodes: List<NodeInfo>","description":"net.corda.core.node.services.NetworkMapCacheBase.allNodes","location":"docs/net.corda.core.node.services/-network-map-cache-base/all-nodes.html","searchKeys":["allNodes","abstract val allNodes: List<NodeInfo>","net.corda.core.node.services.NetworkMapCacheBase.allNodes"]},{"name":"abstract val amount: Amount<T>","description":"net.corda.core.contracts.FungibleState.amount","location":"docs/net.corda.core.contracts/-fungible-state/amount.html","searchKeys":["amount","abstract val amount: Amount<T>","net.corda.core.contracts.FungibleState.amount"]},{"name":"abstract val appClassLoader: ClassLoader","description":"net.corda.core.internal.cordapp.CordappProviderInternal.appClassLoader","location":"docs/net.corda.core.internal.cordapp/-cordapp-provider-internal/app-class-loader.html","searchKeys":["appClassLoader","abstract val appClassLoader: ClassLoader","net.corda.core.internal.cordapp.CordappProviderInternal.appClassLoader"]},{"name":"abstract val appClassLoader: ClassLoader","description":"net.corda.core.internal.verification.VerificationSupport.appClassLoader","location":"docs/net.corda.core.internal.verification/-verification-support/app-class-loader.html","searchKeys":["appClassLoader","abstract val appClassLoader: ClassLoader","net.corda.core.internal.verification.VerificationSupport.appClassLoader"]},{"name":"abstract val attachmentFixups: AttachmentFixups","description":"net.corda.core.internal.cordapp.CordappProviderInternal.attachmentFixups","location":"docs/net.corda.core.internal.cordapp/-cordapp-provider-internal/attachment-fixups.html","searchKeys":["attachmentFixups","abstract val attachmentFixups: AttachmentFixups","net.corda.core.internal.cordapp.CordappProviderInternal.attachmentFixups"]},{"name":"abstract val attachmentTrustCalculator: AttachmentTrustCalculator","description":"net.corda.core.internal.verification.NodeVerificationSupport.attachmentTrustCalculator","location":"docs/net.corda.core.internal.verification/-node-verification-support/attachment-trust-calculator.html","searchKeys":["attachmentTrustCalculator","abstract val attachmentTrustCalculator: AttachmentTrustCalculator","net.corda.core.internal.verification.NodeVerificationSupport.attachmentTrustCalculator"]},{"name":"abstract val attachmentTrustInfos: List<AttachmentTrustInfo>","description":"net.corda.core.internal.messaging.AttachmentTrustInfoRPCOps.attachmentTrustInfos","location":"docs/net.corda.core.internal.messaging/-attachment-trust-info-r-p-c-ops/attachment-trust-infos.html","searchKeys":["attachmentTrustInfos","abstract val attachmentTrustInfos: List<AttachmentTrustInfo>","net.corda.core.internal.messaging.AttachmentTrustInfoRPCOps.attachmentTrustInfos"]},{"name":"abstract val attachments: <Error class: unknown class>","description":"net.corda.testing.node.internal.TestStartedNode.attachments","location":"docs/net.corda.testing.node.internal/-test-started-node/attachments.html","searchKeys":["attachments","abstract val attachments: <Error class: unknown class>","net.corda.testing.node.internal.TestStartedNode.attachments"]},{"name":"abstract val attachments: AttachmentStorage","description":"net.corda.core.internal.verification.NodeVerificationSupport.attachments","location":"docs/net.corda.core.internal.verification/-node-verification-support/attachments.html","searchKeys":["attachments","abstract val attachments: AttachmentStorage","net.corda.core.internal.verification.NodeVerificationSupport.attachments"]},{"name":"abstract val attachments: AttachmentStorage","description":"net.corda.core.node.ServicesForResolution.attachments","location":"docs/net.corda.core.node/-services-for-resolution/attachments.html","searchKeys":["attachments","abstract val attachments: AttachmentStorage","net.corda.core.node.ServicesForResolution.attachments"]},{"name":"abstract val b: Q","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor.b","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-and-visitor/b.html","searchKeys":["b","abstract val b: Q","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor.b"]},{"name":"abstract val b: Q","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor.b","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-or-visitor/b.html","searchKeys":["b","abstract val b: Q","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor.b"]},{"name":"abstract val baseDirectory: Path","description":"net.corda.testing.driver.NodeHandle.baseDirectory","location":"docs/net.corda.testing.driver/-node-handle/base-directory.html","searchKeys":["baseDirectory","abstract val baseDirectory: Path","net.corda.testing.driver.NodeHandle.baseDirectory"]},{"name":"abstract val bilateralNetState: Any","description":"net.corda.finance.contracts.BilateralNettableState.bilateralNetState","location":"docs/net.corda.finance.contracts/-bilateral-nettable-state/bilateral-net-state.html","searchKeys":["bilateralNetState","abstract val bilateralNetState: Any","net.corda.finance.contracts.BilateralNettableState.bilateralNetState"]},{"name":"abstract val bytes: ByteArray","description":"net.corda.core.utilities.ByteSequence.bytes","location":"docs/net.corda.core.utilities/-byte-sequence/bytes.html","searchKeys":["bytes","abstract val bytes: ByteArray","net.corda.core.utilities.ByteSequence.bytes"]},{"name":"abstract val caCertStore: CertStore","description":"net.corda.core.node.services.IdentityService.caCertStore","location":"docs/net.corda.core.node.services/-identity-service/ca-cert-store.html","searchKeys":["caCertStore","abstract val caCertStore: CertStore","net.corda.core.node.services.IdentityService.caCertStore"]},{"name":"abstract val carpenterDisabled: Boolean","description":"net.corda.core.serialization.SerializationContext.carpenterDisabled","location":"docs/net.corda.core.serialization/-serialization-context/carpenter-disabled.html","searchKeys":["carpenterDisabled","abstract val carpenterDisabled: Boolean","net.corda.core.serialization.SerializationContext.carpenterDisabled"]},{"name":"abstract val changed: <Error class: unknown class><NetworkMapCache.MapChange>","description":"net.corda.core.node.services.NetworkMapCacheBase.changed","location":"docs/net.corda.core.node.services/-network-map-cache-base/changed.html","searchKeys":["changed","abstract val changed: <Error class: unknown class><NetworkMapCache.MapChange>","net.corda.core.node.services.NetworkMapCacheBase.changed"]},{"name":"abstract val checkpointContext: CheckpointSerializationContext","description":"net.corda.core.serialization.internal.SerializationEnvironment.checkpointContext","location":"docs/net.corda.core.serialization.internal/-serialization-environment/checkpoint-context.html","searchKeys":["checkpointContext","abstract val checkpointContext: CheckpointSerializationContext","net.corda.core.serialization.internal.SerializationEnvironment.checkpointContext"]},{"name":"abstract val checkpointCustomSerializers: Iterable<CheckpointCustomSerializer<*, *>>","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.checkpointCustomSerializers","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/checkpoint-custom-serializers.html","searchKeys":["checkpointCustomSerializers","abstract val checkpointCustomSerializers: Iterable<CheckpointCustomSerializer<*, *>>","net.corda.core.serialization.internal.CheckpointSerializationContext.checkpointCustomSerializers"]},{"name":"abstract val checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>","description":"net.corda.core.cordapp.Cordapp.checkpointCustomSerializers","location":"docs/net.corda.core.cordapp/-cordapp/checkpoint-custom-serializers.html","searchKeys":["checkpointCustomSerializers","abstract val checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>","net.corda.core.cordapp.Cordapp.checkpointCustomSerializers"]},{"name":"abstract val checkpointSerializer: CheckpointSerializer","description":"net.corda.core.serialization.internal.SerializationEnvironment.checkpointSerializer","location":"docs/net.corda.core.serialization.internal/-serialization-environment/checkpoint-serializer.html","searchKeys":["checkpointSerializer","abstract val checkpointSerializer: CheckpointSerializer","net.corda.core.serialization.internal.SerializationEnvironment.checkpointSerializer"]},{"name":"abstract val clientId: String","description":"net.corda.core.messaging.FlowHandleWithClientId.clientId","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id/client-id.html","searchKeys":["clientId","abstract val clientId: String","net.corda.core.messaging.FlowHandleWithClientId.clientId"]},{"name":"abstract val clientId: String?","description":"net.corda.core.internal.FlowStateMachineHandle.clientId","location":"docs/net.corda.core.internal/-flow-state-machine-handle/client-id.html","searchKeys":["clientId","abstract val clientId: String?","net.corda.core.internal.FlowStateMachineHandle.clientId"]},{"name":"abstract val clock: Clock","description":"net.corda.core.node.ServiceHub.clock","location":"docs/net.corda.core.node/-service-hub/clock.html","searchKeys":["clock","abstract val clock: Clock","net.corda.core.node.ServiceHub.clock"]},{"name":"abstract val clusterSize: Int","description":"net.corda.testing.node.ClusterSpec.clusterSize","location":"docs/net.corda.testing.node/-cluster-spec/cluster-size.html","searchKeys":["clusterSize","abstract val clusterSize: Int","net.corda.testing.node.ClusterSpec.clusterSize"]},{"name":"abstract val compositeKey: T","description":"net.corda.core.schemas.IndirectStatePersistable.compositeKey","location":"docs/net.corda.core.schemas/-indirect-state-persistable/composite-key.html","searchKeys":["compositeKey","abstract val compositeKey: T","net.corda.core.schemas.IndirectStatePersistable.compositeKey"]},{"name":"abstract val config: Map<String, Any>","description":"net.corda.testing.node.TestCordapp.config","location":"docs/net.corda.testing.node/-test-cordapp/config.html","searchKeys":["config","abstract val config: Map<String, Any>","net.corda.testing.node.TestCordapp.config"]},{"name":"abstract val configuration: <Error class: unknown class>","description":"net.corda.testing.driver.internal.NodeHandleInternal.configuration","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/configuration.html","searchKeys":["configuration","abstract val configuration: <Error class: unknown class>","net.corda.testing.driver.internal.NodeHandleInternal.configuration"]},{"name":"abstract val connectionOpt: RPCConnection<I>?","description":"net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext.connectionOpt","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/-connection-context/connection-opt.html","searchKeys":["connectionOpt","abstract val connectionOpt: RPCConnection<I>?","net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext.connectionOpt"]},{"name":"abstract val context: InvocationContext","description":"net.corda.core.internal.FlowStateMachine.context","location":"docs/net.corda.core.internal/-flow-state-machine/context.html","searchKeys":["context","abstract val context: InvocationContext","net.corda.core.internal.FlowStateMachine.context"]},{"name":"abstract val contract: Class<out Contract>?","description":"net.corda.core.contracts.MoveCommand.contract","location":"docs/net.corda.core.contracts/-move-command/contract.html","searchKeys":["contract","abstract val contract: Class<out Contract>?","net.corda.core.contracts.MoveCommand.contract"]},{"name":"abstract val contractClassNames: List<String>","description":"net.corda.core.cordapp.Cordapp.contractClassNames","location":"docs/net.corda.core.cordapp/-cordapp/contract-class-names.html","searchKeys":["contractClassNames","abstract val contractClassNames: List<String>","net.corda.core.cordapp.Cordapp.contractClassNames"]},{"name":"abstract val contractStateTypes: Set<Class<out ContractState>>?","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.contractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/contract-state-types.html","searchKeys":["contractStateTypes","abstract val contractStateTypes: Set<Class<out ContractState>>?","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.contractStateTypes"]},{"name":"abstract val contractUpgradeService: ContractUpgradeService","description":"net.corda.core.node.ServiceHub.contractUpgradeService","location":"docs/net.corda.core.node/-service-hub/contract-upgrade-service.html","searchKeys":["contractUpgradeService","abstract val contractUpgradeService: ContractUpgradeService","net.corda.core.node.ServiceHub.contractUpgradeService"]},{"name":"abstract val cordappClasses: List<String>","description":"net.corda.core.cordapp.Cordapp.cordappClasses","location":"docs/net.corda.core.cordapp/-cordapp/cordapp-classes.html","searchKeys":["cordappClasses","abstract val cordappClasses: List<String>","net.corda.core.cordapp.Cordapp.cordappClasses"]},{"name":"abstract val cordappProvider: CordappProvider","description":"net.corda.core.node.ServicesForResolution.cordappProvider","location":"docs/net.corda.core.node/-services-for-resolution/cordapp-provider.html","searchKeys":["cordappProvider","abstract val cordappProvider: CordappProvider","net.corda.core.node.ServicesForResolution.cordappProvider"]},{"name":"abstract val cordappProvider: CordappProviderInternal","description":"net.corda.core.internal.verification.NodeVerificationSupport.cordappProvider","location":"docs/net.corda.core.internal.verification/-node-verification-support/cordapp-provider.html","searchKeys":["cordappProvider","abstract val cordappProvider: CordappProviderInternal","net.corda.core.internal.verification.NodeVerificationSupport.cordappProvider"]},{"name":"abstract val cordapps: List<CordappImpl>","description":"net.corda.core.internal.cordapp.CordappProviderInternal.cordapps","location":"docs/net.corda.core.internal.cordapp/-cordapp-provider-internal/cordapps.html","searchKeys":["cordapps","abstract val cordapps: List<CordappImpl>","net.corda.core.internal.cordapp.CordappProviderInternal.cordapps"]},{"name":"abstract val cordappsClassLoader: ClassLoader?","description":"net.corda.testing.node.internal.InternalDriverDSL.cordappsClassLoader","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/cordapps-class-loader.html","searchKeys":["cordappsClassLoader","abstract val cordappsClassLoader: ClassLoader?","net.corda.testing.node.internal.InternalDriverDSL.cordappsClassLoader"]},{"name":"abstract val counterparty: Party","description":"net.corda.core.flows.FlowSession.counterparty","location":"docs/net.corda.core.flows/-flow-session/counterparty.html","searchKeys":["counterparty","abstract val counterparty: Party","net.corda.core.flows.FlowSession.counterparty"]},{"name":"abstract val creationTime: Long","description":"net.corda.core.internal.FlowStateMachine.creationTime","location":"docs/net.corda.core.internal/-flow-state-machine/creation-time.html","searchKeys":["creationTime","abstract val creationTime: Long","net.corda.core.internal.FlowStateMachine.creationTime"]},{"name":"abstract val currentHash: SecureHash","description":"net.corda.core.node.services.NetworkParametersService.currentHash","location":"docs/net.corda.core.node.services/-network-parameters-service/current-hash.html","searchKeys":["currentHash","abstract val currentHash: SecureHash","net.corda.core.node.services.NetworkParametersService.currentHash"]},{"name":"abstract val customSchemas: Set<MappedSchema>","description":"net.corda.core.cordapp.Cordapp.customSchemas","location":"docs/net.corda.core.cordapp/-cordapp/custom-schemas.html","searchKeys":["customSchemas","abstract val customSchemas: Set<MappedSchema>","net.corda.core.cordapp.Cordapp.customSchemas"]},{"name":"abstract val customSerializers: Set<SerializationCustomSerializer<*, *>>","description":"net.corda.core.serialization.SerializationContext.customSerializers","location":"docs/net.corda.core.serialization/-serialization-context/custom-serializers.html","searchKeys":["customSerializers","abstract val customSerializers: Set<SerializationCustomSerializer<*, *>>","net.corda.core.serialization.SerializationContext.customSerializers"]},{"name":"abstract val database: <Error class: unknown class>","description":"net.corda.testing.node.internal.TestStartedNode.database","location":"docs/net.corda.testing.node.internal/-test-started-node/database.html","searchKeys":["database","abstract val database: <Error class: unknown class>","net.corda.testing.node.internal.TestStartedNode.database"]},{"name":"abstract val database: CordaTransactionSupport","description":"net.corda.core.node.AppServiceHub.database","location":"docs/net.corda.core.node/-app-service-hub/database.html","searchKeys":["database","abstract val database: CordaTransactionSupport","net.corda.core.node.AppServiceHub.database"]},{"name":"abstract val defaultHash: SecureHash","description":"net.corda.core.node.services.NetworkParametersService.defaultHash","location":"docs/net.corda.core.node.services/-network-parameters-service/default-hash.html","searchKeys":["defaultHash","abstract val defaultHash: SecureHash","net.corda.core.node.services.NetworkParametersService.defaultHash"]},{"name":"abstract val delegate: Any","description":"net.corda.core.internal.utilities.InvocationHandlerTemplate.delegate","location":"docs/net.corda.core.internal.utilities/-invocation-handler-template/delegate.html","searchKeys":["delegate","abstract val delegate: Any","net.corda.core.internal.utilities.InvocationHandlerTemplate.delegate"]},{"name":"abstract val deserializationClassLoader: ClassLoader","description":"net.corda.core.serialization.SerializationContext.deserializationClassLoader","location":"docs/net.corda.core.serialization/-serialization-context/deserialization-class-loader.html","searchKeys":["deserializationClassLoader","abstract val deserializationClassLoader: ClassLoader","net.corda.core.serialization.SerializationContext.deserializationClassLoader"]},{"name":"abstract val deserializationClassLoader: ClassLoader","description":"net.corda.core.serialization.SerializationSchemeContext.deserializationClassLoader","location":"docs/net.corda.core.serialization/-serialization-scheme-context/deserialization-class-loader.html","searchKeys":["deserializationClassLoader","abstract val deserializationClassLoader: ClassLoader","net.corda.core.serialization.SerializationSchemeContext.deserializationClassLoader"]},{"name":"abstract val deserializationClassLoader: ClassLoader","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.deserializationClassLoader","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/deserialization-class-loader.html","searchKeys":["deserializationClassLoader","abstract val deserializationClassLoader: ClassLoader","net.corda.core.serialization.internal.CheckpointSerializationContext.deserializationClassLoader"]},{"name":"abstract val destination: Destination","description":"net.corda.core.flows.FlowSession.destination","location":"docs/net.corda.core.flows/-flow-session/destination.html","searchKeys":["destination","abstract val destination: Destination","net.corda.core.flows.FlowSession.destination"]},{"name":"abstract val diagnosticsService: DiagnosticsService","description":"net.corda.core.node.ServiceHub.diagnosticsService","location":"docs/net.corda.core.node/-service-hub/diagnostics-service.html","searchKeys":["diagnosticsService","abstract val diagnosticsService: DiagnosticsService","net.corda.core.node.ServiceHub.diagnosticsService"]},{"name":"abstract val digestLength: Int","description":"net.corda.core.crypto.DigestAlgorithm.digestLength","location":"docs/net.corda.core.crypto/-digest-algorithm/digest-length.html","searchKeys":["digestLength","abstract val digestLength: Int","net.corda.core.crypto.DigestAlgorithm.digestLength"]},{"name":"abstract val displayTokenSize: BigDecimal","description":"net.corda.core.contracts.TokenizableAssetInfo.displayTokenSize","location":"docs/net.corda.core.contracts/-tokenizable-asset-info/display-token-size.html","searchKeys":["displayTokenSize","abstract val displayTokenSize: BigDecimal","net.corda.core.contracts.TokenizableAssetInfo.displayTokenSize"]},{"name":"abstract val encoding: SerializationEncoding?","description":"net.corda.core.serialization.SerializationContext.encoding","location":"docs/net.corda.core.serialization/-serialization-context/encoding.html","searchKeys":["encoding","abstract val encoding: SerializationEncoding?","net.corda.core.serialization.SerializationContext.encoding"]},{"name":"abstract val encoding: SerializationEncoding?","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.encoding","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/encoding.html","searchKeys":["encoding","abstract val encoding: SerializationEncoding?","net.corda.core.serialization.internal.CheckpointSerializationContext.encoding"]},{"name":"abstract val encodingWhitelist: EncodingWhitelist","description":"net.corda.core.serialization.SerializationContext.encodingWhitelist","location":"docs/net.corda.core.serialization/-serialization-context/encoding-whitelist.html","searchKeys":["encodingWhitelist","abstract val encodingWhitelist: EncodingWhitelist","net.corda.core.serialization.SerializationContext.encodingWhitelist"]},{"name":"abstract val encodingWhitelist: EncodingWhitelist","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.encodingWhitelist","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/encoding-whitelist.html","searchKeys":["encodingWhitelist","abstract val encodingWhitelist: EncodingWhitelist","net.corda.core.serialization.internal.CheckpointSerializationContext.encodingWhitelist"]},{"name":"abstract val exitKeys: Collection<PublicKey>","description":"net.corda.core.contracts.FungibleAsset.exitKeys","location":"docs/net.corda.core.contracts/-fungible-asset/exit-keys.html","searchKeys":["exitKeys","abstract val exitKeys: Collection<PublicKey>","net.corda.core.contracts.FungibleAsset.exitKeys"]},{"name":"abstract val externalOperationExecutor: ExecutorService","description":"net.corda.core.internal.ServiceHubCoreInternal.externalOperationExecutor","location":"docs/net.corda.core.internal/-service-hub-core-internal/external-operation-executor.html","searchKeys":["externalOperationExecutor","abstract val externalOperationExecutor: ExecutorService","net.corda.core.internal.ServiceHubCoreInternal.externalOperationExecutor"]},{"name":"abstract val externalResult: Try<Unit>?","description":"net.corda.core.internal.verification.VerificationResult.externalResult","location":"docs/net.corda.core.internal.verification/-verification-result/external-result.html","searchKeys":["externalResult","abstract val externalResult: Try<Unit>?","net.corda.core.internal.verification.VerificationResult.externalResult"]},{"name":"abstract val externalVerifierHandle: ExternalVerifierHandle","description":"net.corda.core.internal.verification.NodeVerificationSupport.externalVerifierHandle","location":"docs/net.corda.core.internal.verification/-node-verification-support/external-verifier-handle.html","searchKeys":["externalVerifierHandle","abstract val externalVerifierHandle: ExternalVerifierHandle","net.corda.core.internal.verification.NodeVerificationSupport.externalVerifierHandle"]},{"name":"abstract val fromTime: Instant?","description":"net.corda.core.contracts.TimeWindow.fromTime","location":"docs/net.corda.core.contracts/-time-window/from-time.html","searchKeys":["fromTime","abstract val fromTime: Instant?","net.corda.core.contracts.TimeWindow.fromTime"]},{"name":"abstract val hash: SecureHash","description":"net.corda.core.crypto.MerkleTree.hash","location":"docs/net.corda.core.crypto/-merkle-tree/hash.html","searchKeys":["hash","abstract val hash: SecureHash","net.corda.core.crypto.MerkleTree.hash"]},{"name":"abstract val id: SecureHash","description":"net.corda.core.contracts.NamedByHash.id","location":"docs/net.corda.core.contracts/-named-by-hash/id.html","searchKeys":["id","abstract val id: SecureHash","net.corda.core.contracts.NamedByHash.id"]},{"name":"abstract val id: StateMachineRunId","description":"net.corda.core.internal.FlowStateMachineHandle.id","location":"docs/net.corda.core.internal/-flow-state-machine-handle/id.html","searchKeys":["id","abstract val id: StateMachineRunId","net.corda.core.internal.FlowStateMachineHandle.id"]},{"name":"abstract val id: StateMachineRunId","description":"net.corda.core.messaging.FlowHandle.id","location":"docs/net.corda.core.messaging/-flow-handle/id.html","searchKeys":["id","abstract val id: StateMachineRunId","net.corda.core.messaging.FlowHandle.id"]},{"name":"abstract val id: StateMachineRunId","description":"net.corda.core.messaging.StateMachineUpdate.id","location":"docs/net.corda.core.messaging/-state-machine-update/id.html","searchKeys":["id","abstract val id: StateMachineRunId","net.corda.core.messaging.StateMachineUpdate.id"]},{"name":"abstract val identityService: IdentityService","description":"net.corda.core.internal.verification.NodeVerificationSupport.identityService","location":"docs/net.corda.core.internal.verification/-node-verification-support/identity-service.html","searchKeys":["identityService","abstract val identityService: IdentityService","net.corda.core.internal.verification.NodeVerificationSupport.identityService"]},{"name":"abstract val identityService: IdentityService","description":"net.corda.core.node.ServicesForResolution.identityService","location":"docs/net.corda.core.node/-services-for-resolution/identity-service.html","searchKeys":["identityService","abstract val identityService: IdentityService","net.corda.core.node.ServicesForResolution.identityService"]},{"name":"abstract val inProcessResult: Try<LedgerTransaction?>?","description":"net.corda.core.internal.verification.VerificationResult.inProcessResult","location":"docs/net.corda.core.internal.verification/-verification-result/in-process-result.html","searchKeys":["inProcessResult","abstract val inProcessResult: Try<LedgerTransaction?>?","net.corda.core.internal.verification.VerificationResult.inProcessResult"]},{"name":"abstract val info: Cordapp.Info","description":"net.corda.core.cordapp.Cordapp.info","location":"docs/net.corda.core.cordapp/-cordapp/info.html","searchKeys":["info","abstract val info: Cordapp.Info","net.corda.core.cordapp.Cordapp.info"]},{"name":"abstract val info: NodeInfo","description":"net.corda.testing.node.internal.TestStartedNode.info","location":"docs/net.corda.testing.node.internal/-test-started-node/info.html","searchKeys":["info","abstract val info: NodeInfo","net.corda.testing.node.internal.TestStartedNode.info"]},{"name":"abstract val initiatedFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.cordapp.Cordapp.initiatedFlows","location":"docs/net.corda.core.cordapp/-cordapp/initiated-flows.html","searchKeys":["initiatedFlows","abstract val initiatedFlows: List<Class<out FlowLogic<*>>>","net.corda.core.cordapp.Cordapp.initiatedFlows"]},{"name":"abstract val inputs: List<*>","description":"net.corda.core.transactions.BaseTransaction.inputs","location":"docs/net.corda.core.transactions/-base-transaction/inputs.html","searchKeys":["inputs","abstract val inputs: List<*>","net.corda.core.transactions.BaseTransaction.inputs"]},{"name":"abstract val internals: InternalMockNetwork.MockNode","description":"net.corda.testing.node.internal.TestStartedNode.internals","location":"docs/net.corda.testing.node.internal/-test-started-node/internals.html","searchKeys":["internals","abstract val internals: InternalMockNetwork.MockNode","net.corda.testing.node.internal.TestStartedNode.internals"]},{"name":"abstract val interner: PrivateInterner<T>","description":"net.corda.core.internal.utilities.Internable.interner","location":"docs/net.corda.core.internal.utilities/-internable/interner.html","searchKeys":["interner","abstract val interner: PrivateInterner<T>","net.corda.core.internal.utilities.Internable.interner"]},{"name":"abstract val isFailure: Boolean","description":"net.corda.core.utilities.Try.isFailure","location":"docs/net.corda.core.utilities/-try/is-failure.html","searchKeys":["isFailure","abstract val isFailure: Boolean","net.corda.core.utilities.Try.isFailure"]},{"name":"abstract val isFullParties: Boolean","description":"net.corda.client.jackson.JacksonSupport.PartyObjectMapper.isFullParties","location":"docs/net.corda.client.jackson/-jackson-support/-party-object-mapper/is-full-parties.html","searchKeys":["isFullParties","abstract val isFullParties: Boolean","net.corda.client.jackson.JacksonSupport.PartyObjectMapper.isFullParties"]},{"name":"abstract val isKilled: Boolean","description":"net.corda.core.internal.FlowStateMachine.isKilled","location":"docs/net.corda.core.internal/-flow-state-machine/is-killed.html","searchKeys":["isKilled","abstract val isKilled: Boolean","net.corda.core.internal.FlowStateMachine.isKilled"]},{"name":"abstract val isLegacyCompatible: Boolean","description":"net.corda.core.internal.cordapp.LanguageVersion.isLegacyCompatible","location":"docs/net.corda.core.internal.cordapp/-language-version/is-legacy-compatible.html","searchKeys":["isLegacyCompatible","abstract val isLegacyCompatible: Boolean","net.corda.core.internal.cordapp.LanguageVersion.isLegacyCompatible"]},{"name":"abstract val isNonLegacyCompatible: Boolean","description":"net.corda.core.internal.cordapp.LanguageVersion.isNonLegacyCompatible","location":"docs/net.corda.core.internal.cordapp/-language-version/is-non-legacy-compatible.html","searchKeys":["isNonLegacyCompatible","abstract val isNonLegacyCompatible: Boolean","net.corda.core.internal.cordapp.LanguageVersion.isNonLegacyCompatible"]},{"name":"abstract val isResolved: Boolean","description":"net.corda.core.contracts.StatePointer.isResolved","location":"docs/net.corda.core.contracts/-state-pointer/is-resolved.html","searchKeys":["isResolved","abstract val isResolved: Boolean","net.corda.core.contracts.StatePointer.isResolved"]},{"name":"abstract val isSuccess: Boolean","description":"net.corda.core.utilities.Try.isSuccess","location":"docs/net.corda.core.utilities/-try/is-success.html","searchKeys":["isSuccess","abstract val isSuccess: Boolean","net.corda.core.utilities.Try.isSuccess"]},{"name":"abstract val isTimeoutEnabled: Boolean","description":"net.corda.core.internal.TimedFlow.isTimeoutEnabled","location":"docs/net.corda.core.internal/-timed-flow/is-timeout-enabled.html","searchKeys":["isTimeoutEnabled","abstract val isTimeoutEnabled: Boolean","net.corda.core.internal.TimedFlow.isTimeoutEnabled"]},{"name":"abstract val jarFile: Path","description":"net.corda.testing.node.internal.TestCordappInternal.jarFile","location":"docs/net.corda.testing.node.internal/-test-cordapp-internal/jar-file.html","searchKeys":["jarFile","abstract val jarFile: Path","net.corda.testing.node.internal.TestCordappInternal.jarFile"]},{"name":"abstract val jarHash: SecureHash.SHA256","description":"net.corda.core.cordapp.Cordapp.jarHash","location":"docs/net.corda.core.cordapp/-cordapp/jar-hash.html","searchKeys":["jarHash","abstract val jarHash: SecureHash.SHA256","net.corda.core.cordapp.Cordapp.jarHash"]},{"name":"abstract val jarPath: URL","description":"net.corda.core.cordapp.Cordapp.jarPath","location":"docs/net.corda.core.cordapp/-cordapp/jar-path.html","searchKeys":["jarPath","abstract val jarPath: URL","net.corda.core.cordapp.Cordapp.jarPath"]},{"name":"abstract val jmxAddress: NetworkHostAndPort?","description":"net.corda.testing.driver.NodeHandle.jmxAddress","location":"docs/net.corda.testing.driver/-node-handle/jmx-address.html","searchKeys":["jmxAddress","abstract val jmxAddress: NetworkHostAndPort?","net.corda.testing.driver.NodeHandle.jmxAddress"]},{"name":"abstract val keyManagementService: KeyManagementService","description":"net.corda.core.node.ServiceHub.keyManagementService","location":"docs/net.corda.core.node/-service-hub/key-management-service.html","searchKeys":["keyManagementService","abstract val keyManagementService: KeyManagementService","net.corda.core.node.ServiceHub.keyManagementService"]},{"name":"abstract val keys: Set<PublicKey>","description":"net.corda.core.node.services.KeyManagementService.keys","location":"docs/net.corda.core.node.services/-key-management-service/keys.html","searchKeys":["keys","abstract val keys: Set<PublicKey>","net.corda.core.node.services.KeyManagementService.keys"]},{"name":"abstract val ledgerInterpreter: LedgerDSLInterpreter<TransactionDSLInterpreter>","description":"net.corda.testing.dsl.TransactionDSLInterpreter.ledgerInterpreter","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/ledger-interpreter.html","searchKeys":["ledgerInterpreter","abstract val ledgerInterpreter: LedgerDSLInterpreter<TransactionDSLInterpreter>","net.corda.testing.dsl.TransactionDSLInterpreter.ledgerInterpreter"]},{"name":"abstract val legacyContract: ContractClassName","description":"net.corda.core.contracts.UpgradedContract.legacyContract","location":"docs/net.corda.core.contracts/-upgraded-contract/legacy-contract.html","searchKeys":["legacyContract","abstract val legacyContract: ContractClassName","net.corda.core.contracts.UpgradedContract.legacyContract"]},{"name":"abstract val legacyContractConstraint: AttachmentConstraint","description":"net.corda.core.contracts.UpgradedContractWithLegacyConstraint.legacyContractConstraint","location":"docs/net.corda.core.contracts/-upgraded-contract-with-legacy-constraint/legacy-contract-constraint.html","searchKeys":["legacyContractConstraint","abstract val legacyContractConstraint: AttachmentConstraint","net.corda.core.contracts.UpgradedContractWithLegacyConstraint.legacyContractConstraint"]},{"name":"abstract val lenientCarpenterEnabled: Boolean","description":"net.corda.core.serialization.SerializationContext.lenientCarpenterEnabled","location":"docs/net.corda.core.serialization/-serialization-context/lenient-carpenter-enabled.html","searchKeys":["lenientCarpenterEnabled","abstract val lenientCarpenterEnabled: Boolean","net.corda.core.serialization.SerializationContext.lenientCarpenterEnabled"]},{"name":"abstract val licence: String","description":"net.corda.core.cordapp.Cordapp.Info.licence","location":"docs/net.corda.core.cordapp/-cordapp/-info/licence.html","searchKeys":["licence","abstract val licence: String","net.corda.core.cordapp.Cordapp.Info.licence"]},{"name":"abstract val linearId: UniqueIdentifier","description":"net.corda.core.contracts.LinearState.linearId","location":"docs/net.corda.core.contracts/-linear-state/linear-id.html","searchKeys":["linearId","abstract val linearId: UniqueIdentifier","net.corda.core.contracts.LinearState.linearId"]},{"name":"abstract val logger: <Error class: unknown class>","description":"net.corda.core.internal.FlowStateMachine.logger","location":"docs/net.corda.core.internal/-flow-state-machine/logger.html","searchKeys":["logger","abstract val logger: <Error class: unknown class>","net.corda.core.internal.FlowStateMachine.logger"]},{"name":"abstract val logic: FlowLogic<FLOWRETURN>?","description":"net.corda.core.internal.FlowStateMachineHandle.logic","location":"docs/net.corda.core.internal/-flow-state-machine-handle/logic.html","searchKeys":["logic","abstract val logic: FlowLogic<FLOWRETURN>?","net.corda.core.internal.FlowStateMachineHandle.logic"]},{"name":"abstract val midpoint: Instant?","description":"net.corda.core.contracts.TimeWindow.midpoint","location":"docs/net.corda.core.contracts/-time-window/midpoint.html","searchKeys":["midpoint","abstract val midpoint: Instant?","net.corda.core.contracts.TimeWindow.midpoint"]},{"name":"abstract val minimumPlatformVersion: Int","description":"net.corda.core.cordapp.Cordapp.minimumPlatformVersion","location":"docs/net.corda.core.cordapp/-cordapp/minimum-platform-version.html","searchKeys":["minimumPlatformVersion","abstract val minimumPlatformVersion: Int","net.corda.core.cordapp.Cordapp.minimumPlatformVersion"]},{"name":"abstract val multilateralNetState: T","description":"net.corda.finance.contracts.MultilateralNettableState.multilateralNetState","location":"docs/net.corda.finance.contracts/-multilateral-nettable-state/multilateral-net-state.html","searchKeys":["multilateralNetState","abstract val multilateralNetState: T","net.corda.finance.contracts.MultilateralNettableState.multilateralNetState"]},{"name":"abstract val myInfo: NodeInfo","description":"net.corda.core.node.ServiceHub.myInfo","location":"docs/net.corda.core.node/-service-hub/my-info.html","searchKeys":["myInfo","abstract val myInfo: NodeInfo","net.corda.core.node.ServiceHub.myInfo"]},{"name":"abstract val name: String","description":"net.corda.core.cordapp.Cordapp.name","location":"docs/net.corda.core.cordapp/-cordapp/name.html","searchKeys":["name","abstract val name: String","net.corda.core.cordapp.Cordapp.name"]},{"name":"abstract val network: MockNodeMessagingService","description":"net.corda.testing.node.internal.TestStartedNode.network","location":"docs/net.corda.testing.node.internal/-test-started-node/network.html","searchKeys":["network","abstract val network: MockNodeMessagingService","net.corda.testing.node.internal.TestStartedNode.network"]},{"name":"abstract val networkMapCache: NetworkMapCache","description":"net.corda.core.node.ServiceHub.networkMapCache","location":"docs/net.corda.core.node/-service-hub/network-map-cache.html","searchKeys":["networkMapCache","abstract val networkMapCache: NetworkMapCache","net.corda.core.node.ServiceHub.networkMapCache"]},{"name":"abstract val networkParameters: NetworkParameters","description":"net.corda.core.internal.verification.NodeVerificationSupport.networkParameters","location":"docs/net.corda.core.internal.verification/-node-verification-support/network-parameters.html","searchKeys":["networkParameters","abstract val networkParameters: NetworkParameters","net.corda.core.internal.verification.NodeVerificationSupport.networkParameters"]},{"name":"abstract val networkParameters: NetworkParameters","description":"net.corda.core.messaging.CordaRPCOps.networkParameters","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/network-parameters.html","searchKeys":["networkParameters","abstract val networkParameters: NetworkParameters","net.corda.core.messaging.CordaRPCOps.networkParameters"]},{"name":"abstract val networkParameters: NetworkParameters","description":"net.corda.core.node.ServicesForResolution.networkParameters","location":"docs/net.corda.core.node/-services-for-resolution/network-parameters.html","searchKeys":["networkParameters","abstract val networkParameters: NetworkParameters","net.corda.core.node.ServicesForResolution.networkParameters"]},{"name":"abstract val networkParameters: NetworkParameters?","description":"net.corda.core.transactions.FullTransaction.networkParameters","location":"docs/net.corda.core.transactions/-full-transaction/network-parameters.html","searchKeys":["networkParameters","abstract val networkParameters: NetworkParameters?","net.corda.core.transactions.FullTransaction.networkParameters"]},{"name":"abstract val networkParametersHash: SecureHash?","description":"net.corda.core.transactions.CoreTransaction.networkParametersHash","location":"docs/net.corda.core.transactions/-core-transaction/network-parameters-hash.html","searchKeys":["networkParametersHash","abstract val networkParametersHash: SecureHash?","net.corda.core.transactions.CoreTransaction.networkParametersHash"]},{"name":"abstract val networkParametersService: NetworkParametersService","description":"net.corda.core.internal.verification.NodeVerificationSupport.networkParametersService","location":"docs/net.corda.core.internal.verification/-node-verification-support/network-parameters-service.html","searchKeys":["networkParametersService","abstract val networkParametersService: NetworkParametersService","net.corda.core.internal.verification.NodeVerificationSupport.networkParametersService"]},{"name":"abstract val networkParametersService: NetworkParametersService","description":"net.corda.core.node.ServicesForResolution.networkParametersService","location":"docs/net.corda.core.node/-services-for-resolution/network-parameters-service.html","searchKeys":["networkParametersService","abstract val networkParametersService: NetworkParametersService","net.corda.core.node.ServicesForResolution.networkParametersService"]},{"name":"abstract val node: NodeInfo","description":"net.corda.core.node.services.NetworkMapCache.MapChange.node","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/node.html","searchKeys":["node","abstract val node: NodeInfo","net.corda.core.node.services.NetworkMapCache.MapChange.node"]},{"name":"abstract val nodeInfo: NodeInfo","description":"net.corda.testing.driver.NodeHandle.nodeInfo","location":"docs/net.corda.testing.driver/-node-handle/node-info.html","searchKeys":["nodeInfo","abstract val nodeInfo: NodeInfo","net.corda.testing.driver.NodeHandle.nodeInfo"]},{"name":"abstract val nodeReady: CordaFuture<Void?>","description":"net.corda.core.node.services.NetworkMapCacheBase.nodeReady","location":"docs/net.corda.core.node.services/-network-map-cache-base/node-ready.html","searchKeys":["nodeReady","abstract val nodeReady: CordaFuture<Void?>","net.corda.core.node.services.NetworkMapCacheBase.nodeReady"]},{"name":"abstract val notary: Party?","description":"net.corda.core.transactions.BaseTransaction.notary","location":"docs/net.corda.core.transactions/-base-transaction/notary.html","searchKeys":["notary","abstract val notary: Party?","net.corda.core.transactions.BaseTransaction.notary"]},{"name":"abstract val notaryHandles: List<NotaryHandle>","description":"net.corda.testing.driver.DriverDSL.notaryHandles","location":"docs/net.corda.testing.driver/-driver-d-s-l/notary-handles.html","searchKeys":["notaryHandles","abstract val notaryHandles: List<NotaryHandle>","net.corda.testing.driver.DriverDSL.notaryHandles"]},{"name":"abstract val notaryIdentities: List<Party>","description":"net.corda.core.node.services.NetworkMapCacheBase.notaryIdentities","location":"docs/net.corda.core.node.services/-network-map-cache-base/notary-identities.html","searchKeys":["notaryIdentities","abstract val notaryIdentities: List<Party>","net.corda.core.node.services.NetworkMapCacheBase.notaryIdentities"]},{"name":"abstract val notaryIdentityKey: PublicKey","description":"net.corda.core.internal.notary.NotaryService.notaryIdentityKey","location":"docs/net.corda.core.internal.notary/-notary-service/notary-identity-key.html","searchKeys":["notaryIdentityKey","abstract val notaryIdentityKey: PublicKey","net.corda.core.internal.notary.NotaryService.notaryIdentityKey"]},{"name":"abstract val notaryParty: Party","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.notaryParty","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/notary-party.html","searchKeys":["notaryParty","abstract val notaryParty: Party","net.corda.finance.flows.TwoPartyDealFlow.Primary.notaryParty"]},{"name":"abstract val notaryService: NotaryService?","description":"net.corda.core.internal.ServiceHubCoreInternal.notaryService","location":"docs/net.corda.core.internal/-service-hub-core-internal/notary-service.html","searchKeys":["notaryService","abstract val notaryService: NotaryService?","net.corda.core.internal.ServiceHubCoreInternal.notaryService"]},{"name":"abstract val notaryService: NotaryService?","description":"net.corda.testing.node.internal.TestStartedNode.notaryService","location":"docs/net.corda.testing.node.internal/-test-started-node/notary-service.html","searchKeys":["notaryService","abstract val notaryService: NotaryService?","net.corda.testing.node.internal.TestStartedNode.notaryService"]},{"name":"abstract val objectReferencesEnabled: Boolean","description":"net.corda.core.serialization.SerializationContext.objectReferencesEnabled","location":"docs/net.corda.core.serialization/-serialization-context/object-references-enabled.html","searchKeys":["objectReferencesEnabled","abstract val objectReferencesEnabled: Boolean","net.corda.core.serialization.SerializationContext.objectReferencesEnabled"]},{"name":"abstract val objectReferencesEnabled: Boolean","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.objectReferencesEnabled","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/object-references-enabled.html","searchKeys":["objectReferencesEnabled","abstract val objectReferencesEnabled: Boolean","net.corda.core.serialization.internal.CheckpointSerializationContext.objectReferencesEnabled"]},{"name":"abstract val oracle: Party","description":"net.corda.finance.contracts.FixableDealState.oracle","location":"docs/net.corda.finance.contracts/-fixable-deal-state/oracle.html","searchKeys":["oracle","abstract val oracle: Party","net.corda.finance.contracts.FixableDealState.oracle"]},{"name":"abstract val originalMessage: String?","description":"net.corda.core.CordaThrowable.originalMessage","location":"docs/net.corda.core/-corda-throwable/original-message.html","searchKeys":["originalMessage","abstract val originalMessage: String?","net.corda.core.CordaThrowable.originalMessage"]},{"name":"abstract val otherSideSession: FlowSession","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.otherSideSession","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/other-side-session.html","searchKeys":["otherSideSession","abstract val otherSideSession: FlowSession","net.corda.finance.flows.TwoPartyDealFlow.Primary.otherSideSession"]},{"name":"abstract val otherSideSession: FlowSession","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.otherSideSession","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/other-side-session.html","searchKeys":["otherSideSession","abstract val otherSideSession: FlowSession","net.corda.finance.flows.TwoPartyDealFlow.Secondary.otherSideSession"]},{"name":"abstract val ourIdentity: Party","description":"net.corda.core.internal.FlowStateMachine.ourIdentity","location":"docs/net.corda.core.internal/-flow-state-machine/our-identity.html","searchKeys":["ourIdentity","abstract val ourIdentity: Party","net.corda.core.internal.FlowStateMachine.ourIdentity"]},{"name":"abstract val ourSenderUUID: String?","description":"net.corda.core.internal.FlowStateMachine.ourSenderUUID","location":"docs/net.corda.core.internal/-flow-state-machine/our-sender-u-u-i-d.html","searchKeys":["ourSenderUUID","abstract val ourSenderUUID: String?","net.corda.core.internal.FlowStateMachine.ourSenderUUID"]},{"name":"abstract val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.BaseTransaction.outputs","location":"docs/net.corda.core.transactions/-base-transaction/outputs.html","searchKeys":["outputs","abstract val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.BaseTransaction.outputs"]},{"name":"abstract val owner: AbstractParty","description":"net.corda.core.contracts.OwnableState.owner","location":"docs/net.corda.core.contracts/-ownable-state/owner.html","searchKeys":["owner","abstract val owner: AbstractParty","net.corda.core.contracts.OwnableState.owner"]},{"name":"abstract val p2pAddress: NetworkHostAndPort","description":"net.corda.testing.driver.NodeHandle.p2pAddress","location":"docs/net.corda.testing.driver/-node-handle/p2p-address.html","searchKeys":["p2pAddress","abstract val p2pAddress: NetworkHostAndPort","net.corda.testing.driver.NodeHandle.p2pAddress"]},{"name":"abstract val p2pContext: SerializationContext","description":"net.corda.core.serialization.internal.SerializationEnvironment.p2pContext","location":"docs/net.corda.core.serialization.internal/-serialization-environment/p2p-context.html","searchKeys":["p2pContext","abstract val p2pContext: SerializationContext","net.corda.core.serialization.internal.SerializationEnvironment.p2pContext"]},{"name":"abstract val participants: List<AbstractParty>","description":"net.corda.core.contracts.ContractState.participants","location":"docs/net.corda.core.contracts/-contract-state/participants.html","searchKeys":["participants","abstract val participants: List<AbstractParty>","net.corda.core.contracts.ContractState.participants"]},{"name":"abstract val party: Party","description":"net.corda.core.node.services.PartyInfo.party","location":"docs/net.corda.core.node.services/-party-info/party.html","searchKeys":["party","abstract val party: Party","net.corda.core.node.services.PartyInfo.party"]},{"name":"abstract val payload: Any","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.payload","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/payload.html","searchKeys":["payload","abstract val payload: Any","net.corda.finance.flows.TwoPartyDealFlow.Primary.payload"]},{"name":"abstract val peerPartyId: SecureHash","description":"net.corda.core.flows.DistributionRecord.peerPartyId","location":"docs/net.corda.core.flows/-distribution-record/peer-party-id.html","searchKeys":["peerPartyId","abstract val peerPartyId: SecureHash","net.corda.core.flows.DistributionRecord.peerPartyId"]},{"name":"abstract val pointer: Any","description":"net.corda.core.contracts.StatePointer.pointer","location":"docs/net.corda.core.contracts/-state-pointer/pointer.html","searchKeys":["pointer","abstract val pointer: Any","net.corda.core.contracts.StatePointer.pointer"]},{"name":"abstract val preferredSerializationVersion: SerializationMagic","description":"net.corda.core.serialization.SerializationContext.preferredSerializationVersion","location":"docs/net.corda.core.serialization/-serialization-context/preferred-serialization-version.html","searchKeys":["preferredSerializationVersion","abstract val preferredSerializationVersion: SerializationMagic","net.corda.core.serialization.SerializationContext.preferredSerializationVersion"]},{"name":"abstract val preventDataLoss: Boolean","description":"net.corda.core.serialization.SerializationContext.preventDataLoss","location":"docs/net.corda.core.serialization/-serialization-context/prevent-data-loss.html","searchKeys":["preventDataLoss","abstract val preventDataLoss: Boolean","net.corda.core.serialization.SerializationContext.preventDataLoss"]},{"name":"abstract val process: Process","description":"net.corda.testing.driver.OutOfProcess.process","location":"docs/net.corda.testing.driver/-out-of-process/process.html","searchKeys":["process","abstract val process: Process","net.corda.testing.driver.OutOfProcess.process"]},{"name":"abstract val progress: <Error class: unknown class><String>","description":"net.corda.core.messaging.FlowProgressHandle.progress","location":"docs/net.corda.core.messaging/-flow-progress-handle/progress.html","searchKeys":["progress","abstract val progress: <Error class: unknown class><String>","net.corda.core.messaging.FlowProgressHandle.progress"]},{"name":"abstract val properties: Map<Any, Any>","description":"net.corda.core.serialization.SerializationContext.properties","location":"docs/net.corda.core.serialization/-serialization-context/properties.html","searchKeys":["properties","abstract val properties: Map<Any, Any>","net.corda.core.serialization.SerializationContext.properties"]},{"name":"abstract val properties: Map<Any, Any>","description":"net.corda.core.serialization.SerializationSchemeContext.properties","location":"docs/net.corda.core.serialization/-serialization-scheme-context/properties.html","searchKeys":["properties","abstract val properties: Map<Any, Any>","net.corda.core.serialization.SerializationSchemeContext.properties"]},{"name":"abstract val properties: Map<Any, Any>","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.properties","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/properties.html","searchKeys":["properties","abstract val properties: Map<Any, Any>","net.corda.core.serialization.internal.CheckpointSerializationContext.properties"]},{"name":"abstract val protocolVersion: Int","description":"net.corda.core.messaging.RPCOps.protocolVersion","location":"docs/net.corda.core.messaging/-r-p-c-ops/protocol-version.html","searchKeys":["protocolVersion","abstract val protocolVersion: Int","net.corda.core.messaging.RPCOps.protocolVersion"]},{"name":"abstract val proxy: I","description":"net.corda.client.rpc.RPCConnection.proxy","location":"docs/net.corda.client.rpc/-r-p-c-connection/proxy.html","searchKeys":["proxy","abstract val proxy: I","net.corda.client.rpc.RPCConnection.proxy"]},{"name":"abstract val rawUpdates: <Error class: unknown class><Vault.Update<ContractState>>","description":"net.corda.core.node.services.VaultService.rawUpdates","location":"docs/net.corda.core.node.services/-vault-service/raw-updates.html","searchKeys":["rawUpdates","abstract val rawUpdates: <Error class: unknown class><Vault.Update<ContractState>>","net.corda.core.node.services.VaultService.rawUpdates"]},{"name":"abstract val references: List<*>","description":"net.corda.core.transactions.BaseTransaction.references","location":"docs/net.corda.core.transactions/-base-transaction/references.html","searchKeys":["references","abstract val references: List<*>","net.corda.core.transactions.BaseTransaction.references"]},{"name":"abstract val requiredSigningKeys: Set<PublicKey>","description":"net.corda.core.transactions.TransactionWithSignatures.requiredSigningKeys","location":"docs/net.corda.core.transactions/-transaction-with-signatures/required-signing-keys.html","searchKeys":["requiredSigningKeys","abstract val requiredSigningKeys: Set<PublicKey>","net.corda.core.transactions.TransactionWithSignatures.requiredSigningKeys"]},{"name":"abstract val resultFuture: CordaFuture<FLOWRETURN>","description":"net.corda.core.internal.FlowStateMachineHandle.resultFuture","location":"docs/net.corda.core.internal/-flow-state-machine-handle/result-future.html","searchKeys":["resultFuture","abstract val resultFuture: CordaFuture<FLOWRETURN>","net.corda.core.internal.FlowStateMachineHandle.resultFuture"]},{"name":"abstract val returnValue: CordaFuture<A>","description":"net.corda.core.messaging.FlowHandle.returnValue","location":"docs/net.corda.core.messaging/-flow-handle/return-value.html","searchKeys":["returnValue","abstract val returnValue: CordaFuture<A>","net.corda.core.messaging.FlowHandle.returnValue"]},{"name":"abstract val rpc: CordaRPCOps","description":"net.corda.testing.driver.NodeHandle.rpc","location":"docs/net.corda.testing.driver/-node-handle/rpc.html","searchKeys":["rpc","abstract val rpc: CordaRPCOps","net.corda.testing.driver.NodeHandle.rpc"]},{"name":"abstract val rpcAddress: NetworkHostAndPort","description":"net.corda.testing.driver.NodeHandle.rpcAddress","location":"docs/net.corda.testing.driver/-node-handle/rpc-address.html","searchKeys":["rpcAddress","abstract val rpcAddress: NetworkHostAndPort","net.corda.testing.driver.NodeHandle.rpcAddress"]},{"name":"abstract val rpcAdminAddress: NetworkHostAndPort","description":"net.corda.testing.driver.NodeHandle.rpcAdminAddress","location":"docs/net.corda.testing.driver/-node-handle/rpc-admin-address.html","searchKeys":["rpcAdminAddress","abstract val rpcAdminAddress: NetworkHostAndPort","net.corda.testing.driver.NodeHandle.rpcAdminAddress"]},{"name":"abstract val rpcClientContext: SerializationContext","description":"net.corda.core.serialization.internal.SerializationEnvironment.rpcClientContext","location":"docs/net.corda.core.serialization.internal/-serialization-environment/rpc-client-context.html","searchKeys":["rpcClientContext","abstract val rpcClientContext: SerializationContext","net.corda.core.serialization.internal.SerializationEnvironment.rpcClientContext"]},{"name":"abstract val rpcFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.cordapp.Cordapp.rpcFlows","location":"docs/net.corda.core.cordapp/-cordapp/rpc-flows.html","searchKeys":["rpcFlows","abstract val rpcFlows: List<Class<out FlowLogic<*>>>","net.corda.core.cordapp.Cordapp.rpcFlows"]},{"name":"abstract val rpcOpsList: List<RPCOps>","description":"net.corda.testing.node.internal.TestStartedNode.rpcOpsList","location":"docs/net.corda.testing.node.internal/-test-started-node/rpc-ops-list.html","searchKeys":["rpcOpsList","abstract val rpcOpsList: List<RPCOps>","net.corda.testing.node.internal.TestStartedNode.rpcOpsList"]},{"name":"abstract val rpcServerContext: SerializationContext","description":"net.corda.core.serialization.internal.SerializationEnvironment.rpcServerContext","location":"docs/net.corda.core.serialization.internal/-serialization-environment/rpc-server-context.html","searchKeys":["rpcServerContext","abstract val rpcServerContext: SerializationContext","net.corda.core.serialization.internal.SerializationEnvironment.rpcServerContext"]},{"name":"abstract val rpcUsers: List<User>","description":"net.corda.testing.driver.NodeHandle.rpcUsers","location":"docs/net.corda.testing.driver/-node-handle/rpc-users.html","searchKeys":["rpcUsers","abstract val rpcUsers: List<User>","net.corda.testing.driver.NodeHandle.rpcUsers"]},{"name":"abstract val schedulableFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.cordapp.Cordapp.schedulableFlows","location":"docs/net.corda.core.cordapp/-cordapp/schedulable-flows.html","searchKeys":["schedulableFlows","abstract val schedulableFlows: List<Class<out FlowLogic<*>>>","net.corda.core.cordapp.Cordapp.schedulableFlows"]},{"name":"abstract val scheduledAt: Instant","description":"net.corda.core.contracts.Scheduled.scheduledAt","location":"docs/net.corda.core.contracts/-scheduled/scheduled-at.html","searchKeys":["scheduledAt","abstract val scheduledAt: Instant","net.corda.core.contracts.Scheduled.scheduledAt"]},{"name":"abstract val serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>","description":"net.corda.core.cordapp.Cordapp.serializationCustomSerializers","location":"docs/net.corda.core.cordapp/-cordapp/serialization-custom-serializers.html","searchKeys":["serializationCustomSerializers","abstract val serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>","net.corda.core.cordapp.Cordapp.serializationCustomSerializers"]},{"name":"abstract val serializationFactory: SerializationFactory","description":"net.corda.core.serialization.internal.SerializationEnvironment.serializationFactory","location":"docs/net.corda.core.serialization.internal/-serialization-environment/serialization-factory.html","searchKeys":["serializationFactory","abstract val serializationFactory: SerializationFactory","net.corda.core.serialization.internal.SerializationEnvironment.serializationFactory"]},{"name":"abstract val serializationWhitelists: List<SerializationWhitelist>","description":"net.corda.core.cordapp.Cordapp.serializationWhitelists","location":"docs/net.corda.core.cordapp/-cordapp/serialization-whitelists.html","searchKeys":["serializationWhitelists","abstract val serializationWhitelists: List<SerializationWhitelist>","net.corda.core.cordapp.Cordapp.serializationWhitelists"]},{"name":"abstract val serverProtocolVersion: Int","description":"net.corda.client.rpc.RPCConnection.serverProtocolVersion","location":"docs/net.corda.client.rpc/-r-p-c-connection/server-protocol-version.html","searchKeys":["serverProtocolVersion","abstract val serverProtocolVersion: Int","net.corda.client.rpc.RPCConnection.serverProtocolVersion"]},{"name":"abstract val serviceFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.cordapp.Cordapp.serviceFlows","location":"docs/net.corda.core.cordapp/-cordapp/service-flows.html","searchKeys":["serviceFlows","abstract val serviceFlows: List<Class<out FlowLogic<*>>>","net.corda.core.cordapp.Cordapp.serviceFlows"]},{"name":"abstract val serviceHub: ServiceHub","description":"net.corda.core.internal.FlowStateMachine.serviceHub","location":"docs/net.corda.core.internal/-flow-state-machine/service-hub.html","searchKeys":["serviceHub","abstract val serviceHub: ServiceHub","net.corda.core.internal.FlowStateMachine.serviceHub"]},{"name":"abstract val serviceHub: ServiceHub","description":"net.corda.core.serialization.SerializeAsTokenContext.serviceHub","location":"docs/net.corda.core.serialization/-serialize-as-token-context/service-hub.html","searchKeys":["serviceHub","abstract val serviceHub: ServiceHub","net.corda.core.serialization.SerializeAsTokenContext.serviceHub"]},{"name":"abstract val services: <Error class: unknown class>","description":"net.corda.testing.node.internal.TestStartedNode.services","location":"docs/net.corda.testing.node.internal/-test-started-node/services.html","searchKeys":["services","abstract val services: <Error class: unknown class>","net.corda.testing.node.internal.TestStartedNode.services"]},{"name":"abstract val services: List<Class<out SerializeAsToken>>","description":"net.corda.core.cordapp.Cordapp.services","location":"docs/net.corda.core.cordapp/-cordapp/services.html","searchKeys":["services","abstract val services: List<Class<out SerializeAsToken>>","net.corda.core.cordapp.Cordapp.services"]},{"name":"abstract val services: ServiceHub","description":"net.corda.core.internal.notary.NotaryService.services","location":"docs/net.corda.core.internal.notary/-notary-service/services.html","searchKeys":["services","abstract val services: ServiceHub","net.corda.core.internal.notary.NotaryService.services"]},{"name":"abstract val services: ServiceHub","description":"net.corda.testing.driver.InProcess.services","location":"docs/net.corda.testing.driver/-in-process/services.html","searchKeys":["services","abstract val services: ServiceHub","net.corda.testing.driver.InProcess.services"]},{"name":"abstract val session: <Error class: unknown class>","description":"net.corda.core.node.services.vault.SessionScope.session","location":"docs/net.corda.core.node.services.vault/-session-scope/session.html","searchKeys":["session","abstract val session: <Error class: unknown class>","net.corda.core.node.services.vault.SessionScope.session"]},{"name":"abstract val shortName: String","description":"net.corda.core.cordapp.Cordapp.Info.shortName","location":"docs/net.corda.core.cordapp/-cordapp/-info/short-name.html","searchKeys":["shortName","abstract val shortName: String","net.corda.core.cordapp.Cordapp.Info.shortName"]},{"name":"abstract val shutdownManager: ShutdownManager","description":"net.corda.testing.node.internal.InternalDriverDSL.shutdownManager","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/shutdown-manager.html","searchKeys":["shutdownManager","abstract val shutdownManager: ShutdownManager","net.corda.testing.node.internal.InternalDriverDSL.shutdownManager"]},{"name":"abstract val signerKeys: List<PublicKey>","description":"net.corda.core.contracts.Attachment.signerKeys","location":"docs/net.corda.core.contracts/-attachment/signer-keys.html","searchKeys":["signerKeys","abstract val signerKeys: List<PublicKey>","net.corda.core.contracts.Attachment.signerKeys"]},{"name":"abstract val signers: List<Party>","description":"net.corda.core.contracts.Attachment.signers","location":"docs/net.corda.core.contracts/-attachment/signers.html","searchKeys":["signers","abstract val signers: List<Party>","net.corda.core.contracts.Attachment.signers"]},{"name":"abstract val sigs: List<TransactionSignature>","description":"net.corda.core.transactions.TransactionWithSignatures.sigs","location":"docs/net.corda.core.transactions/-transaction-with-signatures/sigs.html","searchKeys":["sigs","abstract val sigs: List<TransactionSignature>","net.corda.core.transactions.TransactionWithSignatures.sigs"]},{"name":"abstract val size: Int","description":"net.corda.core.contracts.Attachment.size","location":"docs/net.corda.core.contracts/-attachment/size.html","searchKeys":["size","abstract val size: Int","net.corda.core.contracts.Attachment.size"]},{"name":"abstract val size: Int","description":"net.corda.core.serialization.internal.AttachmentsHolder.size","location":"docs/net.corda.core.serialization.internal/-attachments-holder/size.html","searchKeys":["size","abstract val size: Int","net.corda.core.serialization.internal.AttachmentsHolder.size"]},{"name":"abstract val smm: <Error class: unknown class>","description":"net.corda.testing.node.internal.TestStartedNode.smm","location":"docs/net.corda.testing.node.internal/-test-started-node/smm.html","searchKeys":["smm","abstract val smm: <Error class: unknown class>","net.corda.testing.node.internal.TestStartedNode.smm"]},{"name":"abstract val stateRef: PersistentStateRef?","description":"net.corda.core.schemas.DirectStatePersistable.stateRef","location":"docs/net.corda.core.schemas/-direct-state-persistable/state-ref.html","searchKeys":["stateRef","abstract val stateRef: PersistentStateRef?","net.corda.core.schemas.DirectStatePersistable.stateRef"]},{"name":"abstract val status: Vault.StateStatus","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.status","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/status.html","searchKeys":["status","abstract val status: Vault.StateStatus","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.status"]},{"name":"abstract val stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>?","description":"net.corda.core.messaging.FlowProgressHandle.stepsTreeFeed","location":"docs/net.corda.core.messaging/-flow-progress-handle/steps-tree-feed.html","searchKeys":["stepsTreeFeed","abstract val stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>?","net.corda.core.messaging.FlowProgressHandle.stepsTreeFeed"]},{"name":"abstract val stepsTreeIndexFeed: DataFeed<Int, Int>?","description":"net.corda.core.messaging.FlowProgressHandle.stepsTreeIndexFeed","location":"docs/net.corda.core.messaging/-flow-progress-handle/steps-tree-index-feed.html","searchKeys":["stepsTreeIndexFeed","abstract val stepsTreeIndexFeed: DataFeed<Int, Int>?","net.corda.core.messaging.FlowProgressHandle.stepsTreeIndexFeed"]},{"name":"abstract val storageContext: SerializationContext","description":"net.corda.core.serialization.internal.SerializationEnvironment.storageContext","location":"docs/net.corda.core.serialization.internal/-serialization-environment/storage-context.html","searchKeys":["storageContext","abstract val storageContext: SerializationContext","net.corda.core.serialization.internal.SerializationEnvironment.storageContext"]},{"name":"abstract val targetPlatformVersion: Int","description":"net.corda.core.cordapp.Cordapp.targetPlatformVersion","location":"docs/net.corda.core.cordapp/-cordapp/target-platform-version.html","searchKeys":["targetPlatformVersion","abstract val targetPlatformVersion: Int","net.corda.core.cordapp.Cordapp.targetPlatformVersion"]},{"name":"abstract val telemetryComponents: List<Class<out TelemetryComponent>>","description":"net.corda.core.cordapp.Cordapp.telemetryComponents","location":"docs/net.corda.core.cordapp/-cordapp/telemetry-components.html","searchKeys":["telemetryComponents","abstract val telemetryComponents: List<Class<out TelemetryComponent>>","net.corda.core.cordapp.Cordapp.telemetryComponents"]},{"name":"abstract val telemetryService: TelemetryService","description":"net.corda.core.node.ServiceHub.telemetryService","location":"docs/net.corda.core.node/-service-hub/telemetry-service.html","searchKeys":["telemetryService","abstract val telemetryService: TelemetryService","net.corda.core.node.ServiceHub.telemetryService"]},{"name":"abstract val template: Obligation.Terms<P>","description":"net.corda.finance.contracts.asset.NetState.template","location":"docs/net.corda.finance.contracts.asset/-net-state/template.html","searchKeys":["template","abstract val template: Obligation.Terms<P>","net.corda.finance.contracts.asset.NetState.template"]},{"name":"abstract val throwableOpt: Throwable?","description":"net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext.throwableOpt","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/-connection-context/throwable-opt.html","searchKeys":["throwableOpt","abstract val throwableOpt: Throwable?","net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext.throwableOpt"]},{"name":"abstract val timestamp: Instant","description":"net.corda.core.flows.DistributionRecord.timestamp","location":"docs/net.corda.core.flows/-distribution-record/timestamp.html","searchKeys":["timestamp","abstract val timestamp: Instant","net.corda.core.flows.DistributionRecord.timestamp"]},{"name":"abstract val timestampDiscriminator: Int","description":"net.corda.core.flows.DistributionRecord.timestampDiscriminator","location":"docs/net.corda.core.flows/-distribution-record/timestamp-discriminator.html","searchKeys":["timestampDiscriminator","abstract val timestampDiscriminator: Int","net.corda.core.flows.DistributionRecord.timestampDiscriminator"]},{"name":"abstract val trustAnchor: TrustAnchor","description":"net.corda.core.node.services.IdentityService.trustAnchor","location":"docs/net.corda.core.node.services/-identity-service/trust-anchor.html","searchKeys":["trustAnchor","abstract val trustAnchor: TrustAnchor","net.corda.core.node.services.IdentityService.trustAnchor"]},{"name":"abstract val trustRoot: X509Certificate","description":"net.corda.core.node.services.IdentityService.trustRoot","location":"docs/net.corda.core.node.services/-identity-service/trust-root.html","searchKeys":["trustRoot","abstract val trustRoot: X509Certificate","net.corda.core.node.services.IdentityService.trustRoot"]},{"name":"abstract val txId: SecureHash","description":"net.corda.core.flows.DistributionRecord.txId","location":"docs/net.corda.core.flows/-distribution-record/tx-id.html","searchKeys":["txId","abstract val txId: SecureHash","net.corda.core.flows.DistributionRecord.txId"]},{"name":"abstract val type: Class<T>","description":"net.corda.core.contracts.StatePointer.type","location":"docs/net.corda.core.contracts/-state-pointer/type.html","searchKeys":["type","abstract val type: Class<T>","net.corda.core.contracts.StatePointer.type"]},{"name":"abstract val type: NetType","description":"net.corda.finance.contracts.NetCommand.type","location":"docs/net.corda.finance.contracts/-net-command/type.html","searchKeys":["type","abstract val type: NetType","net.corda.finance.contracts.NetCommand.type"]},{"name":"abstract val untilTime: Instant?","description":"net.corda.core.contracts.TimeWindow.untilTime","location":"docs/net.corda.core.contracts/-time-window/until-time.html","searchKeys":["untilTime","abstract val untilTime: Instant?","net.corda.core.contracts.TimeWindow.untilTime"]},{"name":"abstract val updates: <Error class: unknown class><SignedTransaction>","description":"net.corda.core.node.services.TransactionStorage.updates","location":"docs/net.corda.core.node.services/-transaction-storage/updates.html","searchKeys":["updates","abstract val updates: <Error class: unknown class><SignedTransaction>","net.corda.core.node.services.TransactionStorage.updates"]},{"name":"abstract val updates: <Error class: unknown class><Vault.Update<ContractState>>","description":"net.corda.core.node.services.VaultService.updates","location":"docs/net.corda.core.node.services/-vault-service/updates.html","searchKeys":["updates","abstract val updates: <Error class: unknown class><Vault.Update<ContractState>>","net.corda.core.node.services.VaultService.updates"]},{"name":"abstract val useCase: SerializationContext.UseCase","description":"net.corda.core.serialization.SerializationContext.useCase","location":"docs/net.corda.core.serialization/-serialization-context/use-case.html","searchKeys":["useCase","abstract val useCase: SerializationContext.UseCase","net.corda.core.serialization.SerializationContext.useCase"]},{"name":"abstract val useHTTPS: Boolean","description":"net.corda.testing.driver.internal.NodeHandleInternal.useHTTPS","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/use-h-t-t-p-s.html","searchKeys":["useHTTPS","abstract val useHTTPS: Boolean","net.corda.testing.driver.internal.NodeHandleInternal.useHTTPS"]},{"name":"abstract val userName: String","description":"net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext.userName","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/-connection-context/user-name.html","searchKeys":["userName","abstract val userName: String","net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext.userName"]},{"name":"abstract val validatedTransactions: TransactionStorage","description":"net.corda.core.internal.verification.NodeVerificationSupport.validatedTransactions","location":"docs/net.corda.core.internal.verification/-node-verification-support/validated-transactions.html","searchKeys":["validatedTransactions","abstract val validatedTransactions: TransactionStorage","net.corda.core.internal.verification.NodeVerificationSupport.validatedTransactions"]},{"name":"abstract val validatedTransactions: TransactionStorage","description":"net.corda.core.node.ServiceHub.validatedTransactions","location":"docs/net.corda.core.node/-service-hub/validated-transactions.html","searchKeys":["validatedTransactions","abstract val validatedTransactions: TransactionStorage","net.corda.core.node.ServiceHub.validatedTransactions"]},{"name":"abstract val vaultService: VaultService","description":"net.corda.core.node.ServiceHub.vaultService","location":"docs/net.corda.core.node/-service-hub/vault-service.html","searchKeys":["vaultService","abstract val vaultService: VaultService","net.corda.core.node.ServiceHub.vaultService"]},{"name":"abstract val vendor: String","description":"net.corda.core.cordapp.Cordapp.Info.vendor","location":"docs/net.corda.core.cordapp/-cordapp/-info/vendor.html","searchKeys":["vendor","abstract val vendor: String","net.corda.core.cordapp.Cordapp.Info.vendor"]},{"name":"abstract val version: String","description":"net.corda.core.cordapp.Cordapp.Info.version","location":"docs/net.corda.core.cordapp/-cordapp/-info/version.html","searchKeys":["version","abstract val version: String","net.corda.core.cordapp.Cordapp.Info.version"]},{"name":"abstract val webAddress: NetworkHostAndPort","description":"net.corda.testing.driver.internal.NodeHandleInternal.webAddress","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/web-address.html","searchKeys":["webAddress","abstract val webAddress: NetworkHostAndPort","net.corda.testing.driver.internal.NodeHandleInternal.webAddress"]},{"name":"abstract val whitelist: ClassWhitelist","description":"net.corda.core.serialization.SerializationContext.whitelist","location":"docs/net.corda.core.serialization/-serialization-context/whitelist.html","searchKeys":["whitelist","abstract val whitelist: ClassWhitelist","net.corda.core.serialization.SerializationContext.whitelist"]},{"name":"abstract val whitelist: ClassWhitelist","description":"net.corda.core.serialization.SerializationSchemeContext.whitelist","location":"docs/net.corda.core.serialization/-serialization-scheme-context/whitelist.html","searchKeys":["whitelist","abstract val whitelist: ClassWhitelist","net.corda.core.serialization.SerializationSchemeContext.whitelist"]},{"name":"abstract val whitelist: ClassWhitelist","description":"net.corda.core.serialization.internal.CheckpointSerializationContext.whitelist","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/whitelist.html","searchKeys":["whitelist","abstract val whitelist: ClassWhitelist","net.corda.core.serialization.internal.CheckpointSerializationContext.whitelist"]},{"name":"abstract val whitelist: List<Class<*>>","description":"net.corda.core.serialization.SerializationWhitelist.whitelist","location":"docs/net.corda.core.serialization/-serialization-whitelist/whitelist.html","searchKeys":["whitelist","abstract val whitelist: List<Class<*>>","net.corda.core.serialization.SerializationWhitelist.whitelist"]},{"name":"abstract var originalExceptionClassName: String?","description":"net.corda.core.CordaThrowable.originalExceptionClassName","location":"docs/net.corda.core/-corda-throwable/original-exception-class-name.html","searchKeys":["originalExceptionClassName","abstract var originalExceptionClassName: String?","net.corda.core.CordaThrowable.originalExceptionClassName"]},{"name":"annotation class AutoAcceptable","description":"net.corda.core.node.AutoAcceptable","location":"docs/net.corda.core.node/-auto-acceptable/index.html","searchKeys":["AutoAcceptable","annotation class AutoAcceptable","net.corda.core.node.AutoAcceptable"]},{"name":"annotation class BelongsToContract(val value: KClass<out Contract>)","description":"net.corda.core.contracts.BelongsToContract","location":"docs/net.corda.core.contracts/-belongs-to-contract/index.html","searchKeys":["BelongsToContract","annotation class BelongsToContract(val value: KClass<out Contract>)","net.corda.core.contracts.BelongsToContract"]},{"name":"annotation class ConstructorForDeserialization","description":"net.corda.core.serialization.ConstructorForDeserialization","location":"docs/net.corda.core.serialization/-constructor-for-deserialization/index.html","searchKeys":["ConstructorForDeserialization","annotation class ConstructorForDeserialization","net.corda.core.serialization.ConstructorForDeserialization"]},{"name":"annotation class CordaInternal","description":"net.corda.core.CordaInternal","location":"docs/net.corda.core/-corda-internal/index.html","searchKeys":["CordaInternal","annotation class CordaInternal","net.corda.core.CordaInternal"]},{"name":"annotation class CordaSerializable","description":"net.corda.core.serialization.CordaSerializable","location":"docs/net.corda.core.serialization/-corda-serializable/index.html","searchKeys":["CordaSerializable","annotation class CordaSerializable","net.corda.core.serialization.CordaSerializable"]},{"name":"annotation class CordaSerializationTransformEnumDefault(val new: String, val old: String)","description":"net.corda.core.serialization.CordaSerializationTransformEnumDefault","location":"docs/net.corda.core.serialization/-corda-serialization-transform-enum-default/index.html","searchKeys":["CordaSerializationTransformEnumDefault","annotation class CordaSerializationTransformEnumDefault(val new: String, val old: String)","net.corda.core.serialization.CordaSerializationTransformEnumDefault"]},{"name":"annotation class CordaSerializationTransformEnumDefaults(val value: CordaSerializationTransformEnumDefault)","description":"net.corda.core.serialization.CordaSerializationTransformEnumDefaults","location":"docs/net.corda.core.serialization/-corda-serialization-transform-enum-defaults/index.html","searchKeys":["CordaSerializationTransformEnumDefaults","annotation class CordaSerializationTransformEnumDefaults(val value: CordaSerializationTransformEnumDefault)","net.corda.core.serialization.CordaSerializationTransformEnumDefaults"]},{"name":"annotation class CordaSerializationTransformRename(val to: String, val from: String)","description":"net.corda.core.serialization.CordaSerializationTransformRename","location":"docs/net.corda.core.serialization/-corda-serialization-transform-rename/index.html","searchKeys":["CordaSerializationTransformRename","annotation class CordaSerializationTransformRename(val to: String, val from: String)","net.corda.core.serialization.CordaSerializationTransformRename"]},{"name":"annotation class CordaSerializationTransformRenames(val value: CordaSerializationTransformRename)","description":"net.corda.core.serialization.CordaSerializationTransformRenames","location":"docs/net.corda.core.serialization/-corda-serialization-transform-renames/index.html","searchKeys":["CordaSerializationTransformRenames","annotation class CordaSerializationTransformRenames(val value: CordaSerializationTransformRename)","net.corda.core.serialization.CordaSerializationTransformRenames"]},{"name":"annotation class CordaService","description":"net.corda.core.node.services.CordaService","location":"docs/net.corda.core.node.services/-corda-service/index.html","searchKeys":["CordaService","annotation class CordaService","net.corda.core.node.services.CordaService"]},{"name":"annotation class DeprecatedConstructorForDeserialization(val version: Int)","description":"net.corda.core.serialization.DeprecatedConstructorForDeserialization","location":"docs/net.corda.core.serialization/-deprecated-constructor-for-deserialization/index.html","searchKeys":["DeprecatedConstructorForDeserialization","annotation class DeprecatedConstructorForDeserialization(val version: Int)","net.corda.core.serialization.DeprecatedConstructorForDeserialization"]},{"name":"annotation class DoNotImplement","description":"net.corda.core.DoNotImplement","location":"docs/net.corda.core/-do-not-implement/index.html","searchKeys":["DoNotImplement","annotation class DoNotImplement","net.corda.core.DoNotImplement"]},{"name":"annotation class InitiatedBy(val value: KClass<out FlowLogic<*>>)","description":"net.corda.core.flows.InitiatedBy","location":"docs/net.corda.core.flows/-initiated-by/index.html","searchKeys":["InitiatedBy","annotation class InitiatedBy(val value: KClass<out FlowLogic<*>>)","net.corda.core.flows.InitiatedBy"]},{"name":"annotation class InitiatingFlow(val version: Int = 1)","description":"net.corda.core.flows.InitiatingFlow","location":"docs/net.corda.core.flows/-initiating-flow/index.html","searchKeys":["InitiatingFlow","annotation class InitiatingFlow(val version: Int = 1)","net.corda.core.flows.InitiatingFlow"]},{"name":"annotation class LegalProseReference(val uri: String)","description":"net.corda.core.contracts.LegalProseReference","location":"docs/net.corda.core.contracts/-legal-prose-reference/index.html","searchKeys":["LegalProseReference","annotation class LegalProseReference(val uri: String)","net.corda.core.contracts.LegalProseReference"]},{"name":"annotation class NoConstraintPropagation","description":"net.corda.core.contracts.NoConstraintPropagation","location":"docs/net.corda.core.contracts/-no-constraint-propagation/index.html","searchKeys":["NoConstraintPropagation","annotation class NoConstraintPropagation","net.corda.core.contracts.NoConstraintPropagation"]},{"name":"annotation class RPCReturnsObservables","description":"net.corda.core.messaging.RPCReturnsObservables","location":"docs/net.corda.core.messaging/-r-p-c-returns-observables/index.html","searchKeys":["RPCReturnsObservables","annotation class RPCReturnsObservables","net.corda.core.messaging.RPCReturnsObservables"]},{"name":"annotation class RPCSinceVersion(val version: Int)","description":"net.corda.client.rpc.RPCSinceVersion","location":"docs/net.corda.client.rpc/-r-p-c-since-version/index.html","searchKeys":["RPCSinceVersion","annotation class RPCSinceVersion(val version: Int)","net.corda.client.rpc.RPCSinceVersion"]},{"name":"annotation class SchedulableFlow","description":"net.corda.core.flows.SchedulableFlow","location":"docs/net.corda.core.flows/-schedulable-flow/index.html","searchKeys":["SchedulableFlow","annotation class SchedulableFlow","net.corda.core.flows.SchedulableFlow"]},{"name":"annotation class SerializableCalculatedProperty","description":"net.corda.core.serialization.SerializableCalculatedProperty","location":"docs/net.corda.core.serialization/-serializable-calculated-property/index.html","searchKeys":["SerializableCalculatedProperty","annotation class SerializableCalculatedProperty","net.corda.core.serialization.SerializableCalculatedProperty"]},{"name":"annotation class StartableByRPC","description":"net.corda.core.flows.StartableByRPC","location":"docs/net.corda.core.flows/-startable-by-r-p-c/index.html","searchKeys":["StartableByRPC","annotation class StartableByRPC","net.corda.core.flows.StartableByRPC"]},{"name":"annotation class StartableByService","description":"net.corda.core.flows.StartableByService","location":"docs/net.corda.core.flows/-startable-by-service/index.html","searchKeys":["StartableByService","annotation class StartableByService","net.corda.core.flows.StartableByService"]},{"name":"annotation class ToStringSerialize","description":"net.corda.client.jackson.internal.ToStringSerialize","location":"docs/net.corda.client.jackson.internal/-to-string-serialize/index.html","searchKeys":["ToStringSerialize","annotation class ToStringSerialize","net.corda.client.jackson.internal.ToStringSerialize"]},{"name":"annotation class VisibleForTesting","description":"net.corda.core.internal.VisibleForTesting","location":"docs/net.corda.core.internal/-visible-for-testing/index.html","searchKeys":["VisibleForTesting","annotation class VisibleForTesting","net.corda.core.internal.VisibleForTesting"]},{"name":"class AddressBindingException(val addresses: Set<NetworkHostAndPort>) : CordaRuntimeException","description":"net.corda.core.internal.errors.AddressBindingException","location":"docs/net.corda.core.internal.errors/-address-binding-exception/index.html","searchKeys":["AddressBindingException","class AddressBindingException(val addresses: Set<NetworkHostAndPort>) : CordaRuntimeException","net.corda.core.internal.errors.AddressBindingException"]},{"name":"class AlwaysInternableVerifier<T> : IternabilityVerifier<T> ","description":"net.corda.core.internal.utilities.AlwaysInternableVerifier","location":"docs/net.corda.core.internal.utilities/-always-internable-verifier/index.html","searchKeys":["AlwaysInternableVerifier","class AlwaysInternableVerifier<T> : IternabilityVerifier<T> ","net.corda.core.internal.utilities.AlwaysInternableVerifier"]},{"name":"class AmountTransfer<T : Any, P : Any>(val quantityDelta: Long, val token: T, val source: P, val destination: P)","description":"net.corda.core.contracts.AmountTransfer","location":"docs/net.corda.core.contracts/-amount-transfer/index.html","searchKeys":["AmountTransfer","class AmountTransfer<T : Any, P : Any>(val quantityDelta: Long, val token: T, val source: P, val destination: P)","net.corda.core.contracts.AmountTransfer"]},{"name":"class AndComposition(val a: AttachmentQueryCriteria, val b: AttachmentQueryCriteria) : AttachmentQueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.AndVisitor<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser, AttachmentSort> ","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-and-composition/index.html","searchKeys":["AndComposition","class AndComposition(val a: AttachmentQueryCriteria, val b: AttachmentQueryCriteria) : AttachmentQueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.AndVisitor<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser, AttachmentSort> ","net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition"]},{"name":"class AndComposition(val a: QueryCriteria, val b: QueryCriteria) : QueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.AndVisitor<QueryCriteria, IQueryCriteriaParser, Sort> ","description":"net.corda.core.node.services.vault.QueryCriteria.AndComposition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-and-composition/index.html","searchKeys":["AndComposition","class AndComposition(val a: QueryCriteria, val b: QueryCriteria) : QueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.AndVisitor<QueryCriteria, IQueryCriteriaParser, Sort> ","net.corda.core.node.services.vault.QueryCriteria.AndComposition"]},{"name":"class AnonymousParty(val owningKey: PublicKey) : AbstractParty, Destination","description":"net.corda.core.identity.AnonymousParty","location":"docs/net.corda.core.identity/-anonymous-party/index.html","searchKeys":["AnonymousParty","class AnonymousParty(val owningKey: PublicKey) : AbstractParty, Destination","net.corda.core.identity.AnonymousParty"]},{"name":"class AssetMismatchException(val expectedTypeName: String, val typeName: String) : FlowException","description":"net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-asset-mismatch-exception/index.html","searchKeys":["AssetMismatchException","class AssetMismatchException(val expectedTypeName: String, val typeName: String) : FlowException","net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException"]},{"name":"class AttachmentFixups","description":"net.corda.core.internal.verification.AttachmentFixups","location":"docs/net.corda.core.internal.verification/-attachment-fixups/index.html","searchKeys":["AttachmentFixups","class AttachmentFixups","net.corda.core.internal.verification.AttachmentFixups"]},{"name":"class AttachmentResolutionException(attachmentId: SecureHash) : FlowException","description":"net.corda.testing.dsl.AttachmentResolutionException","location":"docs/net.corda.testing.dsl/-attachment-resolution-exception/index.html","searchKeys":["AttachmentResolutionException","class AttachmentResolutionException(attachmentId: SecureHash) : FlowException","net.corda.testing.dsl.AttachmentResolutionException"]},{"name":"class AttachmentResolutionException(val hash: AttachmentId) : FlowException","description":"net.corda.core.contracts.AttachmentResolutionException","location":"docs/net.corda.core.contracts/-attachment-resolution-exception/index.html","searchKeys":["AttachmentResolutionException","class AttachmentResolutionException(val hash: AttachmentId) : FlowException","net.corda.core.contracts.AttachmentResolutionException"]},{"name":"class AttachmentTooBigException(val txId: SecureHash) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.AttachmentTooBigException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-attachment-too-big-exception/index.html","searchKeys":["AttachmentTooBigException","class AttachmentTooBigException(val txId: SecureHash) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.AttachmentTooBigException"]},{"name":"class AttachmentWithContext(val contractAttachment: ContractAttachment, val contract: ContractClassName, val whitelistedContractImplementations: Map<String, List<AttachmentId>>) : Attachment","description":"net.corda.core.internal.AttachmentWithContext","location":"docs/net.corda.core.internal/-attachment-with-context/index.html","searchKeys":["AttachmentWithContext","class AttachmentWithContext(val contractAttachment: ContractAttachment, val contract: ContractClassName, val whitelistedContractImplementations: Map<String, List<AttachmentId>>) : Attachment","net.corda.core.internal.AttachmentWithContext"]},{"name":"class AttachmentsClassLoader(attachments: List<Attachment>, val params: NetworkParameters, sampleTxId: SecureHash, isAttachmentTrusted: (Attachment) -> Boolean, parent: ClassLoader = ClassLoader.getSystemClassLoader()) : URLClassLoader","description":"net.corda.core.serialization.internal.AttachmentsClassLoader","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader/index.html","searchKeys":["AttachmentsClassLoader","class AttachmentsClassLoader(attachments: List<Attachment>, val params: NetworkParameters, sampleTxId: SecureHash, isAttachmentTrusted: (Attachment) -> Boolean, parent: ClassLoader = ClassLoader.getSystemClassLoader()) : URLClassLoader","net.corda.core.serialization.internal.AttachmentsClassLoader"]},{"name":"class AttachmentsClassLoaderCacheImpl(cacheFactory: NamedCacheFactory) : SingletonSerializeAsToken, AttachmentsClassLoaderCache","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderCacheImpl","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-cache-impl/index.html","searchKeys":["AttachmentsClassLoaderCacheImpl","class AttachmentsClassLoaderCacheImpl(cacheFactory: NamedCacheFactory) : SingletonSerializeAsToken, AttachmentsClassLoaderCache","net.corda.core.serialization.internal.AttachmentsClassLoaderCacheImpl"]},{"name":"class AttachmentsClassLoaderSimpleCacheImpl(cacheSize: Int) : AttachmentsClassLoaderCache","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderSimpleCacheImpl","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-simple-cache-impl/index.html","searchKeys":["AttachmentsClassLoaderSimpleCacheImpl","class AttachmentsClassLoaderSimpleCacheImpl(cacheSize: Int) : AttachmentsClassLoaderCache","net.corda.core.serialization.internal.AttachmentsClassLoaderSimpleCacheImpl"]},{"name":"class Authorise(val stateAndRef: StateAndRef<*>, upgradedContractClass: Class<out UpgradedContract<*, *>>) : FlowLogic<Void?> ","description":"net.corda.core.flows.ContractUpgradeFlow.Authorise","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-authorise/index.html","searchKeys":["Authorise","class Authorise(val stateAndRef: StateAndRef<*>, upgradedContractClass: Class<out UpgradedContract<*, *>>) : FlowLogic<Void?> ","net.corda.core.flows.ContractUpgradeFlow.Authorise"]},{"name":"class BrokenAttachmentException(val attachmentId: AttachmentId, message: String?, cause: Throwable?) : FlowException","description":"net.corda.core.contracts.BrokenAttachmentException","location":"docs/net.corda.core.contracts/-broken-attachment-exception/index.html","searchKeys":["BrokenAttachmentException","class BrokenAttachmentException(val attachmentId: AttachmentId, message: String?, cause: Throwable?) : FlowException","net.corda.core.contracts.BrokenAttachmentException"]},{"name":"class BrokenTransactionException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.BrokenTransactionException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-broken-transaction-exception/index.html","searchKeys":["BrokenTransactionException","class BrokenTransactionException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.BrokenTransactionException"]},{"name":"class Builder","description":"net.corda.core.crypto.CompositeKey.Builder","location":"docs/net.corda.core.crypto/-composite-key/-builder/index.html","searchKeys":["Builder","class Builder","net.corda.core.crypto.CompositeKey.Builder"]},{"name":"class Cash : OnLedgerAsset<Currency, Cash.Commands, Cash.State> ","description":"net.corda.finance.contracts.asset.Cash","location":"docs/net.corda.finance.contracts.asset/-cash/index.html","searchKeys":["Cash","class Cash : OnLedgerAsset<Currency, Cash.Commands, Cash.State> ","net.corda.finance.contracts.asset.Cash"]},{"name":"class CashConfigDataFlow : FlowLogic<CashConfiguration> ","description":"net.corda.finance.internal.CashConfigDataFlow","location":"docs/net.corda.finance.internal/-cash-config-data-flow/index.html","searchKeys":["CashConfigDataFlow","class CashConfigDataFlow : FlowLogic<CashConfiguration> ","net.corda.finance.internal.CashConfigDataFlow"]},{"name":"class CashException : FlowException","description":"net.corda.finance.flows.CashException","location":"docs/net.corda.finance.flows/-cash-exception/index.html","searchKeys":["CashException","class CashException : FlowException","net.corda.finance.flows.CashException"]},{"name":"class CashExitFlow(amount: Amount<Currency>, issuerRef: OpaqueBytes, progressTracker: ProgressTracker) : AbstractCashFlow<AbstractCashFlow.Result> ","description":"net.corda.finance.flows.CashExitFlow","location":"docs/net.corda.finance.flows/-cash-exit-flow/index.html","searchKeys":["CashExitFlow","class CashExitFlow(amount: Amount<Currency>, issuerRef: OpaqueBytes, progressTracker: ProgressTracker) : AbstractCashFlow<AbstractCashFlow.Result> ","net.corda.finance.flows.CashExitFlow"]},{"name":"class CashExitResponderFlow(otherSide: FlowSession) : FlowLogic<Unit> ","description":"net.corda.finance.flows.CashExitResponderFlow","location":"docs/net.corda.finance.flows/-cash-exit-responder-flow/index.html","searchKeys":["CashExitResponderFlow","class CashExitResponderFlow(otherSide: FlowSession) : FlowLogic<Unit> ","net.corda.finance.flows.CashExitResponderFlow"]},{"name":"class CashIssueAndPaymentFlow(val amount: Amount<Currency>, val issueRef: OpaqueBytes, val recipient: Party, val anonymous: Boolean, val notary: Party, progressTracker: ProgressTracker) : AbstractCashFlow<AbstractCashFlow.Result> ","description":"net.corda.finance.flows.CashIssueAndPaymentFlow","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/index.html","searchKeys":["CashIssueAndPaymentFlow","class CashIssueAndPaymentFlow(val amount: Amount<Currency>, val issueRef: OpaqueBytes, val recipient: Party, val anonymous: Boolean, val notary: Party, progressTracker: ProgressTracker) : AbstractCashFlow<AbstractCashFlow.Result> ","net.corda.finance.flows.CashIssueAndPaymentFlow"]},{"name":"class CashIssueFlow(amount: Amount<Currency>, issuerBankPartyRef: OpaqueBytes, notary: Party, progressTracker: ProgressTracker) : AbstractCashFlow<AbstractCashFlow.Result> ","description":"net.corda.finance.flows.CashIssueFlow","location":"docs/net.corda.finance.flows/-cash-issue-flow/index.html","searchKeys":["CashIssueFlow","class CashIssueFlow(amount: Amount<Currency>, issuerBankPartyRef: OpaqueBytes, notary: Party, progressTracker: ProgressTracker) : AbstractCashFlow<AbstractCashFlow.Result> ","net.corda.finance.flows.CashIssueFlow"]},{"name":"class CashPaymentReceiverFlow(otherSide: FlowSession) : FlowLogic<Unit> ","description":"net.corda.finance.flows.CashPaymentReceiverFlow","location":"docs/net.corda.finance.flows/-cash-payment-receiver-flow/index.html","searchKeys":["CashPaymentReceiverFlow","class CashPaymentReceiverFlow(otherSide: FlowSession) : FlowLogic<Unit> ","net.corda.finance.flows.CashPaymentReceiverFlow"]},{"name":"class CashSelectionH2Impl : AbstractCashSelection","description":"net.corda.finance.workflows.asset.selection.CashSelectionH2Impl","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-h2-impl/index.html","searchKeys":["CashSelectionH2Impl","class CashSelectionH2Impl : AbstractCashSelection","net.corda.finance.workflows.asset.selection.CashSelectionH2Impl"]},{"name":"class CashSelectionPostgreSQLImpl : AbstractCashSelection","description":"net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-postgre-s-q-l-impl/index.html","searchKeys":["CashSelectionPostgreSQLImpl","class CashSelectionPostgreSQLImpl : AbstractCashSelection","net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl"]},{"name":"class CashSelectionSQLServerImpl : AbstractCashSelection","description":"net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-s-q-l-server-impl/index.html","searchKeys":["CashSelectionSQLServerImpl","class CashSelectionSQLServerImpl : AbstractCashSelection","net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl"]},{"name":"class ClientCacheFactory : NamedCacheFactory","description":"net.corda.client.rpc.internal.ClientCacheFactory","location":"docs/net.corda.client.rpc.internal/-client-cache-factory/index.html","searchKeys":["ClientCacheFactory","class ClientCacheFactory : NamedCacheFactory","net.corda.client.rpc.internal.ClientCacheFactory"]},{"name":"class CollectSignatureFlow(val partiallySignedTx: SignedTransaction, val session: FlowSession, val signingKeys: List<PublicKey>) : FlowLogic<List<TransactionSignature>> ","description":"net.corda.core.flows.CollectSignatureFlow","location":"docs/net.corda.core.flows/-collect-signature-flow/index.html","searchKeys":["CollectSignatureFlow","class CollectSignatureFlow(val partiallySignedTx: SignedTransaction, val session: FlowSession, val signingKeys: List<PublicKey>) : FlowLogic<List<TransactionSignature>> ","net.corda.core.flows.CollectSignatureFlow"]},{"name":"class CollectSignaturesFlow constructor(val partiallySignedTx: SignedTransaction, val sessionsToCollectFrom: Collection<FlowSession>, val myOptionalKeys: Iterable<PublicKey>?, val progressTracker: ProgressTracker = tracker()) : FlowLogic<SignedTransaction> ","description":"net.corda.core.flows.CollectSignaturesFlow","location":"docs/net.corda.core.flows/-collect-signatures-flow/index.html","searchKeys":["CollectSignaturesFlow","class CollectSignaturesFlow constructor(val partiallySignedTx: SignedTransaction, val sessionsToCollectFrom: Collection<FlowSession>, val myOptionalKeys: Iterable<PublicKey>?, val progressTracker: ProgressTracker = tracker()) : FlowLogic<SignedTransaction> ","net.corda.core.flows.CollectSignaturesFlow"]},{"name":"class Column<O, out C>(val name: String, val declaringClass: Class<*>)","description":"net.corda.core.node.services.vault.Column","location":"docs/net.corda.core.node.services.vault/-column/index.html","searchKeys":["Column","class Column<O, out C>(val name: String, val declaringClass: Class<*>)","net.corda.core.node.services.vault.Column"]},{"name":"class CommercialPaper : Contract","description":"net.corda.finance.contracts.CommercialPaper","location":"docs/net.corda.finance.contracts/-commercial-paper/index.html","searchKeys":["CommercialPaper","class CommercialPaper : Contract","net.corda.finance.contracts.CommercialPaper"]},{"name":"class CommitOperation(val service: SinglePartyNotaryService, val inputs: List<StateRef>, val txId: SecureHash, val caller: Party, val requestSignature: NotarisationRequestSignature, val timeWindow: TimeWindow?, val references: List<StateRef>) : FlowExternalAsyncOperation<UniquenessProvider.Result> ","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/index.html","searchKeys":["CommitOperation","class CommitOperation(val service: SinglePartyNotaryService, val inputs: List<StateRef>, val txId: SecureHash, val caller: Party, val requestSignature: NotarisationRequestSignature, val timeWindow: TimeWindow?, val references: List<StateRef>) : FlowExternalAsyncOperation<UniquenessProvider.Result> ","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation"]},{"name":"class ComponentVisibilityException(val id: SecureHash, val reason: String) : CordaException","description":"net.corda.core.transactions.ComponentVisibilityException","location":"docs/net.corda.core.transactions/-component-visibility-exception/index.html","searchKeys":["ComponentVisibilityException","class ComponentVisibilityException(val id: SecureHash, val reason: String) : CordaException","net.corda.core.transactions.ComponentVisibilityException"]},{"name":"class CompositeKey : PublicKey","description":"net.corda.core.crypto.CompositeKey","location":"docs/net.corda.core.crypto/-composite-key/index.html","searchKeys":["CompositeKey","class CompositeKey : PublicKey","net.corda.core.crypto.CompositeKey"]},{"name":"class CompositeKeyFactory : KeyFactorySpi","description":"net.corda.core.crypto.CompositeKeyFactory","location":"docs/net.corda.core.crypto/-composite-key-factory/index.html","searchKeys":["CompositeKeyFactory","class CompositeKeyFactory : KeyFactorySpi","net.corda.core.crypto.CompositeKeyFactory"]},{"name":"class CompositeSignature : Signature","description":"net.corda.core.crypto.CompositeSignature","location":"docs/net.corda.core.crypto/-composite-signature/index.html","searchKeys":["CompositeSignature","class CompositeSignature : Signature","net.corda.core.crypto.CompositeSignature"]},{"name":"class ConfigHolder(services: AppServiceHub) : SingletonSerializeAsToken","description":"net.corda.finance.internal.ConfigHolder","location":"docs/net.corda.finance.internal/-config-holder/index.html","searchKeys":["ConfigHolder","class ConfigHolder(services: AppServiceHub) : SingletonSerializeAsToken","net.corda.finance.internal.ConfigHolder"]},{"name":"class ConflictingAttachmentsRejection(val txId: SecureHash, val contractClass: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.ConflictingAttachmentsRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-conflicting-attachments-rejection/index.html","searchKeys":["ConflictingAttachmentsRejection","class ConflictingAttachmentsRejection(val txId: SecureHash, val contractClass: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.ConflictingAttachmentsRejection"]},{"name":"class ConstraintPropagationRejection(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-constraint-propagation-rejection/index.html","searchKeys":["ConstraintPropagationRejection","class ConstraintPropagationRejection(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection"]},{"name":"class ContractAttachment : Attachment","description":"net.corda.core.contracts.ContractAttachment","location":"docs/net.corda.core.contracts/-contract-attachment/index.html","searchKeys":["ContractAttachment","class ContractAttachment : Attachment","net.corda.core.contracts.ContractAttachment"]},{"name":"class ContractConstraintRejection(val txId: SecureHash, val contractClass: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.ContractConstraintRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-contract-constraint-rejection/index.html","searchKeys":["ContractConstraintRejection","class ContractConstraintRejection(val txId: SecureHash, val contractClass: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.ContractConstraintRejection"]},{"name":"class ContractCreationError : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.ContractCreationError","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-contract-creation-error/index.html","searchKeys":["ContractCreationError","class ContractCreationError : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.ContractCreationError"]},{"name":"class ContractRejection : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.ContractRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-contract-rejection/index.html","searchKeys":["ContractRejection","class ContractRejection : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.ContractRejection"]},{"name":"class ContractUpgradeLedgerTransaction : FullTransaction, TransactionWithSignatures","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/index.html","searchKeys":["ContractUpgradeLedgerTransaction","class ContractUpgradeLedgerTransaction : FullTransaction, TransactionWithSignatures","net.corda.core.transactions.ContractUpgradeLedgerTransaction"]},{"name":"class ContractUpgradeTransactionBuilder(val inputs: List<StateRef>, val notary: Party, val legacyContractAttachmentId: SecureHash, val upgradedContractClassName: ContractClassName, val upgradedContractAttachmentId: SecureHash, privacySalt: PrivacySalt = PrivacySalt(), val networkParametersHash: SecureHash, val digestService: DigestService = DigestService.sha2_256)","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/index.html","searchKeys":["ContractUpgradeTransactionBuilder","class ContractUpgradeTransactionBuilder(val inputs: List<StateRef>, val notary: Party, val legacyContractAttachmentId: SecureHash, val upgradedContractClassName: ContractClassName, val upgradedContractAttachmentId: SecureHash, privacySalt: PrivacySalt = PrivacySalt(), val networkParametersHash: SecureHash, val digestService: DigestService = DigestService.sha2_256)","net.corda.core.internal.ContractUpgradeTransactionBuilder"]},{"name":"class CordaFutureImpl<V>(impl: CompletableFuture<V> = CompletableFuture()) : Future<V> , OpenFuture<V> ","description":"net.corda.core.internal.concurrent.CordaFutureImpl","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/index.html","searchKeys":["CordaFutureImpl","class CordaFutureImpl<V>(impl: CompletableFuture<V> = CompletableFuture()) : Future<V> , OpenFuture<V> ","net.corda.core.internal.concurrent.CordaFutureImpl"]},{"name":"class CordaModule","description":"net.corda.client.jackson.internal.CordaModule","location":"docs/net.corda.client.jackson.internal/-corda-module/index.html","searchKeys":["CordaModule","class CordaModule","net.corda.client.jackson.internal.CordaModule"]},{"name":"class CordaRPCClient","description":"net.corda.client.rpc.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/index.html","searchKeys":["CordaRPCClient","class CordaRPCClient","net.corda.client.rpc.CordaRPCClient"]},{"name":"class CordaRPCConnection : RPCConnection<CordaRPCOps> ","description":"net.corda.client.rpc.CordaRPCConnection","location":"docs/net.corda.client.rpc/-corda-r-p-c-connection/index.html","searchKeys":["CordaRPCConnection","class CordaRPCConnection : RPCConnection<CordaRPCOps> ","net.corda.client.rpc.CordaRPCConnection"]},{"name":"class CordaSecurityProvider : Provider","description":"net.corda.core.crypto.CordaSecurityProvider","location":"docs/net.corda.core.crypto/-corda-security-provider/index.html","searchKeys":["CordaSecurityProvider","class CordaSecurityProvider : Provider","net.corda.core.crypto.CordaSecurityProvider"]},{"name":"class CordaServiceCriticalFailureException(message: String, cause: Throwable?) : Exception","description":"net.corda.core.node.services.CordaServiceCriticalFailureException","location":"docs/net.corda.core.node.services/-corda-service-critical-failure-exception/index.html","searchKeys":["CordaServiceCriticalFailureException","class CordaServiceCriticalFailureException(message: String, cause: Throwable?) : Exception","net.corda.core.node.services.CordaServiceCriticalFailureException"]},{"name":"class CordappConfigException(msg: String, e: Throwable) : Exception","description":"net.corda.core.cordapp.CordappConfigException","location":"docs/net.corda.core.cordapp/-cordapp-config-exception/index.html","searchKeys":["CordappConfigException","class CordappConfigException(msg: String, e: Throwable) : Exception","net.corda.core.cordapp.CordappConfigException"]},{"name":"class CordappContext","description":"net.corda.core.cordapp.CordappContext","location":"docs/net.corda.core.cordapp/-cordapp-context/index.html","searchKeys":["CordappContext","class CordappContext","net.corda.core.cordapp.CordappContext"]},{"name":"class CouldNotStartFlowException(cause: Throwable? = null) : RPCException","description":"net.corda.client.rpc.reconnect.CouldNotStartFlowException","location":"docs/net.corda.client.rpc.reconnect/-could-not-start-flow-exception/index.html","searchKeys":["CouldNotStartFlowException","class CouldNotStartFlowException(cause: Throwable? = null) : RPCException","net.corda.client.rpc.reconnect.CouldNotStartFlowException"]},{"name":"class CrlServer(hostAndPort: NetworkHostAndPort) : Closeable","description":"net.corda.testing.node.internal.network.CrlServer","location":"docs/net.corda.testing.node.internal.network/-crl-server/index.html","searchKeys":["CrlServer","class CrlServer(hostAndPort: NetworkHostAndPort) : Closeable","net.corda.testing.node.internal.network.CrlServer"]},{"name":"class CrlServlet(crlServer: CrlServer)","description":"net.corda.testing.node.internal.network.CrlServer.CrlServlet","location":"docs/net.corda.testing.node.internal.network/-crl-server/-crl-servlet/index.html","searchKeys":["CrlServlet","class CrlServlet(crlServer: CrlServer)","net.corda.testing.node.internal.network.CrlServer.CrlServlet"]},{"name":"class CustomSerializationSchemeUtils","description":"net.corda.core.serialization.internal.CustomSerializationSchemeUtils","location":"docs/net.corda.core.serialization.internal/-custom-serialization-scheme-utils/index.html","searchKeys":["CustomSerializationSchemeUtils","class CustomSerializationSchemeUtils","net.corda.core.serialization.internal.CustomSerializationSchemeUtils"]},{"name":"class Deauthorise(val stateRef: StateRef) : FlowLogic<Void?> ","description":"net.corda.core.flows.ContractUpgradeFlow.Deauthorise","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-deauthorise/index.html","searchKeys":["Deauthorise","class Deauthorise(val stateRef: StateRef) : FlowLogic<Void?> ","net.corda.core.flows.ContractUpgradeFlow.Deauthorise"]},{"name":"class DeclaredField<T>(clazz: Class<*>, name: String, receiver: Any?)","description":"net.corda.core.internal.DeclaredField","location":"docs/net.corda.core.internal/-declared-field/index.html","searchKeys":["DeclaredField","class DeclaredField<T>(clazz: Class<*>, name: String, receiver: Any?)","net.corda.core.internal.DeclaredField"]},{"name":"class DigitalSignatureWithCert(val by: X509Certificate, val parentCertsChain: List<X509Certificate>, bytes: ByteArray) : DigitalSignature","description":"net.corda.core.internal.DigitalSignatureWithCert","location":"docs/net.corda.core.internal/-digital-signature-with-cert/index.html","searchKeys":["DigitalSignatureWithCert","class DigitalSignatureWithCert(val by: X509Certificate, val parentCertsChain: List<X509Certificate>, bytes: ByteArray) : DigitalSignature","net.corda.core.internal.DigitalSignatureWithCert"]},{"name":"class DistributionRecords(val senderRecords: List<SenderDistributionRecord> = emptyList(), val receiverRecords: List<ReceiverDistributionRecord> = emptyList())","description":"net.corda.core.flows.DistributionRecords","location":"docs/net.corda.core.flows/-distribution-records/index.html","searchKeys":["DistributionRecords","class DistributionRecords(val senderRecords: List<SenderDistributionRecord> = emptyList(), val receiverRecords: List<ReceiverDistributionRecord> = emptyList())","net.corda.core.flows.DistributionRecords"]},{"name":"class DoubleSpentInputs(ids: List<SecureHash>) : FlowException","description":"net.corda.testing.dsl.DoubleSpentInputs","location":"docs/net.corda.testing.dsl/-double-spent-inputs/index.html","searchKeys":["DoubleSpentInputs","class DoubleSpentInputs(ids: List<SecureHash>) : FlowException","net.corda.testing.dsl.DoubleSpentInputs"]},{"name":"class DownloadedVsRequestedDataMismatch(val requested: SecureHash, val got: SecureHash) : IllegalArgumentException","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-data-mismatch/index.html","searchKeys":["DownloadedVsRequestedDataMismatch","class DownloadedVsRequestedDataMismatch(val requested: SecureHash, val got: SecureHash) : IllegalArgumentException","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch"]},{"name":"class DownloadedVsRequestedSizeMismatch(val requested: Int, val got: Int) : IllegalArgumentException","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-size-mismatch/index.html","searchKeys":["DownloadedVsRequestedSizeMismatch","class DownloadedVsRequestedSizeMismatch(val requested: Int, val got: Int) : IllegalArgumentException","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch"]},{"name":"class DriverDSLImpl(val portAllocation: PortAllocation, val debugPortAllocation: PortAllocation, val systemProperties: Map<String, String>, val driverDirectory: Path, val useTestClock: Boolean, val isDebug: Boolean, val startNodesInProcess: Boolean, val waitForAllNodesToFinish: Boolean, val extraCordappPackagesToScan: List<String>, val jmxPolicy: JmxPolicy, val notarySpecs: List<NotarySpec>, val compatibilityZone: CompatibilityZoneParams?, val networkParameters: NetworkParameters, val notaryCustomOverrides: Map<String, Any?>, val inMemoryDB: Boolean, val cordappsForAllNodes: Collection<TestCordappInternal>?, val environmentVariables: Map<String, String>, val allowHibernateToManageAppSchema: Boolean = true, val premigrateH2Database: Boolean = true, val notaryHandleTimeout: Duration = Duration.ofMinutes(1)) : InternalDriverDSL","description":"net.corda.testing.node.internal.DriverDSLImpl","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/index.html","searchKeys":["DriverDSLImpl","class DriverDSLImpl(val portAllocation: PortAllocation, val debugPortAllocation: PortAllocation, val systemProperties: Map<String, String>, val driverDirectory: Path, val useTestClock: Boolean, val isDebug: Boolean, val startNodesInProcess: Boolean, val waitForAllNodesToFinish: Boolean, val extraCordappPackagesToScan: List<String>, val jmxPolicy: JmxPolicy, val notarySpecs: List<NotarySpec>, val compatibilityZone: CompatibilityZoneParams?, val networkParameters: NetworkParameters, val notaryCustomOverrides: Map<String, Any?>, val inMemoryDB: Boolean, val cordappsForAllNodes: Collection<TestCordappInternal>?, val environmentVariables: Map<String, String>, val allowHibernateToManageAppSchema: Boolean = true, val premigrateH2Database: Boolean = true, val notaryHandleTimeout: Duration = Duration.ofMinutes(1)) : InternalDriverDSL","net.corda.testing.node.internal.DriverDSLImpl"]},{"name":"class DummyDealContract : Contract","description":"net.corda.testing.internal.vault.DummyDealContract","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/index.html","searchKeys":["DummyDealContract","class DummyDealContract : Contract","net.corda.testing.internal.vault.DummyDealContract"]},{"name":"class DummyLinearContract : Contract","description":"net.corda.testing.internal.vault.DummyLinearContract","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/index.html","searchKeys":["DummyLinearContract","class DummyLinearContract : Contract","net.corda.testing.internal.vault.DummyLinearContract"]},{"name":"class DuplicateAttachmentsRejection(val txId: SecureHash, val attachmentId: Attachment) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.DuplicateAttachmentsRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-duplicate-attachments-rejection/index.html","searchKeys":["DuplicateAttachmentsRejection","class DuplicateAttachmentsRejection(val txId: SecureHash, val attachmentId: Attachment) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.DuplicateAttachmentsRejection"]},{"name":"class DuplicateOutputLabel(label: String) : FlowException","description":"net.corda.testing.dsl.DuplicateOutputLabel","location":"docs/net.corda.testing.dsl/-duplicate-output-label/index.html","searchKeys":["DuplicateOutputLabel","class DuplicateOutputLabel(label: String) : FlowException","net.corda.testing.dsl.DuplicateOutputLabel"]},{"name":"class EndSpanEvent(val telemetryId: UUID) : TelemetryEvent","description":"net.corda.core.internal.telemetry.EndSpanEvent","location":"docs/net.corda.core.internal.telemetry/-end-span-event/index.html","searchKeys":["EndSpanEvent","class EndSpanEvent(val telemetryId: UUID) : TelemetryEvent","net.corda.core.internal.telemetry.EndSpanEvent"]},{"name":"class EndSpanForFlowEvent(val telemetryId: UUID) : TelemetryEvent","description":"net.corda.core.internal.telemetry.EndSpanForFlowEvent","location":"docs/net.corda.core.internal.telemetry/-end-span-for-flow-event/index.html","searchKeys":["EndSpanForFlowEvent","class EndSpanForFlowEvent(val telemetryId: UUID) : TelemetryEvent","net.corda.core.internal.telemetry.EndSpanForFlowEvent"]},{"name":"class ExitRequest(val amount: Amount<Currency>, val issuerRef: OpaqueBytes) : AbstractCashFlow.AbstractRequest","description":"net.corda.finance.flows.CashExitFlow.ExitRequest","location":"docs/net.corda.finance.flows/-cash-exit-flow/-exit-request/index.html","searchKeys":["ExitRequest","class ExitRequest(val amount: Amount<Currency>, val issuerRef: OpaqueBytes) : AbstractCashFlow.AbstractRequest","net.corda.finance.flows.CashExitFlow.ExitRequest"]},{"name":"class FailedParse(e: Exception) : StringToMethodCallParser.UnparseableCallException","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.FailedParse","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-failed-parse/index.html","searchKeys":["FailedParse","class FailedParse(e: Exception) : StringToMethodCallParser.UnparseableCallException","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.FailedParse"]},{"name":"class FetchAttachmentsFlow(requests: Set<SecureHash>, otherSide: FlowSession) : FetchDataFlow<Attachment, ByteArray> ","description":"net.corda.core.internal.FetchAttachmentsFlow","location":"docs/net.corda.core.internal/-fetch-attachments-flow/index.html","searchKeys":["FetchAttachmentsFlow","class FetchAttachmentsFlow(requests: Set<SecureHash>, otherSide: FlowSession) : FetchDataFlow<Attachment, ByteArray> ","net.corda.core.internal.FetchAttachmentsFlow"]},{"name":"class FetchBatchTransactionsFlow(requests: Set<SecureHash>, otherSide: FlowSession, recoveryMode: Boolean = false) : FetchDataFlow<MaybeSerializedSignedTransaction, MaybeSerializedSignedTransaction> ","description":"net.corda.core.internal.FetchBatchTransactionsFlow","location":"docs/net.corda.core.internal/-fetch-batch-transactions-flow/index.html","searchKeys":["FetchBatchTransactionsFlow","class FetchBatchTransactionsFlow(requests: Set<SecureHash>, otherSide: FlowSession, recoveryMode: Boolean = false) : FetchDataFlow<MaybeSerializedSignedTransaction, MaybeSerializedSignedTransaction> ","net.corda.core.internal.FetchBatchTransactionsFlow"]},{"name":"class FetchNetworkParametersFlow(requests: Set<SecureHash>, otherSide: FlowSession) : FetchDataFlow<SignedDataWithCert<NetworkParameters>, SignedDataWithCert<NetworkParameters>> ","description":"net.corda.core.internal.FetchNetworkParametersFlow","location":"docs/net.corda.core.internal/-fetch-network-parameters-flow/index.html","searchKeys":["FetchNetworkParametersFlow","class FetchNetworkParametersFlow(requests: Set<SecureHash>, otherSide: FlowSession) : FetchDataFlow<SignedDataWithCert<NetworkParameters>, SignedDataWithCert<NetworkParameters>> ","net.corda.core.internal.FetchNetworkParametersFlow"]},{"name":"class FetchTransactionsFlow constructor(requests: Set<SecureHash>, otherSide: FlowSession, dataType: FetchDataFlow.DataType = DataType.TRANSACTION) : FetchDataFlow<SignedTransaction, SignedTransaction> ","description":"net.corda.core.internal.FetchTransactionsFlow","location":"docs/net.corda.core.internal/-fetch-transactions-flow/index.html","searchKeys":["FetchTransactionsFlow","class FetchTransactionsFlow constructor(requests: Set<SecureHash>, otherSide: FlowSession, dataType: FetchDataFlow.DataType = DataType.TRANSACTION) : FetchDataFlow<SignedTransaction, SignedTransaction> ","net.corda.core.internal.FetchTransactionsFlow"]},{"name":"class FieldInfo","description":"net.corda.core.node.services.vault.FieldInfo","location":"docs/net.corda.core.node.services.vault/-field-info/index.html","searchKeys":["FieldInfo","class FieldInfo","net.corda.core.node.services.vault.FieldInfo"]},{"name":"class FilteredComponent(val component: OpaqueBytes, val nonce: SecureHash)","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/-filtered-component/index.html","searchKeys":["FilteredComponent","class FilteredComponent(val component: OpaqueBytes, val nonce: SecureHash)","net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent"]},{"name":"class FilteredTransaction : TraversableTransaction","description":"net.corda.core.transactions.FilteredTransaction","location":"docs/net.corda.core.transactions/-filtered-transaction/index.html","searchKeys":["FilteredTransaction","class FilteredTransaction : TraversableTransaction","net.corda.core.transactions.FilteredTransaction"]},{"name":"class FilteredTransactionVerificationException(val id: SecureHash, val reason: String) : CordaException","description":"net.corda.core.transactions.FilteredTransactionVerificationException","location":"docs/net.corda.core.transactions/-filtered-transaction-verification-exception/index.html","searchKeys":["FilteredTransactionVerificationException","class FilteredTransactionVerificationException(val id: SecureHash, val reason: String) : CordaException","net.corda.core.transactions.FilteredTransactionVerificationException"]},{"name":"class FinalityFlow : FlowLogic<SignedTransaction> ","description":"net.corda.core.flows.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/index.html","searchKeys":["FinalityFlow","class FinalityFlow : FlowLogic<SignedTransaction> ","net.corda.core.flows.FinalityFlow"]},{"name":"class FinalityRecoveryFlow(txIds: Collection<SecureHash> = emptySet(), flowIds: Collection<StateMachineRunId> = emptySet(), matchingCriteria: FlowRecoveryQuery? = null, forceRecover: Boolean = false, recoverAll: Boolean = false, forceRecoverFlowIds: Collection<StateMachineRunId> = emptySet(), val progressTracker: ProgressTracker = ProgressTracker()) : FlowLogic<Map<FlowTransactionInfo, Boolean>> ","description":"net.corda.core.flows.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/index.html","searchKeys":["FinalityRecoveryFlow","class FinalityRecoveryFlow(txIds: Collection<SecureHash> = emptySet(), flowIds: Collection<StateMachineRunId> = emptySet(), matchingCriteria: FlowRecoveryQuery? = null, forceRecover: Boolean = false, recoverAll: Boolean = false, forceRecoverFlowIds: Collection<StateMachineRunId> = emptySet(), val progressTracker: ProgressTracker = ProgressTracker()) : FlowLogic<Map<FlowTransactionInfo, Boolean>> ","net.corda.core.flows.FinalityRecoveryFlow"]},{"name":"class FlowRecoveryException(message: String, cause: Throwable? = null) : FlowException","description":"net.corda.core.flows.FlowRecoveryException","location":"docs/net.corda.core.flows/-flow-recovery-exception/index.html","searchKeys":["FlowRecoveryException","class FlowRecoveryException(message: String, cause: Throwable? = null) : FlowException","net.corda.core.flows.FlowRecoveryException"]},{"name":"class FlowStackSnapshotFactoryImpl","description":"net.corda.testing.internal.FlowStackSnapshotFactoryImpl","location":"docs/net.corda.testing.internal/-flow-stack-snapshot-factory-impl/index.html","searchKeys":["FlowStackSnapshotFactoryImpl","class FlowStackSnapshotFactoryImpl","net.corda.testing.internal.FlowStackSnapshotFactoryImpl"]},{"name":"class FungibleState(var participants: MutableSet<AbstractParty?>? = null, var owner: AbstractParty, var quantity: Long, var issuer: AbstractParty, var issuerRef: ByteArray) : PersistentState","description":"net.corda.core.schemas.CommonSchemaV1.FungibleState","location":"docs/net.corda.core.schemas/-common-schema-v1/-fungible-state/index.html","searchKeys":["FungibleState","class FungibleState(var participants: MutableSet<AbstractParty?>? = null, var owner: AbstractParty, var quantity: Long, var issuer: AbstractParty, var issuerRef: ByteArray) : PersistentState","net.corda.core.schemas.CommonSchemaV1.FungibleState"]},{"name":"class GracefulReconnect(val onDisconnect: () -> Unit = {}, val onReconnect: () -> Unit = {}, val maxAttempts: Int = 5)","description":"net.corda.client.rpc.GracefulReconnect","location":"docs/net.corda.client.rpc/-graceful-reconnect/index.html","searchKeys":["GracefulReconnect","class GracefulReconnect(val onDisconnect: () -> Unit = {}, val onReconnect: () -> Unit = {}, val maxAttempts: Int = 5)","net.corda.client.rpc.GracefulReconnect"]},{"name":"class HASH(val algorithm: String, bytes: ByteArray) : SecureHash","description":"net.corda.core.crypto.SecureHash.HASH","location":"docs/net.corda.core.crypto/-secure-hash/-h-a-s-h/index.html","searchKeys":["HASH","class HASH(val algorithm: String, bytes: ByteArray) : SecureHash","net.corda.core.crypto.SecureHash.HASH"]},{"name":"class HashAgility","description":"net.corda.core.internal.HashAgility","location":"docs/net.corda.core.internal/-hash-agility/index.html","searchKeys":["HashAgility","class HashAgility","net.corda.core.internal.HashAgility"]},{"name":"class HashNotFound(val requested: SecureHash) : FlowException","description":"net.corda.core.internal.FetchDataFlow.HashNotFound","location":"docs/net.corda.core.internal/-fetch-data-flow/-hash-not-found/index.html","searchKeys":["HashNotFound","class HashNotFound(val requested: SecureHash) : FlowException","net.corda.core.internal.FetchDataFlow.HashNotFound"]},{"name":"class HttpApi(val root: URL, val mapper: <Error class: unknown class> = defaultMapper)","description":"net.corda.testing.http.HttpApi","location":"docs/net.corda.testing.http/-http-api/index.html","searchKeys":["HttpApi","class HttpApi(val root: URL, val mapper: <Error class: unknown class> = defaultMapper)","net.corda.testing.http.HttpApi"]},{"name":"class IdentityObjectMapper constructor(val identityService: IdentityService, factory: <Error class: unknown class>, val fuzzyIdentityMatch: Boolean, val isFullParties: Boolean = false) : JacksonSupport.PartyObjectMapper","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/index.html","searchKeys":["IdentityObjectMapper","class IdentityObjectMapper constructor(val identityService: IdentityService, factory: <Error class: unknown class>, val fuzzyIdentityMatch: Boolean, val isFullParties: Boolean = false) : JacksonSupport.PartyObjectMapper","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper"]},{"name":"class IllegalFlowLogicException(val type: String, msg: String) : IllegalArgumentException","description":"net.corda.core.flows.IllegalFlowLogicException","location":"docs/net.corda.core.flows/-illegal-flow-logic-exception/index.html","searchKeys":["IllegalFlowLogicException","class IllegalFlowLogicException(val type: String, msg: String) : IllegalArgumentException","net.corda.core.flows.IllegalFlowLogicException"]},{"name":"class IllegalTransactionRequest(val requested: SecureHash) : FlowException","description":"net.corda.core.internal.FetchDataFlow.IllegalTransactionRequest","location":"docs/net.corda.core.internal/-fetch-data-flow/-illegal-transaction-request/index.html","searchKeys":["IllegalTransactionRequest","class IllegalTransactionRequest(val requested: SecureHash) : FlowException","net.corda.core.internal.FetchDataFlow.IllegalTransactionRequest"]},{"name":"class InMemoryMessagingNetwork : SingletonSerializeAsToken","description":"net.corda.testing.node.InMemoryMessagingNetwork","location":"docs/net.corda.testing.node/-in-memory-messaging-network/index.html","searchKeys":["InMemoryMessagingNetwork","class InMemoryMessagingNetwork : SingletonSerializeAsToken","net.corda.testing.node.InMemoryMessagingNetwork"]},{"name":"class InProcessNode(configuration: <Error class: unknown class>, versionInfo: <Error class: unknown class>, flowManager: <Error class: unknown class> = NodeFlowManager(configuration.flowOverrides), allowHibernateToManageAppSchema: Boolean = true)","description":"net.corda.testing.node.internal.InProcessNode","location":"docs/net.corda.testing.node.internal/-in-process-node/index.html","searchKeys":["InProcessNode","class InProcessNode(configuration: <Error class: unknown class>, versionInfo: <Error class: unknown class>, flowManager: <Error class: unknown class> = NodeFlowManager(configuration.flowOverrides), allowHibernateToManageAppSchema: Boolean = true)","net.corda.testing.node.internal.InProcessNode"]},{"name":"class InheritableThreadLocalToggleField<T>(name: String, log: <Error class: unknown class> = staticLog, isAGlobalThreadBeingCreated: (Array<StackTraceElement>) -> Boolean) : ToggleField<T> ","description":"net.corda.core.internal.InheritableThreadLocalToggleField","location":"docs/net.corda.core.internal/-inheritable-thread-local-toggle-field/index.html","searchKeys":["InheritableThreadLocalToggleField","class InheritableThreadLocalToggleField<T>(name: String, log: <Error class: unknown class> = staticLog, isAGlobalThreadBeingCreated: (Array<StackTraceElement>) -> Boolean) : ToggleField<T> ","net.corda.core.internal.InheritableThreadLocalToggleField"]},{"name":"class InitialiseTelemetryEvent : TelemetryEvent","description":"net.corda.core.internal.telemetry.InitialiseTelemetryEvent","location":"docs/net.corda.core.internal.telemetry/-initialise-telemetry-event/index.html","searchKeys":["InitialiseTelemetryEvent","class InitialiseTelemetryEvent : TelemetryEvent","net.corda.core.internal.telemetry.InitialiseTelemetryEvent"]},{"name":"class Initiate<OldState : ContractState, out NewState : ContractState>(originalState: StateAndRef<OldState>, newContractClass: Class<out UpgradedContract<OldState, NewState>>) : AbstractStateReplacementFlow.Instigator<OldState, NewState, Class<out UpgradedContract<OldState, NewState>>> ","description":"net.corda.core.flows.ContractUpgradeFlow.Initiate","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-initiate/index.html","searchKeys":["Initiate","class Initiate<OldState : ContractState, out NewState : ContractState>(originalState: StateAndRef<OldState>, newContractClass: Class<out UpgradedContract<OldState, NewState>>) : AbstractStateReplacementFlow.Instigator<OldState, NewState, Class<out UpgradedContract<OldState, NewState>>> ","net.corda.core.flows.ContractUpgradeFlow.Initiate"]},{"name":"class InsufficientBalanceException(val amountMissing: Amount<*>) : FlowException","description":"net.corda.core.contracts.InsufficientBalanceException","location":"docs/net.corda.core.contracts/-insufficient-balance-exception/index.html","searchKeys":["InsufficientBalanceException","class InsufficientBalanceException(val amountMissing: Amount<*>) : FlowException","net.corda.core.contracts.InsufficientBalanceException"]},{"name":"class InvalidAttachmentException(val txId: SecureHash, val attachmentHash: AttachmentId) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.InvalidAttachmentException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-invalid-attachment-exception/index.html","searchKeys":["InvalidAttachmentException","class InvalidAttachmentException(val txId: SecureHash, val attachmentHash: AttachmentId) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.InvalidAttachmentException"]},{"name":"class InvalidConstraintRejection(val txId: SecureHash, val contractClass: String, val reason: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-invalid-constraint-rejection/index.html","searchKeys":["InvalidConstraintRejection","class InvalidConstraintRejection(val txId: SecureHash, val contractClass: String, val reason: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection"]},{"name":"class InvalidJarSignersException(msg: String) : Exception","description":"net.corda.core.internal.InvalidJarSignersException","location":"docs/net.corda.core.internal/-invalid-jar-signers-exception/index.html","searchKeys":["InvalidJarSignersException","class InvalidJarSignersException(msg: String) : Exception","net.corda.core.internal.InvalidJarSignersException"]},{"name":"class InvocationId(value: String, timestamp: Instant) : Id<String> ","description":"net.corda.core.context.Trace.InvocationId","location":"docs/net.corda.core.context/-trace/-invocation-id/index.html","searchKeys":["InvocationId","class InvocationId(value: String, timestamp: Instant) : Id<String> ","net.corda.core.context.Trace.InvocationId"]},{"name":"class Issue : TypeOnlyCommandData","description":"net.corda.finance.contracts.asset.Cash.Commands.Issue","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-issue/index.html","searchKeys":["Issue","class Issue : TypeOnlyCommandData","net.corda.finance.contracts.asset.Cash.Commands.Issue"]},{"name":"class Issue : TypeOnlyCommandData","description":"net.corda.finance.contracts.asset.Obligation.Commands.Issue","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-issue/index.html","searchKeys":["Issue","class Issue : TypeOnlyCommandData","net.corda.finance.contracts.asset.Obligation.Commands.Issue"]},{"name":"class Issue : TypeOnlyCommandData, CommercialPaper.Commands","description":"net.corda.finance.contracts.CommercialPaper.Commands.Issue","location":"docs/net.corda.finance.contracts/-commercial-paper/-commands/-issue/index.html","searchKeys":["Issue","class Issue : TypeOnlyCommandData, CommercialPaper.Commands","net.corda.finance.contracts.CommercialPaper.Commands.Issue"]},{"name":"class IssueAndPaymentRequest(val amount: Amount<Currency>, val issueRef: OpaqueBytes, val recipient: Party, val notary: Party, val anonymous: Boolean) : AbstractCashFlow.AbstractRequest","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-issue-and-payment-request/index.html","searchKeys":["IssueAndPaymentRequest","class IssueAndPaymentRequest(val amount: Amount<Currency>, val issueRef: OpaqueBytes, val recipient: Party, val notary: Party, val anonymous: Boolean) : AbstractCashFlow.AbstractRequest","net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest"]},{"name":"class IssueRequest(val amount: Amount<Currency>, val issueRef: OpaqueBytes, val notary: Party) : AbstractCashFlow.AbstractRequest","description":"net.corda.finance.flows.CashIssueFlow.IssueRequest","location":"docs/net.corda.finance.flows/-cash-issue-flow/-issue-request/index.html","searchKeys":["IssueRequest","class IssueRequest(val amount: Amount<Currency>, val issueRef: OpaqueBytes, val notary: Party) : AbstractCashFlow.AbstractRequest","net.corda.finance.flows.CashIssueFlow.IssueRequest"]},{"name":"class KilledFlowException(val id: StateMachineRunId, message: String) : CordaRuntimeException","description":"net.corda.core.flows.KilledFlowException","location":"docs/net.corda.core.flows/-killed-flow-exception/index.html","searchKeys":["KilledFlowException","class KilledFlowException(val id: StateMachineRunId, message: String) : CordaRuntimeException","net.corda.core.flows.KilledFlowException"]},{"name":"class LazyMappedList<T, U>(val originalList: List<T>, val transform: (T, Int) -> U)","description":"net.corda.core.internal.LazyMappedList","location":"docs/net.corda.core.internal/-lazy-mapped-list/index.html","searchKeys":["LazyMappedList","class LazyMappedList<T, U>(val originalList: List<T>, val transform: (T, Int) -> U)","net.corda.core.internal.LazyMappedList"]},{"name":"class LazyPool<A>(clear: (A) -> Unit? = null, shouldReturnToPool: (A) -> Boolean? = null, bound: Int? = null, newInstance: () -> A)","description":"net.corda.core.internal.LazyPool","location":"docs/net.corda.core.internal/-lazy-pool/index.html","searchKeys":["LazyPool","class LazyPool<A>(clear: (A) -> Unit? = null, shouldReturnToPool: (A) -> Boolean? = null, bound: Int? = null, newInstance: () -> A)","net.corda.core.internal.LazyPool"]},{"name":"class LazyStickyPool<A : Any>(size: Int, newInstance: () -> A)","description":"net.corda.core.internal.LazyStickyPool","location":"docs/net.corda.core.internal/-lazy-sticky-pool/index.html","searchKeys":["LazyStickyPool","class LazyStickyPool<A : Any>(size: Int, newInstance: () -> A)","net.corda.core.internal.LazyStickyPool"]},{"name":"class LedgerDSL<out T : TransactionDSLInterpreter, out L : LedgerDSLInterpreter<T>>(val interpreter: L, notary: Party) : LedgerDSLInterpreter<TransactionDSLInterpreter> ","description":"net.corda.testing.dsl.LedgerDSL","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/index.html","searchKeys":["LedgerDSL","class LedgerDSL<out T : TransactionDSLInterpreter, out L : LedgerDSLInterpreter<T>>(val interpreter: L, notary: Party) : LedgerDSLInterpreter<TransactionDSLInterpreter> ","net.corda.testing.dsl.LedgerDSL"]},{"name":"class LedgerRecoveryException(message: String) : FlowException","description":"net.corda.core.flows.LedgerRecoveryException","location":"docs/net.corda.core.flows/-ledger-recovery-exception/index.html","searchKeys":["LedgerRecoveryException","class LedgerRecoveryException(message: String) : FlowException","net.corda.core.flows.LedgerRecoveryException"]},{"name":"class LedgerRecoveryFlow(parameters: LedgerRecoveryParameters, val progressTracker: ProgressTracker = ProgressTracker()) : FlowLogic<LedgerRecoveryResult> ","description":"net.corda.core.flows.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/index.html","searchKeys":["LedgerRecoveryFlow","class LedgerRecoveryFlow(parameters: LedgerRecoveryParameters, val progressTracker: ProgressTracker = ProgressTracker()) : FlowLogic<LedgerRecoveryResult> ","net.corda.core.flows.LedgerRecoveryFlow"]},{"name":"class LedgerTransaction : FullTransaction","description":"net.corda.core.transactions.LedgerTransaction","location":"docs/net.corda.core.transactions/-ledger-transaction/index.html","searchKeys":["LedgerTransaction","class LedgerTransaction : FullTransaction","net.corda.core.transactions.LedgerTransaction"]},{"name":"class LifeCycle<S : Enum<S>>(initial: S)","description":"net.corda.core.internal.LifeCycle","location":"docs/net.corda.core.internal/-life-cycle/index.html","searchKeys":["LifeCycle","class LifeCycle<S : Enum<S>>(initial: S)","net.corda.core.internal.LifeCycle"]},{"name":"class LinearPointer<T : LinearState>(val pointer: UniqueIdentifier, val type: Class<T>, val isResolved: Boolean = true) : StatePointer<T> ","description":"net.corda.core.contracts.LinearPointer","location":"docs/net.corda.core.contracts/-linear-pointer/index.html","searchKeys":["LinearPointer","class LinearPointer<T : LinearState>(val pointer: UniqueIdentifier, val type: Class<T>, val isResolved: Boolean = true) : StatePointer<T> ","net.corda.core.contracts.LinearPointer"]},{"name":"class LinearState(var participants: MutableSet<AbstractParty>? = null, var externalId: String?, var uuid: UUID) : PersistentState","description":"net.corda.core.schemas.CommonSchemaV1.LinearState","location":"docs/net.corda.core.schemas/-common-schema-v1/-linear-state/index.html","searchKeys":["LinearState","class LinearState(var participants: MutableSet<AbstractParty>? = null, var externalId: String?, var uuid: UUID) : PersistentState","net.corda.core.schemas.CommonSchemaV1.LinearState"]},{"name":"class ListenProcessDeathException(hostAndPort: NetworkHostAndPort, listenProcess: Process) : CordaException","description":"net.corda.testing.node.internal.ListenProcessDeathException","location":"docs/net.corda.testing.node.internal/-listen-process-death-exception/index.html","searchKeys":["ListenProcessDeathException","class ListenProcessDeathException(hostAndPort: NetworkHostAndPort, listenProcess: Process) : CordaException","net.corda.testing.node.internal.ListenProcessDeathException"]},{"name":"class MaxRpcRetryException(maxNumberOfRetries: Int, method: Method, cause: Throwable?) : RPCException","description":"net.corda.client.rpc.MaxRpcRetryException","location":"docs/net.corda.client.rpc/-max-rpc-retry-exception/index.html","searchKeys":["MaxRpcRetryException","class MaxRpcRetryException(maxNumberOfRetries: Int, method: Method, cause: Throwable?) : RPCException","net.corda.client.rpc.MaxRpcRetryException"]},{"name":"class MaybeSerializedSignedTransaction(val id: SecureHash, val serialized: SerializedBytes<SignedTransaction>?, val nonSerialised: SignedTransaction?, val inFlight: Boolean) : NamedByHash","description":"net.corda.core.flows.MaybeSerializedSignedTransaction","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/index.html","searchKeys":["MaybeSerializedSignedTransaction","class MaybeSerializedSignedTransaction(val id: SecureHash, val serialized: SerializedBytes<SignedTransaction>?, val nonSerialised: SignedTransaction?, val inFlight: Boolean) : NamedByHash","net.corda.core.flows.MaybeSerializedSignedTransaction"]},{"name":"class MerkleTreeException(val reason: String) : CordaException","description":"net.corda.core.crypto.MerkleTreeException","location":"docs/net.corda.core.crypto/-merkle-tree-exception/index.html","searchKeys":["MerkleTreeException","class MerkleTreeException(val reason: String) : CordaException","net.corda.core.crypto.MerkleTreeException"]},{"name":"class MessageTransfer","description":"net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-message-transfer/index.html","searchKeys":["MessageTransfer","class MessageTransfer","net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer"]},{"name":"class MissingAttachmentRejection(val txId: SecureHash, val contractClass: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.MissingAttachmentRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-missing-attachment-rejection/index.html","searchKeys":["MissingAttachmentRejection","class MissingAttachmentRejection(val txId: SecureHash, val contractClass: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.MissingAttachmentRejection"]},{"name":"class MissingAttachmentsException(val ids: List<SecureHash>, message: String?) : CordaException","description":"net.corda.core.serialization.MissingAttachmentsException","location":"docs/net.corda.core.serialization/-missing-attachments-exception/index.html","searchKeys":["MissingAttachmentsException","class MissingAttachmentsException(val ids: List<SecureHash>, message: String?) : CordaException","net.corda.core.serialization.MissingAttachmentsException"]},{"name":"class MissingAttachmentsRuntimeException(val ids: List<AttachmentId>, message: String?, cause: Throwable?) : CordaRuntimeException","description":"net.corda.core.serialization.MissingAttachmentsRuntimeException","location":"docs/net.corda.core.serialization/-missing-attachments-runtime-exception/index.html","searchKeys":["MissingAttachmentsRuntimeException","class MissingAttachmentsRuntimeException(val ids: List<AttachmentId>, message: String?, cause: Throwable?) : CordaRuntimeException","net.corda.core.serialization.MissingAttachmentsRuntimeException"]},{"name":"class MissingContractAttachments constructor(val states: List<TransactionState<ContractState>>, contractsClassName: String? = null, minimumRequiredContractClassVersion: Version? = null) : FlowException","description":"net.corda.core.transactions.MissingContractAttachments","location":"docs/net.corda.core.transactions/-missing-contract-attachments/index.html","searchKeys":["MissingContractAttachments","class MissingContractAttachments constructor(val states: List<TransactionState<ContractState>>, contractsClassName: String? = null, minimumRequiredContractClassVersion: Version? = null) : FlowException","net.corda.core.transactions.MissingContractAttachments"]},{"name":"class MissingNetworkParameters(val requested: SecureHash) : FlowException","description":"net.corda.core.internal.FetchDataFlow.MissingNetworkParameters","location":"docs/net.corda.core.internal/-fetch-data-flow/-missing-network-parameters/index.html","searchKeys":["MissingNetworkParameters","class MissingNetworkParameters(val requested: SecureHash) : FlowException","net.corda.core.internal.FetchDataFlow.MissingNetworkParameters"]},{"name":"class MissingNetworkParametersException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.MissingNetworkParametersException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-missing-network-parameters-exception/index.html","searchKeys":["MissingNetworkParametersException","class MissingNetworkParametersException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.MissingNetworkParametersException"]},{"name":"class MissingParameter(methodName: String, val paramName: String, command: String) : StringToMethodCallParser.UnparseableCallException","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.MissingParameter","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-missing-parameter/index.html","searchKeys":["MissingParameter","class MissingParameter(methodName: String, val paramName: String, command: String) : StringToMethodCallParser.UnparseableCallException","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.MissingParameter"]},{"name":"class MockAttachmentStorage : SingletonSerializeAsToken, AttachmentStorage","description":"net.corda.testing.services.MockAttachmentStorage","location":"docs/net.corda.testing.services/-mock-attachment-storage/index.html","searchKeys":["MockAttachmentStorage","class MockAttachmentStorage : SingletonSerializeAsToken, AttachmentStorage","net.corda.testing.services.MockAttachmentStorage"]},{"name":"class MockCordappConfigProvider","description":"net.corda.testing.internal.MockCordappConfigProvider","location":"docs/net.corda.testing.internal/-mock-cordapp-config-provider/index.html","searchKeys":["MockCordappConfigProvider","class MockCordappConfigProvider","net.corda.testing.internal.MockCordappConfigProvider"]},{"name":"class MockCordappProvider(cordappLoader: <Error class: unknown class>, attachmentStorage: <Error class: unknown class>, cordappConfigProvider: MockCordappConfigProvider = MockCordappConfigProvider())","description":"net.corda.testing.internal.MockCordappProvider","location":"docs/net.corda.testing.internal/-mock-cordapp-provider/index.html","searchKeys":["MockCordappProvider","class MockCordappProvider(cordappLoader: <Error class: unknown class>, attachmentStorage: <Error class: unknown class>, cordappConfigProvider: MockCordappConfigProvider = MockCordappConfigProvider())","net.corda.testing.internal.MockCordappProvider"]},{"name":"class MockCryptoService(initialKeyPairs: Map<String, KeyPair>)","description":"net.corda.testing.node.internal.MockCryptoService","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/index.html","searchKeys":["MockCryptoService","class MockCryptoService(initialKeyPairs: Map<String, KeyPair>)","net.corda.testing.node.internal.MockCryptoService"]},{"name":"class MockEncryptionService(aesKey: SecretKey = AesEncryption.randomKey())","description":"net.corda.testing.node.internal.MockEncryptionService","location":"docs/net.corda.testing.node.internal/-mock-encryption-service/index.html","searchKeys":["MockEncryptionService","class MockEncryptionService(aesKey: SecretKey = AesEncryption.randomKey())","net.corda.testing.node.internal.MockEncryptionService"]},{"name":"class MockKeyManagementService(val identityService: IdentityService, initialKeys: KeyPair) : SingletonSerializeAsToken","description":"net.corda.testing.node.internal.MockKeyManagementService","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/index.html","searchKeys":["MockKeyManagementService","class MockKeyManagementService(val identityService: IdentityService, initialKeys: KeyPair) : SingletonSerializeAsToken","net.corda.testing.node.internal.MockKeyManagementService"]},{"name":"class MockMessagingService","description":"net.corda.testing.node.InMemoryMessagingNetwork.MockMessagingService","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-mock-messaging-service/index.html","searchKeys":["MockMessagingService","class MockMessagingService","net.corda.testing.node.InMemoryMessagingNetwork.MockMessagingService"]},{"name":"class MockNetFlowTimeOut(val timeout: Duration, val maxRestartCount: Int, val backoffBase: Double)","description":"net.corda.testing.node.MockNetFlowTimeOut","location":"docs/net.corda.testing.node/-mock-net-flow-time-out/index.html","searchKeys":["MockNetFlowTimeOut","class MockNetFlowTimeOut(val timeout: Duration, val maxRestartCount: Int, val backoffBase: Double)","net.corda.testing.node.MockNetFlowTimeOut"]},{"name":"class MockNetNotaryConfig(val validating: Boolean, val extraConfig: <Error class: unknown class>? = null, val className: String? = null, val serviceLegalName: CordaX500Name? = null)","description":"net.corda.testing.node.MockNetNotaryConfig","location":"docs/net.corda.testing.node/-mock-net-notary-config/index.html","searchKeys":["MockNetNotaryConfig","class MockNetNotaryConfig(val validating: Boolean, val extraConfig: <Error class: unknown class>? = null, val className: String? = null, val serviceLegalName: CordaX500Name? = null)","net.corda.testing.node.MockNetNotaryConfig"]},{"name":"class MockNetworkParametersStorage(currentParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN)) : NetworkParametersStorage","description":"net.corda.testing.node.internal.MockNetworkParametersStorage","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/index.html","searchKeys":["MockNetworkParametersStorage","class MockNetworkParametersStorage(currentParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN)) : NetworkParametersStorage","net.corda.testing.node.internal.MockNetworkParametersStorage"]},{"name":"class MockNodeConfigOverrides(val extraDataSourceProperties: Map<String, String>? = null, val notary: MockNetNotaryConfig? = null, val flowTimeout: MockNetFlowTimeOut? = null)","description":"net.corda.testing.node.MockNodeConfigOverrides","location":"docs/net.corda.testing.node/-mock-node-config-overrides/index.html","searchKeys":["MockNodeConfigOverrides","class MockNodeConfigOverrides(val extraDataSourceProperties: Map<String, String>? = null, val notary: MockNetNotaryConfig? = null, val flowTimeout: MockNetFlowTimeOut? = null)","net.corda.testing.node.MockNodeConfigOverrides"]},{"name":"class MockNodeFlowManager","description":"net.corda.testing.node.internal.MockNodeFlowManager","location":"docs/net.corda.testing.node.internal/-mock-node-flow-manager/index.html","searchKeys":["MockNodeFlowManager","class MockNodeFlowManager","net.corda.testing.node.internal.MockNodeFlowManager"]},{"name":"class MockNodeMessagingService(configuration: <Error class: unknown class>, executor: <Error class: unknown class>, stateHelper: <Error class: unknown class> = ServiceStateHelper(log)) : SingletonSerializeAsToken","description":"net.corda.testing.node.internal.MockNodeMessagingService","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/index.html","searchKeys":["MockNodeMessagingService","class MockNodeMessagingService(configuration: <Error class: unknown class>, executor: <Error class: unknown class>, stateHelper: <Error class: unknown class> = ServiceStateHelper(log)) : SingletonSerializeAsToken","net.corda.testing.node.internal.MockNodeMessagingService"]},{"name":"class MockPublicKeyToOwningIdentityCache","description":"net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache","location":"docs/net.corda.testing.node.internal/-mock-public-key-to-owning-identity-cache/index.html","searchKeys":["MockPublicKeyToOwningIdentityCache","class MockPublicKeyToOwningIdentityCache","net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache"]},{"name":"class Move : TypeOnlyCommandData, CommercialPaper.Commands","description":"net.corda.finance.contracts.CommercialPaper.Commands.Move","location":"docs/net.corda.finance.contracts/-commercial-paper/-commands/-move/index.html","searchKeys":["Move","class Move : TypeOnlyCommandData, CommercialPaper.Commands","net.corda.finance.contracts.CommercialPaper.Commands.Move"]},{"name":"class MultiRPCClient<I : RPCOps> : AutoCloseable","description":"net.corda.client.rpc.ext.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/index.html","searchKeys":["MultiRPCClient","class MultiRPCClient<I : RPCOps> : AutoCloseable","net.corda.client.rpc.ext.MultiRPCClient"]},{"name":"class NetworkMapServer(pollInterval: Duration, hostAndPort: NetworkHostAndPort = NetworkHostAndPort(\"localhost\", 0), networkMapCertAndKeyPair: <Error class: unknown class> = createDevNetworkMapCa(), myHostNameValue: String = \"test.host.name\", additionalServices: Any) : Closeable","description":"net.corda.testing.node.internal.network.NetworkMapServer","location":"docs/net.corda.testing.node.internal.network/-network-map-server/index.html","searchKeys":["NetworkMapServer","class NetworkMapServer(pollInterval: Duration, hostAndPort: NetworkHostAndPort = NetworkHostAndPort(\"localhost\", 0), networkMapCertAndKeyPair: <Error class: unknown class> = createDevNetworkMapCa(), myHostNameValue: String = \"test.host.name\", additionalServices: Any) : Closeable","net.corda.testing.node.internal.network.NetworkMapServer"]},{"name":"class NoPartyObjectMapper constructor(factory: <Error class: unknown class>, val isFullParties: Boolean = false) : JacksonSupport.PartyObjectMapper","description":"net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper","location":"docs/net.corda.client.jackson/-jackson-support/-no-party-object-mapper/index.html","searchKeys":["NoPartyObjectMapper","class NoPartyObjectMapper constructor(factory: <Error class: unknown class>, val isFullParties: Boolean = false) : JacksonSupport.PartyObjectMapper","net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper"]},{"name":"class NoSuchFile(filename: String) : StringToMethodCallParser.UnparseableCallException","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.NoSuchFile","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-no-such-file/index.html","searchKeys":["NoSuchFile","class NoSuchFile(filename: String) : StringToMethodCallParser.UnparseableCallException","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.NoSuchFile"]},{"name":"class NodeListenProcessDeathException(hostAndPort: NetworkHostAndPort, listenProcess: Process, val causeFromStdError: String) : CordaException","description":"net.corda.testing.node.internal.NodeListenProcessDeathException","location":"docs/net.corda.testing.node.internal/-node-listen-process-death-exception/index.html","searchKeys":["NodeListenProcessDeathException","class NodeListenProcessDeathException(hostAndPort: NetworkHostAndPort, listenProcess: Process, val causeFromStdError: String) : CordaException","net.corda.testing.node.internal.NodeListenProcessDeathException"]},{"name":"class NonEmptySet<T> : Set<T> ","description":"net.corda.core.utilities.NonEmptySet","location":"docs/net.corda.core.utilities/-non-empty-set/index.html","searchKeys":["NonEmptySet","class NonEmptySet<T> : Set<T> ","net.corda.core.utilities.NonEmptySet"]},{"name":"class NotarisationRequest(statesToConsume: List<StateRef>, val transactionId: SecureHash)","description":"net.corda.core.flows.NotarisationRequest","location":"docs/net.corda.core.flows/-notarisation-request/index.html","searchKeys":["NotarisationRequest","class NotarisationRequest(statesToConsume: List<StateRef>, val transactionId: SecureHash)","net.corda.core.flows.NotarisationRequest"]},{"name":"class NotaryChangeFlow<out T : ContractState>(originalState: StateAndRef<T>, newNotary: Party, progressTracker: ProgressTracker = AbstractStateReplacementFlow.Instigator.tracker()) : AbstractStateReplacementFlow.Instigator<T, T, Party> ","description":"net.corda.core.flows.NotaryChangeFlow","location":"docs/net.corda.core.flows/-notary-change-flow/index.html","searchKeys":["NotaryChangeFlow","class NotaryChangeFlow<out T : ContractState>(originalState: StateAndRef<T>, newNotary: Party, progressTracker: ProgressTracker = AbstractStateReplacementFlow.Instigator.tracker()) : AbstractStateReplacementFlow.Instigator<T, T, Party> ","net.corda.core.flows.NotaryChangeFlow"]},{"name":"class NotaryChangeInWrongTransactionType(val txId: SecureHash, val txNotary: Party, val outputNotary: Party) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-notary-change-in-wrong-transaction-type/index.html","searchKeys":["NotaryChangeInWrongTransactionType","class NotaryChangeInWrongTransactionType(val txId: SecureHash, val txNotary: Party, val outputNotary: Party) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType"]},{"name":"class NotaryChangeLedgerTransaction : FullTransaction, TransactionWithSignatures","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/index.html","searchKeys":["NotaryChangeLedgerTransaction","class NotaryChangeLedgerTransaction : FullTransaction, TransactionWithSignatures","net.corda.core.transactions.NotaryChangeLedgerTransaction"]},{"name":"class NotaryChangeTransactionBuilder(val inputs: List<StateRef>, val notary: Party, val newNotary: Party, val networkParametersHash: SecureHash, val digestService: DigestService = DigestService.sha2_256)","description":"net.corda.core.internal.NotaryChangeTransactionBuilder","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/index.html","searchKeys":["NotaryChangeTransactionBuilder","class NotaryChangeTransactionBuilder(val inputs: List<StateRef>, val notary: Party, val newNotary: Party, val networkParametersHash: SecureHash, val digestService: DigestService = DigestService.sha2_256)","net.corda.core.internal.NotaryChangeTransactionBuilder"]},{"name":"class NotaryException(val error: NotaryError, val txId: SecureHash? = null) : FlowException","description":"net.corda.core.flows.NotaryException","location":"docs/net.corda.core.flows/-notary-exception/index.html","searchKeys":["NotaryException","class NotaryException(val error: NotaryError, val txId: SecureHash? = null) : FlowException","net.corda.core.flows.NotaryException"]},{"name":"class NotaryFlow","description":"net.corda.core.flows.NotaryFlow","location":"docs/net.corda.core.flows/-notary-flow/index.html","searchKeys":["NotaryFlow","class NotaryFlow","net.corda.core.flows.NotaryFlow"]},{"name":"class NotaryInternalException(val error: NotaryError) : FlowException","description":"net.corda.core.internal.notary.NotaryInternalException","location":"docs/net.corda.core.internal.notary/-notary-internal-exception/index.html","searchKeys":["NotaryInternalException","class NotaryInternalException(val error: NotaryError) : FlowException","net.corda.core.internal.notary.NotaryInternalException"]},{"name":"class Obligation<P : Any> : Contract","description":"net.corda.finance.contracts.asset.Obligation","location":"docs/net.corda.finance.contracts.asset/-obligation/index.html","searchKeys":["Obligation","class Obligation<P : Any> : Contract","net.corda.finance.contracts.asset.Obligation"]},{"name":"class OnNextFailedException(message: String, cause: Throwable)","description":"net.corda.core.observable.internal.OnNextFailedException","location":"docs/net.corda.core.observable.internal/-on-next-failed-exception/index.html","searchKeys":["OnNextFailedException","class OnNextFailedException(message: String, cause: Throwable)","net.corda.core.observable.internal.OnNextFailedException"]},{"name":"class OnResilientSubscribe<T>(val source: <Error class: unknown class><T>, strictMode: Boolean)","description":"net.corda.core.observable.internal.OnResilientSubscribe","location":"docs/net.corda.core.observable.internal/-on-resilient-subscribe/index.html","searchKeys":["OnResilientSubscribe","class OnResilientSubscribe<T>(val source: <Error class: unknown class><T>, strictMode: Boolean)","net.corda.core.observable.internal.OnResilientSubscribe"]},{"name":"class OpaqueBytesSubSequence(val bytes: ByteArray, val offset: Int, val size: Int) : ByteSequence","description":"net.corda.core.utilities.OpaqueBytesSubSequence","location":"docs/net.corda.core.utilities/-opaque-bytes-sub-sequence/index.html","searchKeys":["OpaqueBytesSubSequence","class OpaqueBytesSubSequence(val bytes: ByteArray, val offset: Int, val size: Int) : ByteSequence","net.corda.core.utilities.OpaqueBytesSubSequence"]},{"name":"class OrComposition(val a: AttachmentQueryCriteria, val b: AttachmentQueryCriteria) : AttachmentQueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.OrVisitor<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser, AttachmentSort> ","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-or-composition/index.html","searchKeys":["OrComposition","class OrComposition(val a: AttachmentQueryCriteria, val b: AttachmentQueryCriteria) : AttachmentQueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.OrVisitor<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser, AttachmentSort> ","net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition"]},{"name":"class OrComposition(val a: QueryCriteria, val b: QueryCriteria) : QueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.OrVisitor<QueryCriteria, IQueryCriteriaParser, Sort> ","description":"net.corda.core.node.services.vault.QueryCriteria.OrComposition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-or-composition/index.html","searchKeys":["OrComposition","class OrComposition(val a: QueryCriteria, val b: QueryCriteria) : QueryCriteria, GenericQueryCriteria.ChainableQueryCriteria.OrVisitor<QueryCriteria, IQueryCriteriaParser, Sort> ","net.corda.core.node.services.vault.QueryCriteria.OrComposition"]},{"name":"class OverlappingAttachmentsException(val txId: SecureHash, val path: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.OverlappingAttachmentsException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-overlapping-attachments-exception/index.html","searchKeys":["OverlappingAttachmentsException","class OverlappingAttachmentsException(val txId: SecureHash, val path: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.OverlappingAttachmentsException"]},{"name":"class PackageOwnershipException(val txId: SecureHash, val attachmentHash: AttachmentId, val invalidClassName: String, val packageName: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-package-ownership-exception/index.html","searchKeys":["PackageOwnershipException","class PackageOwnershipException(val txId: SecureHash, val attachmentHash: AttachmentId, val invalidClassName: String, val packageName: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException"]},{"name":"class PartialMerkleTree(val root: PartialMerkleTree.PartialTree)","description":"net.corda.core.crypto.PartialMerkleTree","location":"docs/net.corda.core.crypto/-partial-merkle-tree/index.html","searchKeys":["PartialMerkleTree","class PartialMerkleTree(val root: PartialMerkleTree.PartialTree)","net.corda.core.crypto.PartialMerkleTree"]},{"name":"class Party(val name: CordaX500Name, val owningKey: PublicKey) : AbstractParty, Destination","description":"net.corda.core.identity.Party","location":"docs/net.corda.core.identity/-party/index.html","searchKeys":["Party","class Party(val name: CordaX500Name, val owningKey: PublicKey) : AbstractParty, Destination","net.corda.core.identity.Party"]},{"name":"class PartyAndCertificate(val certPath: CertPath)","description":"net.corda.core.identity.PartyAndCertificate","location":"docs/net.corda.core.identity/-party-and-certificate/index.html","searchKeys":["PartyAndCertificate","class PartyAndCertificate(val certPath: CertPath)","net.corda.core.identity.PartyAndCertificate"]},{"name":"class PaymentRequest(val amount: Amount<Currency>, val recipient: Party, val anonymous: Boolean, val issuerConstraint: Set<Party> = emptySet(), val notary: Party? = null) : AbstractCashFlow.AbstractRequest","description":"net.corda.finance.flows.CashPaymentFlow.PaymentRequest","location":"docs/net.corda.finance.flows/-cash-payment-flow/-payment-request/index.html","searchKeys":["PaymentRequest","class PaymentRequest(val amount: Amount<Currency>, val recipient: Party, val anonymous: Boolean, val issuerConstraint: Set<Party> = emptySet(), val notary: Party? = null) : AbstractCashFlow.AbstractRequest","net.corda.finance.flows.CashPaymentFlow.PaymentRequest"]},{"name":"class PermissionException(val msg: String) : CordaRuntimeException, ClientRelevantError","description":"net.corda.client.rpc.PermissionException","location":"docs/net.corda.client.rpc/-permission-exception/index.html","searchKeys":["PermissionException","class PermissionException(val msg: String) : CordaRuntimeException, ClientRelevantError","net.corda.client.rpc.PermissionException"]},{"name":"class PersistentCashState(var currency: String, participants: Set<AbstractParty?>, var owner: AbstractParty, var quantity: Long, issuerParty: AbstractParty, var issuerRef: OpaqueBytes) : CommonSchemaV1.FungibleState","description":"net.corda.finance.test.SampleCashSchemaV2.PersistentCashState","location":"docs/net.corda.finance.test/-sample-cash-schema-v2/-persistent-cash-state/index.html","searchKeys":["PersistentCashState","class PersistentCashState(var currency: String, participants: Set<AbstractParty?>, var owner: AbstractParty, var quantity: Long, issuerParty: AbstractParty, var issuerRef: OpaqueBytes) : CommonSchemaV1.FungibleState","net.corda.finance.test.SampleCashSchemaV2.PersistentCashState"]},{"name":"class PersistentCashState(var owner: AbstractParty?, var pennies: Long, var currency: String, var issuerPartyHash: String, var issuerRef: ByteArray) : PersistentState","description":"net.corda.finance.schemas.CashSchemaV1.PersistentCashState","location":"docs/net.corda.finance.schemas/-cash-schema-v1/-persistent-cash-state/index.html","searchKeys":["PersistentCashState","class PersistentCashState(var owner: AbstractParty?, var pennies: Long, var currency: String, var issuerPartyHash: String, var issuerRef: ByteArray) : PersistentState","net.corda.finance.schemas.CashSchemaV1.PersistentCashState"]},{"name":"class PersistentCashState(var ownerHash: String, var pennies: Long, var currency: String, var issuerPartyHash: String, var issuerRef: ByteArray) : PersistentState","description":"net.corda.finance.test.SampleCashSchemaV1.PersistentCashState","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/-persistent-cash-state/index.html","searchKeys":["PersistentCashState","class PersistentCashState(var ownerHash: String, var pennies: Long, var currency: String, var issuerPartyHash: String, var issuerRef: ByteArray) : PersistentState","net.corda.finance.test.SampleCashSchemaV1.PersistentCashState"]},{"name":"class PersistentCashState(var participants: MutableSet<AbstractParty?>? = null, var owner: AbstractParty?, var pennies: Long, var currency: String, var issuer: AbstractParty?, var issuerRef: ByteArray) : PersistentState","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/index.html","searchKeys":["PersistentCashState","class PersistentCashState(var participants: MutableSet<AbstractParty?>? = null, var owner: AbstractParty?, var pennies: Long, var currency: String, var issuer: AbstractParty?, var issuerRef: ByteArray) : PersistentState","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState"]},{"name":"class PersistentCommercialPaperState(var issuancePartyHash: String, var issuanceRef: ByteArray, var ownerHash: String, var maturity: Instant, var faceValue: Long, var currency: String, var faceValueIssuerPartyHash: String, var faceValueIssuerRef: ByteArray) : PersistentState","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/index.html","searchKeys":["PersistentCommercialPaperState","class PersistentCommercialPaperState(var issuancePartyHash: String, var issuanceRef: ByteArray, var ownerHash: String, var maturity: Instant, var faceValue: Long, var currency: String, var faceValueIssuerPartyHash: String, var faceValueIssuerRef: ByteArray) : PersistentState","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState"]},{"name":"class PersistentDummyDealState(var participants: MutableSet<AbstractParty>? = null, val uid: UniqueIdentifier) : CommonSchemaV1.LinearState","description":"net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState","location":"docs/net.corda.testing.internal.vault/-dummy-deal-state-schema-v1/-persistent-dummy-deal-state/index.html","searchKeys":["PersistentDummyDealState","class PersistentDummyDealState(var participants: MutableSet<AbstractParty>? = null, val uid: UniqueIdentifier) : CommonSchemaV1.LinearState","net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState"]},{"name":"class PersistentDummyLinearState(var participants: MutableSet<AbstractParty>, var externalId: String?, var uuid: UUID, var linearString: String?, var linearNumber: Long, var linearTimestamp: Instant, var linearBoolean: Boolean) : PersistentState","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/index.html","searchKeys":["PersistentDummyLinearState","class PersistentDummyLinearState(var participants: MutableSet<AbstractParty>, var externalId: String?, var uuid: UUID, var linearString: String?, var linearNumber: Long, var linearTimestamp: Instant, var linearBoolean: Boolean) : PersistentState","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState"]},{"name":"class PersistentDummyLinearState(var participants: MutableSet<AbstractParty>? = null, var linearString: String?, var linearNumber: Long, var linearTimestamp: Instant, var linearBoolean: Boolean, val uid: UniqueIdentifier) : CommonSchemaV1.LinearState","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/index.html","searchKeys":["PersistentDummyLinearState","class PersistentDummyLinearState(var participants: MutableSet<AbstractParty>? = null, var linearString: String?, var linearNumber: Long, var linearTimestamp: Instant, var linearBoolean: Boolean, val uid: UniqueIdentifier) : CommonSchemaV1.LinearState","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState"]},{"name":"class PlatformSecureRandomService(provider: Provider) : Provider.Service","description":"net.corda.core.crypto.internal.PlatformSecureRandomService","location":"docs/net.corda.core.crypto.internal/-platform-secure-random-service/index.html","searchKeys":["PlatformSecureRandomService","class PlatformSecureRandomService(provider: Provider) : Provider.Service","net.corda.core.crypto.internal.PlatformSecureRandomService"]},{"name":"class PrivacySalt(bytes: ByteArray) : OpaqueBytes","description":"net.corda.core.contracts.PrivacySalt","location":"docs/net.corda.core.contracts/-privacy-salt/index.html","searchKeys":["PrivacySalt","class PrivacySalt(bytes: ByteArray) : OpaqueBytes","net.corda.core.contracts.PrivacySalt"]},{"name":"class PrivateInterner<T>(val verifier: IternabilityVerifier<T> = AlwaysInternableVerifier())","description":"net.corda.core.internal.utilities.PrivateInterner","location":"docs/net.corda.core.internal.utilities/-private-interner/index.html","searchKeys":["PrivateInterner","class PrivateInterner<T>(val verifier: IternabilityVerifier<T> = AlwaysInternableVerifier())","net.corda.core.internal.utilities.PrivateInterner"]},{"name":"class ProgressTracker(inputSteps: ProgressTracker.Step)","description":"net.corda.core.utilities.ProgressTracker","location":"docs/net.corda.core.utilities/-progress-tracker/index.html","searchKeys":["ProgressTracker","class ProgressTracker(inputSteps: ProgressTracker.Step)","net.corda.core.utilities.ProgressTracker"]},{"name":"class RPCClient<I : RPCOps>(transport: <Error class: unknown class>, rpcConfiguration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT, haPoolTransportConfigurations: List<<Error class: unknown class>> = emptyList())","description":"net.corda.client.rpc.internal.RPCClient","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/index.html","searchKeys":["RPCClient","class RPCClient<I : RPCOps>(transport: <Error class: unknown class>, rpcConfiguration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT, haPoolTransportConfigurations: List<<Error class: unknown class>> = emptyList())","net.corda.client.rpc.internal.RPCClient"]},{"name":"class RPCClientTelemetry(serviceName: String, val openTelemetryEnabled: Boolean, val simpleLogTelemetryEnabled: Boolean, val spanStartEndEventsEnabled: Boolean, val copyBaggageToTags: Boolean)","description":"net.corda.client.rpc.internal.RPCClientTelemetry","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/index.html","searchKeys":["RPCClientTelemetry","class RPCClientTelemetry(serviceName: String, val openTelemetryEnabled: Boolean, val simpleLogTelemetryEnabled: Boolean, val spanStartEndEventsEnabled: Boolean, val copyBaggageToTags: Boolean)","net.corda.client.rpc.internal.RPCClientTelemetry"]},{"name":"class Random(val random: SplittableRandom = SplittableRandom()) : InMemoryMessagingNetwork.ServicePeerAllocationStrategy","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/-random/index.html","searchKeys":["Random","class Random(val random: SplittableRandom = SplittableRandom()) : InMemoryMessagingNetwork.ServicePeerAllocationStrategy","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random"]},{"name":"class RandomRpcUser","description":"net.corda.testing.node.internal.RandomRpcUser","location":"docs/net.corda.testing.node.internal/-random-rpc-user/index.html","searchKeys":["RandomRpcUser","class RandomRpcUser","net.corda.testing.node.internal.RandomRpcUser"]},{"name":"class ReceiveFinalityFlow(otherSideSession: FlowSession, expectedTxId: SecureHash? = null, statesToRecord: StatesToRecord = ONLY_RELEVANT, handlePropagatedNotaryError: Boolean? = null) : FlowLogic<SignedTransaction> ","description":"net.corda.core.flows.ReceiveFinalityFlow","location":"docs/net.corda.core.flows/-receive-finality-flow/index.html","searchKeys":["ReceiveFinalityFlow","class ReceiveFinalityFlow(otherSideSession: FlowSession, expectedTxId: SecureHash? = null, statesToRecord: StatesToRecord = ONLY_RELEVANT, handlePropagatedNotaryError: Boolean? = null) : FlowLogic<SignedTransaction> ","net.corda.core.flows.ReceiveFinalityFlow"]},{"name":"class ReceiveStateAndRefFlow<out T : ContractState>(otherSideSession: FlowSession) : FlowLogic<List<StateAndRef<T>>> ","description":"net.corda.core.flows.ReceiveStateAndRefFlow","location":"docs/net.corda.core.flows/-receive-state-and-ref-flow/index.html","searchKeys":["ReceiveStateAndRefFlow","class ReceiveStateAndRefFlow<out T : ContractState>(otherSideSession: FlowSession) : FlowLogic<List<StateAndRef<T>>> ","net.corda.core.flows.ReceiveStateAndRefFlow"]},{"name":"class ReconnectingCordaRPCOps : CordaRPCOps","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/index.html","searchKeys":["ReconnectingCordaRPCOps","class ReconnectingCordaRPCOps : CordaRPCOps","net.corda.client.rpc.internal.ReconnectingCordaRPCOps"]},{"name":"class ReconnectingObservable<T>","description":"net.corda.client.rpc.internal.ReconnectingObservable","location":"docs/net.corda.client.rpc.internal/-reconnecting-observable/index.html","searchKeys":["ReconnectingObservable","class ReconnectingObservable<T>","net.corda.client.rpc.internal.ReconnectingObservable"]},{"name":"class RecordExceptionEvent(val telemetryId: UUID, val throwable: Throwable) : TelemetryEvent","description":"net.corda.core.internal.telemetry.RecordExceptionEvent","location":"docs/net.corda.core.internal.telemetry/-record-exception-event/index.html","searchKeys":["RecordExceptionEvent","class RecordExceptionEvent(val telemetryId: UUID, val throwable: Throwable) : TelemetryEvent","net.corda.core.internal.telemetry.RecordExceptionEvent"]},{"name":"class Redeem : TypeOnlyCommandData, CommercialPaper.Commands","description":"net.corda.finance.contracts.CommercialPaper.Commands.Redeem","location":"docs/net.corda.finance.contracts/-commercial-paper/-commands/-redeem/index.html","searchKeys":["Redeem","class Redeem : TypeOnlyCommandData, CommercialPaper.Commands","net.corda.finance.contracts.CommercialPaper.Commands.Redeem"]},{"name":"class ReflectionDataMissing(methodName: String, argIndex: Int) : StringToMethodCallParser.UnparseableCallException","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.ReflectionDataMissing","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-reflection-data-missing/index.html","searchKeys":["ReflectionDataMissing","class ReflectionDataMissing(methodName: String, argIndex: Int) : StringToMethodCallParser.UnparseableCallException","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.ReflectionDataMissing"]},{"name":"class ResilientSubscriber<T>(actual: <Error class: unknown class><in T>)","description":"net.corda.core.observable.internal.ResilientSubscriber","location":"docs/net.corda.core.observable.internal/-resilient-subscriber/index.html","searchKeys":["ResilientSubscriber","class ResilientSubscriber<T>(actual: <Error class: unknown class><in T>)","net.corda.core.observable.internal.ResilientSubscriber"]},{"name":"class ResolveTransactionsFlow : FlowLogic<Unit> ","description":"net.corda.core.internal.ResolveTransactionsFlow","location":"docs/net.corda.core.internal/-resolve-transactions-flow/index.html","searchKeys":["ResolveTransactionsFlow","class ResolveTransactionsFlow : FlowLogic<Unit> ","net.corda.core.internal.ResolveTransactionsFlow"]},{"name":"class ResultSerializationException : CordaRuntimeException","description":"net.corda.core.flows.ResultSerializationException","location":"docs/net.corda.core.flows/-result-serialization-exception/index.html","searchKeys":["ResultSerializationException","class ResultSerializationException : CordaRuntimeException","net.corda.core.flows.ResultSerializationException"]},{"name":"class RoundRobin : InMemoryMessagingNetwork.ServicePeerAllocationStrategy","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.RoundRobin","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/-round-robin/index.html","searchKeys":["RoundRobin","class RoundRobin : InMemoryMessagingNetwork.ServicePeerAllocationStrategy","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.RoundRobin"]},{"name":"class RpcObjectMapper constructor(val rpc: CordaRPCOps, factory: <Error class: unknown class>, val fuzzyIdentityMatch: Boolean, val isFullParties: Boolean = false) : JacksonSupport.PartyObjectMapper","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/index.html","searchKeys":["RpcObjectMapper","class RpcObjectMapper constructor(val rpc: CordaRPCOps, factory: <Error class: unknown class>, val fuzzyIdentityMatch: Boolean, val isFullParties: Boolean = false) : JacksonSupport.PartyObjectMapper","net.corda.client.jackson.JacksonSupport.RpcObjectMapper"]},{"name":"class SHA256(bytes: ByteArray) : SecureHash","description":"net.corda.core.crypto.SecureHash.SHA256","location":"docs/net.corda.core.crypto/-secure-hash/-s-h-a256/index.html","searchKeys":["SHA256","class SHA256(bytes: ByteArray) : SecureHash","net.corda.core.crypto.SecureHash.SHA256"]},{"name":"class SchemaCrossReferenceReport(schema: String, entity: String, referencedSchema: String, fieldOrMethod: String, fieldOrMethodType: String)","description":"net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport","location":"docs/net.corda.core.schemas/-mapped-schema-validator/-schema-cross-reference-report/index.html","searchKeys":["SchemaCrossReferenceReport","class SchemaCrossReferenceReport(schema: String, entity: String, referencedSchema: String, fieldOrMethod: String, fieldOrMethodType: String)","net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport"]},{"name":"class Secp256k1SupportKeyPairGeneratorSpi : KeyPairGeneratorSpi","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-key-pair-generator-spi/index.html","searchKeys":["Secp256k1SupportKeyPairGeneratorSpi","class Secp256k1SupportKeyPairGeneratorSpi : KeyPairGeneratorSpi","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi"]},{"name":"class Secp256k1SupportProvider : Provider","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/index.html","searchKeys":["Secp256k1SupportProvider","class Secp256k1SupportProvider : Provider","net.corda.core.crypto.internal.Secp256k1SupportProvider"]},{"name":"class Secp256k1SupportSignatureSpi : SignatureSpi","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportSignatureSpi","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-signature-spi/index.html","searchKeys":["Secp256k1SupportSignatureSpi","class Secp256k1SupportSignatureSpi : SignatureSpi","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportSignatureSpi"]},{"name":"class SecureHashDeserializer<T : SecureHash>","description":"net.corda.client.jackson.JacksonSupport.SecureHashDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-secure-hash-deserializer/index.html","searchKeys":["SecureHashDeserializer","class SecureHashDeserializer<T : SecureHash>","net.corda.client.jackson.JacksonSupport.SecureHashDeserializer"]},{"name":"class SerializedBytes<T : Any>(bytes: ByteArray) : OpaqueBytes","description":"net.corda.core.serialization.SerializedBytes","location":"docs/net.corda.core.serialization/-serialized-bytes/index.html","searchKeys":["SerializedBytes","class SerializedBytes<T : Any>(bytes: ByteArray) : OpaqueBytes","net.corda.core.serialization.SerializedBytes"]},{"name":"class SessionId(value: String, timestamp: Instant) : Id<String> ","description":"net.corda.core.context.Trace.SessionId","location":"docs/net.corda.core.context/-trace/-session-id/index.html","searchKeys":["SessionId","class SessionId(value: String, timestamp: Instant) : Id<String> ","net.corda.core.context.Trace.SessionId"]},{"name":"class SetStatusEvent(val telemetryId: UUID, val telemetryStatusCode: TelemetryStatusCode, val message: String) : TelemetryEvent","description":"net.corda.core.internal.telemetry.SetStatusEvent","location":"docs/net.corda.core.internal.telemetry/-set-status-event/index.html","searchKeys":["SetStatusEvent","class SetStatusEvent(val telemetryId: UUID, val telemetryStatusCode: TelemetryStatusCode, val message: String) : TelemetryEvent","net.corda.core.internal.telemetry.SetStatusEvent"]},{"name":"class SharedCompatibilityZoneParams(url: URL, pnm: UUID?, val publishNotaries: (List<NotaryInfo>) -> Unit, val rootCert: X509Certificate? = null) : CompatibilityZoneParams","description":"net.corda.testing.node.internal.SharedCompatibilityZoneParams","location":"docs/net.corda.testing.node.internal/-shared-compatibility-zone-params/index.html","searchKeys":["SharedCompatibilityZoneParams","class SharedCompatibilityZoneParams(url: URL, pnm: UUID?, val publishNotaries: (List<NotaryInfo>) -> Unit, val rootCert: X509Certificate? = null) : CompatibilityZoneParams","net.corda.testing.node.internal.SharedCompatibilityZoneParams"]},{"name":"class ShutdownManager(executorService: ExecutorService)","description":"net.corda.testing.node.internal.ShutdownManager","location":"docs/net.corda.testing.node.internal/-shutdown-manager/index.html","searchKeys":["ShutdownManager","class ShutdownManager(executorService: ExecutorService)","net.corda.testing.node.internal.ShutdownManager"]},{"name":"class ShutdownTelemetryEvent : TelemetryEvent","description":"net.corda.core.internal.telemetry.ShutdownTelemetryEvent","location":"docs/net.corda.core.internal.telemetry/-shutdown-telemetry-event/index.html","searchKeys":["ShutdownTelemetryEvent","class ShutdownTelemetryEvent : TelemetryEvent","net.corda.core.internal.telemetry.ShutdownTelemetryEvent"]},{"name":"class SignaturesMissingException(val missing: Set<PublicKey>, val descriptions: List<String>, val id: SecureHash) : SignatureException, NamedByHash, CordaThrowable","description":"net.corda.core.transactions.SignedTransaction.SignaturesMissingException","location":"docs/net.corda.core.transactions/-signed-transaction/-signatures-missing-exception/index.html","searchKeys":["SignaturesMissingException","class SignaturesMissingException(val missing: Set<PublicKey>, val descriptions: List<String>, val id: SecureHash) : SignatureException, NamedByHash, CordaThrowable","net.corda.core.transactions.SignedTransaction.SignaturesMissingException"]},{"name":"class SignedDataWithCert<T : Any>(val raw: SerializedBytes<T>, val sig: DigitalSignatureWithCert) : NamedByHash","description":"net.corda.core.internal.SignedDataWithCert","location":"docs/net.corda.core.internal/-signed-data-with-cert/index.html","searchKeys":["SignedDataWithCert","class SignedDataWithCert<T : Any>(val raw: SerializedBytes<T>, val sig: DigitalSignatureWithCert) : NamedByHash","net.corda.core.internal.SignedDataWithCert"]},{"name":"class SimpleLogTelemetryComponent : TelemetryComponent","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/index.html","searchKeys":["SimpleLogTelemetryComponent","class SimpleLogTelemetryComponent : TelemetryComponent","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent"]},{"name":"class SimpleToggleField<T>(name: String, once: Boolean = false) : ToggleField<T> ","description":"net.corda.core.internal.SimpleToggleField","location":"docs/net.corda.core.internal/-simple-toggle-field/index.html","searchKeys":["SimpleToggleField","class SimpleToggleField<T>(name: String, once: Boolean = false) : ToggleField<T> ","net.corda.core.internal.SimpleToggleField"]},{"name":"class SingletonSerializationToken : SerializationToken","description":"net.corda.core.serialization.SingletonSerializationToken","location":"docs/net.corda.core.serialization/-singleton-serialization-token/index.html","searchKeys":["SingletonSerializationToken","class SingletonSerializationToken : SerializationToken","net.corda.core.serialization.SingletonSerializationToken"]},{"name":"class SplitCompatibilityZoneParams(doormanURL: URL, networkMapURL: URL, pnm: UUID?, val publishNotaries: (List<NotaryInfo>) -> Unit, val rootCert: X509Certificate? = null) : CompatibilityZoneParams","description":"net.corda.testing.node.internal.SplitCompatibilityZoneParams","location":"docs/net.corda.testing.node.internal/-split-compatibility-zone-params/index.html","searchKeys":["SplitCompatibilityZoneParams","class SplitCompatibilityZoneParams(doormanURL: URL, networkMapURL: URL, pnm: UUID?, val publishNotaries: (List<NotaryInfo>) -> Unit, val rootCert: X509Certificate? = null) : CompatibilityZoneParams","net.corda.testing.node.internal.SplitCompatibilityZoneParams"]},{"name":"class StartSpanEvent(val name: String, val attributes: Map<String, String>, val telemetryId: UUID, val flowLogic: FlowLogic<*>?) : TelemetryEvent","description":"net.corda.core.internal.telemetry.StartSpanEvent","location":"docs/net.corda.core.internal.telemetry/-start-span-event/index.html","searchKeys":["StartSpanEvent","class StartSpanEvent(val name: String, val attributes: Map<String, String>, val telemetryId: UUID, val flowLogic: FlowLogic<*>?) : TelemetryEvent","net.corda.core.internal.telemetry.StartSpanEvent"]},{"name":"class StartSpanForFlowEvent(val name: String, val attributes: Map<String, String>, val telemetryId: UUID, val flowLogic: FlowLogic<*>?, val telemetryDataItem: TelemetryDataItem?) : TelemetryEvent","description":"net.corda.core.internal.telemetry.StartSpanForFlowEvent","location":"docs/net.corda.core.internal.telemetry/-start-span-for-flow-event/index.html","searchKeys":["StartSpanForFlowEvent","class StartSpanForFlowEvent(val name: String, val attributes: Map<String, String>, val telemetryId: UUID, val flowLogic: FlowLogic<*>?, val telemetryDataItem: TelemetryDataItem?) : TelemetryEvent","net.corda.core.internal.telemetry.StartSpanForFlowEvent"]},{"name":"class StartedMockNode","description":"net.corda.testing.node.StartedMockNode","location":"docs/net.corda.testing.node/-started-mock-node/index.html","searchKeys":["StartedMockNode","class StartedMockNode","net.corda.testing.node.StartedMockNode"]},{"name":"class State","description":"net.corda.testing.node.internal.DriverDSLImpl.State","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-state/index.html","searchKeys":["State","class State","net.corda.testing.node.internal.DriverDSLImpl.State"]},{"name":"class StatePointerSearch(val state: ContractState)","description":"net.corda.core.internal.StatePointerSearch","location":"docs/net.corda.core.internal/-state-pointer-search/index.html","searchKeys":["StatePointerSearch","class StatePointerSearch(val state: ContractState)","net.corda.core.internal.StatePointerSearch"]},{"name":"class StatesNotAvailableException(val message: String?, val cause: Throwable? = null) : FlowException","description":"net.corda.core.node.services.StatesNotAvailableException","location":"docs/net.corda.core.node.services/-states-not-available-exception/index.html","searchKeys":["StatesNotAvailableException","class StatesNotAvailableException(val message: String?, val cause: Throwable? = null) : FlowException","net.corda.core.node.services.StatesNotAvailableException"]},{"name":"class StaticPointer<T : ContractState>(val pointer: StateRef, val type: Class<T>, val isResolved: Boolean = false) : StatePointer<T> ","description":"net.corda.core.contracts.StaticPointer","location":"docs/net.corda.core.contracts/-static-pointer/index.html","searchKeys":["StaticPointer","class StaticPointer<T : ContractState>(val pointer: StateRef, val type: Class<T>, val isResolved: Boolean = false) : StatePointer<T> ","net.corda.core.contracts.StaticPointer"]},{"name":"class TelemetryServiceImpl : SingletonSerializeAsToken, TelemetryService","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/index.html","searchKeys":["TelemetryServiceImpl","class TelemetryServiceImpl : SingletonSerializeAsToken, TelemetryService","net.corda.core.internal.telemetry.TelemetryServiceImpl"]},{"name":"class TestClock(delegateClock: Clock)","description":"net.corda.testing.node.TestClock","location":"docs/net.corda.testing.node/-test-clock/index.html","searchKeys":["TestClock","class TestClock(delegateClock: Clock)","net.corda.testing.node.TestClock"]},{"name":"class TestingNamedCacheFactory : SingletonSerializeAsToken","description":"net.corda.testing.internal.TestingNamedCacheFactory","location":"docs/net.corda.testing.internal/-testing-named-cache-factory/index.html","searchKeys":["TestingNamedCacheFactory","class TestingNamedCacheFactory : SingletonSerializeAsToken","net.corda.testing.internal.TestingNamedCacheFactory"]},{"name":"class ThreadBox<out T>(val content: T, val lock: ReentrantLock = ReentrantLock())","description":"net.corda.core.internal.ThreadBox","location":"docs/net.corda.core.internal/-thread-box/index.html","searchKeys":["ThreadBox","class ThreadBox<out T>(val content: T, val lock: ReentrantLock = ReentrantLock())","net.corda.core.internal.ThreadBox"]},{"name":"class ThreadLeakException(valueToString: String) : RuntimeException","description":"net.corda.core.internal.ThreadLeakException","location":"docs/net.corda.core.internal/-thread-leak-exception/index.html","searchKeys":["ThreadLeakException","class ThreadLeakException(valueToString: String) : RuntimeException","net.corda.core.internal.ThreadLeakException"]},{"name":"class ThreadLocalToggleField<T>(name: String) : ToggleField<T> ","description":"net.corda.core.internal.ThreadLocalToggleField","location":"docs/net.corda.core.internal/-thread-local-toggle-field/index.html","searchKeys":["ThreadLocalToggleField","class ThreadLocalToggleField<T>(name: String) : ToggleField<T> ","net.corda.core.internal.ThreadLocalToggleField"]},{"name":"class TimeWindowChecker(val clock: Clock = Clock.systemUTC())","description":"net.corda.core.node.services.TimeWindowChecker","location":"docs/net.corda.core.node.services/-time-window-checker/index.html","searchKeys":["TimeWindowChecker","class TimeWindowChecker(val clock: Clock = Clock.systemUTC())","net.corda.core.node.services.TimeWindowChecker"]},{"name":"class TooManyParameters(methodName: String, command: String) : StringToMethodCallParser.UnparseableCallException","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.TooManyParameters","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-too-many-parameters/index.html","searchKeys":["TooManyParameters","class TooManyParameters(methodName: String, command: String) : StringToMethodCallParser.UnparseableCallException","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.TooManyParameters"]},{"name":"class TransactionContractConflictException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.TransactionContractConflictException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-contract-conflict-exception/index.html","searchKeys":["TransactionContractConflictException","class TransactionContractConflictException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.TransactionContractConflictException"]},{"name":"class TransactionDSL<out T : TransactionDSLInterpreter>(interpreter: T, notary: Party) : TransactionDSLInterpreter","description":"net.corda.testing.dsl.TransactionDSL","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/index.html","searchKeys":["TransactionDSL","class TransactionDSL<out T : TransactionDSLInterpreter>(interpreter: T, notary: Party) : TransactionDSLInterpreter","net.corda.testing.dsl.TransactionDSL"]},{"name":"class TransactionDeserialisationException(groupEnum: ComponentGroupEnum, index: Int, cause: Exception) : RuntimeException","description":"net.corda.core.internal.TransactionDeserialisationException","location":"docs/net.corda.core.internal/-transaction-deserialisation-exception/index.html","searchKeys":["TransactionDeserialisationException","class TransactionDeserialisationException(groupEnum: ComponentGroupEnum, index: Int, cause: Exception) : RuntimeException","net.corda.core.internal.TransactionDeserialisationException"]},{"name":"class TransactionDuplicateEncumbranceException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.TransactionDuplicateEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-duplicate-encumbrance-exception/index.html","searchKeys":["TransactionDuplicateEncumbranceException","class TransactionDuplicateEncumbranceException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.TransactionDuplicateEncumbranceException"]},{"name":"class TransactionMissingEncumbranceException(val txId: SecureHash, val missing: Int, val inOut: TransactionVerificationException.Direction) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-missing-encumbrance-exception/index.html","searchKeys":["TransactionMissingEncumbranceException","class TransactionMissingEncumbranceException(val txId: SecureHash, val missing: Int, val inOut: TransactionVerificationException.Direction) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException"]},{"name":"class TransactionNetworkParameterOrderingException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNetworkParameterOrderingException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-network-parameter-ordering-exception/index.html","searchKeys":["TransactionNetworkParameterOrderingException","class TransactionNetworkParameterOrderingException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.TransactionNetworkParameterOrderingException"]},{"name":"class TransactionNonMatchingEncumbranceException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNonMatchingEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-non-matching-encumbrance-exception/index.html","searchKeys":["TransactionNonMatchingEncumbranceException","class TransactionNonMatchingEncumbranceException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.TransactionNonMatchingEncumbranceException"]},{"name":"class TransactionNotaryMismatchEncumbranceException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNotaryMismatchEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-notary-mismatch-encumbrance-exception/index.html","searchKeys":["TransactionNotaryMismatchEncumbranceException","class TransactionNotaryMismatchEncumbranceException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.TransactionNotaryMismatchEncumbranceException"]},{"name":"class TransactionRequiredContractUnspecifiedException(val txId: SecureHash, message: String) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.TransactionRequiredContractUnspecifiedException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-required-contract-unspecified-exception/index.html","searchKeys":["TransactionRequiredContractUnspecifiedException","class TransactionRequiredContractUnspecifiedException(val txId: SecureHash, message: String) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.TransactionRequiredContractUnspecifiedException"]},{"name":"class TransactionSignature(bytes: ByteArray, val by: PublicKey, val signatureMetadata: SignatureMetadata, val partialMerkleTree: PartialMerkleTree?) : DigitalSignature","description":"net.corda.core.crypto.TransactionSignature","location":"docs/net.corda.core.crypto/-transaction-signature/index.html","searchKeys":["TransactionSignature","class TransactionSignature(bytes: ByteArray, val by: PublicKey, val signatureMetadata: SignatureMetadata, val partialMerkleTree: PartialMerkleTree?) : DigitalSignature","net.corda.core.crypto.TransactionSignature"]},{"name":"class TransactionVerifier(transactionClassLoader: ClassLoader) : Function<Supplier<LedgerTransaction>, Unit> ","description":"net.corda.core.internal.verification.TransactionVerifier","location":"docs/net.corda.core.internal.verification/-transaction-verifier/index.html","searchKeys":["TransactionVerifier","class TransactionVerifier(transactionClassLoader: ClassLoader) : Function<Supplier<LedgerTransaction>, Unit> ","net.corda.core.internal.verification.TransactionVerifier"]},{"name":"class TypeMismatch(requested: Class<*>, actual: Class<*>) : Exception","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.TypeMismatch","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/-type-mismatch/index.html","searchKeys":["TypeMismatch","class TypeMismatch(requested: Class<*>, actual: Class<*>) : Exception","net.corda.testing.dsl.TestLedgerDSLInterpreter.TypeMismatch"]},{"name":"class UnacceptablePriceException(givenPrice: Amount<Currency>) : FlowException","description":"net.corda.finance.flows.TwoPartyTradeFlow.UnacceptablePriceException","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-unacceptable-price-exception/index.html","searchKeys":["UnacceptablePriceException","class UnacceptablePriceException(givenPrice: Amount<Currency>) : FlowException","net.corda.finance.flows.TwoPartyTradeFlow.UnacceptablePriceException"]},{"name":"class UnexpectedFlowEndException(message: String, cause: Throwable?, val originalErrorId: Long?) : CordaRuntimeException","description":"net.corda.core.flows.UnexpectedFlowEndException","location":"docs/net.corda.core.flows/-unexpected-flow-end-exception/index.html","searchKeys":["UnexpectedFlowEndException","class UnexpectedFlowEndException(message: String, cause: Throwable?, val originalErrorId: Long?) : CordaRuntimeException","net.corda.core.flows.UnexpectedFlowEndException"]},{"name":"class UniqueDummyFungibleContract : Contract","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/index.html","searchKeys":["UniqueDummyFungibleContract","class UniqueDummyFungibleContract : Contract","net.corda.testing.internal.vault.UniqueDummyFungibleContract"]},{"name":"class UniqueDummyLinearContract : Contract","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/index.html","searchKeys":["UniqueDummyLinearContract","class UniqueDummyLinearContract : Contract","net.corda.testing.internal.vault.UniqueDummyLinearContract"]},{"name":"class UniquePersistentDummyFungibleState(val currency: String) : PersistentState","description":"net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema.UniquePersistentDummyFungibleState","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-state-schema/-unique-persistent-dummy-fungible-state/index.html","searchKeys":["UniquePersistentDummyFungibleState","class UniquePersistentDummyFungibleState(val currency: String) : PersistentState","net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema.UniquePersistentDummyFungibleState"]},{"name":"class UniquePersistentLinearDummyState(val id: String) : PersistentState","description":"net.corda.testing.internal.vault.UniqueDummyLinearStateSchema.UniquePersistentLinearDummyState","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-state-schema/-unique-persistent-linear-dummy-state/index.html","searchKeys":["UniquePersistentLinearDummyState","class UniquePersistentLinearDummyState(val id: String) : PersistentState","net.corda.testing.internal.vault.UniqueDummyLinearStateSchema.UniquePersistentLinearDummyState"]},{"name":"class UnknownAnonymousPartyException(message: String) : CordaException","description":"net.corda.core.node.services.UnknownAnonymousPartyException","location":"docs/net.corda.core.node.services/-unknown-anonymous-party-exception/index.html","searchKeys":["UnknownAnonymousPartyException","class UnknownAnonymousPartyException(message: String) : CordaException","net.corda.core.node.services.UnknownAnonymousPartyException"]},{"name":"class UnknownCalendar(name: String) : FlowException","description":"net.corda.finance.workflows.utils.UnknownCalendar","location":"docs/net.corda.finance.workflows.utils/-unknown-calendar/index.html","searchKeys":["UnknownCalendar","class UnknownCalendar(name: String) : FlowException","net.corda.finance.workflows.utils.UnknownCalendar"]},{"name":"class UnknownMethod(val methodName: String) : StringToMethodCallParser.UnparseableCallException","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnknownMethod","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-unknown-method/index.html","searchKeys":["UnknownMethod","class UnknownMethod(val methodName: String) : StringToMethodCallParser.UnparseableCallException","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnknownMethod"]},{"name":"class UnknownParametersException(txId: SecureHash, paramsHash: SecureHash) : TransactionResolutionException","description":"net.corda.core.contracts.TransactionResolutionException.UnknownParametersException","location":"docs/net.corda.core.contracts/-transaction-resolution-exception/-unknown-parameters-exception/index.html","searchKeys":["UnknownParametersException","class UnknownParametersException(txId: SecureHash, paramsHash: SecureHash) : TransactionResolutionException","net.corda.core.contracts.TransactionResolutionException.UnknownParametersException"]},{"name":"class UnstartedMockNode","description":"net.corda.testing.node.UnstartedMockNode","location":"docs/net.corda.testing.node/-unstarted-mock-node/index.html","searchKeys":["UnstartedMockNode","class UnstartedMockNode","net.corda.testing.node.UnstartedMockNode"]},{"name":"class UnsupportedClassVersionError(val txId: SecureHash, message: String, cause: Throwable) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.UnsupportedClassVersionError","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-unsupported-class-version-error/index.html","searchKeys":["UnsupportedClassVersionError","class UnsupportedClassVersionError(val txId: SecureHash, message: String, cause: Throwable) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.UnsupportedClassVersionError"]},{"name":"class UnsupportedHashTypeException(val txId: SecureHash) : TransactionVerificationException","description":"net.corda.core.contracts.TransactionVerificationException.UnsupportedHashTypeException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-unsupported-hash-type-exception/index.html","searchKeys":["UnsupportedHashTypeException","class UnsupportedHashTypeException(val txId: SecureHash) : TransactionVerificationException","net.corda.core.contracts.TransactionVerificationException.UnsupportedHashTypeException"]},{"name":"class UntrustedAttachmentsException(val txId: SecureHash, val ids: List<SecureHash>) : CordaException","description":"net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-untrusted-attachments-exception/index.html","searchKeys":["UntrustedAttachmentsException","class UntrustedAttachmentsException(val txId: SecureHash, val ids: List<SecureHash>) : CordaException","net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException"]},{"name":"class UntrustworthyData<out T>(fromUntrustedWorld: T)","description":"net.corda.core.utilities.UntrustworthyData","location":"docs/net.corda.core.utilities/-untrustworthy-data/index.html","searchKeys":["UntrustworthyData","class UntrustworthyData<out T>(fromUntrustedWorld: T)","net.corda.core.utilities.UntrustworthyData"]},{"name":"class UuidGenerator","description":"net.corda.core.utilities.UuidGenerator","location":"docs/net.corda.core.utilities/-uuid-generator/index.html","searchKeys":["UuidGenerator","class UuidGenerator","net.corda.core.utilities.UuidGenerator"]},{"name":"class Vault<out T : ContractState>(val states: Iterable<StateAndRef<T>>)","description":"net.corda.core.node.services.Vault","location":"docs/net.corda.core.node.services/-vault/index.html","searchKeys":["Vault","class Vault<out T : ContractState>(val states: Iterable<StateAndRef<T>>)","net.corda.core.node.services.Vault"]},{"name":"class VaultFiller constructor(services: ServiceHub, defaultNotary: <Error class: unknown class>, altNotary: Party = defaultNotary.party, rngFactory: () -> Random = { Random(0L) })","description":"net.corda.testing.internal.vault.VaultFiller","location":"docs/net.corda.testing.internal.vault/-vault-filler/index.html","searchKeys":["VaultFiller","class VaultFiller constructor(services: ServiceHub, defaultNotary: <Error class: unknown class>, altNotary: Party = defaultNotary.party, rngFactory: () -> Random = { Random(0L) })","net.corda.testing.internal.vault.VaultFiller"]},{"name":"class VaultQueryException(description: String, cause: Exception? = null) : FlowException","description":"net.corda.core.node.services.VaultQueryException","location":"docs/net.corda.core.node.services/-vault-query-exception/index.html","searchKeys":["VaultQueryException","class VaultQueryException(description: String, cause: Exception? = null) : FlowException","net.corda.core.node.services.VaultQueryException"]},{"name":"class VerifiesFailed(transactionName: String, cause: Throwable) : Exception","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.VerifiesFailed","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/-verifies-failed/index.html","searchKeys":["VerifiesFailed","class VerifiesFailed(transactionName: String, cause: Throwable) : Exception","net.corda.testing.dsl.TestLedgerDSLInterpreter.VerifiesFailed"]},{"name":"class WaitForSessionConfirmations : FlowIORequest<Unit> ","description":"net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations","location":"docs/net.corda.core.internal/-flow-i-o-request/-wait-for-session-confirmations/index.html","searchKeys":["WaitForSessionConfirmations","class WaitForSessionConfirmations : FlowIORequest<Unit> ","net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations"]},{"name":"class WaitForStateConsumption(val stateRefs: Set<StateRef>, val services: ServiceHub) : FlowAsyncOperation<Unit> ","description":"net.corda.core.internal.WaitForStateConsumption","location":"docs/net.corda.core.internal/-wait-for-state-consumption/index.html","searchKeys":["WaitForStateConsumption","class WaitForStateConsumption(val stateRefs: Set<StateRef>, val services: ServiceHub) : FlowAsyncOperation<Unit> ","net.corda.core.internal.WaitForStateConsumption"]},{"name":"class WireTransaction(val componentGroups: List<ComponentGroup>, val privacySalt: PrivacySalt, val digestService: DigestService) : TraversableTransaction","description":"net.corda.core.transactions.WireTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/index.html","searchKeys":["WireTransaction","class WireTransaction(val componentGroups: List<ComponentGroup>, val privacySalt: PrivacySalt, val digestService: DigestService) : TraversableTransaction","net.corda.core.transactions.WireTransaction"]},{"name":"class WithReferencedStatesFlow<T : Any> constructor(val progressTracker: ProgressTracker = tracker(), flowLogicProducer: () -> FlowLogic<T>) : FlowLogic<T> ","description":"net.corda.core.flows.WithReferencedStatesFlow","location":"docs/net.corda.core.flows/-with-referenced-states-flow/index.html","searchKeys":["WithReferencedStatesFlow","class WithReferencedStatesFlow<T : Any> constructor(val progressTracker: ProgressTracker = tracker(), flowLogicProducer: () -> FlowLogic<T>) : FlowLogic<T> ","net.corda.core.flows.WithReferencedStatesFlow"]},{"name":"class ZoneVersionTooLowException(message: String) : CordaRuntimeException","description":"net.corda.core.node.ZoneVersionTooLowException","location":"docs/net.corda.core.node/-zone-version-too-low-exception/index.html","searchKeys":["ZoneVersionTooLowException","class ZoneVersionTooLowException(message: String) : CordaRuntimeException","net.corda.core.node.ZoneVersionTooLowException"]},{"name":"const val ALGORITHM: String","description":"net.corda.core.crypto.internal.PlatformSecureRandomService.Companion.ALGORITHM","location":"docs/net.corda.core.crypto.internal/-platform-secure-random-service/-companion/-a-l-g-o-r-i-t-h-m.html","searchKeys":["ALGORITHM","const val ALGORITHM: String","net.corda.core.crypto.internal.PlatformSecureRandomService.Companion.ALGORITHM"]},{"name":"const val ALIAS_KEY_ALGORITHM: String","description":"net.corda.core.crypto.internal.AliasPrivateKey.Companion.ALIAS_KEY_ALGORITHM","location":"docs/net.corda.core.crypto.internal/-alias-private-key/-companion/-a-l-i-a-s_-k-e-y_-a-l-g-o-r-i-t-h-m.html","searchKeys":["ALIAS_KEY_ALGORITHM","const val ALIAS_KEY_ALGORITHM: String","net.corda.core.crypto.internal.AliasPrivateKey.Companion.ALIAS_KEY_ALGORITHM"]},{"name":"const val ALIAS_PRIVATE_KEY: String","description":"net.corda.core.CordaOID.ALIAS_PRIVATE_KEY","location":"docs/net.corda.core/-corda-o-i-d/-a-l-i-a-s_-p-r-i-v-a-t-e_-k-e-y.html","searchKeys":["ALIAS_PRIVATE_KEY","const val ALIAS_PRIVATE_KEY: String","net.corda.core.CordaOID.ALIAS_PRIVATE_KEY"]},{"name":"const val AMQP_ENVELOPE_CACHE_INITIAL_CAPACITY: Int = 256","description":"net.corda.core.serialization.AMQP_ENVELOPE_CACHE_INITIAL_CAPACITY","location":"docs/net.corda.core.serialization/-a-m-q-p_-e-n-v-e-l-o-p-e_-c-a-c-h-e_-i-n-i-t-i-a-l_-c-a-p-a-c-i-t-y.html","searchKeys":["AMQP_ENVELOPE_CACHE_INITIAL_CAPACITY","const val AMQP_ENVELOPE_CACHE_INITIAL_CAPACITY: Int = 256","net.corda.core.serialization.AMQP_ENVELOPE_CACHE_INITIAL_CAPACITY"]},{"name":"const val AMQP_ENVELOPE_CACHE_PROPERTY: String","description":"net.corda.core.serialization.AMQP_ENVELOPE_CACHE_PROPERTY","location":"docs/net.corda.core.serialization/-a-m-q-p_-e-n-v-e-l-o-p-e_-c-a-c-h-e_-p-r-o-p-e-r-t-y.html","searchKeys":["AMQP_ENVELOPE_CACHE_PROPERTY","const val AMQP_ENVELOPE_CACHE_PROPERTY: String","net.corda.core.serialization.AMQP_ENVELOPE_CACHE_PROPERTY"]},{"name":"const val BATCH_DOWNLOAD_COUNTERPARTY_BACKCHAIN: Int = 6","description":"net.corda.core.internal.PlatformVersionSwitches.BATCH_DOWNLOAD_COUNTERPARTY_BACKCHAIN","location":"docs/net.corda.core.internal/-platform-version-switches/-b-a-t-c-h_-d-o-w-n-l-o-a-d_-c-o-u-n-t-e-r-p-a-r-t-y_-b-a-c-k-c-h-a-i-n.html","searchKeys":["BATCH_DOWNLOAD_COUNTERPARTY_BACKCHAIN","const val BATCH_DOWNLOAD_COUNTERPARTY_BACKCHAIN: Int = 6","net.corda.core.internal.PlatformVersionSwitches.BATCH_DOWNLOAD_COUNTERPARTY_BACKCHAIN"]},{"name":"const val BELONGS_TO_CONTRACT_ENFORCEMENT: Int = 4","description":"net.corda.core.internal.PlatformVersionSwitches.BELONGS_TO_CONTRACT_ENFORCEMENT","location":"docs/net.corda.core.internal/-platform-version-switches/-b-e-l-o-n-g-s_-t-o_-c-o-n-t-r-a-c-t_-e-n-f-o-r-c-e-m-e-n-t.html","searchKeys":["BELONGS_TO_CONTRACT_ENFORCEMENT","const val BELONGS_TO_CONTRACT_ENFORCEMENT: Int = 4","net.corda.core.internal.PlatformVersionSwitches.BELONGS_TO_CONTRACT_ENFORCEMENT"]},{"name":"const val CERTIFICATE_ROTATION: Int = 9","description":"net.corda.core.internal.PlatformVersionSwitches.CERTIFICATE_ROTATION","location":"docs/net.corda.core.internal/-platform-version-switches/-c-e-r-t-i-f-i-c-a-t-e_-r-o-t-a-t-i-o-n.html","searchKeys":["CERTIFICATE_ROTATION","const val CERTIFICATE_ROTATION: Int = 9","net.corda.core.internal.PlatformVersionSwitches.CERTIFICATE_ROTATION"]},{"name":"const val CLIENT_ID: String","description":"net.corda.core.internal.telemetry.CLIENT_ID","location":"docs/net.corda.core.internal.telemetry/-c-l-i-e-n-t_-i-d.html","searchKeys":["CLIENT_ID","const val CLIENT_ID: String","net.corda.core.internal.telemetry.CLIENT_ID"]},{"name":"const val CORDAPP_CONTRACT_LICENCE: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_LICENCE","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-c-o-n-t-r-a-c-t_-l-i-c-e-n-c-e.html","searchKeys":["CORDAPP_CONTRACT_LICENCE","const val CORDAPP_CONTRACT_LICENCE: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_LICENCE"]},{"name":"const val CORDAPP_CONTRACT_NAME: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_NAME","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-c-o-n-t-r-a-c-t_-n-a-m-e.html","searchKeys":["CORDAPP_CONTRACT_NAME","const val CORDAPP_CONTRACT_NAME: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_NAME"]},{"name":"const val CORDAPP_CONTRACT_VENDOR: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_VENDOR","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-c-o-n-t-r-a-c-t_-v-e-n-d-o-r.html","searchKeys":["CORDAPP_CONTRACT_VENDOR","const val CORDAPP_CONTRACT_VENDOR: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_VENDOR"]},{"name":"const val CORDAPP_CONTRACT_VERSION: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_VERSION","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-c-o-n-t-r-a-c-t_-v-e-r-s-i-o-n.html","searchKeys":["CORDAPP_CONTRACT_VERSION","const val CORDAPP_CONTRACT_VERSION: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_CONTRACT_VERSION"]},{"name":"const val CORDAPP_WORKFLOW_LICENCE: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_LICENCE","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-w-o-r-k-f-l-o-w_-l-i-c-e-n-c-e.html","searchKeys":["CORDAPP_WORKFLOW_LICENCE","const val CORDAPP_WORKFLOW_LICENCE: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_LICENCE"]},{"name":"const val CORDAPP_WORKFLOW_NAME: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_NAME","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-w-o-r-k-f-l-o-w_-n-a-m-e.html","searchKeys":["CORDAPP_WORKFLOW_NAME","const val CORDAPP_WORKFLOW_NAME: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_NAME"]},{"name":"const val CORDAPP_WORKFLOW_VENDOR: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_VENDOR","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-w-o-r-k-f-l-o-w_-v-e-n-d-o-r.html","searchKeys":["CORDAPP_WORKFLOW_VENDOR","const val CORDAPP_WORKFLOW_VENDOR: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_VENDOR"]},{"name":"const val CORDAPP_WORKFLOW_VERSION: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_VERSION","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-c-o-r-d-a-p-p_-w-o-r-k-f-l-o-w_-v-e-r-s-i-o-n.html","searchKeys":["CORDAPP_WORKFLOW_VERSION","const val CORDAPP_WORKFLOW_VERSION: String","net.corda.core.internal.cordapp.CordappImpl.Companion.CORDAPP_WORKFLOW_VERSION"]},{"name":"const val CORDA_PLATFORM: String","description":"net.corda.core.CordaOID.CORDA_PLATFORM","location":"docs/net.corda.core/-corda-o-i-d/-c-o-r-d-a_-p-l-a-t-f-o-r-m.html","searchKeys":["CORDA_PLATFORM","const val CORDA_PLATFORM: String","net.corda.core.CordaOID.CORDA_PLATFORM"]},{"name":"const val CP_PROGRAM_ID: ContractClassName","description":"net.corda.finance.contracts.CommercialPaper.Companion.CP_PROGRAM_ID","location":"docs/net.corda.finance.contracts/-commercial-paper/-companion/-c-p_-p-r-o-g-r-a-m_-i-d.html","searchKeys":["CP_PROGRAM_ID","const val CP_PROGRAM_ID: ContractClassName","net.corda.finance.contracts.CommercialPaper.Companion.CP_PROGRAM_ID"]},{"name":"const val CP_PROGRAM_ID: String","description":"net.corda.finance.contracts.CP_PROGRAM_ID","location":"docs/net.corda.finance.contracts/-c-p_-p-r-o-g-r-a-m_-i-d.html","searchKeys":["CP_PROGRAM_ID","const val CP_PROGRAM_ID: String","net.corda.finance.contracts.CP_PROGRAM_ID"]},{"name":"const val DEFAULT_CORDAPP_VERSION: Int = 1","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.DEFAULT_CORDAPP_VERSION","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-d-e-f-a-u-l-t_-c-o-r-d-a-p-p_-v-e-r-s-i-o-n.html","searchKeys":["DEFAULT_CORDAPP_VERSION","const val DEFAULT_CORDAPP_VERSION: Int = 1","net.corda.core.internal.cordapp.CordappImpl.Companion.DEFAULT_CORDAPP_VERSION"]},{"name":"const val DEFAULT_PAGE_NUM: Int = 1","description":"net.corda.core.node.services.vault.DEFAULT_PAGE_NUM","location":"docs/net.corda.core.node.services.vault/-d-e-f-a-u-l-t_-p-a-g-e_-n-u-m.html","searchKeys":["DEFAULT_PAGE_NUM","const val DEFAULT_PAGE_NUM: Int = 1","net.corda.core.node.services.vault.DEFAULT_PAGE_NUM"]},{"name":"const val DEFAULT_PAGE_SIZE: Int = 200","description":"net.corda.core.node.services.vault.DEFAULT_PAGE_SIZE","location":"docs/net.corda.core.node.services.vault/-d-e-f-a-u-l-t_-p-a-g-e_-s-i-z-e.html","searchKeys":["DEFAULT_PAGE_SIZE","const val DEFAULT_PAGE_SIZE: Int = 200","net.corda.core.node.services.vault.DEFAULT_PAGE_SIZE"]},{"name":"const val DEFAULT_START_PORT: Int","description":"net.corda.testing.driver.PortAllocation.Companion.DEFAULT_START_PORT","location":"docs/net.corda.testing.driver/-port-allocation/-companion/-d-e-f-a-u-l-t_-s-t-a-r-t_-p-o-r-t.html","searchKeys":["DEFAULT_START_PORT","const val DEFAULT_START_PORT: Int","net.corda.testing.driver.PortAllocation.Companion.DEFAULT_START_PORT"]},{"name":"const val DELIMITER: Char = ':'","description":"net.corda.core.crypto.SecureHash.Companion.DELIMITER","location":"docs/net.corda.core.crypto/-secure-hash/-companion/-d-e-l-i-m-i-t-e-r.html","searchKeys":["DELIMITER","const val DELIMITER: Char = ':'","net.corda.core.crypto.SecureHash.Companion.DELIMITER"]},{"name":"const val DEPLOYED_CORDAPP_UPLOADER: String","description":"net.corda.core.internal.DEPLOYED_CORDAPP_UPLOADER","location":"docs/net.corda.core.internal/-d-e-p-l-o-y-e-d_-c-o-r-d-a-p-p_-u-p-l-o-a-d-e-r.html","searchKeys":["DEPLOYED_CORDAPP_UPLOADER","const val DEPLOYED_CORDAPP_UPLOADER: String","net.corda.core.internal.DEPLOYED_CORDAPP_UPLOADER"]},{"name":"const val DESERIALIZATION_CACHE_PROPERTY: String","description":"net.corda.core.serialization.DESERIALIZATION_CACHE_PROPERTY","location":"docs/net.corda.core.serialization/-d-e-s-e-r-i-a-l-i-z-a-t-i-o-n_-c-a-c-h-e_-p-r-o-p-e-r-t-y.html","searchKeys":["DESERIALIZATION_CACHE_PROPERTY","const val DESERIALIZATION_CACHE_PROPERTY: String","net.corda.core.serialization.DESERIALIZATION_CACHE_PROPERTY"]},{"name":"const val DUMMY_DEAL_PROGRAM_ID: String","description":"net.corda.testing.internal.vault.DUMMY_DEAL_PROGRAM_ID","location":"docs/net.corda.testing.internal.vault/-d-u-m-m-y_-d-e-a-l_-p-r-o-g-r-a-m_-i-d.html","searchKeys":["DUMMY_DEAL_PROGRAM_ID","const val DUMMY_DEAL_PROGRAM_ID: String","net.corda.testing.internal.vault.DUMMY_DEAL_PROGRAM_ID"]},{"name":"const val DUMMY_LINEAR_CONTRACT_PROGRAM_ID: String","description":"net.corda.testing.internal.vault.DUMMY_LINEAR_CONTRACT_PROGRAM_ID","location":"docs/net.corda.testing.internal.vault/-d-u-m-m-y_-l-i-n-e-a-r_-c-o-n-t-r-a-c-t_-p-r-o-g-r-a-m_-i-d.html","searchKeys":["DUMMY_LINEAR_CONTRACT_PROGRAM_ID","const val DUMMY_LINEAR_CONTRACT_PROGRAM_ID: String","net.corda.testing.internal.vault.DUMMY_LINEAR_CONTRACT_PROGRAM_ID"]},{"name":"const val EMPTY_CRL: String","description":"net.corda.testing.node.internal.network.CrlServer.Companion.EMPTY_CRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-companion/-e-m-p-t-y_-c-r-l.html","searchKeys":["EMPTY_CRL","const val EMPTY_CRL: String","net.corda.testing.node.internal.network.CrlServer.Companion.EMPTY_CRL"]},{"name":"const val ENABLE_P2P_COMPRESSION: Int = 7","description":"net.corda.core.internal.PlatformVersionSwitches.ENABLE_P2P_COMPRESSION","location":"docs/net.corda.core.internal/-platform-version-switches/-e-n-a-b-l-e_-p2-p_-c-o-m-p-r-e-s-s-i-o-n.html","searchKeys":["ENABLE_P2P_COMPRESSION","const val ENABLE_P2P_COMPRESSION: Int = 7","net.corda.core.internal.PlatformVersionSwitches.ENABLE_P2P_COMPRESSION"]},{"name":"const val FETCH_MISSING_NETWORK_PARAMETERS: Int = 4","description":"net.corda.core.internal.PlatformVersionSwitches.FETCH_MISSING_NETWORK_PARAMETERS","location":"docs/net.corda.core.internal/-platform-version-switches/-f-e-t-c-h_-m-i-s-s-i-n-g_-n-e-t-w-o-r-k_-p-a-r-a-m-e-t-e-r-s.html","searchKeys":["FETCH_MISSING_NETWORK_PARAMETERS","const val FETCH_MISSING_NETWORK_PARAMETERS: Int = 4","net.corda.core.internal.PlatformVersionSwitches.FETCH_MISSING_NETWORK_PARAMETERS"]},{"name":"const val FIRST_EPHEMERAL_PORT: Int","description":"net.corda.testing.driver.PortAllocation.Companion.FIRST_EPHEMERAL_PORT","location":"docs/net.corda.testing.driver/-port-allocation/-companion/-f-i-r-s-t_-e-p-h-e-m-e-r-a-l_-p-o-r-t.html","searchKeys":["FIRST_EPHEMERAL_PORT","const val FIRST_EPHEMERAL_PORT: Int","net.corda.testing.driver.PortAllocation.Companion.FIRST_EPHEMERAL_PORT"]},{"name":"const val FIRST_VERSION: Int = 1","description":"net.corda.core.internal.PlatformVersionSwitches.FIRST_VERSION","location":"docs/net.corda.core.internal/-platform-version-switches/-f-i-r-s-t_-v-e-r-s-i-o-n.html","searchKeys":["FIRST_VERSION","const val FIRST_VERSION: Int = 1","net.corda.core.internal.PlatformVersionSwitches.FIRST_VERSION"]},{"name":"const val FORBIDDEN_CRL: String","description":"net.corda.testing.node.internal.network.CrlServer.Companion.FORBIDDEN_CRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-companion/-f-o-r-b-i-d-d-e-n_-c-r-l.html","searchKeys":["FORBIDDEN_CRL","const val FORBIDDEN_CRL: String","net.corda.testing.node.internal.network.CrlServer.Companion.FORBIDDEN_CRL"]},{"name":"const val IGNORE_JOLOKIA_JSON_SIMPLE_IN_CORDAPPS: Int = 4","description":"net.corda.core.internal.PlatformVersionSwitches.IGNORE_JOLOKIA_JSON_SIMPLE_IN_CORDAPPS","location":"docs/net.corda.core.internal/-platform-version-switches/-i-g-n-o-r-e_-j-o-l-o-k-i-a_-j-s-o-n_-s-i-m-p-l-e_-i-n_-c-o-r-d-a-p-p-s.html","searchKeys":["IGNORE_JOLOKIA_JSON_SIMPLE_IN_CORDAPPS","const val IGNORE_JOLOKIA_JSON_SIMPLE_IN_CORDAPPS: Int = 4","net.corda.core.internal.PlatformVersionSwitches.IGNORE_JOLOKIA_JSON_SIMPLE_IN_CORDAPPS"]},{"name":"const val INTERMEDIATE_CRL: String","description":"net.corda.testing.node.internal.network.CrlServer.Companion.INTERMEDIATE_CRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-companion/-i-n-t-e-r-m-e-d-i-a-t-e_-c-r-l.html","searchKeys":["INTERMEDIATE_CRL","const val INTERMEDIATE_CRL: String","net.corda.testing.node.internal.network.CrlServer.Companion.INTERMEDIATE_CRL"]},{"name":"const val JAVA_17_CLASS_FILE_MAJOR_VERSION: Int = 61","description":"net.corda.core.internal.JAVA_17_CLASS_FILE_MAJOR_VERSION","location":"docs/net.corda.core.internal/-j-a-v-a_17_-c-l-a-s-s_-f-i-l-e_-m-a-j-o-r_-v-e-r-s-i-o-n.html","searchKeys":["JAVA_17_CLASS_FILE_MAJOR_VERSION","const val JAVA_17_CLASS_FILE_MAJOR_VERSION: Int = 61","net.corda.core.internal.JAVA_17_CLASS_FILE_MAJOR_VERSION"]},{"name":"const val JAVA_1_2_CLASS_FILE_MAJOR_VERSION: Int = 46","description":"net.corda.core.internal.JAVA_1_2_CLASS_FILE_MAJOR_VERSION","location":"docs/net.corda.core.internal/-j-a-v-a_1_2_-c-l-a-s-s_-f-i-l-e_-m-a-j-o-r_-v-e-r-s-i-o-n.html","searchKeys":["JAVA_1_2_CLASS_FILE_MAJOR_VERSION","const val JAVA_1_2_CLASS_FILE_MAJOR_VERSION: Int = 46","net.corda.core.internal.JAVA_1_2_CLASS_FILE_MAJOR_VERSION"]},{"name":"const val JAVA_8_CLASS_FILE_MAJOR_VERSION: Int = 52","description":"net.corda.core.internal.JAVA_8_CLASS_FILE_MAJOR_VERSION","location":"docs/net.corda.core.internal/-j-a-v-a_8_-c-l-a-s-s_-f-i-l-e_-m-a-j-o-r_-v-e-r-s-i-o-n.html","searchKeys":["JAVA_8_CLASS_FILE_MAJOR_VERSION","const val JAVA_8_CLASS_FILE_MAJOR_VERSION: Int = 52","net.corda.core.internal.JAVA_8_CLASS_FILE_MAJOR_VERSION"]},{"name":"const val JDBC_DRIVER_NAME: String","description":"net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.Companion.JDBC_DRIVER_NAME","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-h2-impl/-companion/-j-d-b-c_-d-r-i-v-e-r_-n-a-m-e.html","searchKeys":["JDBC_DRIVER_NAME","const val JDBC_DRIVER_NAME: String","net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.Companion.JDBC_DRIVER_NAME"]},{"name":"const val JDBC_DRIVER_NAME: String","description":"net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.Companion.JDBC_DRIVER_NAME","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-postgre-s-q-l-impl/-companion/-j-d-b-c_-d-r-i-v-e-r_-n-a-m-e.html","searchKeys":["JDBC_DRIVER_NAME","const val JDBC_DRIVER_NAME: String","net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.Companion.JDBC_DRIVER_NAME"]},{"name":"const val KEY_ALGORITHM: String","description":"net.corda.core.crypto.CompositeKey.Companion.KEY_ALGORITHM","location":"docs/net.corda.core.crypto/-composite-key/-companion/-k-e-y_-a-l-g-o-r-i-t-h-m.html","searchKeys":["KEY_ALGORITHM","const val KEY_ALGORITHM: String","net.corda.core.crypto.CompositeKey.Companion.KEY_ALGORITHM"]},{"name":"const val LENGTH_COUNTRY: Int = 2","description":"net.corda.core.identity.CordaX500Name.Companion.LENGTH_COUNTRY","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/-l-e-n-g-t-h_-c-o-u-n-t-r-y.html","searchKeys":["LENGTH_COUNTRY","const val LENGTH_COUNTRY: Int = 2","net.corda.core.identity.CordaX500Name.Companion.LENGTH_COUNTRY"]},{"name":"const val LIMIT_KEYS_IN_SIGNATURE_CONSTRAINTS: Int = 5","description":"net.corda.core.internal.PlatformVersionSwitches.LIMIT_KEYS_IN_SIGNATURE_CONSTRAINTS","location":"docs/net.corda.core.internal/-platform-version-switches/-l-i-m-i-t_-k-e-y-s_-i-n_-s-i-g-n-a-t-u-r-e_-c-o-n-s-t-r-a-i-n-t-s.html","searchKeys":["LIMIT_KEYS_IN_SIGNATURE_CONSTRAINTS","const val LIMIT_KEYS_IN_SIGNATURE_CONSTRAINTS: Int = 5","net.corda.core.internal.PlatformVersionSwitches.LIMIT_KEYS_IN_SIGNATURE_CONSTRAINTS"]},{"name":"const val MAX_CONSTRAINT_DATA_SIZE: Int","description":"net.corda.core.node.services.MAX_CONSTRAINT_DATA_SIZE","location":"docs/net.corda.core.node.services/-m-a-x_-c-o-n-s-t-r-a-i-n-t_-d-a-t-a_-s-i-z-e.html","searchKeys":["MAX_CONSTRAINT_DATA_SIZE","const val MAX_CONSTRAINT_DATA_SIZE: Int","net.corda.core.node.services.MAX_CONSTRAINT_DATA_SIZE"]},{"name":"const val MAX_HASH_HEX_SIZE: Int = 130","description":"net.corda.core.utilities.MAX_HASH_HEX_SIZE","location":"docs/net.corda.core.utilities/-m-a-x_-h-a-s-h_-h-e-x_-s-i-z-e.html","searchKeys":["MAX_HASH_HEX_SIZE","const val MAX_HASH_HEX_SIZE: Int = 130","net.corda.core.utilities.MAX_HASH_HEX_SIZE"]},{"name":"const val MAX_ISSUER_REF_SIZE: Int = 512","description":"net.corda.core.contracts.MAX_ISSUER_REF_SIZE","location":"docs/net.corda.core.contracts/-m-a-x_-i-s-s-u-e-r_-r-e-f_-s-i-z-e.html","searchKeys":["MAX_ISSUER_REF_SIZE","const val MAX_ISSUER_REF_SIZE: Int = 512","net.corda.core.contracts.MAX_ISSUER_REF_SIZE"]},{"name":"const val MAX_LENGTH_COMMON_NAME: Int = 64","description":"net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_COMMON_NAME","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/-m-a-x_-l-e-n-g-t-h_-c-o-m-m-o-n_-n-a-m-e.html","searchKeys":["MAX_LENGTH_COMMON_NAME","const val MAX_LENGTH_COMMON_NAME: Int = 64","net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_COMMON_NAME"]},{"name":"const val MAX_LENGTH_LOCALITY: Int = 64","description":"net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_LOCALITY","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/-m-a-x_-l-e-n-g-t-h_-l-o-c-a-l-i-t-y.html","searchKeys":["MAX_LENGTH_LOCALITY","const val MAX_LENGTH_LOCALITY: Int = 64","net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_LOCALITY"]},{"name":"const val MAX_LENGTH_ORGANISATION: Int = 128","description":"net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_ORGANISATION","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/-m-a-x_-l-e-n-g-t-h_-o-r-g-a-n-i-s-a-t-i-o-n.html","searchKeys":["MAX_LENGTH_ORGANISATION","const val MAX_LENGTH_ORGANISATION: Int = 128","net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_ORGANISATION"]},{"name":"const val MAX_LENGTH_ORGANISATION_UNIT: Int = 64","description":"net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_ORGANISATION_UNIT","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/-m-a-x_-l-e-n-g-t-h_-o-r-g-a-n-i-s-a-t-i-o-n_-u-n-i-t.html","searchKeys":["MAX_LENGTH_ORGANISATION_UNIT","const val MAX_LENGTH_ORGANISATION_UNIT: Int = 64","net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_ORGANISATION_UNIT"]},{"name":"const val MAX_LENGTH_STATE: Int = 64","description":"net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_STATE","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/-m-a-x_-l-e-n-g-t-h_-s-t-a-t-e.html","searchKeys":["MAX_LENGTH_STATE","const val MAX_LENGTH_STATE: Int = 64","net.corda.core.identity.CordaX500Name.Companion.MAX_LENGTH_STATE"]},{"name":"const val MAX_NUMBER_OF_KEYS_IN_SIGNATURE_CONSTRAINT: Int = 20","description":"net.corda.core.internal.MAX_NUMBER_OF_KEYS_IN_SIGNATURE_CONSTRAINT","location":"docs/net.corda.core.internal/-m-a-x_-n-u-m-b-e-r_-o-f_-k-e-y-s_-i-n_-s-i-g-n-a-t-u-r-e_-c-o-n-s-t-r-a-i-n-t.html","searchKeys":["MAX_NUMBER_OF_KEYS_IN_SIGNATURE_CONSTRAINT","const val MAX_NUMBER_OF_KEYS_IN_SIGNATURE_CONSTRAINT: Int = 20","net.corda.core.internal.MAX_NUMBER_OF_KEYS_IN_SIGNATURE_CONSTRAINT"]},{"name":"const val MAX_PAGE_SIZE: Int","description":"net.corda.core.node.services.vault.MAX_PAGE_SIZE","location":"docs/net.corda.core.node.services.vault/-m-a-x_-p-a-g-e_-s-i-z-e.html","searchKeys":["MAX_PAGE_SIZE","const val MAX_PAGE_SIZE: Int","net.corda.core.node.services.vault.MAX_PAGE_SIZE"]},{"name":"const val MIGRATE_ATTACHMENT_TO_SIGNATURE_CONSTRAINTS: Int = 4","description":"net.corda.core.internal.PlatformVersionSwitches.MIGRATE_ATTACHMENT_TO_SIGNATURE_CONSTRAINTS","location":"docs/net.corda.core.internal/-platform-version-switches/-m-i-g-r-a-t-e_-a-t-t-a-c-h-m-e-n-t_-t-o_-s-i-g-n-a-t-u-r-e_-c-o-n-s-t-r-a-i-n-t-s.html","searchKeys":["MIGRATE_ATTACHMENT_TO_SIGNATURE_CONSTRAINTS","const val MIGRATE_ATTACHMENT_TO_SIGNATURE_CONSTRAINTS: Int = 4","net.corda.core.internal.PlatformVersionSwitches.MIGRATE_ATTACHMENT_TO_SIGNATURE_CONSTRAINTS"]},{"name":"const val MIGRATE_HASH_TO_SIGNATURE_CONSTRAINTS: Int = 4","description":"net.corda.core.internal.PlatformVersionSwitches.MIGRATE_HASH_TO_SIGNATURE_CONSTRAINTS","location":"docs/net.corda.core.internal/-platform-version-switches/-m-i-g-r-a-t-e_-h-a-s-h_-t-o_-s-i-g-n-a-t-u-r-e_-c-o-n-s-t-r-a-i-n-t-s.html","searchKeys":["MIGRATE_HASH_TO_SIGNATURE_CONSTRAINTS","const val MIGRATE_HASH_TO_SIGNATURE_CONSTRAINTS: Int = 4","net.corda.core.internal.PlatformVersionSwitches.MIGRATE_HASH_TO_SIGNATURE_CONSTRAINTS"]},{"name":"const val MIN_PLATFORM_VERSION: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.MIN_PLATFORM_VERSION","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-m-i-n_-p-l-a-t-f-o-r-m_-v-e-r-s-i-o-n.html","searchKeys":["MIN_PLATFORM_VERSION","const val MIN_PLATFORM_VERSION: String","net.corda.core.internal.cordapp.CordappImpl.Companion.MIN_PLATFORM_VERSION"]},{"name":"const val MIN_PLATFORM_VERSION_FOR_BACKPRESSURE_MESSAGE: Int = 4","description":"net.corda.core.internal.PlatformVersionSwitches.MIN_PLATFORM_VERSION_FOR_BACKPRESSURE_MESSAGE","location":"docs/net.corda.core.internal/-platform-version-switches/-m-i-n_-p-l-a-t-f-o-r-m_-v-e-r-s-i-o-n_-f-o-r_-b-a-c-k-p-r-e-s-s-u-r-e_-m-e-s-s-a-g-e.html","searchKeys":["MIN_PLATFORM_VERSION_FOR_BACKPRESSURE_MESSAGE","const val MIN_PLATFORM_VERSION_FOR_BACKPRESSURE_MESSAGE: Int = 4","net.corda.core.internal.PlatformVersionSwitches.MIN_PLATFORM_VERSION_FOR_BACKPRESSURE_MESSAGE"]},{"name":"const val NETWORK_PARAMETERS_COMPONENT_GROUP: Int = 4","description":"net.corda.core.internal.PlatformVersionSwitches.NETWORK_PARAMETERS_COMPONENT_GROUP","location":"docs/net.corda.core.internal/-platform-version-switches/-n-e-t-w-o-r-k_-p-a-r-a-m-e-t-e-r-s_-c-o-m-p-o-n-e-n-t_-g-r-o-u-p.html","searchKeys":["NETWORK_PARAMETERS_COMPONENT_GROUP","const val NETWORK_PARAMETERS_COMPONENT_GROUP: Int = 4","net.corda.core.internal.PlatformVersionSwitches.NETWORK_PARAMETERS_COMPONENT_GROUP"]},{"name":"const val NODE_CRL: String","description":"net.corda.testing.node.internal.network.CrlServer.Companion.NODE_CRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-companion/-n-o-d-e_-c-r-l.html","searchKeys":["NODE_CRL","const val NODE_CRL: String","net.corda.testing.node.internal.network.CrlServer.Companion.NODE_CRL"]},{"name":"const val NODE_INFO_DIRECTORY: String","description":"net.corda.core.internal.NODE_INFO_DIRECTORY","location":"docs/net.corda.core.internal/-n-o-d-e_-i-n-f-o_-d-i-r-e-c-t-o-r-y.html","searchKeys":["NODE_INFO_DIRECTORY","const val NODE_INFO_DIRECTORY: String","net.corda.core.internal.NODE_INFO_DIRECTORY"]},{"name":"const val NUM_STATES: Int = 5","description":"net.corda.core.flows.NotaryError.Companion.NUM_STATES","location":"docs/net.corda.core.flows/-notary-error/-companion/-n-u-m_-s-t-a-t-e-s.html","searchKeys":["NUM_STATES","const val NUM_STATES: Int = 5","net.corda.core.flows.NotaryError.Companion.NUM_STATES"]},{"name":"const val P2P_UPLOADER: String","description":"net.corda.core.internal.P2P_UPLOADER","location":"docs/net.corda.core.internal/-p2-p_-u-p-l-o-a-d-e-r.html","searchKeys":["P2P_UPLOADER","const val P2P_UPLOADER: String","net.corda.core.internal.P2P_UPLOADER"]},{"name":"const val PLATFORM_VERSION: Int = 140","description":"net.corda.core.internal.PLATFORM_VERSION","location":"docs/net.corda.core.internal/-p-l-a-t-f-o-r-m_-v-e-r-s-i-o-n.html","searchKeys":["PLATFORM_VERSION","const val PLATFORM_VERSION: Int = 140","net.corda.core.internal.PLATFORM_VERSION"]},{"name":"const val PROGRAM_ID: ContractClassName","description":"net.corda.finance.contracts.asset.Cash.Companion.PROGRAM_ID","location":"docs/net.corda.finance.contracts.asset/-cash/-companion/-p-r-o-g-r-a-m_-i-d.html","searchKeys":["PROGRAM_ID","const val PROGRAM_ID: ContractClassName","net.corda.finance.contracts.asset.Cash.Companion.PROGRAM_ID"]},{"name":"const val PROGRAM_ID: ContractClassName","description":"net.corda.finance.contracts.asset.Obligation.Companion.PROGRAM_ID","location":"docs/net.corda.finance.contracts.asset/-obligation/-companion/-p-r-o-g-r-a-m_-i-d.html","searchKeys":["PROGRAM_ID","const val PROGRAM_ID: ContractClassName","net.corda.finance.contracts.asset.Obligation.Companion.PROGRAM_ID"]},{"name":"const val PROVIDER_NAME: String","description":"net.corda.core.crypto.CordaSecurityProvider.Companion.PROVIDER_NAME","location":"docs/net.corda.core.crypto/-corda-security-provider/-companion/-p-r-o-v-i-d-e-r_-n-a-m-e.html","searchKeys":["PROVIDER_NAME","const val PROVIDER_NAME: String","net.corda.core.crypto.CordaSecurityProvider.Companion.PROVIDER_NAME"]},{"name":"const val R3_ROOT: String","description":"net.corda.core.CordaOID.R3_ROOT","location":"docs/net.corda.core/-corda-o-i-d/-r3_-r-o-o-t.html","searchKeys":["R3_ROOT","const val R3_ROOT: String","net.corda.core.CordaOID.R3_ROOT"]},{"name":"const val RESTRICTED_DATABASE_OPERATIONS: Int = 7","description":"net.corda.core.internal.PlatformVersionSwitches.RESTRICTED_DATABASE_OPERATIONS","location":"docs/net.corda.core.internal/-platform-version-switches/-r-e-s-t-r-i-c-t-e-d_-d-a-t-a-b-a-s-e_-o-p-e-r-a-t-i-o-n-s.html","searchKeys":["RESTRICTED_DATABASE_OPERATIONS","const val RESTRICTED_DATABASE_OPERATIONS: Int = 7","net.corda.core.internal.PlatformVersionSwitches.RESTRICTED_DATABASE_OPERATIONS"]},{"name":"const val RPC_UPLOADER: String","description":"net.corda.core.internal.RPC_UPLOADER","location":"docs/net.corda.core.internal/-r-p-c_-u-p-l-o-a-d-e-r.html","searchKeys":["RPC_UPLOADER","const val RPC_UPLOADER: String","net.corda.core.internal.RPC_UPLOADER"]},{"name":"const val SERVICE_PRIORITY_HIGH: Int = 200","description":"net.corda.core.node.AppServiceHub.Companion.SERVICE_PRIORITY_HIGH","location":"docs/net.corda.core.node/-app-service-hub/-companion/-s-e-r-v-i-c-e_-p-r-i-o-r-i-t-y_-h-i-g-h.html","searchKeys":["SERVICE_PRIORITY_HIGH","const val SERVICE_PRIORITY_HIGH: Int = 200","net.corda.core.node.AppServiceHub.Companion.SERVICE_PRIORITY_HIGH"]},{"name":"const val SERVICE_PRIORITY_LOW: Int = 20","description":"net.corda.core.node.AppServiceHub.Companion.SERVICE_PRIORITY_LOW","location":"docs/net.corda.core.node/-app-service-hub/-companion/-s-e-r-v-i-c-e_-p-r-i-o-r-i-t-y_-l-o-w.html","searchKeys":["SERVICE_PRIORITY_LOW","const val SERVICE_PRIORITY_LOW: Int = 20","net.corda.core.node.AppServiceHub.Companion.SERVICE_PRIORITY_LOW"]},{"name":"const val SERVICE_PRIORITY_NORMAL: Int = 100","description":"net.corda.core.node.AppServiceHub.Companion.SERVICE_PRIORITY_NORMAL","location":"docs/net.corda.core.node/-app-service-hub/-companion/-s-e-r-v-i-c-e_-p-r-i-o-r-i-t-y_-n-o-r-m-a-l.html","searchKeys":["SERVICE_PRIORITY_NORMAL","const val SERVICE_PRIORITY_NORMAL: Int = 100","net.corda.core.node.AppServiceHub.Companion.SERVICE_PRIORITY_NORMAL"]},{"name":"const val SHA2_256: String","description":"net.corda.core.crypto.SecureHash.Companion.SHA2_256","location":"docs/net.corda.core.crypto/-secure-hash/-companion/-s-h-a2_256.html","searchKeys":["SHA2_256","const val SHA2_256: String","net.corda.core.crypto.SecureHash.Companion.SHA2_256"]},{"name":"const val SHA2_384: String","description":"net.corda.core.crypto.SecureHash.Companion.SHA2_384","location":"docs/net.corda.core.crypto/-secure-hash/-companion/-s-h-a2_384.html","searchKeys":["SHA2_384","const val SHA2_384: String","net.corda.core.crypto.SecureHash.Companion.SHA2_384"]},{"name":"const val SHA2_512: String","description":"net.corda.core.crypto.SecureHash.Companion.SHA2_512","location":"docs/net.corda.core.crypto/-secure-hash/-companion/-s-h-a2_512.html","searchKeys":["SHA2_512","const val SHA2_512: String","net.corda.core.crypto.SecureHash.Companion.SHA2_512"]},{"name":"const val SIGNATURE_ALGORITHM: String","description":"net.corda.core.crypto.CompositeSignature.Companion.SIGNATURE_ALGORITHM","location":"docs/net.corda.core.crypto/-composite-signature/-companion/-s-i-g-n-a-t-u-r-e_-a-l-g-o-r-i-t-h-m.html","searchKeys":["SIGNATURE_ALGORITHM","const val SIGNATURE_ALGORITHM: String","net.corda.core.crypto.CompositeSignature.Companion.SIGNATURE_ALGORITHM"]},{"name":"const val STRUCTURAL_STEP_PREFIX: String","description":"net.corda.core.internal.STRUCTURAL_STEP_PREFIX","location":"docs/net.corda.core.internal/-s-t-r-u-c-t-u-r-a-l_-s-t-e-p_-p-r-e-f-i-x.html","searchKeys":["STRUCTURAL_STEP_PREFIX","const val STRUCTURAL_STEP_PREFIX: String","net.corda.core.internal.STRUCTURAL_STEP_PREFIX"]},{"name":"const val TARGET_PLATFORM_VERSION: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.TARGET_PLATFORM_VERSION","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-t-a-r-g-e-t_-p-l-a-t-f-o-r-m_-v-e-r-s-i-o-n.html","searchKeys":["TARGET_PLATFORM_VERSION","const val TARGET_PLATFORM_VERSION: String","net.corda.core.internal.cordapp.CordappImpl.Companion.TARGET_PLATFORM_VERSION"]},{"name":"const val TESTDSL_UPLOADER: String","description":"net.corda.core.internal.TESTDSL_UPLOADER","location":"docs/net.corda.core.internal/-t-e-s-t-d-s-l_-u-p-l-o-a-d-e-r.html","searchKeys":["TESTDSL_UPLOADER","const val TESTDSL_UPLOADER: String","net.corda.core.internal.TESTDSL_UPLOADER"]},{"name":"const val TRACE_ID: String","description":"net.corda.core.internal.telemetry.TRACE_ID","location":"docs/net.corda.core.internal.telemetry/-t-r-a-c-e_-i-d.html","searchKeys":["TRACE_ID","const val TRACE_ID: String","net.corda.core.internal.telemetry.TRACE_ID"]},{"name":"const val TWO_PHASE_FINALITY: Int = 13","description":"net.corda.core.internal.PlatformVersionSwitches.TWO_PHASE_FINALITY","location":"docs/net.corda.core.internal/-platform-version-switches/-t-w-o_-p-h-a-s-e_-f-i-n-a-l-i-t-y.html","searchKeys":["TWO_PHASE_FINALITY","const val TWO_PHASE_FINALITY: Int = 13","net.corda.core.internal.PlatformVersionSwitches.TWO_PHASE_FINALITY"]},{"name":"const val UNIQUE_DUMMY_FUNGIBLE_CONTRACT_PROGRAM_ID: String","description":"net.corda.testing.internal.vault.UNIQUE_DUMMY_FUNGIBLE_CONTRACT_PROGRAM_ID","location":"docs/net.corda.testing.internal.vault/-u-n-i-q-u-e_-d-u-m-m-y_-f-u-n-g-i-b-l-e_-c-o-n-t-r-a-c-t_-p-r-o-g-r-a-m_-i-d.html","searchKeys":["UNIQUE_DUMMY_FUNGIBLE_CONTRACT_PROGRAM_ID","const val UNIQUE_DUMMY_FUNGIBLE_CONTRACT_PROGRAM_ID: String","net.corda.testing.internal.vault.UNIQUE_DUMMY_FUNGIBLE_CONTRACT_PROGRAM_ID"]},{"name":"const val UNIQUE_DUMMY_LINEAR_CONTRACT_PROGRAM_ID: String","description":"net.corda.testing.internal.vault.UNIQUE_DUMMY_LINEAR_CONTRACT_PROGRAM_ID","location":"docs/net.corda.testing.internal.vault/-u-n-i-q-u-e_-d-u-m-m-y_-l-i-n-e-a-r_-c-o-n-t-r-a-c-t_-p-r-o-g-r-a-m_-i-d.html","searchKeys":["UNIQUE_DUMMY_LINEAR_CONTRACT_PROGRAM_ID","const val UNIQUE_DUMMY_LINEAR_CONTRACT_PROGRAM_ID: String","net.corda.testing.internal.vault.UNIQUE_DUMMY_LINEAR_CONTRACT_PROGRAM_ID"]},{"name":"const val UNKNOWN_UPLOADER: String","description":"net.corda.core.internal.UNKNOWN_UPLOADER","location":"docs/net.corda.core.internal/-u-n-k-n-o-w-n_-u-p-l-o-a-d-e-r.html","searchKeys":["UNKNOWN_UPLOADER","const val UNKNOWN_UPLOADER: String","net.corda.core.internal.UNKNOWN_UPLOADER"]},{"name":"const val UNKNOWN_VALUE: String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.UNKNOWN_VALUE","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-u-n-k-n-o-w-n_-v-a-l-u-e.html","searchKeys":["UNKNOWN_VALUE","const val UNKNOWN_VALUE: String","net.corda.core.internal.cordapp.CordappImpl.Companion.UNKNOWN_VALUE"]},{"name":"const val X509_EXTENSION_CORDA_ROLE: String","description":"net.corda.core.CordaOID.X509_EXTENSION_CORDA_ROLE","location":"docs/net.corda.core/-corda-o-i-d/-x509_-e-x-t-e-n-s-i-o-n_-c-o-r-d-a_-r-o-l-e.html","searchKeys":["X509_EXTENSION_CORDA_ROLE","const val X509_EXTENSION_CORDA_ROLE: String","net.corda.core.CordaOID.X509_EXTENSION_CORDA_ROLE"]},{"name":"const val listenerFailedMessage: String","description":"net.corda.core.internal.concurrent.CordaFutureImpl.Companion.listenerFailedMessage","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/-companion/listener-failed-message.html","searchKeys":["listenerFailedMessage","const val listenerFailedMessage: String","net.corda.core.internal.concurrent.CordaFutureImpl.Companion.listenerFailedMessage"]},{"name":"constructor()","description":"net.corda.client.jackson.JacksonSupport.SecureHashDeserializer.SecureHashDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-secure-hash-deserializer/-secure-hash-deserializer.html","searchKeys":["SecureHashDeserializer","constructor()","net.corda.client.jackson.JacksonSupport.SecureHashDeserializer.SecureHashDeserializer"]},{"name":"constructor()","description":"net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.SignedTransactionMixin","location":"docs/net.corda.client.jackson/-jackson-support/-signed-transaction-mixin/-signed-transaction-mixin.html","searchKeys":["SignedTransactionMixin","constructor()","net.corda.client.jackson.JacksonSupport.SignedTransactionMixin.SignedTransactionMixin"]},{"name":"constructor()","description":"net.corda.client.jackson.JacksonSupport.WireTransactionMixin.WireTransactionMixin","location":"docs/net.corda.client.jackson/-jackson-support/-wire-transaction-mixin/-wire-transaction-mixin.html","searchKeys":["WireTransactionMixin","constructor()","net.corda.client.jackson.JacksonSupport.WireTransactionMixin.WireTransactionMixin"]},{"name":"constructor()","description":"net.corda.client.jackson.internal.CordaModule.CordaModule","location":"docs/net.corda.client.jackson.internal/-corda-module/-corda-module.html","searchKeys":["CordaModule","constructor()","net.corda.client.jackson.internal.CordaModule.CordaModule"]},{"name":"constructor()","description":"net.corda.client.rpc.internal.ClientCacheFactory.ClientCacheFactory","location":"docs/net.corda.client.rpc.internal/-client-cache-factory/-client-cache-factory.html","searchKeys":["ClientCacheFactory","constructor()","net.corda.client.rpc.internal.ClientCacheFactory.ClientCacheFactory"]},{"name":"constructor()","description":"net.corda.core.contracts.PrivacySalt.PrivacySalt","location":"docs/net.corda.core.contracts/-privacy-salt/-privacy-salt.html","searchKeys":["PrivacySalt","constructor()","net.corda.core.contracts.PrivacySalt.PrivacySalt"]},{"name":"constructor()","description":"net.corda.core.contracts.TimeWindow.TimeWindow","location":"docs/net.corda.core.contracts/-time-window/-time-window.html","searchKeys":["TimeWindow","constructor()","net.corda.core.contracts.TimeWindow.TimeWindow"]},{"name":"constructor()","description":"net.corda.core.contracts.TypeOnlyCommandData.TypeOnlyCommandData","location":"docs/net.corda.core.contracts/-type-only-command-data/-type-only-command-data.html","searchKeys":["TypeOnlyCommandData","constructor()","net.corda.core.contracts.TypeOnlyCommandData.TypeOnlyCommandData"]},{"name":"constructor()","description":"net.corda.core.crypto.CompositeKey.Builder.Builder","location":"docs/net.corda.core.crypto/-composite-key/-builder/-builder.html","searchKeys":["Builder","constructor()","net.corda.core.crypto.CompositeKey.Builder.Builder"]},{"name":"constructor()","description":"net.corda.core.crypto.CompositeKeyFactory.CompositeKeyFactory","location":"docs/net.corda.core.crypto/-composite-key-factory/-composite-key-factory.html","searchKeys":["CompositeKeyFactory","constructor()","net.corda.core.crypto.CompositeKeyFactory.CompositeKeyFactory"]},{"name":"constructor()","description":"net.corda.core.crypto.CompositeSignature.CompositeSignature","location":"docs/net.corda.core.crypto/-composite-signature/-composite-signature.html","searchKeys":["CompositeSignature","constructor()","net.corda.core.crypto.CompositeSignature.CompositeSignature"]},{"name":"constructor()","description":"net.corda.core.crypto.CordaSecurityProvider.CordaSecurityProvider","location":"docs/net.corda.core.crypto/-corda-security-provider/-corda-security-provider.html","searchKeys":["CordaSecurityProvider","constructor()","net.corda.core.crypto.CordaSecurityProvider.CordaSecurityProvider"]},{"name":"constructor()","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.Secp256k1SupportKeyPairGeneratorSpi","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-key-pair-generator-spi/-secp256k1-support-key-pair-generator-spi.html","searchKeys":["Secp256k1SupportKeyPairGeneratorSpi","constructor()","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.Secp256k1SupportKeyPairGeneratorSpi"]},{"name":"constructor()","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportProvider","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-provider.html","searchKeys":["Secp256k1SupportProvider","constructor()","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportProvider"]},{"name":"constructor()","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportSignatureSpi.Secp256k1SupportSignatureSpi","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-signature-spi/-secp256k1-support-signature-spi.html","searchKeys":["Secp256k1SupportSignatureSpi","constructor()","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportSignatureSpi.Secp256k1SupportSignatureSpi"]},{"name":"constructor()","description":"net.corda.core.flows.AbstractStateReplacementFlow.AbstractStateReplacementFlow","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-abstract-state-replacement-flow.html","searchKeys":["AbstractStateReplacementFlow","constructor()","net.corda.core.flows.AbstractStateReplacementFlow.AbstractStateReplacementFlow"]},{"name":"constructor()","description":"net.corda.core.flows.DistributionRecord.DistributionRecord","location":"docs/net.corda.core.flows/-distribution-record/-distribution-record.html","searchKeys":["DistributionRecord","constructor()","net.corda.core.flows.DistributionRecord.DistributionRecord"]},{"name":"constructor()","description":"net.corda.core.flows.FlowException.FlowException","location":"docs/net.corda.core.flows/-flow-exception/-flow-exception.html","searchKeys":["FlowException","constructor()","net.corda.core.flows.FlowException.FlowException"]},{"name":"constructor()","description":"net.corda.core.flows.FlowLogic.FlowLogic","location":"docs/net.corda.core.flows/-flow-logic/-flow-logic.html","searchKeys":["FlowLogic","constructor()","net.corda.core.flows.FlowLogic.FlowLogic"]},{"name":"constructor()","description":"net.corda.core.flows.FlowSession.FlowSession","location":"docs/net.corda.core.flows/-flow-session/-flow-session.html","searchKeys":["FlowSession","constructor()","net.corda.core.flows.FlowSession.FlowSession"]},{"name":"constructor()","description":"net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException","location":"docs/net.corda.core.flows/-hospitalize-flow-exception/-hospitalize-flow-exception.html","searchKeys":["HospitalizeFlowException","constructor()","net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException"]},{"name":"constructor()","description":"net.corda.core.flows.NotaryFlow.NotaryFlow","location":"docs/net.corda.core.flows/-notary-flow/-notary-flow.html","searchKeys":["NotaryFlow","constructor()","net.corda.core.flows.NotaryFlow.NotaryFlow"]},{"name":"constructor()","description":"net.corda.core.internal.BackpressureAwareTimedFlow.BackpressureAwareTimedFlow","location":"docs/net.corda.core.internal/-backpressure-aware-timed-flow/-backpressure-aware-timed-flow.html","searchKeys":["BackpressureAwareTimedFlow","constructor()","net.corda.core.internal.BackpressureAwareTimedFlow.BackpressureAwareTimedFlow"]},{"name":"constructor()","description":"net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations.WaitForSessionConfirmations","location":"docs/net.corda.core.internal/-flow-i-o-request/-wait-for-session-confirmations/-wait-for-session-confirmations.html","searchKeys":["WaitForSessionConfirmations","constructor()","net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations.WaitForSessionConfirmations"]},{"name":"constructor()","description":"net.corda.core.internal.HashAgility.HashAgility","location":"docs/net.corda.core.internal/-hash-agility/-hash-agility.html","searchKeys":["HashAgility","constructor()","net.corda.core.internal.HashAgility.HashAgility"]},{"name":"constructor()","description":"net.corda.core.internal.notary.NotaryService.NotaryService","location":"docs/net.corda.core.internal.notary/-notary-service/-notary-service.html","searchKeys":["NotaryService","constructor()","net.corda.core.internal.notary.NotaryService.NotaryService"]},{"name":"constructor()","description":"net.corda.core.internal.notary.SinglePartyNotaryService.SinglePartyNotaryService","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-single-party-notary-service.html","searchKeys":["SinglePartyNotaryService","constructor()","net.corda.core.internal.notary.SinglePartyNotaryService.SinglePartyNotaryService"]},{"name":"constructor()","description":"net.corda.core.internal.telemetry.InitialiseTelemetryEvent.InitialiseTelemetryEvent","location":"docs/net.corda.core.internal.telemetry/-initialise-telemetry-event/-initialise-telemetry-event.html","searchKeys":["InitialiseTelemetryEvent","constructor()","net.corda.core.internal.telemetry.InitialiseTelemetryEvent.InitialiseTelemetryEvent"]},{"name":"constructor()","description":"net.corda.core.internal.telemetry.ShutdownTelemetryEvent.ShutdownTelemetryEvent","location":"docs/net.corda.core.internal.telemetry/-shutdown-telemetry-event/-shutdown-telemetry-event.html","searchKeys":["ShutdownTelemetryEvent","constructor()","net.corda.core.internal.telemetry.ShutdownTelemetryEvent.ShutdownTelemetryEvent"]},{"name":"constructor()","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.SimpleLogTelemetryComponent","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/-simple-log-telemetry-component.html","searchKeys":["SimpleLogTelemetryComponent","constructor()","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.SimpleLogTelemetryComponent"]},{"name":"constructor()","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.TelemetryServiceImpl","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/-telemetry-service-impl.html","searchKeys":["TelemetryServiceImpl","constructor()","net.corda.core.internal.telemetry.TelemetryServiceImpl.TelemetryServiceImpl"]},{"name":"constructor()","description":"net.corda.core.internal.utilities.AlwaysInternableVerifier.AlwaysInternableVerifier","location":"docs/net.corda.core.internal.utilities/-always-internable-verifier/-always-internable-verifier.html","searchKeys":["AlwaysInternableVerifier","constructor()","net.corda.core.internal.utilities.AlwaysInternableVerifier.AlwaysInternableVerifier"]},{"name":"constructor()","description":"net.corda.core.internal.verification.AttachmentFixups.AttachmentFixups","location":"docs/net.corda.core.internal.verification/-attachment-fixups/-attachment-fixups.html","searchKeys":["AttachmentFixups","constructor()","net.corda.core.internal.verification.AttachmentFixups.AttachmentFixups"]},{"name":"constructor()","description":"net.corda.core.node.services.vault.BaseSort.BaseSort","location":"docs/net.corda.core.node.services.vault/-base-sort/-base-sort.html","searchKeys":["BaseSort","constructor()","net.corda.core.node.services.vault.BaseSort.BaseSort"]},{"name":"constructor()","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.CommonQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/-common-query-criteria.html","searchKeys":["CommonQueryCriteria","constructor()","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.CommonQueryCriteria"]},{"name":"constructor()","description":"net.corda.core.serialization.SerializationFactory.SerializationFactory","location":"docs/net.corda.core.serialization/-serialization-factory/-serialization-factory.html","searchKeys":["SerializationFactory","constructor()","net.corda.core.serialization.SerializationFactory.SerializationFactory"]},{"name":"constructor()","description":"net.corda.core.serialization.SingletonSerializeAsToken.SingletonSerializeAsToken","location":"docs/net.corda.core.serialization/-singleton-serialize-as-token/-singleton-serialize-as-token.html","searchKeys":["SingletonSerializeAsToken","constructor()","net.corda.core.serialization.SingletonSerializeAsToken.SingletonSerializeAsToken"]},{"name":"constructor()","description":"net.corda.core.serialization.internal.CustomSerializationSchemeUtils.CustomSerializationSchemeUtils","location":"docs/net.corda.core.serialization.internal/-custom-serialization-scheme-utils/-custom-serialization-scheme-utils.html","searchKeys":["CustomSerializationSchemeUtils","constructor()","net.corda.core.serialization.internal.CustomSerializationSchemeUtils.CustomSerializationSchemeUtils"]},{"name":"constructor()","description":"net.corda.core.transactions.BaseTransaction.BaseTransaction","location":"docs/net.corda.core.transactions/-base-transaction/-base-transaction.html","searchKeys":["BaseTransaction","constructor()","net.corda.core.transactions.BaseTransaction.BaseTransaction"]},{"name":"constructor()","description":"net.corda.core.transactions.CoreTransaction.CoreTransaction","location":"docs/net.corda.core.transactions/-core-transaction/-core-transaction.html","searchKeys":["CoreTransaction","constructor()","net.corda.core.transactions.CoreTransaction.CoreTransaction"]},{"name":"constructor()","description":"net.corda.core.transactions.FullTransaction.FullTransaction","location":"docs/net.corda.core.transactions/-full-transaction/-full-transaction.html","searchKeys":["FullTransaction","constructor()","net.corda.core.transactions.FullTransaction.FullTransaction"]},{"name":"constructor()","description":"net.corda.core.utilities.UuidGenerator.UuidGenerator","location":"docs/net.corda.core.utilities/-uuid-generator/-uuid-generator.html","searchKeys":["UuidGenerator","constructor()","net.corda.core.utilities.UuidGenerator.UuidGenerator"]},{"name":"constructor()","description":"net.corda.finance.contracts.CommercialPaper.Commands.Issue.Issue","location":"docs/net.corda.finance.contracts/-commercial-paper/-commands/-issue/-issue.html","searchKeys":["Issue","constructor()","net.corda.finance.contracts.CommercialPaper.Commands.Issue.Issue"]},{"name":"constructor()","description":"net.corda.finance.contracts.CommercialPaper.Commands.Move.Move","location":"docs/net.corda.finance.contracts/-commercial-paper/-commands/-move/-move.html","searchKeys":["Move","constructor()","net.corda.finance.contracts.CommercialPaper.Commands.Move.Move"]},{"name":"constructor()","description":"net.corda.finance.contracts.CommercialPaper.Commands.Redeem.Redeem","location":"docs/net.corda.finance.contracts/-commercial-paper/-commands/-redeem/-redeem.html","searchKeys":["Redeem","constructor()","net.corda.finance.contracts.CommercialPaper.Commands.Redeem.Redeem"]},{"name":"constructor()","description":"net.corda.finance.contracts.CommercialPaper.CommercialPaper","location":"docs/net.corda.finance.contracts/-commercial-paper/-commercial-paper.html","searchKeys":["CommercialPaper","constructor()","net.corda.finance.contracts.CommercialPaper.CommercialPaper"]},{"name":"constructor()","description":"net.corda.finance.contracts.asset.Cash.Cash","location":"docs/net.corda.finance.contracts.asset/-cash/-cash.html","searchKeys":["Cash","constructor()","net.corda.finance.contracts.asset.Cash.Cash"]},{"name":"constructor()","description":"net.corda.finance.contracts.asset.Cash.Commands.Issue.Issue","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-issue/-issue.html","searchKeys":["Issue","constructor()","net.corda.finance.contracts.asset.Cash.Commands.Issue.Issue"]},{"name":"constructor()","description":"net.corda.finance.contracts.asset.Obligation.Commands.Issue.Issue","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-issue/-issue.html","searchKeys":["Issue","constructor()","net.corda.finance.contracts.asset.Obligation.Commands.Issue.Issue"]},{"name":"constructor()","description":"net.corda.finance.contracts.asset.Obligation.Obligation","location":"docs/net.corda.finance.contracts.asset/-obligation/-obligation.html","searchKeys":["Obligation","constructor()","net.corda.finance.contracts.asset.Obligation.Obligation"]},{"name":"constructor()","description":"net.corda.finance.contracts.asset.OnLedgerAsset.OnLedgerAsset","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/-on-ledger-asset.html","searchKeys":["OnLedgerAsset","constructor()","net.corda.finance.contracts.asset.OnLedgerAsset.OnLedgerAsset"]},{"name":"constructor()","description":"net.corda.finance.internal.CashConfigDataFlow.CashConfigDataFlow","location":"docs/net.corda.finance.internal/-cash-config-data-flow/-cash-config-data-flow.html","searchKeys":["CashConfigDataFlow","constructor()","net.corda.finance.internal.CashConfigDataFlow.CashConfigDataFlow"]},{"name":"constructor()","description":"net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.CashSelectionH2Impl","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-h2-impl/-cash-selection-h2-impl.html","searchKeys":["CashSelectionH2Impl","constructor()","net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.CashSelectionH2Impl"]},{"name":"constructor()","description":"net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.CashSelectionPostgreSQLImpl","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-postgre-s-q-l-impl/-cash-selection-postgre-s-q-l-impl.html","searchKeys":["CashSelectionPostgreSQLImpl","constructor()","net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.CashSelectionPostgreSQLImpl"]},{"name":"constructor()","description":"net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.CashSelectionSQLServerImpl","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-s-q-l-server-impl/-cash-selection-s-q-l-server-impl.html","searchKeys":["CashSelectionSQLServerImpl","constructor()","net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.CashSelectionSQLServerImpl"]},{"name":"constructor()","description":"net.corda.testing.driver.JmxPolicy.JmxPolicy","location":"docs/net.corda.testing.driver/-jmx-policy/-jmx-policy.html","searchKeys":["JmxPolicy","constructor()","net.corda.testing.driver.JmxPolicy.JmxPolicy"]},{"name":"constructor()","description":"net.corda.testing.driver.NodeParameters.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/-node-parameters.html","searchKeys":["NodeParameters","constructor()","net.corda.testing.driver.NodeParameters.NodeParameters"]},{"name":"constructor()","description":"net.corda.testing.driver.PortAllocation.PortAllocation","location":"docs/net.corda.testing.driver/-port-allocation/-port-allocation.html","searchKeys":["PortAllocation","constructor()","net.corda.testing.driver.PortAllocation.PortAllocation"]},{"name":"constructor()","description":"net.corda.testing.internal.FlowStackSnapshotFactoryImpl.FlowStackSnapshotFactoryImpl","location":"docs/net.corda.testing.internal/-flow-stack-snapshot-factory-impl/-flow-stack-snapshot-factory-impl.html","searchKeys":["FlowStackSnapshotFactoryImpl","constructor()","net.corda.testing.internal.FlowStackSnapshotFactoryImpl.FlowStackSnapshotFactoryImpl"]},{"name":"constructor()","description":"net.corda.testing.internal.MockCordappConfigProvider.MockCordappConfigProvider","location":"docs/net.corda.testing.internal/-mock-cordapp-config-provider/-mock-cordapp-config-provider.html","searchKeys":["MockCordappConfigProvider","constructor()","net.corda.testing.internal.MockCordappConfigProvider.MockCordappConfigProvider"]},{"name":"constructor()","description":"net.corda.testing.internal.vault.DummyDealContract.DummyDealContract","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-dummy-deal-contract.html","searchKeys":["DummyDealContract","constructor()","net.corda.testing.internal.vault.DummyDealContract.DummyDealContract"]},{"name":"constructor()","description":"net.corda.testing.internal.vault.DummyLinearContract.DummyLinearContract","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-dummy-linear-contract.html","searchKeys":["DummyLinearContract","constructor()","net.corda.testing.internal.vault.DummyLinearContract.DummyLinearContract"]},{"name":"constructor()","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.UniqueDummyFungibleContract","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-unique-dummy-fungible-contract.html","searchKeys":["UniqueDummyFungibleContract","constructor()","net.corda.testing.internal.vault.UniqueDummyFungibleContract.UniqueDummyFungibleContract"]},{"name":"constructor()","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.UniqueDummyLinearContract","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-unique-dummy-linear-contract.html","searchKeys":["UniqueDummyLinearContract","constructor()","net.corda.testing.internal.vault.UniqueDummyLinearContract.UniqueDummyLinearContract"]},{"name":"constructor()","description":"net.corda.testing.node.ClusterSpec.ClusterSpec","location":"docs/net.corda.testing.node/-cluster-spec/-cluster-spec.html","searchKeys":["ClusterSpec","constructor()","net.corda.testing.node.ClusterSpec.ClusterSpec"]},{"name":"constructor()","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.RoundRobin.RoundRobin","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/-round-robin/-round-robin.html","searchKeys":["RoundRobin","constructor()","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.RoundRobin.RoundRobin"]},{"name":"constructor()","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor()","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor()","description":"net.corda.testing.node.TestCordapp.TestCordapp","location":"docs/net.corda.testing.node/-test-cordapp/-test-cordapp.html","searchKeys":["TestCordapp","constructor()","net.corda.testing.node.TestCordapp.TestCordapp"]},{"name":"constructor()","description":"net.corda.testing.node.internal.DriverDSLImpl.State.State","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-state/-state.html","searchKeys":["State","constructor()","net.corda.testing.node.internal.DriverDSLImpl.State.State"]},{"name":"constructor()","description":"net.corda.testing.node.internal.MessagingServiceSpy.MessagingServiceSpy","location":"docs/net.corda.testing.node.internal/-messaging-service-spy/-messaging-service-spy.html","searchKeys":["MessagingServiceSpy","constructor()","net.corda.testing.node.internal.MessagingServiceSpy.MessagingServiceSpy"]},{"name":"constructor()","description":"net.corda.testing.node.internal.MockNodeFlowManager.MockNodeFlowManager","location":"docs/net.corda.testing.node.internal/-mock-node-flow-manager/-mock-node-flow-manager.html","searchKeys":["MockNodeFlowManager","constructor()","net.corda.testing.node.internal.MockNodeFlowManager.MockNodeFlowManager"]},{"name":"constructor()","description":"net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache.MockPublicKeyToOwningIdentityCache","location":"docs/net.corda.testing.node.internal/-mock-public-key-to-owning-identity-cache/-mock-public-key-to-owning-identity-cache.html","searchKeys":["MockPublicKeyToOwningIdentityCache","constructor()","net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache.MockPublicKeyToOwningIdentityCache"]},{"name":"constructor()","description":"net.corda.testing.node.internal.MockTransactionStorage.MockTransactionStorage","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/-mock-transaction-storage.html","searchKeys":["MockTransactionStorage","constructor()","net.corda.testing.node.internal.MockTransactionStorage.MockTransactionStorage"]},{"name":"constructor()","description":"net.corda.testing.node.internal.RandomRpcUser.RandomRpcUser","location":"docs/net.corda.testing.node.internal/-random-rpc-user/-random-rpc-user.html","searchKeys":["RandomRpcUser","constructor()","net.corda.testing.node.internal.RandomRpcUser.RandomRpcUser"]},{"name":"constructor()","description":"net.corda.testing.node.internal.TestCordappInternal.TestCordappInternal","location":"docs/net.corda.testing.node.internal/-test-cordapp-internal/-test-cordapp-internal.html","searchKeys":["TestCordappInternal","constructor()","net.corda.testing.node.internal.TestCordappInternal.TestCordappInternal"]},{"name":"constructor()","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.InMemoryNetworkMapService","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/-in-memory-network-map-service.html","searchKeys":["InMemoryNetworkMapService","constructor()","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.InMemoryNetworkMapService"]},{"name":"constructor()","description":"net.corda.testing.services.MockAttachmentStorage.MockAttachmentStorage","location":"docs/net.corda.testing.services/-mock-attachment-storage/-mock-attachment-storage.html","searchKeys":["MockAttachmentStorage","constructor()","net.corda.testing.services.MockAttachmentStorage.MockAttachmentStorage"]},{"name":"constructor(a: AttachmentQueryCriteria, b: AttachmentQueryCriteria)","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition.AndComposition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-and-composition/-and-composition.html","searchKeys":["AndComposition","constructor(a: AttachmentQueryCriteria, b: AttachmentQueryCriteria)","net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition.AndComposition"]},{"name":"constructor(a: AttachmentQueryCriteria, b: AttachmentQueryCriteria)","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition.OrComposition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-or-composition/-or-composition.html","searchKeys":["OrComposition","constructor(a: AttachmentQueryCriteria, b: AttachmentQueryCriteria)","net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition.OrComposition"]},{"name":"constructor(a: QueryCriteria, b: QueryCriteria)","description":"net.corda.core.node.services.vault.QueryCriteria.AndComposition.AndComposition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-and-composition/-and-composition.html","searchKeys":["AndComposition","constructor(a: QueryCriteria, b: QueryCriteria)","net.corda.core.node.services.vault.QueryCriteria.AndComposition.AndComposition"]},{"name":"constructor(a: QueryCriteria, b: QueryCriteria)","description":"net.corda.core.node.services.vault.QueryCriteria.OrComposition.OrComposition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-or-composition/-or-composition.html","searchKeys":["OrComposition","constructor(a: QueryCriteria, b: QueryCriteria)","net.corda.core.node.services.vault.QueryCriteria.OrComposition.OrComposition"]},{"name":"constructor(acceptableContracts: NonEmptySet<SecureHash>, acceptableIssuedProducts: NonEmptySet<Issued<P>>, dueBefore: Instant, timeTolerance: Duration = 30.seconds)","description":"net.corda.finance.contracts.asset.Obligation.Terms.Terms","location":"docs/net.corda.finance.contracts.asset/-obligation/-terms/-terms.html","searchKeys":["Terms","constructor(acceptableContracts: NonEmptySet<SecureHash>, acceptableIssuedProducts: NonEmptySet<Issued<P>>, dueBefore: Instant, timeTolerance: Duration = 30.seconds)","net.corda.finance.contracts.asset.Obligation.Terms.Terms"]},{"name":"constructor(actor: Actor)","description":"net.corda.core.context.InvocationOrigin.RPC.RPC","location":"docs/net.corda.core.context/-invocation-origin/-r-p-c/-r-p-c.html","searchKeys":["RPC","constructor(actor: Actor)","net.corda.core.context.InvocationOrigin.RPC.RPC"]},{"name":"constructor(actual: <Error class: unknown class><in T>)","description":"net.corda.core.observable.internal.ResilientSubscriber.ResilientSubscriber","location":"docs/net.corda.core.observable.internal/-resilient-subscriber/-resilient-subscriber.html","searchKeys":["ResilientSubscriber","constructor(actual: <Error class: unknown class><in T>)","net.corda.core.observable.internal.ResilientSubscriber.ResilientSubscriber"]},{"name":"constructor(address: NetworkHostAndPort)","description":"net.corda.core.internal.errors.AddressBindingException.AddressBindingException","location":"docs/net.corda.core.internal.errors/-address-binding-exception/-address-binding-exception.html","searchKeys":["AddressBindingException","constructor(address: NetworkHostAndPort)","net.corda.core.internal.errors.AddressBindingException.AddressBindingException"]},{"name":"constructor(addresses: List<NetworkHostAndPort>, legalIdentitiesAndCerts: List<PartyAndCertificate>, platformVersion: Int, serial: Long)","description":"net.corda.core.node.NodeInfo.NodeInfo","location":"docs/net.corda.core.node/-node-info/-node-info.html","searchKeys":["NodeInfo","constructor(addresses: List<NetworkHostAndPort>, legalIdentitiesAndCerts: List<PartyAndCertificate>, platformVersion: Int, serial: Long)","net.corda.core.node.NodeInfo.NodeInfo"]},{"name":"constructor(addresses: Set<NetworkHostAndPort>)","description":"net.corda.core.internal.errors.AddressBindingException.AddressBindingException","location":"docs/net.corda.core.internal.errors/-address-binding-exception/-address-binding-exception.html","searchKeys":["AddressBindingException","constructor(addresses: Set<NetworkHostAndPort>)","net.corda.core.internal.errors.AddressBindingException.AddressBindingException"]},{"name":"constructor(aesKey: SecretKey = AesEncryption.randomKey())","description":"net.corda.testing.node.internal.MockEncryptionService.MockEncryptionService","location":"docs/net.corda.testing.node.internal/-mock-encryption-service/-mock-encryption-service.html","searchKeys":["MockEncryptionService","constructor(aesKey: SecretKey = AesEncryption.randomKey())","net.corda.testing.node.internal.MockEncryptionService.MockEncryptionService"]},{"name":"constructor(algorithm: String, bytes: ByteArray)","description":"net.corda.core.crypto.SecureHash.HASH.HASH","location":"docs/net.corda.core.crypto/-secure-hash/-h-a-s-h/-h-a-s-h.html","searchKeys":["HASH","constructor(algorithm: String, bytes: ByteArray)","net.corda.core.crypto.SecureHash.HASH.HASH"]},{"name":"constructor(alias: String)","description":"net.corda.core.crypto.internal.AliasPrivateKey.AliasPrivateKey","location":"docs/net.corda.core.crypto.internal/-alias-private-key/-alias-private-key.html","searchKeys":["AliasPrivateKey","constructor(alias: String)","net.corda.core.crypto.internal.AliasPrivateKey.AliasPrivateKey"]},{"name":"constructor(amount: Amount<Currency>)","description":"net.corda.finance.flows.AbstractCashFlow.AbstractRequest.AbstractRequest","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-abstract-request/-abstract-request.html","searchKeys":["AbstractRequest","constructor(amount: Amount<Currency>)","net.corda.finance.flows.AbstractCashFlow.AbstractRequest.AbstractRequest"]},{"name":"constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, notary: Party)","description":"net.corda.finance.flows.CashIssueFlow.IssueRequest.IssueRequest","location":"docs/net.corda.finance.flows/-cash-issue-flow/-issue-request/-issue-request.html","searchKeys":["IssueRequest","constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, notary: Party)","net.corda.finance.flows.CashIssueFlow.IssueRequest.IssueRequest"]},{"name":"constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, recipient: Party, anonymous: Boolean, notary: Party)","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.CashIssueAndPaymentFlow","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-cash-issue-and-payment-flow.html","searchKeys":["CashIssueAndPaymentFlow","constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, recipient: Party, anonymous: Boolean, notary: Party)","net.corda.finance.flows.CashIssueAndPaymentFlow.CashIssueAndPaymentFlow"]},{"name":"constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, recipient: Party, anonymous: Boolean, notary: Party, progressTracker: ProgressTracker)","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.CashIssueAndPaymentFlow","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-cash-issue-and-payment-flow.html","searchKeys":["CashIssueAndPaymentFlow","constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, recipient: Party, anonymous: Boolean, notary: Party, progressTracker: ProgressTracker)","net.corda.finance.flows.CashIssueAndPaymentFlow.CashIssueAndPaymentFlow"]},{"name":"constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, recipient: Party, notary: Party, anonymous: Boolean)","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.IssueAndPaymentRequest","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-issue-and-payment-request/-issue-and-payment-request.html","searchKeys":["IssueAndPaymentRequest","constructor(amount: Amount<Currency>, issueRef: OpaqueBytes, recipient: Party, notary: Party, anonymous: Boolean)","net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.IssueAndPaymentRequest"]},{"name":"constructor(amount: Amount<Currency>, issuerBankPartyRef: OpaqueBytes, notary: Party)","description":"net.corda.finance.flows.CashIssueFlow.CashIssueFlow","location":"docs/net.corda.finance.flows/-cash-issue-flow/-cash-issue-flow.html","searchKeys":["CashIssueFlow","constructor(amount: Amount<Currency>, issuerBankPartyRef: OpaqueBytes, notary: Party)","net.corda.finance.flows.CashIssueFlow.CashIssueFlow"]},{"name":"constructor(amount: Amount<Currency>, issuerBankPartyRef: OpaqueBytes, notary: Party, progressTracker: ProgressTracker)","description":"net.corda.finance.flows.CashIssueFlow.CashIssueFlow","location":"docs/net.corda.finance.flows/-cash-issue-flow/-cash-issue-flow.html","searchKeys":["CashIssueFlow","constructor(amount: Amount<Currency>, issuerBankPartyRef: OpaqueBytes, notary: Party, progressTracker: ProgressTracker)","net.corda.finance.flows.CashIssueFlow.CashIssueFlow"]},{"name":"constructor(amount: Amount<Currency>, issuerRef: OpaqueBytes)","description":"net.corda.finance.flows.CashExitFlow.CashExitFlow","location":"docs/net.corda.finance.flows/-cash-exit-flow/-cash-exit-flow.html","searchKeys":["CashExitFlow","constructor(amount: Amount<Currency>, issuerRef: OpaqueBytes)","net.corda.finance.flows.CashExitFlow.CashExitFlow"]},{"name":"constructor(amount: Amount<Currency>, issuerRef: OpaqueBytes)","description":"net.corda.finance.flows.CashExitFlow.ExitRequest.ExitRequest","location":"docs/net.corda.finance.flows/-cash-exit-flow/-exit-request/-exit-request.html","searchKeys":["ExitRequest","constructor(amount: Amount<Currency>, issuerRef: OpaqueBytes)","net.corda.finance.flows.CashExitFlow.ExitRequest.ExitRequest"]},{"name":"constructor(amount: Amount<Currency>, issuerRef: OpaqueBytes, progressTracker: ProgressTracker)","description":"net.corda.finance.flows.CashExitFlow.CashExitFlow","location":"docs/net.corda.finance.flows/-cash-exit-flow/-cash-exit-flow.html","searchKeys":["CashExitFlow","constructor(amount: Amount<Currency>, issuerRef: OpaqueBytes, progressTracker: ProgressTracker)","net.corda.finance.flows.CashExitFlow.CashExitFlow"]},{"name":"constructor(amount: Amount<Currency>, recipient: Party)","description":"net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow","location":"docs/net.corda.finance.flows/-cash-payment-flow/-cash-payment-flow.html","searchKeys":["CashPaymentFlow","constructor(amount: Amount<Currency>, recipient: Party)","net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow"]},{"name":"constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean)","description":"net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow","location":"docs/net.corda.finance.flows/-cash-payment-flow/-cash-payment-flow.html","searchKeys":["CashPaymentFlow","constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean)","net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow"]},{"name":"constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean, issuerConstraint: Set<Party> = emptySet(), notary: Party? = null)","description":"net.corda.finance.flows.CashPaymentFlow.PaymentRequest.PaymentRequest","location":"docs/net.corda.finance.flows/-cash-payment-flow/-payment-request/-payment-request.html","searchKeys":["PaymentRequest","constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean, issuerConstraint: Set<Party> = emptySet(), notary: Party? = null)","net.corda.finance.flows.CashPaymentFlow.PaymentRequest.PaymentRequest"]},{"name":"constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean, notary: Party)","description":"net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow","location":"docs/net.corda.finance.flows/-cash-payment-flow/-cash-payment-flow.html","searchKeys":["CashPaymentFlow","constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean, notary: Party)","net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow"]},{"name":"constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean, progressTracker: ProgressTracker, issuerConstraint: Set<Party> = emptySet(), notary: Party? = null)","description":"net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow","location":"docs/net.corda.finance.flows/-cash-payment-flow/-cash-payment-flow.html","searchKeys":["CashPaymentFlow","constructor(amount: Amount<Currency>, recipient: Party, anonymous: Boolean, progressTracker: ProgressTracker, issuerConstraint: Set<Party> = emptySet(), notary: Party? = null)","net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow"]},{"name":"constructor(amount: Amount<Issued<Commodity>>, owner: AbstractParty)","description":"net.corda.testing.internal.vault.CommodityState.CommodityState","location":"docs/net.corda.testing.internal.vault/-commodity-state/-commodity-state.html","searchKeys":["CommodityState","constructor(amount: Amount<Issued<Commodity>>, owner: AbstractParty)","net.corda.testing.internal.vault.CommodityState.CommodityState"]},{"name":"constructor(amount: Amount<Issued<Currency>>)","description":"net.corda.finance.contracts.asset.Cash.Commands.Exit.Exit","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-exit/-exit.html","searchKeys":["Exit","constructor(amount: Amount<Issued<Currency>>)","net.corda.finance.contracts.asset.Cash.Commands.Exit.Exit"]},{"name":"constructor(amount: Amount<Issued<Currency>>, owner: AbstractParty)","description":"net.corda.finance.contracts.asset.Cash.State.State","location":"docs/net.corda.finance.contracts.asset/-cash/-state/-state.html","searchKeys":["State","constructor(amount: Amount<Issued<Currency>>, owner: AbstractParty)","net.corda.finance.contracts.asset.Cash.State.State"]},{"name":"constructor(amount: Amount<Issued<Currency>>, owner: AbstractParty)","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.State","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/-state.html","searchKeys":["State","constructor(amount: Amount<Issued<Currency>>, owner: AbstractParty)","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.State"]},{"name":"constructor(amount: Amount<Issued<Obligation.Terms<P>>>)","description":"net.corda.finance.contracts.asset.Obligation.Commands.Exit.Exit","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-exit/-exit.html","searchKeys":["Exit","constructor(amount: Amount<Issued<Obligation.Terms<P>>>)","net.corda.finance.contracts.asset.Obligation.Commands.Exit.Exit"]},{"name":"constructor(amount: Amount<Issued<Obligation.Terms<P>>>)","description":"net.corda.finance.contracts.asset.Obligation.Commands.Settle.Settle","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-settle/-settle.html","searchKeys":["Settle","constructor(amount: Amount<Issued<Obligation.Terms<P>>>)","net.corda.finance.contracts.asset.Obligation.Commands.Settle.Settle"]},{"name":"constructor(amountMissing: Amount<*>)","description":"net.corda.core.contracts.InsufficientBalanceException.InsufficientBalanceException","location":"docs/net.corda.core.contracts/-insufficient-balance-exception/-insufficient-balance-exception.html","searchKeys":["InsufficientBalanceException","constructor(amountMissing: Amount<*>)","net.corda.core.contracts.InsufficientBalanceException.InsufficientBalanceException"]},{"name":"constructor(args: MockNodeArgs, mockFlowManager: MockNodeFlowManager = args.flowManager, allowAppSchemaUpgradeWithCheckpoints: Boolean = false)","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.MockNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/-mock-node.html","searchKeys":["MockNode","constructor(args: MockNodeArgs, mockFlowManager: MockNodeFlowManager = args.flowManager, allowAppSchemaUpgradeWithCheckpoints: Boolean = false)","net.corda.testing.node.internal.InternalMockNetwork.MockNode.MockNode"]},{"name":"constructor(attachment: Attachment, contract: ContractClassName, additionalContracts: Set<ContractClassName> = emptySet(), uploader: String? = null)","description":"net.corda.core.contracts.ContractAttachment.ContractAttachment","location":"docs/net.corda.core.contracts/-contract-attachment/-contract-attachment.html","searchKeys":["ContractAttachment","constructor(attachment: Attachment, contract: ContractClassName, additionalContracts: Set<ContractClassName> = emptySet(), uploader: String? = null)","net.corda.core.contracts.ContractAttachment.ContractAttachment"]},{"name":"constructor(attachmentId: AttachmentId, fileName: String?, uploader: String?, trustRootId: AttachmentId?, trustRootFileName: String?)","description":"net.corda.core.internal.AttachmentTrustInfo.AttachmentTrustInfo","location":"docs/net.corda.core.internal/-attachment-trust-info/-attachment-trust-info.html","searchKeys":["AttachmentTrustInfo","constructor(attachmentId: AttachmentId, fileName: String?, uploader: String?, trustRootId: AttachmentId?, trustRootFileName: String?)","net.corda.core.internal.AttachmentTrustInfo.AttachmentTrustInfo"]},{"name":"constructor(attachmentId: AttachmentId, message: String?, cause: Throwable?)","description":"net.corda.core.contracts.BrokenAttachmentException.BrokenAttachmentException","location":"docs/net.corda.core.contracts/-broken-attachment-exception/-broken-attachment-exception.html","searchKeys":["BrokenAttachmentException","constructor(attachmentId: AttachmentId, message: String?, cause: Throwable?)","net.corda.core.contracts.BrokenAttachmentException.BrokenAttachmentException"]},{"name":"constructor(attachmentId: SecureHash)","description":"net.corda.core.contracts.HashAttachmentConstraint.HashAttachmentConstraint","location":"docs/net.corda.core.contracts/-hash-attachment-constraint/-hash-attachment-constraint.html","searchKeys":["HashAttachmentConstraint","constructor(attachmentId: SecureHash)","net.corda.core.contracts.HashAttachmentConstraint.HashAttachmentConstraint"]},{"name":"constructor(attachmentId: SecureHash)","description":"net.corda.testing.dsl.AttachmentResolutionException.AttachmentResolutionException","location":"docs/net.corda.testing.dsl/-attachment-resolution-exception/-attachment-resolution-exception.html","searchKeys":["AttachmentResolutionException","constructor(attachmentId: SecureHash)","net.corda.testing.dsl.AttachmentResolutionException.AttachmentResolutionException"]},{"name":"constructor(attachments: List<Attachment>, params: NetworkParameters, sampleTxId: SecureHash, isAttachmentTrusted: (Attachment) -> Boolean, parent: ClassLoader = ClassLoader.getSystemClassLoader())","description":"net.corda.core.serialization.internal.AttachmentsClassLoader.AttachmentsClassLoader","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader/-attachments-class-loader.html","searchKeys":["AttachmentsClassLoader","constructor(attachments: List<Attachment>, params: NetworkParameters, sampleTxId: SecureHash, isAttachmentTrusted: (Attachment) -> Boolean, parent: ClassLoader = ClassLoader.getSystemClassLoader())","net.corda.core.serialization.internal.AttachmentsClassLoader.AttachmentsClassLoader"]},{"name":"constructor(attribute: Sort.Attribute)","description":"net.corda.core.node.services.vault.SortAttribute.Standard.Standard","location":"docs/net.corda.core.node.services.vault/-sort-attribute/-standard/-standard.html","searchKeys":["Standard","constructor(attribute: Sort.Attribute)","net.corda.core.node.services.vault.SortAttribute.Standard.Standard"]},{"name":"constructor(broker: RpcBrokerHandle, rpcServer: <Error class: unknown class>)","description":"net.corda.testing.node.internal.RpcServerHandle.RpcServerHandle","location":"docs/net.corda.testing.node.internal/-rpc-server-handle/-rpc-server-handle.html","searchKeys":["RpcServerHandle","constructor(broker: RpcBrokerHandle, rpcServer: <Error class: unknown class>)","net.corda.testing.node.internal.RpcServerHandle.RpcServerHandle"]},{"name":"constructor(buffer: ByteArrayOutputStream, verifyKey: CompositeKey)","description":"net.corda.core.crypto.CompositeSignature.State.State","location":"docs/net.corda.core.crypto/-composite-signature/-state/-state.html","searchKeys":["State","constructor(buffer: ByteArrayOutputStream, verifyKey: CompositeKey)","net.corda.core.crypto.CompositeSignature.State.State"]},{"name":"constructor(by: PublicKey, bytes: ByteArray)","description":"net.corda.core.crypto.DigitalSignature.WithKey.WithKey","location":"docs/net.corda.core.crypto/-digital-signature/-with-key/-with-key.html","searchKeys":["WithKey","constructor(by: PublicKey, bytes: ByteArray)","net.corda.core.crypto.DigitalSignature.WithKey.WithKey"]},{"name":"constructor(by: X509Certificate, bytes: ByteArray)","description":"net.corda.core.internal.DigitalSignatureWithCert.DigitalSignatureWithCert","location":"docs/net.corda.core.internal/-digital-signature-with-cert/-digital-signature-with-cert.html","searchKeys":["DigitalSignatureWithCert","constructor(by: X509Certificate, bytes: ByteArray)","net.corda.core.internal.DigitalSignatureWithCert.DigitalSignatureWithCert"]},{"name":"constructor(by: X509Certificate, parentCertsChain: List<X509Certificate>, bytes: ByteArray)","description":"net.corda.core.internal.DigitalSignatureWithCert.DigitalSignatureWithCert","location":"docs/net.corda.core.internal/-digital-signature-with-cert/-digital-signature-with-cert.html","searchKeys":["DigitalSignatureWithCert","constructor(by: X509Certificate, parentCertsChain: List<X509Certificate>, bytes: ByteArray)","net.corda.core.internal.DigitalSignatureWithCert.DigitalSignatureWithCert"]},{"name":"constructor(bytes: ByteArray)","description":"net.corda.core.contracts.PrivacySalt.PrivacySalt","location":"docs/net.corda.core.contracts/-privacy-salt/-privacy-salt.html","searchKeys":["PrivacySalt","constructor(bytes: ByteArray)","net.corda.core.contracts.PrivacySalt.PrivacySalt"]},{"name":"constructor(bytes: ByteArray)","description":"net.corda.core.crypto.DigitalSignature.DigitalSignature","location":"docs/net.corda.core.crypto/-digital-signature/-digital-signature.html","searchKeys":["DigitalSignature","constructor(bytes: ByteArray)","net.corda.core.crypto.DigitalSignature.DigitalSignature"]},{"name":"constructor(bytes: ByteArray)","description":"net.corda.core.crypto.SecureHash.SHA256.SHA256","location":"docs/net.corda.core.crypto/-secure-hash/-s-h-a256/-s-h-a256.html","searchKeys":["SHA256","constructor(bytes: ByteArray)","net.corda.core.crypto.SecureHash.SHA256.SHA256"]},{"name":"constructor(bytes: ByteArray)","description":"net.corda.core.serialization.SerializedBytes.SerializedBytes","location":"docs/net.corda.core.serialization/-serialized-bytes/-serialized-bytes.html","searchKeys":["SerializedBytes","constructor(bytes: ByteArray)","net.corda.core.serialization.SerializedBytes.SerializedBytes"]},{"name":"constructor(bytes: ByteArray)","description":"net.corda.core.utilities.OpaqueBytes.OpaqueBytes","location":"docs/net.corda.core.utilities/-opaque-bytes/-opaque-bytes.html","searchKeys":["OpaqueBytes","constructor(bytes: ByteArray)","net.corda.core.utilities.OpaqueBytes.OpaqueBytes"]},{"name":"constructor(bytes: ByteArray, by: PublicKey, signatureMetadata: SignatureMetadata)","description":"net.corda.core.crypto.TransactionSignature.TransactionSignature","location":"docs/net.corda.core.crypto/-transaction-signature/-transaction-signature.html","searchKeys":["TransactionSignature","constructor(bytes: ByteArray, by: PublicKey, signatureMetadata: SignatureMetadata)","net.corda.core.crypto.TransactionSignature.TransactionSignature"]},{"name":"constructor(bytes: ByteArray, by: PublicKey, signatureMetadata: SignatureMetadata, partialMerkleTree: PartialMerkleTree?)","description":"net.corda.core.crypto.TransactionSignature.TransactionSignature","location":"docs/net.corda.core.crypto/-transaction-signature/-transaction-signature.html","searchKeys":["TransactionSignature","constructor(bytes: ByteArray, by: PublicKey, signatureMetadata: SignatureMetadata, partialMerkleTree: PartialMerkleTree?)","net.corda.core.crypto.TransactionSignature.TransactionSignature"]},{"name":"constructor(bytes: ByteArray, offset: Int, size: Int)","description":"net.corda.core.utilities.OpaqueBytesSubSequence.OpaqueBytesSubSequence","location":"docs/net.corda.core.utilities/-opaque-bytes-sub-sequence/-opaque-bytes-sub-sequence.html","searchKeys":["OpaqueBytesSubSequence","constructor(bytes: ByteArray, offset: Int, size: Int)","net.corda.core.utilities.OpaqueBytesSubSequence.OpaqueBytesSubSequence"]},{"name":"constructor(cacheFactory: NamedCacheFactory)","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderCacheImpl.AttachmentsClassLoaderCacheImpl","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-cache-impl/-attachments-class-loader-cache-impl.html","searchKeys":["AttachmentsClassLoaderCacheImpl","constructor(cacheFactory: NamedCacheFactory)","net.corda.core.serialization.internal.AttachmentsClassLoaderCacheImpl.AttachmentsClassLoaderCacheImpl"]},{"name":"constructor(cacheSize: Int)","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderSimpleCacheImpl.AttachmentsClassLoaderSimpleCacheImpl","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-simple-cache-impl/-attachments-class-loader-simple-cache-impl.html","searchKeys":["AttachmentsClassLoaderSimpleCacheImpl","constructor(cacheSize: Int)","net.corda.core.serialization.internal.AttachmentsClassLoaderSimpleCacheImpl.AttachmentsClassLoaderSimpleCacheImpl"]},{"name":"constructor(cause: Throwable)","description":"net.corda.core.flows.NotaryError.General.General","location":"docs/net.corda.core.flows/-notary-error/-general/-general.html","searchKeys":["General","constructor(cause: Throwable)","net.corda.core.flows.NotaryError.General.General"]},{"name":"constructor(cause: Throwable)","description":"net.corda.core.flows.NotaryError.RequestSignatureInvalid.RequestSignatureInvalid","location":"docs/net.corda.core.flows/-notary-error/-request-signature-invalid/-request-signature-invalid.html","searchKeys":["RequestSignatureInvalid","constructor(cause: Throwable)","net.corda.core.flows.NotaryError.RequestSignatureInvalid.RequestSignatureInvalid"]},{"name":"constructor(cause: Throwable)","description":"net.corda.core.flows.NotaryError.TransactionInvalid.TransactionInvalid","location":"docs/net.corda.core.flows/-notary-error/-transaction-invalid/-transaction-invalid.html","searchKeys":["TransactionInvalid","constructor(cause: Throwable)","net.corda.core.flows.NotaryError.TransactionInvalid.TransactionInvalid"]},{"name":"constructor(cause: Throwable? = null)","description":"net.corda.client.rpc.ConnectionFailureException.ConnectionFailureException","location":"docs/net.corda.client.rpc/-connection-failure-exception/-connection-failure-exception.html","searchKeys":["ConnectionFailureException","constructor(cause: Throwable? = null)","net.corda.client.rpc.ConnectionFailureException.ConnectionFailureException"]},{"name":"constructor(cause: Throwable? = null)","description":"net.corda.client.rpc.reconnect.CouldNotStartFlowException.CouldNotStartFlowException","location":"docs/net.corda.client.rpc.reconnect/-could-not-start-flow-exception/-could-not-start-flow-exception.html","searchKeys":["CouldNotStartFlowException","constructor(cause: Throwable? = null)","net.corda.client.rpc.reconnect.CouldNotStartFlowException.CouldNotStartFlowException"]},{"name":"constructor(cause: Throwable?)","description":"net.corda.core.flows.FlowException.FlowException","location":"docs/net.corda.core.flows/-flow-exception/-flow-exception.html","searchKeys":["FlowException","constructor(cause: Throwable?)","net.corda.core.flows.FlowException.FlowException"]},{"name":"constructor(cause: Throwable?)","description":"net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException","location":"docs/net.corda.core.flows/-hospitalize-flow-exception/-hospitalize-flow-exception.html","searchKeys":["HospitalizeFlowException","constructor(cause: Throwable?)","net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException"]},{"name":"constructor(certPath: CertPath)","description":"net.corda.core.identity.PartyAndCertificate.PartyAndCertificate","location":"docs/net.corda.core.identity/-party-and-certificate/-party-and-certificate.html","searchKeys":["PartyAndCertificate","constructor(certPath: CertPath)","net.corda.core.identity.PartyAndCertificate.PartyAndCertificate"]},{"name":"constructor(certificate: X509Certificate)","description":"net.corda.core.identity.Party.Party","location":"docs/net.corda.core.identity/-party/-party.html","searchKeys":["Party","constructor(certificate: X509Certificate)","net.corda.core.identity.Party.Party"]},{"name":"constructor(classFileMajorVersion: Int, kotlinMetadataVersion: KotlinMetadataVersion?)","description":"net.corda.core.internal.cordapp.LanguageVersion.Bytecode.Bytecode","location":"docs/net.corda.core.internal.cordapp/-language-version/-bytecode/-bytecode.html","searchKeys":["Bytecode","constructor(classFileMajorVersion: Int, kotlinMetadataVersion: KotlinMetadataVersion?)","net.corda.core.internal.cordapp.LanguageVersion.Bytecode.Bytecode"]},{"name":"constructor(className: String)","description":"net.corda.core.flows.StackFrameDataToken.StackFrameDataToken","location":"docs/net.corda.core.flows/-stack-frame-data-token/-stack-frame-data-token.html","searchKeys":["StackFrameDataToken","constructor(className: String)","net.corda.core.flows.StackFrameDataToken.StackFrameDataToken"]},{"name":"constructor(clazz: Class<*>, name: String, receiver: Any?)","description":"net.corda.core.internal.DeclaredField.DeclaredField","location":"docs/net.corda.core.internal/-declared-field/-declared-field.html","searchKeys":["DeclaredField","constructor(clazz: Class<*>, name: String, receiver: Any?)","net.corda.core.internal.DeclaredField.DeclaredField"]},{"name":"constructor(clear: (A) -> Unit? = null, shouldReturnToPool: (A) -> Boolean? = null, bound: Int? = null, newInstance: () -> A)","description":"net.corda.core.internal.LazyPool.LazyPool","location":"docs/net.corda.core.internal/-lazy-pool/-lazy-pool.html","searchKeys":["LazyPool","constructor(clear: (A) -> Unit? = null, shouldReturnToPool: (A) -> Boolean? = null, bound: Int? = null, newInstance: () -> A)","net.corda.core.internal.LazyPool.LazyPool"]},{"name":"constructor(clock: Clock = Clock.systemUTC())","description":"net.corda.core.node.services.TimeWindowChecker.TimeWindowChecker","location":"docs/net.corda.core.node.services/-time-window-checker/-time-window-checker.html","searchKeys":["TimeWindowChecker","constructor(clock: Clock = Clock.systemUTC())","net.corda.core.node.services.TimeWindowChecker.TimeWindowChecker"]},{"name":"constructor(clusterSize: Int)","description":"net.corda.testing.node.ClusterSpec.Raft.Raft","location":"docs/net.corda.testing.node/-cluster-spec/-raft/-raft.html","searchKeys":["Raft","constructor(clusterSize: Int)","net.corda.testing.node.ClusterSpec.Raft.Raft"]},{"name":"constructor(clusterSize: Int, compositeServiceIdentity: Boolean = false)","description":"net.corda.testing.node.internal.DummyClusterSpec.DummyClusterSpec","location":"docs/net.corda.testing.node.internal/-dummy-cluster-spec/-dummy-cluster-spec.html","searchKeys":["DummyClusterSpec","constructor(clusterSize: Int, compositeServiceIdentity: Boolean = false)","net.corda.testing.node.internal.DummyClusterSpec.DummyClusterSpec"]},{"name":"constructor(column: Column<O, C>, predicate: ColumnPredicate<C>)","description":"net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression.ColumnPredicateExpression","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-column-predicate-expression/-column-predicate-expression.html","searchKeys":["ColumnPredicateExpression","constructor(column: Column<O, C>, predicate: ColumnPredicate<C>)","net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression.ColumnPredicateExpression"]},{"name":"constructor(column: Column<O, C>, predicate: ColumnPredicate<C>, groupByColumns: List<Column<O, C>>?, orderBy: Sort.Direction?)","description":"net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.AggregateFunctionExpression","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-aggregate-function-expression/-aggregate-function-expression.html","searchKeys":["AggregateFunctionExpression","constructor(column: Column<O, C>, predicate: ColumnPredicate<C>, groupByColumns: List<Column<O, C>>?, orderBy: Sort.Direction?)","net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.AggregateFunctionExpression"]},{"name":"constructor(columns: Collection<AttachmentSort.AttachmentSortColumn>)","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSort","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort.html","searchKeys":["AttachmentSort","constructor(columns: Collection<AttachmentSort.AttachmentSortColumn>)","net.corda.core.node.services.vault.AttachmentSort.AttachmentSort"]},{"name":"constructor(columns: Collection<Sort.SortColumn>)","description":"net.corda.core.node.services.vault.Sort.Sort","location":"docs/net.corda.core.node.services.vault/-sort/-sort.html","searchKeys":["Sort","constructor(columns: Collection<Sort.SortColumn>)","net.corda.core.node.services.vault.Sort.Sort"]},{"name":"constructor(command: CommandData, ownableState: OwnableState)","description":"net.corda.core.contracts.CommandAndState.CommandAndState","location":"docs/net.corda.core.contracts/-command-and-state/-command-and-state.html","searchKeys":["CommandAndState","constructor(command: CommandData, ownableState: OwnableState)","net.corda.core.contracts.CommandAndState.CommandAndState"]},{"name":"constructor(command: String, cause: Throwable? = null)","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnparseableCallException","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-unparseable-call-exception.html","searchKeys":["UnparseableCallException","constructor(command: String, cause: Throwable? = null)","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnparseableCallException"]},{"name":"constructor(commodityCode: String, displayName: String, defaultFractionDigits: Int = 0)","description":"net.corda.finance.contracts.Commodity.Commodity","location":"docs/net.corda.finance.contracts/-commodity/-commodity.html","searchKeys":["Commodity","constructor(commodityCode: String, displayName: String, defaultFractionDigits: Int = 0)","net.corda.finance.contracts.Commodity.Commodity"]},{"name":"constructor(commonName: String, organisation: String, locality: String, country: String)","description":"net.corda.core.identity.CordaX500Name.CordaX500Name","location":"docs/net.corda.core.identity/-corda-x500-name/-corda-x500-name.html","searchKeys":["CordaX500Name","constructor(commonName: String, organisation: String, locality: String, country: String)","net.corda.core.identity.CordaX500Name.CordaX500Name"]},{"name":"constructor(commonName: String?, organisationUnit: String?, organisation: String, locality: String, state: String?, country: String)","description":"net.corda.core.identity.CordaX500Name.CordaX500Name","location":"docs/net.corda.core.identity/-corda-x500-name/-corda-x500-name.html","searchKeys":["CordaX500Name","constructor(commonName: String?, organisationUnit: String?, organisation: String, locality: String, state: String?, country: String)","net.corda.core.identity.CordaX500Name.CordaX500Name"]},{"name":"constructor(component: OpaqueBytes, nonce: SecureHash)","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent.FilteredComponent","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/-filtered-component/-filtered-component.html","searchKeys":["FilteredComponent","constructor(component: OpaqueBytes, nonce: SecureHash)","net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent.FilteredComponent"]},{"name":"constructor(componentGroups: List<ComponentGroup>)","description":"net.corda.core.transactions.TraversableTransaction.TraversableTransaction","location":"docs/net.corda.core.transactions/-traversable-transaction/-traversable-transaction.html","searchKeys":["TraversableTransaction","constructor(componentGroups: List<ComponentGroup>)","net.corda.core.transactions.TraversableTransaction.TraversableTransaction"]},{"name":"constructor(componentGroups: List<ComponentGroup>)","description":"net.corda.core.transactions.WireTransaction.WireTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/-wire-transaction.html","searchKeys":["WireTransaction","constructor(componentGroups: List<ComponentGroup>)","net.corda.core.transactions.WireTransaction.WireTransaction"]},{"name":"constructor(componentGroups: List<ComponentGroup>, digestService: DigestService)","description":"net.corda.core.transactions.TraversableTransaction.TraversableTransaction","location":"docs/net.corda.core.transactions/-traversable-transaction/-traversable-transaction.html","searchKeys":["TraversableTransaction","constructor(componentGroups: List<ComponentGroup>, digestService: DigestService)","net.corda.core.transactions.TraversableTransaction.TraversableTransaction"]},{"name":"constructor(componentGroups: List<ComponentGroup>, privacySalt: PrivacySalt = PrivacySalt())","description":"net.corda.core.transactions.WireTransaction.WireTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/-wire-transaction.html","searchKeys":["WireTransaction","constructor(componentGroups: List<ComponentGroup>, privacySalt: PrivacySalt = PrivacySalt())","net.corda.core.transactions.WireTransaction.WireTransaction"]},{"name":"constructor(componentGroups: List<ComponentGroup>, privacySalt: PrivacySalt, digestService: DigestService)","description":"net.corda.core.transactions.WireTransaction.WireTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/-wire-transaction.html","searchKeys":["WireTransaction","constructor(componentGroups: List<ComponentGroup>, privacySalt: PrivacySalt, digestService: DigestService)","net.corda.core.transactions.WireTransaction.WireTransaction"]},{"name":"constructor(componentTelemetryIds: Map<String, UUID>)","description":"net.corda.core.internal.telemetry.ComponentTelemetryIds.ComponentTelemetryIds","location":"docs/net.corda.core.internal.telemetry/-component-telemetry-ids/-component-telemetry-ids.html","searchKeys":["ComponentTelemetryIds","constructor(componentTelemetryIds: Map<String, UUID>)","net.corda.core.internal.telemetry.ComponentTelemetryIds.ComponentTelemetryIds"]},{"name":"constructor(config: <Error class: unknown class>, network: InternalMockNetwork, id: Int, entropyRoot: BigInteger, version: <Error class: unknown class> = MOCK_VERSION_INFO, flowManager: MockNodeFlowManager = MockNodeFlowManager())","description":"net.corda.testing.node.internal.MockNodeArgs.MockNodeArgs","location":"docs/net.corda.testing.node.internal/-mock-node-args/-mock-node-args.html","searchKeys":["MockNodeArgs","constructor(config: <Error class: unknown class>, network: InternalMockNetwork, id: Int, entropyRoot: BigInteger, version: <Error class: unknown class> = MOCK_VERSION_INFO, flowManager: MockNodeFlowManager = MockNodeFlowManager())","net.corda.testing.node.internal.MockNodeArgs.MockNodeArgs"]},{"name":"constructor(configuration: <Error class: unknown class>, executor: <Error class: unknown class>, stateHelper: <Error class: unknown class> = ServiceStateHelper(log))","description":"net.corda.testing.node.internal.MockNodeMessagingService.MockNodeMessagingService","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/-mock-node-messaging-service.html","searchKeys":["MockNodeMessagingService","constructor(configuration: <Error class: unknown class>, executor: <Error class: unknown class>, stateHelper: <Error class: unknown class> = ServiceStateHelper(log))","net.corda.testing.node.internal.MockNodeMessagingService.MockNodeMessagingService"]},{"name":"constructor(configuration: <Error class: unknown class>, versionInfo: <Error class: unknown class>, flowManager: <Error class: unknown class> = NodeFlowManager(configuration.flowOverrides), allowHibernateToManageAppSchema: Boolean = true)","description":"net.corda.testing.node.internal.InProcessNode.InProcessNode","location":"docs/net.corda.testing.node.internal/-in-process-node/-in-process-node.html","searchKeys":["InProcessNode","constructor(configuration: <Error class: unknown class>, versionInfo: <Error class: unknown class>, flowManager: <Error class: unknown class> = NodeFlowManager(configuration.flowOverrides), allowHibernateToManageAppSchema: Boolean = true)","net.corda.testing.node.internal.InProcessNode.InProcessNode"]},{"name":"constructor(connectionMaxRetryInterval: Duration = 3.minutes, minimumServerProtocolVersion: Int = PLATFORM_VERSION, trackRpcCallSites: Boolean = java.lang.Boolean.getBoolean(\"net.corda.client.rpc.trackRpcCallSites\"), reapInterval: Duration = 1.seconds, observationExecutorPoolSize: Int = 4, cacheConcurrencyLevel: Int = 1, connectionRetryInterval: Duration = 5.seconds, connectionRetryIntervalMultiplier: Double = 1.5, maxReconnectAttempts: Int = unlimitedReconnectAttempts, maxFileSize: Int = 10485760, deduplicationCacheExpiry: Duration = 1.days, openTelemetryEnabled: Boolean = true, simpleLogTelemetryEnabled: Boolean = false, spanStartEndEventsEnabled: Boolean = false, copyBaggageToTags: Boolean = false)","description":"net.corda.client.rpc.CordaRPCClientConfiguration.CordaRPCClientConfiguration","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/-corda-r-p-c-client-configuration.html","searchKeys":["CordaRPCClientConfiguration","constructor(connectionMaxRetryInterval: Duration = 3.minutes, minimumServerProtocolVersion: Int = PLATFORM_VERSION, trackRpcCallSites: Boolean = java.lang.Boolean.getBoolean(\"net.corda.client.rpc.trackRpcCallSites\"), reapInterval: Duration = 1.seconds, observationExecutorPoolSize: Int = 4, cacheConcurrencyLevel: Int = 1, connectionRetryInterval: Duration = 5.seconds, connectionRetryIntervalMultiplier: Double = 1.5, maxReconnectAttempts: Int = unlimitedReconnectAttempts, maxFileSize: Int = 10485760, deduplicationCacheExpiry: Duration = 1.days, openTelemetryEnabled: Boolean = true, simpleLogTelemetryEnabled: Boolean = false, spanStartEndEventsEnabled: Boolean = false, copyBaggageToTags: Boolean = false)","net.corda.client.rpc.CordaRPCClientConfiguration.CordaRPCClientConfiguration"]},{"name":"constructor(constraint: AttachmentConstraint)","description":"net.corda.core.node.services.Vault.ConstraintInfo.ConstraintInfo","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-constraint-info.html","searchKeys":["ConstraintInfo","constructor(constraint: AttachmentConstraint)","net.corda.core.node.services.Vault.ConstraintInfo.ConstraintInfo"]},{"name":"constructor(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL, references: Set<StateAndRef<U>> = emptySet())","description":"net.corda.core.node.services.Vault.Update.Update","location":"docs/net.corda.core.node.services/-vault/-update/-update.html","searchKeys":["Update","constructor(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL, references: Set<StateAndRef<U>> = emptySet())","net.corda.core.node.services.Vault.Update.Update"]},{"name":"constructor(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL, references: Set<StateAndRef<U>> = emptySet(), consumingTxIds: Map<StateRef, SecureHash> = emptyMap())","description":"net.corda.core.node.services.Vault.Update.Update","location":"docs/net.corda.core.node.services/-vault/-update/-update.html","searchKeys":["Update","constructor(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL, references: Set<StateAndRef<U>> = emptySet(), consumingTxIds: Map<StateRef, SecureHash> = emptyMap())","net.corda.core.node.services.Vault.Update.Update"]},{"name":"constructor(content: T, lock: ReentrantLock = ReentrantLock())","description":"net.corda.core.internal.ThreadBox.ThreadBox","location":"docs/net.corda.core.internal/-thread-box/-thread-box.html","searchKeys":["ThreadBox","constructor(content: T, lock: ReentrantLock = ReentrantLock())","net.corda.core.internal.ThreadBox.ThreadBox"]},{"name":"constructor(contract: Class<out Contract>? = null)","description":"net.corda.finance.contracts.asset.Cash.Commands.Move.Move","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-move/-move.html","searchKeys":["Move","constructor(contract: Class<out Contract>? = null)","net.corda.finance.contracts.asset.Cash.Commands.Move.Move"]},{"name":"constructor(contract: Class<out Contract>? = null)","description":"net.corda.finance.contracts.asset.Obligation.Commands.Move.Move","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-move/-move.html","searchKeys":["Move","constructor(contract: Class<out Contract>? = null)","net.corda.finance.contracts.asset.Obligation.Commands.Move.Move"]},{"name":"constructor(contract: Cordapp.Info.Contract, workflow: Cordapp.Info.Workflow)","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.ContractAndWorkflow","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/-contract-and-workflow.html","searchKeys":["ContractAndWorkflow","constructor(contract: Cordapp.Info.Contract, workflow: Cordapp.Info.Workflow)","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.ContractAndWorkflow"]},{"name":"constructor(contractAttachment: ContractAttachment, contract: ContractClassName, whitelistedContractImplementations: Map<String, List<AttachmentId>>)","description":"net.corda.core.internal.AttachmentWithContext.AttachmentWithContext","location":"docs/net.corda.core.internal/-attachment-with-context/-attachment-with-context.html","searchKeys":["AttachmentWithContext","constructor(contractAttachment: ContractAttachment, contract: ContractClassName, whitelistedContractImplementations: Map<String, List<AttachmentId>>)","net.corda.core.internal.AttachmentWithContext.AttachmentWithContext"]},{"name":"constructor(cordapp: Cordapp, attachmentId: SecureHash?, classLoader: ClassLoader)","description":"net.corda.core.cordapp.CordappContext.CordappContext","location":"docs/net.corda.core.cordapp/-cordapp-context/-cordapp-context.html","searchKeys":["CordappContext","constructor(cordapp: Cordapp, attachmentId: SecureHash?, classLoader: ClassLoader)","net.corda.core.cordapp.CordappContext.CordappContext"]},{"name":"constructor(cordappLoader: <Error class: unknown class>, attachmentStorage: <Error class: unknown class>, cordappConfigProvider: MockCordappConfigProvider = MockCordappConfigProvider())","description":"net.corda.testing.internal.MockCordappProvider.MockCordappProvider","location":"docs/net.corda.testing.internal/-mock-cordapp-provider/-mock-cordapp-provider.html","searchKeys":["MockCordappProvider","constructor(cordappLoader: <Error class: unknown class>, attachmentStorage: <Error class: unknown class>, cordappConfigProvider: MockCordappConfigProvider = MockCordappConfigProvider())","net.corda.testing.internal.MockCordappProvider.MockCordappProvider"]},{"name":"constructor(cordappPackages: Iterable<String>)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: Iterable<String>)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: Iterable<String>, initialIdentity: <Error class: unknown class>, identityService: IdentityService = makeTestIdentityService(), vararg moreKeys: KeyPair)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: Iterable<String>, initialIdentity: <Error class: unknown class>, identityService: IdentityService = makeTestIdentityService(), vararg moreKeys: KeyPair)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: Iterable<String>, initialIdentity: <Error class: unknown class>, identityService: IdentityService, networkParameters: NetworkParameters, vararg moreKeys: KeyPair)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: Iterable<String>, initialIdentity: <Error class: unknown class>, identityService: IdentityService, networkParameters: NetworkParameters, vararg moreKeys: KeyPair)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: Iterable<String>, initialIdentity: <Error class: unknown class>, identityService: IdentityService, networkParameters: NetworkParameters, vararg moreKeys: KeyPair, keyManagementService: KeyManagementService)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: Iterable<String>, initialIdentity: <Error class: unknown class>, identityService: IdentityService, networkParameters: NetworkParameters, vararg moreKeys: KeyPair, keyManagementService: KeyManagementService)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: Iterable<String>, initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService())","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: Iterable<String>, initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService())","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: Iterable<String>, initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService(), key: KeyPair, vararg moreKeys: KeyPair)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: Iterable<String>, initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService(), key: KeyPair, vararg moreKeys: KeyPair)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: List<String> = emptyList(), defaultParameters: MockNetworkParameters = MockNetworkParameters(), networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, threadPerNode: Boolean = defaultParameters.threadPerNode, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, testDirectory: Path = Paths.get(\"build\") / \"mock-network\" /  getTimestampAsDirectoryName(), initialNetworkParameters: NetworkParameters = testNetworkParameters(), defaultFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = { args -> MockNode(args) }, cordappsForAllNodes: Collection<TestCordappInternal> = emptySet(), autoVisibleNodes: Boolean = true)","description":"net.corda.testing.node.internal.InternalMockNetwork.InternalMockNetwork","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-internal-mock-network.html","searchKeys":["InternalMockNetwork","constructor(cordappPackages: List<String> = emptyList(), defaultParameters: MockNetworkParameters = MockNetworkParameters(), networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, threadPerNode: Boolean = defaultParameters.threadPerNode, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, testDirectory: Path = Paths.get(\"build\") / \"mock-network\" /  getTimestampAsDirectoryName(), initialNetworkParameters: NetworkParameters = testNetworkParameters(), defaultFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = { args -> MockNode(args) }, cordappsForAllNodes: Collection<TestCordappInternal> = emptySet(), autoVisibleNodes: Boolean = true)","net.corda.testing.node.internal.InternalMockNetwork.InternalMockNetwork"]},{"name":"constructor(cordappPackages: List<String>, defaultParameters: MockNetworkParameters = MockNetworkParameters(), networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, threadPerNode: Boolean = defaultParameters.threadPerNode, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, networkParameters: NetworkParameters = defaultParameters.networkParameters)","description":"net.corda.testing.node.MockNetwork.MockNetwork","location":"docs/net.corda.testing.node/-mock-network/-mock-network.html","searchKeys":["MockNetwork","constructor(cordappPackages: List<String>, defaultParameters: MockNetworkParameters = MockNetworkParameters(), networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, threadPerNode: Boolean = defaultParameters.threadPerNode, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, networkParameters: NetworkParameters = defaultParameters.networkParameters)","net.corda.testing.node.MockNetwork.MockNetwork"]},{"name":"constructor(cordappPackages: List<String>, firstIdentity: <Error class: unknown class>, networkParameters: NetworkParameters, vararg moreIdentities: <Error class: unknown class>)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: List<String>, firstIdentity: <Error class: unknown class>, networkParameters: NetworkParameters, vararg moreIdentities: <Error class: unknown class>)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: List<String>, firstIdentity: <Error class: unknown class>, vararg moreIdentities: <Error class: unknown class>)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: List<String>, firstIdentity: <Error class: unknown class>, vararg moreIdentities: <Error class: unknown class>)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: List<String>, initialIdentityName: CordaX500Name, identityService: IdentityService, networkParameters: NetworkParameters)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: List<String>, initialIdentityName: CordaX500Name, identityService: IdentityService, networkParameters: NetworkParameters)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: List<String>, initialIdentityName: CordaX500Name, identityService: IdentityService, networkParameters: NetworkParameters, key: KeyPair)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(cordappPackages: List<String>, initialIdentityName: CordaX500Name, identityService: IdentityService, networkParameters: NetworkParameters, key: KeyPair)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(cordappPackages: List<String>, parameters: MockNetworkParameters = MockNetworkParameters())","description":"net.corda.testing.node.MockNetwork.MockNetwork","location":"docs/net.corda.testing.node/-mock-network/-mock-network.html","searchKeys":["MockNetwork","constructor(cordappPackages: List<String>, parameters: MockNetworkParameters = MockNetworkParameters())","net.corda.testing.node.MockNetwork.MockNetwork"]},{"name":"constructor(cordappPackages: Set<TestCordappInternal> = emptySet(), notaries: List<CordaX500Name> = emptyList())","description":"net.corda.testing.node.internal.NodeBasedTest.NodeBasedTest","location":"docs/net.corda.testing.node.internal/-node-based-test/-node-based-test.html","searchKeys":["NodeBasedTest","constructor(cordappPackages: Set<TestCordappInternal> = emptySet(), notaries: List<CordaX500Name> = emptyList())","net.corda.testing.node.internal.NodeBasedTest.NodeBasedTest"]},{"name":"constructor(cordappsForAllNodes: Collection<TestCordapp>)","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(cordappsForAllNodes: Collection<TestCordapp>)","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(cordappsForAllNodes: Collection<TestCordapp>)","description":"net.corda.testing.node.MockNetworkParameters.MockNetworkParameters","location":"docs/net.corda.testing.node/-mock-network-parameters/-mock-network-parameters.html","searchKeys":["MockNetworkParameters","constructor(cordappsForAllNodes: Collection<TestCordapp>)","net.corda.testing.node.MockNetworkParameters.MockNetworkParameters"]},{"name":"constructor(crlServer: CrlServer)","description":"net.corda.testing.node.internal.network.CrlServer.CrlServlet.CrlServlet","location":"docs/net.corda.testing.node.internal.network/-crl-server/-crl-servlet/-crl-servlet.html","searchKeys":["CrlServlet","constructor(crlServer: CrlServer)","net.corda.testing.node.internal.network.CrlServer.CrlServlet.CrlServlet"]},{"name":"constructor(ctx: CoreTransaction, sigs: List<TransactionSignature>)","description":"net.corda.core.transactions.SignedTransaction.SignedTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/-signed-transaction.html","searchKeys":["SignedTransaction","constructor(ctx: CoreTransaction, sigs: List<TransactionSignature>)","net.corda.core.transactions.SignedTransaction.SignedTransaction"]},{"name":"constructor(currency: String)","description":"net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema.UniquePersistentDummyFungibleState.UniquePersistentDummyFungibleState","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-state-schema/-unique-persistent-dummy-fungible-state/-unique-persistent-dummy-fungible-state.html","searchKeys":["UniquePersistentDummyFungibleState","constructor(currency: String)","net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema.UniquePersistentDummyFungibleState.UniquePersistentDummyFungibleState"]},{"name":"constructor(currency: String, participants: Set<AbstractParty?>, owner: AbstractParty, quantity: Long, issuerParty: AbstractParty, issuerRef: OpaqueBytes)","description":"net.corda.finance.test.SampleCashSchemaV2.PersistentCashState.PersistentCashState","location":"docs/net.corda.finance.test/-sample-cash-schema-v2/-persistent-cash-state/-persistent-cash-state.html","searchKeys":["PersistentCashState","constructor(currency: String, participants: Set<AbstractParty?>, owner: AbstractParty, quantity: Long, issuerParty: AbstractParty, issuerRef: OpaqueBytes)","net.corda.finance.test.SampleCashSchemaV2.PersistentCashState.PersistentCashState"]},{"name":"constructor(currentAttachment: ContractAttachment, legacyAttachment: ContractAttachment? = null)","description":"net.corda.core.internal.cordapp.ContractAttachmentWithLegacy.ContractAttachmentWithLegacy","location":"docs/net.corda.core.internal.cordapp/-contract-attachment-with-legacy/-contract-attachment-with-legacy.html","searchKeys":["ContractAttachmentWithLegacy","constructor(currentAttachment: ContractAttachment, legacyAttachment: ContractAttachment? = null)","net.corda.core.internal.cordapp.ContractAttachmentWithLegacy.ContractAttachmentWithLegacy"]},{"name":"constructor(currentParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN))","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.MockNetworkParametersStorage","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/-mock-network-parameters-storage.html","searchKeys":["MockNetworkParametersStorage","constructor(currentParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN))","net.corda.testing.node.internal.MockNetworkParametersStorage.MockNetworkParametersStorage"]},{"name":"constructor(currentTime: Instant, txTimeWindow: TimeWindow)","description":"net.corda.core.flows.NotaryError.TimeWindowInvalid.TimeWindowInvalid","location":"docs/net.corda.core.flows/-notary-error/-time-window-invalid/-time-window-invalid.html","searchKeys":["TimeWindowInvalid","constructor(currentTime: Instant, txTimeWindow: TimeWindow)","net.corda.core.flows.NotaryError.TimeWindowInvalid.TimeWindowInvalid"]},{"name":"constructor(data: T, contract: ContractClassName = requireNotNull(data.requiredContractClassName) {\n            //TODO: add link to docsite page, when there is one.\n            \"\"\"\n    Unable to infer Contract class name because state class ${data::class.java.name} is not annotated with\n    @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate ${data::class.java.name}\n    with @BelongsToContract, or supply an explicit contract parameter to TransactionState().\n    \"\"\".trimIndent().replace('\\n', ' ')\n        }, notary: Party, encumbrance: Int? = null, constraint: AttachmentConstraint = AutomaticPlaceholderConstraint)","description":"net.corda.core.contracts.TransactionState.TransactionState","location":"docs/net.corda.core.contracts/-transaction-state/-transaction-state.html","searchKeys":["TransactionState","constructor(data: T, contract: ContractClassName = requireNotNull(data.requiredContractClassName) {\n            //TODO: add link to docsite page, when there is one.\n            \"\"\"\n    Unable to infer Contract class name because state class ${data::class.java.name} is not annotated with\n    @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate ${data::class.java.name}\n    with @BelongsToContract, or supply an explicit contract parameter to TransactionState().\n    \"\"\".trimIndent().replace('\\n', ' ')\n        }, notary: Party, encumbrance: Int? = null, constraint: AttachmentConstraint = AutomaticPlaceholderConstraint)","net.corda.core.contracts.TransactionState.TransactionState"]},{"name":"constructor(data: T, key: PublicKey)","description":"net.corda.core.contracts.Command.Command","location":"docs/net.corda.core.contracts/-command/-command.html","searchKeys":["Command","constructor(data: T, key: PublicKey)","net.corda.core.contracts.Command.Command"]},{"name":"constructor(dataLoader: () -> ByteArray, uploader: String?)","description":"net.corda.core.internal.AbstractAttachment.AbstractAttachment","location":"docs/net.corda.core.internal/-abstract-attachment/-abstract-attachment.html","searchKeys":["AbstractAttachment","constructor(dataLoader: () -> ByteArray, uploader: String?)","net.corda.core.internal.AbstractAttachment.AbstractAttachment"]},{"name":"constructor(delegateClock: Clock)","description":"net.corda.testing.node.TestClock.TestClock","location":"docs/net.corda.testing.node/-test-clock/-test-clock.html","searchKeys":["TestClock","constructor(delegateClock: Clock)","net.corda.testing.node.TestClock.TestClock"]},{"name":"constructor(deposit: PartyAndReference, amount: Amount<Commodity>, owner: AbstractParty)","description":"net.corda.testing.internal.vault.CommodityState.CommodityState","location":"docs/net.corda.testing.internal.vault/-commodity-state/-commodity-state.html","searchKeys":["CommodityState","constructor(deposit: PartyAndReference, amount: Amount<Commodity>, owner: AbstractParty)","net.corda.testing.internal.vault.CommodityState.CommodityState"]},{"name":"constructor(deposit: PartyAndReference, amount: Amount<Currency>, owner: AbstractParty)","description":"net.corda.finance.contracts.asset.Cash.State.State","location":"docs/net.corda.finance.contracts.asset/-cash/-state/-state.html","searchKeys":["State","constructor(deposit: PartyAndReference, amount: Amount<Currency>, owner: AbstractParty)","net.corda.finance.contracts.asset.Cash.State.State"]},{"name":"constructor(description: String)","description":"net.corda.core.node.services.VaultQueryException.VaultQueryException","location":"docs/net.corda.core.node.services/-vault-query-exception/-vault-query-exception.html","searchKeys":["VaultQueryException","constructor(description: String)","net.corda.core.node.services.VaultQueryException.VaultQueryException"]},{"name":"constructor(description: String, cause: Exception? = null)","description":"net.corda.core.node.services.VaultQueryException.VaultQueryException","location":"docs/net.corda.core.node.services/-vault-query-exception/-vault-query-exception.html","searchKeys":["VaultQueryException","constructor(description: String, cause: Exception? = null)","net.corda.core.node.services.VaultQueryException.VaultQueryException"]},{"name":"constructor(digitalSignature: DigitalSignature.WithKey, platformVersion: Int)","description":"net.corda.core.flows.NotarisationRequestSignature.NotarisationRequestSignature","location":"docs/net.corda.core.flows/-notarisation-request-signature/-notarisation-request-signature.html","searchKeys":["NotarisationRequestSignature","constructor(digitalSignature: DigitalSignature.WithKey, platformVersion: Int)","net.corda.core.flows.NotarisationRequestSignature.NotarisationRequestSignature"]},{"name":"constructor(doormanURL: URL, networkMapURL: URL, pnm: UUID?, publishNotaries: (List<NotaryInfo>) -> Unit, rootCert: X509Certificate? = null)","description":"net.corda.testing.node.internal.SplitCompatibilityZoneParams.SplitCompatibilityZoneParams","location":"docs/net.corda.testing.node.internal/-split-compatibility-zone-params/-split-compatibility-zone-params.html","searchKeys":["SplitCompatibilityZoneParams","constructor(doormanURL: URL, networkMapURL: URL, pnm: UUID?, publishNotaries: (List<NotaryInfo>) -> Unit, rootCert: X509Certificate? = null)","net.corda.testing.node.internal.SplitCompatibilityZoneParams.SplitCompatibilityZoneParams"]},{"name":"constructor(driverDSL: DriverDSLImpl, externalTrace: Trace?)","description":"net.corda.testing.node.internal.RPCDriverDSL.RPCDriverDSL","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/-r-p-c-driver-d-s-l.html","searchKeys":["RPCDriverDSL","constructor(driverDSL: DriverDSLImpl, externalTrace: Trace?)","net.corda.testing.node.internal.RPCDriverDSL.RPCDriverDSL"]},{"name":"constructor(e: Exception)","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.FailedParse.FailedParse","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-failed-parse/-failed-parse.html","searchKeys":["FailedParse","constructor(e: Exception)","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.FailedParse.FailedParse"]},{"name":"constructor(e: MissingSerializerException)","description":"net.corda.core.flows.ResultSerializationException.ResultSerializationException","location":"docs/net.corda.core.flows/-result-serialization-exception/-result-serialization-exception.html","searchKeys":["ResultSerializationException","constructor(e: MissingSerializerException)","net.corda.core.flows.ResultSerializationException.ResultSerializationException"]},{"name":"constructor(entityStateClass: Class<out StatePersistable>, entityStateColumnName: String)","description":"net.corda.core.node.services.vault.SortAttribute.Custom.Custom","location":"docs/net.corda.core.node.services.vault/-sort-attribute/-custom/-custom.html","searchKeys":["Custom","constructor(entityStateClass: Class<out StatePersistable>, entityStateColumnName: String)","net.corda.core.node.services.vault.SortAttribute.Custom.Custom"]},{"name":"constructor(error: NotaryError)","description":"net.corda.core.internal.notary.NotaryInternalException.NotaryInternalException","location":"docs/net.corda.core.internal.notary/-notary-internal-exception/-notary-internal-exception.html","searchKeys":["NotaryInternalException","constructor(error: NotaryError)","net.corda.core.internal.notary.NotaryInternalException.NotaryInternalException"]},{"name":"constructor(error: NotaryError)","description":"net.corda.core.internal.notary.UniquenessProvider.Result.Failure.Failure","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/-result/-failure/-failure.html","searchKeys":["Failure","constructor(error: NotaryError)","net.corda.core.internal.notary.UniquenessProvider.Result.Failure.Failure"]},{"name":"constructor(error: NotaryError, txId: SecureHash? = null)","description":"net.corda.core.flows.NotaryException.NotaryException","location":"docs/net.corda.core.flows/-notary-exception/-notary-exception.html","searchKeys":["NotaryException","constructor(error: NotaryError, txId: SecureHash? = null)","net.corda.core.flows.NotaryException.NotaryException"]},{"name":"constructor(exception: Throwable)","description":"net.corda.core.utilities.Try.Failure.Failure","location":"docs/net.corda.core.utilities/-try/-failure/-failure.html","searchKeys":["Failure","constructor(exception: Throwable)","net.corda.core.utilities.Try.Failure.Failure"]},{"name":"constructor(executorService: ExecutorService)","description":"net.corda.testing.node.internal.ShutdownManager.ShutdownManager","location":"docs/net.corda.testing.node.internal/-shutdown-manager/-shutdown-manager.html","searchKeys":["ShutdownManager","constructor(executorService: ExecutorService)","net.corda.testing.node.internal.ShutdownManager.ShutdownManager"]},{"name":"constructor(expectedTypeName: String, typeName: String)","description":"net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.AssetMismatchException","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-asset-mismatch-exception/-asset-mismatch-exception.html","searchKeys":["AssetMismatchException","constructor(expectedTypeName: String, typeName: String)","net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.AssetMismatchException"]},{"name":"constructor(expr: String)","description":"net.corda.finance.contracts.Expression.Expression","location":"docs/net.corda.finance.contracts/-expression/-expression.html","searchKeys":["Expression","constructor(expr: String)","net.corda.finance.contracts.Expression.Expression"]},{"name":"constructor(expression: CriteriaExpression<L, Boolean>, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.VaultCustomQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/-vault-custom-query-criteria.html","searchKeys":["VaultCustomQueryCriteria","constructor(expression: CriteriaExpression<L, Boolean>, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.VaultCustomQueryCriteria"]},{"name":"constructor(expression: CriteriaExpression<L, Boolean>, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.VaultCustomQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/-vault-custom-query-criteria.html","searchKeys":["VaultCustomQueryCriteria","constructor(expression: CriteriaExpression<L, Boolean>, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.VaultCustomQueryCriteria"]},{"name":"constructor(expression: CriteriaExpression<O, Boolean>)","description":"net.corda.core.node.services.vault.CriteriaExpression.Not.Not","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-not/-not.html","searchKeys":["Not","constructor(expression: CriteriaExpression<O, Boolean>)","net.corda.core.node.services.vault.CriteriaExpression.Not.Not"]},{"name":"constructor(externalId: String? = null, id: UUID = UUID.randomUUID())","description":"net.corda.core.contracts.UniqueIdentifier.UniqueIdentifier","location":"docs/net.corda.core.contracts/-unique-identifier/-unique-identifier.html","searchKeys":["UniqueIdentifier","constructor(externalId: String? = null, id: UUID = UUID.randomUUID())","net.corda.core.contracts.UniqueIdentifier.UniqueIdentifier"]},{"name":"constructor(externalResult: Try<Unit>)","description":"net.corda.core.internal.verification.VerificationResult.External.External","location":"docs/net.corda.core.internal.verification/-verification-result/-external/-external.html","searchKeys":["External","constructor(externalResult: Try<Unit>)","net.corda.core.internal.verification.VerificationResult.External.External"]},{"name":"constructor(extraDataSourceProperties: Map<String, String>? = null, notary: MockNetNotaryConfig? = null, flowTimeout: MockNetFlowTimeOut? = null)","description":"net.corda.testing.node.MockNodeConfigOverrides.MockNodeConfigOverrides","location":"docs/net.corda.testing.node/-mock-node-config-overrides/-mock-node-config-overrides.html","searchKeys":["MockNodeConfigOverrides","constructor(extraDataSourceProperties: Map<String, String>? = null, notary: MockNetNotaryConfig? = null, flowTimeout: MockNetFlowTimeOut? = null)","net.corda.testing.node.MockNodeConfigOverrides.MockNodeConfigOverrides"]},{"name":"constructor(factory: <Error class: unknown class>, isFullParties: Boolean = false)","description":"net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.NoPartyObjectMapper","location":"docs/net.corda.client.jackson/-jackson-support/-no-party-object-mapper/-no-party-object-mapper.html","searchKeys":["NoPartyObjectMapper","constructor(factory: <Error class: unknown class>, isFullParties: Boolean = false)","net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.NoPartyObjectMapper"]},{"name":"constructor(field: Field)","description":"net.corda.core.node.services.vault.Column.Column","location":"docs/net.corda.core.node.services.vault/-column/-column.html","searchKeys":["Column","constructor(field: Field)","net.corda.core.node.services.vault.Column.Column"]},{"name":"constructor(field: FieldInfo)","description":"net.corda.core.node.services.vault.Column.Column","location":"docs/net.corda.core.node.services.vault/-column/-column.html","searchKeys":["Column","constructor(field: FieldInfo)","net.corda.core.node.services.vault.Column.Column"]},{"name":"constructor(filename: String)","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.NoSuchFile.NoSuchFile","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-no-such-file/-no-such-file.html","searchKeys":["NoSuchFile","constructor(filename: String)","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.NoSuchFile.NoSuchFile"]},{"name":"constructor(firstIdentity: <Error class: unknown class>, networkParameters: NetworkParameters, vararg moreIdentities: <Error class: unknown class>)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(firstIdentity: <Error class: unknown class>, networkParameters: NetworkParameters, vararg moreIdentities: <Error class: unknown class>)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(firstIdentity: <Error class: unknown class>, vararg moreIdentities: <Error class: unknown class>)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(firstIdentity: <Error class: unknown class>, vararg moreIdentities: <Error class: unknown class>)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(flowId: StateMachineRunId, forceRecover: Boolean = false)","description":"net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/-finality-recovery-flow.html","searchKeys":["FinalityRecoveryFlow","constructor(flowId: StateMachineRunId, forceRecover: Boolean = false)","net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow"]},{"name":"constructor(flowIds: Collection<StateMachineRunId>, forceRecover: Boolean = false)","description":"net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/-finality-recovery-flow.html","searchKeys":["FinalityRecoveryFlow","constructor(flowIds: Collection<StateMachineRunId>, forceRecover: Boolean = false)","net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow"]},{"name":"constructor(flowVersion: Int, appName: String)","description":"net.corda.core.flows.FlowInfo.FlowInfo","location":"docs/net.corda.core.flows/-flow-info/-flow-info.html","searchKeys":["FlowInfo","constructor(flowVersion: Int, appName: String)","net.corda.core.flows.FlowInfo.FlowInfo"]},{"name":"constructor(forcedID: Int? = null, legalName: CordaX500Name? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: (<Error class: unknown class>) -> Any? = {}, version: <Error class: unknown class> = MOCK_VERSION_INFO, additionalCordapps: Collection<TestCordappInternal> = emptyList(), flowManager: MockNodeFlowManager = MockNodeFlowManager())","description":"net.corda.testing.node.internal.InternalMockNodeParameters.InternalMockNodeParameters","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/-internal-mock-node-parameters.html","searchKeys":["InternalMockNodeParameters","constructor(forcedID: Int? = null, legalName: CordaX500Name? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: (<Error class: unknown class>) -> Any? = {}, version: <Error class: unknown class> = MOCK_VERSION_INFO, additionalCordapps: Collection<TestCordappInternal> = emptyList(), flowManager: MockNodeFlowManager = MockNodeFlowManager())","net.corda.testing.node.internal.InternalMockNodeParameters.InternalMockNodeParameters"]},{"name":"constructor(forcedID: Int? = null, legalName: CordaX500Name? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides)","description":"net.corda.testing.node.MockNodeParameters.MockNodeParameters","location":"docs/net.corda.testing.node/-mock-node-parameters/-mock-node-parameters.html","searchKeys":["MockNodeParameters","constructor(forcedID: Int? = null, legalName: CordaX500Name? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides)","net.corda.testing.node.MockNodeParameters.MockNodeParameters"]},{"name":"constructor(forcedID: Int? = null, legalName: CordaX500Name? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides? = null, additionalCordapps: Collection<TestCordapp> = emptyList())","description":"net.corda.testing.node.MockNodeParameters.MockNodeParameters","location":"docs/net.corda.testing.node/-mock-node-parameters/-mock-node-parameters.html","searchKeys":["MockNodeParameters","constructor(forcedID: Int? = null, legalName: CordaX500Name? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides? = null, additionalCordapps: Collection<TestCordapp> = emptyList())","net.corda.testing.node.MockNodeParameters.MockNodeParameters"]},{"name":"constructor(fromDisk: List<T>, downloaded: List<T>)","description":"net.corda.core.internal.FetchDataFlow.Result.Result","location":"docs/net.corda.core.internal/-fetch-data-flow/-result/-result.html","searchKeys":["Result","constructor(fromDisk: List<T>, downloaded: List<T>)","net.corda.core.internal.FetchDataFlow.Result.Result"]},{"name":"constructor(fromTime: Instant, fromTimestampDiscriminator: Int, untilTime: Instant, untilTimestampDiscriminator: Int)","description":"net.corda.core.flows.ComparableRecoveryTimeWindow.ComparableRecoveryTimeWindow","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/-comparable-recovery-time-window.html","searchKeys":["ComparableRecoveryTimeWindow","constructor(fromTime: Instant, fromTimestampDiscriminator: Int, untilTime: Instant, untilTimestampDiscriminator: Int)","net.corda.core.flows.ComparableRecoveryTimeWindow.ComparableRecoveryTimeWindow"]},{"name":"constructor(fromTime: Instant, untilTime: Instant = Instant.now())","description":"net.corda.core.flows.RecoveryTimeWindow.RecoveryTimeWindow","location":"docs/net.corda.core.flows/-recovery-time-window/-recovery-time-window.html","searchKeys":["RecoveryTimeWindow","constructor(fromTime: Instant, untilTime: Instant = Instant.now())","net.corda.core.flows.RecoveryTimeWindow.RecoveryTimeWindow"]},{"name":"constructor(fromTime: Instant? = null, untilTime: Instant? = null)","description":"net.corda.core.flows.FlowTimeWindow.FlowTimeWindow","location":"docs/net.corda.core.flows/-flow-time-window/-flow-time-window.html","searchKeys":["FlowTimeWindow","constructor(fromTime: Instant? = null, untilTime: Instant? = null)","net.corda.core.flows.FlowTimeWindow.FlowTimeWindow"]},{"name":"constructor(fromUntrustedWorld: T)","description":"net.corda.core.utilities.UntrustworthyData.UntrustworthyData","location":"docs/net.corda.core.utilities/-untrustworthy-data/-untrustworthy-data.html","searchKeys":["UntrustworthyData","constructor(fromUntrustedWorld: T)","net.corda.core.utilities.UntrustworthyData.UntrustworthyData"]},{"name":"constructor(func: <Error class: unknown class>.() -> T)","description":"net.corda.client.jackson.internal.SimpleDeserializer.SimpleDeserializer","location":"docs/net.corda.client.jackson.internal/-simple-deserializer/-simple-deserializer.html","searchKeys":["SimpleDeserializer","constructor(func: <Error class: unknown class>.() -> T)","net.corda.client.jackson.internal.SimpleDeserializer.SimpleDeserializer"]},{"name":"constructor(givenPrice: Amount<Currency>)","description":"net.corda.finance.flows.TwoPartyTradeFlow.UnacceptablePriceException.UnacceptablePriceException","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-unacceptable-price-exception/-unacceptable-price-exception.html","searchKeys":["UnacceptablePriceException","constructor(givenPrice: Amount<Currency>)","net.corda.finance.flows.TwoPartyTradeFlow.UnacceptablePriceException.UnacceptablePriceException"]},{"name":"constructor(groupEnum: ComponentGroupEnum, index: Int, cause: Exception)","description":"net.corda.core.internal.TransactionDeserialisationException.TransactionDeserialisationException","location":"docs/net.corda.core.internal/-transaction-deserialisation-exception/-transaction-deserialisation-exception.html","searchKeys":["TransactionDeserialisationException","constructor(groupEnum: ComponentGroupEnum, index: Int, cause: Exception)","net.corda.core.internal.TransactionDeserialisationException.TransactionDeserialisationException"]},{"name":"constructor(groupIndex: Int, components: List<OpaqueBytes>)","description":"net.corda.core.transactions.ComponentGroup.ComponentGroup","location":"docs/net.corda.core.transactions/-component-group/-component-group.html","searchKeys":["ComponentGroup","constructor(groupIndex: Int, components: List<OpaqueBytes>)","net.corda.core.transactions.ComponentGroup.ComponentGroup"]},{"name":"constructor(groupIndex: Int, components: List<OpaqueBytes>, nonces: List<SecureHash>, partialMerkleTree: PartialMerkleTree)","description":"net.corda.core.transactions.FilteredComponentGroup.FilteredComponentGroup","location":"docs/net.corda.core.transactions/-filtered-component-group/-filtered-component-group.html","searchKeys":["FilteredComponentGroup","constructor(groupIndex: Int, components: List<OpaqueBytes>, nonces: List<SecureHash>, partialMerkleTree: PartialMerkleTree)","net.corda.core.transactions.FilteredComponentGroup.FilteredComponentGroup"]},{"name":"constructor(haAddressPool: List<NetworkHostAndPort>, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","description":"net.corda.client.rpc.CordaRPCClient.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-corda-r-p-c-client.html","searchKeys":["CordaRPCClient","constructor(haAddressPool: List<NetworkHostAndPort>, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","net.corda.client.rpc.CordaRPCClient.CordaRPCClient"]},{"name":"constructor(haAddressPool: List<NetworkHostAndPort>, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, customSerializers: Set<SerializationCustomSerializer<*, *>>?)","description":"net.corda.client.rpc.CordaRPCClient.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-corda-r-p-c-client.html","searchKeys":["CordaRPCClient","constructor(haAddressPool: List<NetworkHostAndPort>, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, customSerializers: Set<SerializationCustomSerializer<*, *>>?)","net.corda.client.rpc.CordaRPCClient.CordaRPCClient"]},{"name":"constructor(haAddressPool: List<NetworkHostAndPort>, rpcOpsClass: Class<I>, username: String, password: String, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","description":"net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/-multi-r-p-c-client.html","searchKeys":["MultiRPCClient","constructor(haAddressPool: List<NetworkHostAndPort>, rpcOpsClass: Class<I>, username: String, password: String, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient"]},{"name":"constructor(haAddressPool: List<NetworkHostAndPort>, rpcOpsClass: Class<I>, username: String, password: String, customSerializers: Set<SerializationCustomSerializer<*, *>>?, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, externalTrace: Trace? = null, impersonatedActor: Actor? = null, targetLegalIdentity: CordaX500Name? = null)","description":"net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/-multi-r-p-c-client.html","searchKeys":["MultiRPCClient","constructor(haAddressPool: List<NetworkHostAndPort>, rpcOpsClass: Class<I>, username: String, password: String, customSerializers: Set<SerializationCustomSerializer<*, *>>?, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, externalTrace: Trace? = null, impersonatedActor: Actor? = null, targetLegalIdentity: CordaX500Name? = null)","net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient"]},{"name":"constructor(haAddressPool: List<NetworkHostAndPort>, sslConfiguration: ClientRpcSslOptions? = null, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT)","description":"net.corda.client.rpc.internal.RPCClient.RPCClient","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/-r-p-c-client.html","searchKeys":["RPCClient","constructor(haAddressPool: List<NetworkHostAndPort>, sslConfiguration: ClientRpcSslOptions? = null, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT)","net.corda.client.rpc.internal.RPCClient.RPCClient"]},{"name":"constructor(hash: AttachmentId)","description":"net.corda.core.contracts.AttachmentResolutionException.AttachmentResolutionException","location":"docs/net.corda.core.contracts/-attachment-resolution-exception/-attachment-resolution-exception.html","searchKeys":["AttachmentResolutionException","constructor(hash: AttachmentId)","net.corda.core.contracts.AttachmentResolutionException.AttachmentResolutionException"]},{"name":"constructor(hash: SecureHash)","description":"net.corda.core.crypto.MerkleTree.Leaf.Leaf","location":"docs/net.corda.core.crypto/-merkle-tree/-leaf/-leaf.html","searchKeys":["Leaf","constructor(hash: SecureHash)","net.corda.core.crypto.MerkleTree.Leaf.Leaf"]},{"name":"constructor(hash: SecureHash)","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.IncludedLeaf.IncludedLeaf","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-included-leaf/-included-leaf.html","searchKeys":["IncludedLeaf","constructor(hash: SecureHash)","net.corda.core.crypto.PartialMerkleTree.PartialTree.IncludedLeaf.IncludedLeaf"]},{"name":"constructor(hash: SecureHash)","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Leaf.Leaf","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-leaf/-leaf.html","searchKeys":["Leaf","constructor(hash: SecureHash)","net.corda.core.crypto.PartialMerkleTree.PartialTree.Leaf.Leaf"]},{"name":"constructor(hash: SecureHash)","description":"net.corda.core.internal.FlowIORequest.WaitForLedgerCommit.WaitForLedgerCommit","location":"docs/net.corda.core.internal/-flow-i-o-request/-wait-for-ledger-commit/-wait-for-ledger-commit.html","searchKeys":["WaitForLedgerCommit","constructor(hash: SecureHash)","net.corda.core.internal.FlowIORequest.WaitForLedgerCommit.WaitForLedgerCommit"]},{"name":"constructor(hash: SecureHash)","description":"net.corda.core.transactions.NetworkParametersHash.NetworkParametersHash","location":"docs/net.corda.core.transactions/-network-parameters-hash/-network-parameters-hash.html","searchKeys":["NetworkParametersHash","constructor(hash: SecureHash)","net.corda.core.transactions.NetworkParametersHash.NetworkParametersHash"]},{"name":"constructor(hash: SecureHash, left: MerkleTree, right: MerkleTree)","description":"net.corda.core.crypto.MerkleTree.Node.Node","location":"docs/net.corda.core.crypto/-merkle-tree/-node/-node.html","searchKeys":["Node","constructor(hash: SecureHash, left: MerkleTree, right: MerkleTree)","net.corda.core.crypto.MerkleTree.Node.Node"]},{"name":"constructor(hash: SecureHash, message: String = \"Transaction resolution failure for \")","description":"net.corda.core.contracts.TransactionResolutionException.TransactionResolutionException","location":"docs/net.corda.core.contracts/-transaction-resolution-exception/-transaction-resolution-exception.html","searchKeys":["TransactionResolutionException","constructor(hash: SecureHash, message: String = \"Transaction resolution failure for \")","net.corda.core.contracts.TransactionResolutionException.TransactionResolutionException"]},{"name":"constructor(hash: SecureHash, parameters: NetworkParameters, description: String, updateDeadline: Instant)","description":"net.corda.core.messaging.ParametersUpdateInfo.ParametersUpdateInfo","location":"docs/net.corda.core.messaging/-parameters-update-info/-parameters-update-info.html","searchKeys":["ParametersUpdateInfo","constructor(hash: SecureHash, parameters: NetworkParameters, description: String, updateDeadline: Instant)","net.corda.core.messaging.ParametersUpdateInfo.ParametersUpdateInfo"]},{"name":"constructor(hashAlgorithm: String)","description":"net.corda.core.crypto.DigestService.DigestService","location":"docs/net.corda.core.crypto/-digest-service/-digest-service.html","searchKeys":["DigestService","constructor(hashAlgorithm: String)","net.corda.core.crypto.DigestService.DigestService"]},{"name":"constructor(hashOfTransactionId: SecureHash)","description":"net.corda.core.flows.StateConsumptionDetails.StateConsumptionDetails","location":"docs/net.corda.core.flows/-state-consumption-details/-state-consumption-details.html","searchKeys":["StateConsumptionDetails","constructor(hashOfTransactionId: SecureHash)","net.corda.core.flows.StateConsumptionDetails.StateConsumptionDetails"]},{"name":"constructor(hashOfTransactionId: SecureHash, type: StateConsumptionDetails.ConsumedStateType)","description":"net.corda.core.flows.StateConsumptionDetails.StateConsumptionDetails","location":"docs/net.corda.core.flows/-state-consumption-details/-state-consumption-details.html","searchKeys":["StateConsumptionDetails","constructor(hashOfTransactionId: SecureHash, type: StateConsumptionDetails.ConsumedStateType)","net.corda.core.flows.StateConsumptionDetails.StateConsumptionDetails"]},{"name":"constructor(hashes: NonEmptySet<SecureHash>, dataType: FetchDataFlow.DataType)","description":"net.corda.core.internal.FetchDataFlow.Request.Data.Data","location":"docs/net.corda.core.internal/-fetch-data-flow/-request/-data/-data.html","searchKeys":["Data","constructor(hashes: NonEmptySet<SecureHash>, dataType: FetchDataFlow.DataType)","net.corda.core.internal.FetchDataFlow.Request.Data.Data"]},{"name":"constructor(hashes: Set<SecureHash>, params: NetworkParameters)","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderKey.AttachmentsClassLoaderKey","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-key/-attachments-class-loader-key.html","searchKeys":["AttachmentsClassLoaderKey","constructor(hashes: Set<SecureHash>, params: NetworkParameters)","net.corda.core.serialization.internal.AttachmentsClassLoaderKey.AttachmentsClassLoaderKey"]},{"name":"constructor(holidayDates: SortedSet<LocalDate>)","description":"net.corda.finance.contracts.BusinessCalendar.BusinessCalendar","location":"docs/net.corda.finance.contracts/-business-calendar/-business-calendar.html","searchKeys":["BusinessCalendar","constructor(holidayDates: SortedSet<LocalDate>)","net.corda.finance.contracts.BusinessCalendar.BusinessCalendar"]},{"name":"constructor(host: String, port: Int)","description":"net.corda.core.utilities.NetworkHostAndPort.NetworkHostAndPort","location":"docs/net.corda.core.utilities/-network-host-and-port/-network-host-and-port.html","searchKeys":["NetworkHostAndPort","constructor(host: String, port: Int)","net.corda.core.utilities.NetworkHostAndPort.NetworkHostAndPort"]},{"name":"constructor(hostAndPort: NetworkHostAndPort)","description":"net.corda.testing.node.internal.network.CrlServer.CrlServer","location":"docs/net.corda.testing.node.internal.network/-crl-server/-crl-server.html","searchKeys":["CrlServer","constructor(hostAndPort: NetworkHostAndPort)","net.corda.testing.node.internal.network.CrlServer.CrlServer"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT)","description":"net.corda.client.rpc.CordaRPCClient.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-corda-r-p-c-client.html","searchKeys":["CordaRPCClient","constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT)","net.corda.client.rpc.CordaRPCClient.CordaRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, classLoader: ClassLoader)","description":"net.corda.client.rpc.CordaRPCClient.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-corda-r-p-c-client.html","searchKeys":["CordaRPCClient","constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, classLoader: ClassLoader)","net.corda.client.rpc.CordaRPCClient.CordaRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, customSerializers: Set<SerializationCustomSerializer<*, *>>?)","description":"net.corda.client.rpc.CordaRPCClient.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-corda-r-p-c-client.html","searchKeys":["CordaRPCClient","constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, customSerializers: Set<SerializationCustomSerializer<*, *>>?)","net.corda.client.rpc.CordaRPCClient.CordaRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration, sslConfiguration: ClientRpcSslOptions?, classLoader: ClassLoader? = null)","description":"net.corda.client.rpc.CordaRPCClient.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-corda-r-p-c-client.html","searchKeys":["CordaRPCClient","constructor(hostAndPort: NetworkHostAndPort, configuration: CordaRPCClientConfiguration, sslConfiguration: ClientRpcSslOptions?, classLoader: ClassLoader? = null)","net.corda.client.rpc.CordaRPCClient.CordaRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, listenProcess: Process)","description":"net.corda.testing.node.internal.ListenProcessDeathException.ListenProcessDeathException","location":"docs/net.corda.testing.node.internal/-listen-process-death-exception/-listen-process-death-exception.html","searchKeys":["ListenProcessDeathException","constructor(hostAndPort: NetworkHostAndPort, listenProcess: Process)","net.corda.testing.node.internal.ListenProcessDeathException.ListenProcessDeathException"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, listenProcess: Process, causeFromStdError: String)","description":"net.corda.testing.node.internal.NodeListenProcessDeathException.NodeListenProcessDeathException","location":"docs/net.corda.testing.node.internal/-node-listen-process-death-exception/-node-listen-process-death-exception.html","searchKeys":["NodeListenProcessDeathException","constructor(hostAndPort: NetworkHostAndPort, listenProcess: Process, causeFromStdError: String)","net.corda.testing.node.internal.NodeListenProcessDeathException.NodeListenProcessDeathException"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, classLoader: ClassLoader, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT)","description":"net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/-multi-r-p-c-client.html","searchKeys":["MultiRPCClient","constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, classLoader: ClassLoader, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT)","net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT)","description":"net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/-multi-r-p-c-client.html","searchKeys":["MultiRPCClient","constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT)","net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, configuration: CordaRPCClientConfiguration, sslConfiguration: ClientRpcSslOptions?, classLoader: ClassLoader? = null)","description":"net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/-multi-r-p-c-client.html","searchKeys":["MultiRPCClient","constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, configuration: CordaRPCClientConfiguration, sslConfiguration: ClientRpcSslOptions?, classLoader: ClassLoader? = null)","net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, customSerializers: Set<SerializationCustomSerializer<*, *>>?, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, externalTrace: Trace? = null, impersonatedActor: Actor? = null, targetLegalIdentity: CordaX500Name? = null)","description":"net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/-multi-r-p-c-client.html","searchKeys":["MultiRPCClient","constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, customSerializers: Set<SerializationCustomSerializer<*, *>>?, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, externalTrace: Trace? = null, impersonatedActor: Actor? = null, targetLegalIdentity: CordaX500Name? = null)","net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","description":"net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/-multi-r-p-c-client.html","searchKeys":["MultiRPCClient","constructor(hostAndPort: NetworkHostAndPort, rpcOpsClass: Class<I>, username: String, password: String, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","net.corda.client.rpc.ext.MultiRPCClient.MultiRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, sslConfiguration: <Error class: unknown class>, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT)","description":"net.corda.client.rpc.internal.RPCClient.RPCClient","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/-r-p-c-client.html","searchKeys":["RPCClient","constructor(hostAndPort: NetworkHostAndPort, sslConfiguration: <Error class: unknown class>, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT)","net.corda.client.rpc.internal.RPCClient.RPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","description":"net.corda.client.rpc.CordaRPCClient.CordaRPCClient","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-corda-r-p-c-client.html","searchKeys":["CordaRPCClient","constructor(hostAndPort: NetworkHostAndPort, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null)","net.corda.client.rpc.CordaRPCClient.CordaRPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort, sslConfiguration: ClientRpcSslOptions? = null, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT)","description":"net.corda.client.rpc.internal.RPCClient.RPCClient","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/-r-p-c-client.html","searchKeys":["RPCClient","constructor(hostAndPort: NetworkHostAndPort, sslConfiguration: ClientRpcSslOptions? = null, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT)","net.corda.client.rpc.internal.RPCClient.RPCClient"]},{"name":"constructor(hostAndPort: NetworkHostAndPort?, clientTransportConfiguration: <Error class: unknown class>, serverControl: <Error class: unknown class>, shutdown: () -> Unit)","description":"net.corda.testing.node.internal.RpcBrokerHandle.RpcBrokerHandle","location":"docs/net.corda.testing.node.internal/-rpc-broker-handle/-rpc-broker-handle.html","searchKeys":["RpcBrokerHandle","constructor(hostAndPort: NetworkHostAndPort?, clientTransportConfiguration: <Error class: unknown class>, serverControl: <Error class: unknown class>, shutdown: () -> Unit)","net.corda.testing.node.internal.RpcBrokerHandle.RpcBrokerHandle"]},{"name":"constructor(id: Actor.Id, serviceId: AuthServiceId, owningLegalIdentity: CordaX500Name)","description":"net.corda.core.context.Actor.Actor","location":"docs/net.corda.core.context/-actor/-actor.html","searchKeys":["Actor","constructor(id: Actor.Id, serviceId: AuthServiceId, owningLegalIdentity: CordaX500Name)","net.corda.core.context.Actor.Actor"]},{"name":"constructor(id: Int, name: CordaX500Name)","description":"net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.PeerHandle","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-peer-handle/-peer-handle.html","searchKeys":["PeerHandle","constructor(id: Int, name: CordaX500Name)","net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.PeerHandle"]},{"name":"constructor(id: SecureHash, reason: String)","description":"net.corda.core.transactions.ComponentVisibilityException.ComponentVisibilityException","location":"docs/net.corda.core.transactions/-component-visibility-exception/-component-visibility-exception.html","searchKeys":["ComponentVisibilityException","constructor(id: SecureHash, reason: String)","net.corda.core.transactions.ComponentVisibilityException.ComponentVisibilityException"]},{"name":"constructor(id: SecureHash, reason: String)","description":"net.corda.core.transactions.FilteredTransactionVerificationException.FilteredTransactionVerificationException","location":"docs/net.corda.core.transactions/-filtered-transaction-verification-exception/-filtered-transaction-verification-exception.html","searchKeys":["FilteredTransactionVerificationException","constructor(id: SecureHash, reason: String)","net.corda.core.transactions.FilteredTransactionVerificationException.FilteredTransactionVerificationException"]},{"name":"constructor(id: SecureHash, serialized: SerializedBytes<SignedTransaction>?, nonSerialised: SignedTransaction?)","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.MaybeSerializedSignedTransaction","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/-maybe-serialized-signed-transaction.html","searchKeys":["MaybeSerializedSignedTransaction","constructor(id: SecureHash, serialized: SerializedBytes<SignedTransaction>?, nonSerialised: SignedTransaction?)","net.corda.core.flows.MaybeSerializedSignedTransaction.MaybeSerializedSignedTransaction"]},{"name":"constructor(id: SecureHash, serialized: SerializedBytes<SignedTransaction>?, nonSerialised: SignedTransaction?, inFlight: Boolean)","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.MaybeSerializedSignedTransaction","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/-maybe-serialized-signed-transaction.html","searchKeys":["MaybeSerializedSignedTransaction","constructor(id: SecureHash, serialized: SerializedBytes<SignedTransaction>?, nonSerialised: SignedTransaction?, inFlight: Boolean)","net.corda.core.flows.MaybeSerializedSignedTransaction.MaybeSerializedSignedTransaction"]},{"name":"constructor(id: StateMachineRunId)","description":"net.corda.core.flows.KilledFlowException.KilledFlowException","location":"docs/net.corda.core.flows/-killed-flow-exception/-killed-flow-exception.html","searchKeys":["KilledFlowException","constructor(id: StateMachineRunId)","net.corda.core.flows.KilledFlowException.KilledFlowException"]},{"name":"constructor(id: StateMachineRunId, flowLogicClassName: String, initiator: FlowInitiator, progressTrackerStepAndUpdates: DataFeed<String, String>?, invocationContext: InvocationContext = initiator.invocationContext)","description":"net.corda.core.messaging.StateMachineInfo.StateMachineInfo","location":"docs/net.corda.core.messaging/-state-machine-info/-state-machine-info.html","searchKeys":["StateMachineInfo","constructor(id: StateMachineRunId, flowLogicClassName: String, initiator: FlowInitiator, progressTrackerStepAndUpdates: DataFeed<String, String>?, invocationContext: InvocationContext = initiator.invocationContext)","net.corda.core.messaging.StateMachineInfo.StateMachineInfo"]},{"name":"constructor(id: StateMachineRunId, message: String)","description":"net.corda.core.flows.KilledFlowException.KilledFlowException","location":"docs/net.corda.core.flows/-killed-flow-exception/-killed-flow-exception.html","searchKeys":["KilledFlowException","constructor(id: StateMachineRunId, message: String)","net.corda.core.flows.KilledFlowException.KilledFlowException"]},{"name":"constructor(id: StateMachineRunId, result: Try<*>)","description":"net.corda.core.messaging.StateMachineUpdate.Removed.Removed","location":"docs/net.corda.core.messaging/-state-machine-update/-removed/-removed.html","searchKeys":["Removed","constructor(id: StateMachineRunId, result: Try<*>)","net.corda.core.messaging.StateMachineUpdate.Removed.Removed"]},{"name":"constructor(id: StateMachineRunId, returnValue: CordaFuture<A>)","description":"net.corda.core.messaging.FlowHandleImpl.FlowHandleImpl","location":"docs/net.corda.core.messaging/-flow-handle-impl/-flow-handle-impl.html","searchKeys":["FlowHandleImpl","constructor(id: StateMachineRunId, returnValue: CordaFuture<A>)","net.corda.core.messaging.FlowHandleImpl.FlowHandleImpl"]},{"name":"constructor(id: StateMachineRunId, returnValue: CordaFuture<A>, clientId: String)","description":"net.corda.core.messaging.FlowHandleWithClientIdImpl.FlowHandleWithClientIdImpl","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id-impl/-flow-handle-with-client-id-impl.html","searchKeys":["FlowHandleWithClientIdImpl","constructor(id: StateMachineRunId, returnValue: CordaFuture<A>, clientId: String)","net.corda.core.messaging.FlowHandleWithClientIdImpl.FlowHandleWithClientIdImpl"]},{"name":"constructor(id: StateMachineRunId, returnValue: CordaFuture<A>, progress: <Error class: unknown class><String>, stepsTreeIndexFeed: DataFeed<Int, Int>? = null, stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>? = null)","description":"net.corda.core.messaging.FlowProgressHandleImpl.FlowProgressHandleImpl","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/-flow-progress-handle-impl.html","searchKeys":["FlowProgressHandleImpl","constructor(id: StateMachineRunId, returnValue: CordaFuture<A>, progress: <Error class: unknown class><String>, stepsTreeIndexFeed: DataFeed<Int, Int>? = null, stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>? = null)","net.corda.core.messaging.FlowProgressHandleImpl.FlowProgressHandleImpl"]},{"name":"constructor(id: String)","description":"net.corda.testing.internal.vault.UniqueDummyLinearStateSchema.UniquePersistentLinearDummyState.UniquePersistentLinearDummyState","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-state-schema/-unique-persistent-linear-dummy-state/-unique-persistent-linear-dummy-state.html","searchKeys":["UniquePersistentLinearDummyState","constructor(id: String)","net.corda.testing.internal.vault.UniqueDummyLinearStateSchema.UniquePersistentLinearDummyState.UniquePersistentLinearDummyState"]},{"name":"constructor(identity: Party, validating: Boolean)","description":"net.corda.core.node.NotaryInfo.NotaryInfo","location":"docs/net.corda.core.node/-notary-info/-notary-info.html","searchKeys":["NotaryInfo","constructor(identity: Party, validating: Boolean)","net.corda.core.node.NotaryInfo.NotaryInfo"]},{"name":"constructor(identity: Party, validating: Boolean, nodeHandles: CordaFuture<List<NodeHandle>>)","description":"net.corda.testing.driver.NotaryHandle.NotaryHandle","location":"docs/net.corda.testing.driver/-notary-handle/-notary-handle.html","searchKeys":["NotaryHandle","constructor(identity: Party, validating: Boolean, nodeHandles: CordaFuture<List<NodeHandle>>)","net.corda.testing.driver.NotaryHandle.NotaryHandle"]},{"name":"constructor(identityService: IdentityService, factory: <Error class: unknown class>, fuzzyIdentityMatch: Boolean, isFullParties: Boolean = false)","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.IdentityObjectMapper","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/-identity-object-mapper.html","searchKeys":["IdentityObjectMapper","constructor(identityService: IdentityService, factory: <Error class: unknown class>, fuzzyIdentityMatch: Boolean, isFullParties: Boolean = false)","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.IdentityObjectMapper"]},{"name":"constructor(identityService: IdentityService, vararg initialKeys: KeyPair)","description":"net.corda.testing.node.internal.MockKeyManagementService.MockKeyManagementService","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/-mock-key-management-service.html","searchKeys":["MockKeyManagementService","constructor(identityService: IdentityService, vararg initialKeys: KeyPair)","net.corda.testing.node.internal.MockKeyManagementService.MockKeyManagementService"]},{"name":"constructor(ids: List<AttachmentId>)","description":"net.corda.core.serialization.MissingAttachmentsRuntimeException.MissingAttachmentsRuntimeException","location":"docs/net.corda.core.serialization/-missing-attachments-runtime-exception/-missing-attachments-runtime-exception.html","searchKeys":["MissingAttachmentsRuntimeException","constructor(ids: List<AttachmentId>)","net.corda.core.serialization.MissingAttachmentsRuntimeException.MissingAttachmentsRuntimeException"]},{"name":"constructor(ids: List<AttachmentId>, message: String?)","description":"net.corda.core.serialization.MissingAttachmentsRuntimeException.MissingAttachmentsRuntimeException","location":"docs/net.corda.core.serialization/-missing-attachments-runtime-exception/-missing-attachments-runtime-exception.html","searchKeys":["MissingAttachmentsRuntimeException","constructor(ids: List<AttachmentId>, message: String?)","net.corda.core.serialization.MissingAttachmentsRuntimeException.MissingAttachmentsRuntimeException"]},{"name":"constructor(ids: List<AttachmentId>, message: String?, cause: Throwable?)","description":"net.corda.core.serialization.MissingAttachmentsRuntimeException.MissingAttachmentsRuntimeException","location":"docs/net.corda.core.serialization/-missing-attachments-runtime-exception/-missing-attachments-runtime-exception.html","searchKeys":["MissingAttachmentsRuntimeException","constructor(ids: List<AttachmentId>, message: String?, cause: Throwable?)","net.corda.core.serialization.MissingAttachmentsRuntimeException.MissingAttachmentsRuntimeException"]},{"name":"constructor(ids: List<SecureHash>)","description":"net.corda.core.serialization.MissingAttachmentsException.MissingAttachmentsException","location":"docs/net.corda.core.serialization/-missing-attachments-exception/-missing-attachments-exception.html","searchKeys":["MissingAttachmentsException","constructor(ids: List<SecureHash>)","net.corda.core.serialization.MissingAttachmentsException.MissingAttachmentsException"]},{"name":"constructor(ids: List<SecureHash>)","description":"net.corda.testing.dsl.DoubleSpentInputs.DoubleSpentInputs","location":"docs/net.corda.testing.dsl/-double-spent-inputs/-double-spent-inputs.html","searchKeys":["DoubleSpentInputs","constructor(ids: List<SecureHash>)","net.corda.testing.dsl.DoubleSpentInputs.DoubleSpentInputs"]},{"name":"constructor(ids: List<SecureHash>, message: String?)","description":"net.corda.core.serialization.MissingAttachmentsException.MissingAttachmentsException","location":"docs/net.corda.core.serialization/-missing-attachments-exception/-missing-attachments-exception.html","searchKeys":["MissingAttachmentsException","constructor(ids: List<SecureHash>, message: String?)","net.corda.core.serialization.MissingAttachmentsException.MissingAttachmentsException"]},{"name":"constructor(impl: CompletableFuture<V> = CompletableFuture())","description":"net.corda.core.internal.concurrent.CordaFutureImpl.CordaFutureImpl","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/-corda-future-impl.html","searchKeys":["CordaFutureImpl","constructor(impl: CompletableFuture<V> = CompletableFuture())","net.corda.core.internal.concurrent.CordaFutureImpl.CordaFutureImpl"]},{"name":"constructor(inProcessResult: Try<LedgerTransaction>, externalResult: Try<Unit>)","description":"net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.InProcessAndExternal","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process-and-external/-in-process-and-external.html","searchKeys":["InProcessAndExternal","constructor(inProcessResult: Try<LedgerTransaction>, externalResult: Try<Unit>)","net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.InProcessAndExternal"]},{"name":"constructor(inProcessResult: Try<LedgerTransaction?>)","description":"net.corda.core.internal.verification.VerificationResult.InProcess.InProcess","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process/-in-process.html","searchKeys":["InProcess","constructor(inProcessResult: Try<LedgerTransaction?>)","net.corda.core.internal.verification.VerificationResult.InProcess.InProcess"]},{"name":"constructor(initial: S)","description":"net.corda.core.internal.LifeCycle.LifeCycle","location":"docs/net.corda.core.internal/-life-cycle/-life-cycle.html","searchKeys":["LifeCycle","constructor(initial: S)","net.corda.core.internal.LifeCycle.LifeCycle"]},{"name":"constructor(initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService())","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService())","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService(), key: KeyPair, vararg moreKeys: KeyPair)","description":"net.corda.testing.node.MockServices.MockServices","location":"docs/net.corda.testing.node/-mock-services/-mock-services.html","searchKeys":["MockServices","constructor(initialIdentityName: CordaX500Name, identityService: IdentityService = makeTestIdentityService(), key: KeyPair, vararg moreKeys: KeyPair)","net.corda.testing.node.MockServices.MockServices"]},{"name":"constructor(initialKeyPairs: Map<String, KeyPair>)","description":"net.corda.testing.node.internal.MockCryptoService.MockCryptoService","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/-mock-crypto-service.html","searchKeys":["MockCryptoService","constructor(initialKeyPairs: Map<String, KeyPair>)","net.corda.testing.node.internal.MockCryptoService.MockCryptoService"]},{"name":"constructor(initiatingSession: FlowSession)","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Acceptor","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/-acceptor.html","searchKeys":["Acceptor","constructor(initiatingSession: FlowSession)","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Acceptor"]},{"name":"constructor(initiatingSession: FlowSession, progressTracker: ProgressTracker = Acceptor.tracker())","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Acceptor","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/-acceptor.html","searchKeys":["Acceptor","constructor(initiatingSession: FlowSession, progressTracker: ProgressTracker = Acceptor.tracker())","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Acceptor"]},{"name":"constructor(initiator: CordaX500Name, distributionList: DistributionList)","description":"net.corda.core.flows.TransactionMetadata.TransactionMetadata","location":"docs/net.corda.core.flows/-transaction-metadata/-transaction-metadata.html","searchKeys":["TransactionMetadata","constructor(initiator: CordaX500Name, distributionList: DistributionList)","net.corda.core.flows.TransactionMetadata.TransactionMetadata"]},{"name":"constructor(inputStream: InputStream, sha256: SecureHash.SHA256)","description":"net.corda.core.internal.InputStreamAndHash.InputStreamAndHash","location":"docs/net.corda.core.internal/-input-stream-and-hash/-input-stream-and-hash.html","searchKeys":["InputStreamAndHash","constructor(inputStream: InputStream, sha256: SecureHash.SHA256)","net.corda.core.internal.InputStreamAndHash.InputStreamAndHash"]},{"name":"constructor(inputs: List<StateAndRef<ContractState>>, notary: Party, legacyContractAttachment: Attachment, upgradedContractClassName: ContractClassName, upgradedContractAttachment: Attachment, id: SecureHash, privacySalt: PrivacySalt, sigs: List<TransactionSignature>, networkParameters: NetworkParameters)","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.ContractUpgradeLedgerTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/-contract-upgrade-ledger-transaction.html","searchKeys":["ContractUpgradeLedgerTransaction","constructor(inputs: List<StateAndRef<ContractState>>, notary: Party, legacyContractAttachment: Attachment, upgradedContractClassName: ContractClassName, upgradedContractAttachment: Attachment, id: SecureHash, privacySalt: PrivacySalt, sigs: List<TransactionSignature>, networkParameters: NetworkParameters)","net.corda.core.transactions.ContractUpgradeLedgerTransaction.ContractUpgradeLedgerTransaction"]},{"name":"constructor(inputs: List<StateAndRef<ContractState>>, notary: Party, newNotary: Party, id: SecureHash, sigs: List<TransactionSignature>)","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.NotaryChangeLedgerTransaction","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/-notary-change-ledger-transaction.html","searchKeys":["NotaryChangeLedgerTransaction","constructor(inputs: List<StateAndRef<ContractState>>, notary: Party, newNotary: Party, id: SecureHash, sigs: List<TransactionSignature>)","net.corda.core.transactions.NotaryChangeLedgerTransaction.NotaryChangeLedgerTransaction"]},{"name":"constructor(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt)","description":"net.corda.core.transactions.LedgerTransaction.LedgerTransaction","location":"docs/net.corda.core.transactions/-ledger-transaction/-ledger-transaction.html","searchKeys":["LedgerTransaction","constructor(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt)","net.corda.core.transactions.LedgerTransaction.LedgerTransaction"]},{"name":"constructor(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt, networkParameters: NetworkParameters)","description":"net.corda.core.transactions.LedgerTransaction.LedgerTransaction","location":"docs/net.corda.core.transactions/-ledger-transaction/-ledger-transaction.html","searchKeys":["LedgerTransaction","constructor(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt, networkParameters: NetworkParameters)","net.corda.core.transactions.LedgerTransaction.LedgerTransaction"]},{"name":"constructor(inputs: List<StateRef>, attachments: List<SecureHash>, outputs: List<TransactionState<ContractState>>, commands: List<Command<*>>, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt = PrivacySalt())","description":"net.corda.core.transactions.WireTransaction.WireTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/-wire-transaction.html","searchKeys":["WireTransaction","constructor(inputs: List<StateRef>, attachments: List<SecureHash>, outputs: List<TransactionState<ContractState>>, commands: List<Command<*>>, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt = PrivacySalt())","net.corda.core.transactions.WireTransaction.WireTransaction"]},{"name":"constructor(inputs: List<StateRef>, notary: Party, legacyContractAttachmentId: SecureHash, upgradedContractClassName: ContractClassName, upgradedContractAttachmentId: SecureHash, privacySalt: PrivacySalt = PrivacySalt(), networkParametersHash: SecureHash, digestService: DigestService = DigestService.sha2_256)","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.ContractUpgradeTransactionBuilder","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/-contract-upgrade-transaction-builder.html","searchKeys":["ContractUpgradeTransactionBuilder","constructor(inputs: List<StateRef>, notary: Party, legacyContractAttachmentId: SecureHash, upgradedContractClassName: ContractClassName, upgradedContractAttachmentId: SecureHash, privacySalt: PrivacySalt = PrivacySalt(), networkParametersHash: SecureHash, digestService: DigestService = DigestService.sha2_256)","net.corda.core.internal.ContractUpgradeTransactionBuilder.ContractUpgradeTransactionBuilder"]},{"name":"constructor(inputs: List<StateRef>, notary: Party, newNotary: Party)","description":"net.corda.core.transactions.NotaryChangeWireTransaction.NotaryChangeWireTransaction","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-notary-change-wire-transaction.html","searchKeys":["NotaryChangeWireTransaction","constructor(inputs: List<StateRef>, notary: Party, newNotary: Party)","net.corda.core.transactions.NotaryChangeWireTransaction.NotaryChangeWireTransaction"]},{"name":"constructor(inputs: List<StateRef>, notary: Party, newNotary: Party, networkParametersHash: SecureHash, digestService: DigestService = DigestService.sha2_256)","description":"net.corda.core.internal.NotaryChangeTransactionBuilder.NotaryChangeTransactionBuilder","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/-notary-change-transaction-builder.html","searchKeys":["NotaryChangeTransactionBuilder","constructor(inputs: List<StateRef>, notary: Party, newNotary: Party, networkParametersHash: SecureHash, digestService: DigestService = DigestService.sha2_256)","net.corda.core.internal.NotaryChangeTransactionBuilder.NotaryChangeTransactionBuilder"]},{"name":"constructor(inputs: List<T>, outputs: List<T>, groupingKey: K)","description":"net.corda.core.transactions.LedgerTransaction.InOutGroup.InOutGroup","location":"docs/net.corda.core.transactions/-ledger-transaction/-in-out-group/-in-out-group.html","searchKeys":["InOutGroup","constructor(inputs: List<T>, outputs: List<T>, groupingKey: K)","net.corda.core.transactions.LedgerTransaction.InOutGroup.InOutGroup"]},{"name":"constructor(interpreter: L, notary: Party)","description":"net.corda.testing.dsl.LedgerDSL.LedgerDSL","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/-ledger-d-s-l.html","searchKeys":["LedgerDSL","constructor(interpreter: L, notary: Party)","net.corda.testing.dsl.LedgerDSL.LedgerDSL"]},{"name":"constructor(interpreter: T, notary: Party)","description":"net.corda.testing.dsl.TransactionDSL.TransactionDSL","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/-transaction-d-s-l.html","searchKeys":["TransactionDSL","constructor(interpreter: T, notary: Party)","net.corda.testing.dsl.TransactionDSL.TransactionDSL"]},{"name":"constructor(invocationId: Trace.InvocationId, sessionId: Trace.SessionId)","description":"net.corda.core.context.Trace.Trace","location":"docs/net.corda.core.context/-trace/-trace.html","searchKeys":["Trace","constructor(invocationId: Trace.InvocationId, sessionId: Trace.SessionId)","net.corda.core.context.Trace.Trace"]},{"name":"constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = false, cordappsForAllNodes: Collection<TestCordapp>? = null, environmentVariables: Map<String, String> = emptyMap(), allowHibernateToManageAppSchema: Boolean = true)","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = false, cordappsForAllNodes: Collection<TestCordapp>? = null, environmentVariables: Map<String, String> = emptyMap(), allowHibernateToManageAppSchema: Boolean = true)","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = false, cordappsForAllNodes: Collection<TestCordapp>? = null, environmentVariables: Map<String, String> = emptyMap(), allowHibernateToManageAppSchema: Boolean = true, premigrateH2Database: Boolean = true, notaryHandleTimeout: Duration = Duration.ofMinutes(1))","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = false, cordappsForAllNodes: Collection<TestCordapp>? = null, environmentVariables: Map<String, String> = emptyMap(), allowHibernateToManageAppSchema: Boolean = true, premigrateH2Database: Boolean = true, notaryHandleTimeout: Duration = Duration.ofMinutes(1))","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = true)","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = true)","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = true, cordappsForAllNodes: Collection<TestCordapp>? = null)","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), portAllocation: PortAllocation = incrementalPortAllocation(), debugPortAllocation: PortAllocation = incrementalPortAllocation(), systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForAllNodesToFinish: Boolean = false, notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), extraCordappPackagesToScan: List<String> = emptyList(), jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = true, cordappsForAllNodes: Collection<TestCordapp>? = null)","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters)","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters)","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, inMemoryDB: Boolean)","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, inMemoryDB: Boolean)","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean, premigrateH2Database: Boolean = true)","description":"net.corda.testing.driver.DriverParameters.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/-driver-parameters.html","searchKeys":["DriverParameters","constructor(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean, premigrateH2Database: Boolean = true)","net.corda.testing.driver.DriverParameters.DriverParameters"]},{"name":"constructor(issuableCurrencies: List<Currency>, supportedCurrencies: List<Currency>)","description":"net.corda.finance.internal.CashConfiguration.CashConfiguration","location":"docs/net.corda.finance.internal/-cash-configuration/-cash-configuration.html","searchKeys":["CashConfiguration","constructor(issuableCurrencies: List<Currency>, supportedCurrencies: List<Currency>)","net.corda.finance.internal.CashConfiguration.CashConfiguration"]},{"name":"constructor(issuance: PartyAndReference, owner: AbstractParty, faceValue: Amount<Issued<Currency>>, maturityDate: Instant)","description":"net.corda.finance.contracts.CommercialPaper.State.State","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/-state.html","searchKeys":["State","constructor(issuance: PartyAndReference, owner: AbstractParty, faceValue: Amount<Issued<Currency>>, maturityDate: Instant)","net.corda.finance.contracts.CommercialPaper.State.State"]},{"name":"constructor(issuancePartyHash: String, issuanceRef: ByteArray, ownerHash: String, maturity: Instant, faceValue: Long, currency: String, faceValueIssuerPartyHash: String, faceValueIssuerRef: ByteArray)","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.PersistentCommercialPaperState","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/-persistent-commercial-paper-state.html","searchKeys":["PersistentCommercialPaperState","constructor(issuancePartyHash: String, issuanceRef: ByteArray, ownerHash: String, maturity: Instant, faceValue: Long, currency: String, faceValueIssuerPartyHash: String, faceValueIssuerRef: ByteArray)","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.PersistentCommercialPaperState"]},{"name":"constructor(issuer: PartyAndReference, product: P)","description":"net.corda.core.contracts.Issued.Issued","location":"docs/net.corda.core.contracts/-issued/-issued.html","searchKeys":["Issued","constructor(issuer: PartyAndReference, product: P)","net.corda.core.contracts.Issued.Issued"]},{"name":"constructor(jarFile: Path, contractClassNames: List<String>, initiatedFlows: List<Class<out FlowLogic<*>>>, rpcFlows: List<Class<out FlowLogic<*>>>, serviceFlows: List<Class<out FlowLogic<*>>>, schedulableFlows: List<Class<out FlowLogic<*>>>, services: List<Class<out SerializeAsToken>>, telemetryComponents: List<Class<out TelemetryComponent>>, serializationWhitelists: List<SerializationWhitelist>, serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>, checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>, customSchemas: Set<MappedSchema>, allFlows: List<Class<out FlowLogic<*>>>, info: Cordapp.Info, minimumPlatformVersion: Int, targetPlatformVersion: Int, jarHash: SecureHash.SHA256 = jarFile.hash, languageVersion: LanguageVersion = LanguageVersion.Data, notaryService: Class<out NotaryService>? = null, isLoaded: Boolean = true, explicitCordappClasses: List<String> = emptyList(), isVirtual: Boolean = false)","description":"net.corda.core.internal.cordapp.CordappImpl.CordappImpl","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-cordapp-impl.html","searchKeys":["CordappImpl","constructor(jarFile: Path, contractClassNames: List<String>, initiatedFlows: List<Class<out FlowLogic<*>>>, rpcFlows: List<Class<out FlowLogic<*>>>, serviceFlows: List<Class<out FlowLogic<*>>>, schedulableFlows: List<Class<out FlowLogic<*>>>, services: List<Class<out SerializeAsToken>>, telemetryComponents: List<Class<out TelemetryComponent>>, serializationWhitelists: List<SerializationWhitelist>, serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>, checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>, customSchemas: Set<MappedSchema>, allFlows: List<Class<out FlowLogic<*>>>, info: Cordapp.Info, minimumPlatformVersion: Int, targetPlatformVersion: Int, jarHash: SecureHash.SHA256 = jarFile.hash, languageVersion: LanguageVersion = LanguageVersion.Data, notaryService: Class<out NotaryService>? = null, isLoaded: Boolean = true, explicitCordappClasses: List<String> = emptyList(), isVirtual: Boolean = false)","net.corda.core.internal.cordapp.CordappImpl.CordappImpl"]},{"name":"constructor(jmxHttpServerPortAllocation: PortAllocation)","description":"net.corda.testing.driver.JmxPolicy.JmxPolicy","location":"docs/net.corda.testing.driver/-jmx-policy/-jmx-policy.html","searchKeys":["JmxPolicy","constructor(jmxHttpServerPortAllocation: PortAllocation)","net.corda.testing.driver.JmxPolicy.JmxPolicy"]},{"name":"constructor(key: PublicKey)","description":"net.corda.core.contracts.SignatureAttachmentConstraint.SignatureAttachmentConstraint","location":"docs/net.corda.core.contracts/-signature-attachment-constraint/-signature-attachment-constraint.html","searchKeys":["SignatureAttachmentConstraint","constructor(key: PublicKey)","net.corda.core.contracts.SignatureAttachmentConstraint.SignatureAttachmentConstraint"]},{"name":"constructor(keyStorePath: Path?, signatureCount: Int, algorithm: String)","description":"net.corda.testing.node.internal.CustomCordapp.SigningInfo.SigningInfo","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-signing-info/-signing-info.html","searchKeys":["SigningInfo","constructor(keyStorePath: Path?, signatureCount: Int, algorithm: String)","net.corda.testing.node.internal.CustomCordapp.SigningInfo.SigningInfo"]},{"name":"constructor(label: String)","description":"net.corda.core.utilities.ProgressTracker.Step.Step","location":"docs/net.corda.core.utilities/-progress-tracker/-step/-step.html","searchKeys":["Step","constructor(label: String)","net.corda.core.utilities.ProgressTracker.Step.Step"]},{"name":"constructor(label: String)","description":"net.corda.testing.dsl.DuplicateOutputLabel.DuplicateOutputLabel","location":"docs/net.corda.testing.dsl/-duplicate-output-label/-duplicate-output-label.html","searchKeys":["DuplicateOutputLabel","constructor(label: String)","net.corda.testing.dsl.DuplicateOutputLabel.DuplicateOutputLabel"]},{"name":"constructor(ledgerInterpreter: TestLedgerDSLInterpreter, transactionBuilder: TransactionBuilder)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.TestTransactionDSLInterpreter","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/-test-transaction-d-s-l-interpreter.html","searchKeys":["TestTransactionDSLInterpreter","constructor(ledgerInterpreter: TestLedgerDSLInterpreter, transactionBuilder: TransactionBuilder)","net.corda.testing.dsl.TestTransactionDSLInterpreter.TestTransactionDSLInterpreter"]},{"name":"constructor(left: CriteriaExpression<O, Boolean>, right: CriteriaExpression<O, Boolean>, operator: BinaryLogicalOperator)","description":"net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.BinaryLogical","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-binary-logical/-binary-logical.html","searchKeys":["BinaryLogical","constructor(left: CriteriaExpression<O, Boolean>, right: CriteriaExpression<O, Boolean>, operator: BinaryLogicalOperator)","net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.BinaryLogical"]},{"name":"constructor(left: PartialMerkleTree.PartialTree, right: PartialMerkleTree.PartialTree)","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.Node","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-node/-node.html","searchKeys":["Node","constructor(left: PartialMerkleTree.PartialTree, right: PartialMerkleTree.PartialTree)","net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.Node"]},{"name":"constructor(left: PartialMerkleTree.PartialTree, right: PartialMerkleTree.PartialTree, hashAlgorithm: String? = SecureHash.SHA2_256)","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.Node","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-node/-node.html","searchKeys":["Node","constructor(left: PartialMerkleTree.PartialTree, right: PartialMerkleTree.PartialTree, hashAlgorithm: String? = SecureHash.SHA2_256)","net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.Node"]},{"name":"constructor(lifecycle: Obligation.Lifecycle = Lifecycle.NORMAL, obligor: AbstractParty, template: Obligation.Terms<P>, quantity: Long, beneficiary: AbstractParty)","description":"net.corda.finance.contracts.asset.Obligation.State.State","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/-state.html","searchKeys":["State","constructor(lifecycle: Obligation.Lifecycle = Lifecycle.NORMAL, obligor: AbstractParty, template: Obligation.Terms<P>, quantity: Long, beneficiary: AbstractParty)","net.corda.finance.contracts.asset.Obligation.State.State"]},{"name":"constructor(lifecycle: Obligation.Lifecycle)","description":"net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle.SetLifecycle","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-set-lifecycle/-set-lifecycle.html","searchKeys":["SetLifecycle","constructor(lifecycle: Obligation.Lifecycle)","net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle.SetLifecycle"]},{"name":"constructor(linearId: UniqueIdentifier = UniqueIdentifier(), participants: List<AbstractParty> = listOf(), linearString: String = \"ABC\", linearNumber: Long = 123, linearTimestamp: Instant = LocalDateTime.now().toInstant(UTC), linearBoolean: Boolean = true, nonce: SecureHash = SecureHash.randomSHA256())","description":"net.corda.testing.internal.vault.DummyLinearContract.State.State","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/-state.html","searchKeys":["State","constructor(linearId: UniqueIdentifier = UniqueIdentifier(), participants: List<AbstractParty> = listOf(), linearString: String = \"ABC\", linearNumber: Long = 123, linearTimestamp: Instant = LocalDateTime.now().toInstant(UTC), linearBoolean: Boolean = true, nonce: SecureHash = SecureHash.randomSHA256())","net.corda.testing.internal.vault.DummyLinearContract.State.State"]},{"name":"constructor(listenAddress: NetworkHostAndPort, process: Process)","description":"net.corda.testing.driver.WebserverHandle.WebserverHandle","location":"docs/net.corda.testing.driver/-webserver-handle/-webserver-handle.html","searchKeys":["WebserverHandle","constructor(listenAddress: NetworkHostAndPort, process: Process)","net.corda.testing.driver.WebserverHandle.WebserverHandle"]},{"name":"constructor(logicRef: FlowLogicRef, scheduledAt: Instant)","description":"net.corda.core.contracts.ScheduledActivity.ScheduledActivity","location":"docs/net.corda.core.contracts/-scheduled-activity/-scheduled-activity.html","searchKeys":["ScheduledActivity","constructor(logicRef: FlowLogicRef, scheduledAt: Instant)","net.corda.core.contracts.ScheduledActivity.ScheduledActivity"]},{"name":"constructor(ltx: LedgerTransaction, transactionClassLoader: ClassLoader)","description":"net.corda.core.internal.verification.AbstractVerifier.AbstractVerifier","location":"docs/net.corda.core.internal.verification/-abstract-verifier/-abstract-verifier.html","searchKeys":["AbstractVerifier","constructor(ltx: LedgerTransaction, transactionClassLoader: ClassLoader)","net.corda.core.internal.verification.AbstractVerifier.AbstractVerifier"]},{"name":"constructor(major: Int, minor: Int, patch: Int = 0)","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.KotlinMetadataVersion","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/-kotlin-metadata-version.html","searchKeys":["KotlinMetadataVersion","constructor(major: Int, minor: Int, patch: Int = 0)","net.corda.core.internal.cordapp.KotlinMetadataVersion.KotlinMetadataVersion"]},{"name":"constructor(matchingCriteria: FlowRecoveryQuery, forceRecover: Boolean = false)","description":"net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/-finality-recovery-flow.html","searchKeys":["FinalityRecoveryFlow","constructor(matchingCriteria: FlowRecoveryQuery, forceRecover: Boolean = false)","net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow"]},{"name":"constructor(maxNumberOfRetries: Int, method: Method, cause: Throwable?)","description":"net.corda.client.rpc.MaxRpcRetryException.MaxRpcRetryException","location":"docs/net.corda.client.rpc/-max-rpc-retry-exception/-max-rpc-retry-exception.html","searchKeys":["MaxRpcRetryException","constructor(maxNumberOfRetries: Int, method: Method, cause: Throwable?)","net.corda.client.rpc.MaxRpcRetryException.MaxRpcRetryException"]},{"name":"constructor(maxRetries: Int = 8, retrySleep: Int = 100, retryCap: Int = 2000)","description":"net.corda.finance.workflows.asset.selection.AbstractCashSelection.AbstractCashSelection","location":"docs/net.corda.finance.workflows.asset.selection/-abstract-cash-selection/-abstract-cash-selection.html","searchKeys":["AbstractCashSelection","constructor(maxRetries: Int = 8, retrySleep: Int = 100, retryCap: Int = 2000)","net.corda.finance.workflows.asset.selection.AbstractCashSelection.AbstractCashSelection"]},{"name":"constructor(message: String)","description":"net.corda.core.flows.LedgerRecoveryException.LedgerRecoveryException","location":"docs/net.corda.core.flows/-ledger-recovery-exception/-ledger-recovery-exception.html","searchKeys":["LedgerRecoveryException","constructor(message: String)","net.corda.core.flows.LedgerRecoveryException.LedgerRecoveryException"]},{"name":"constructor(message: String)","description":"net.corda.core.flows.UnexpectedFlowEndException.UnexpectedFlowEndException","location":"docs/net.corda.core.flows/-unexpected-flow-end-exception/-unexpected-flow-end-exception.html","searchKeys":["UnexpectedFlowEndException","constructor(message: String)","net.corda.core.flows.UnexpectedFlowEndException.UnexpectedFlowEndException"]},{"name":"constructor(message: String)","description":"net.corda.core.node.ZoneVersionTooLowException.ZoneVersionTooLowException","location":"docs/net.corda.core.node/-zone-version-too-low-exception/-zone-version-too-low-exception.html","searchKeys":["ZoneVersionTooLowException","constructor(message: String)","net.corda.core.node.ZoneVersionTooLowException.ZoneVersionTooLowException"]},{"name":"constructor(message: String)","description":"net.corda.core.node.services.CordaServiceCriticalFailureException.CordaServiceCriticalFailureException","location":"docs/net.corda.core.node.services/-corda-service-critical-failure-exception/-corda-service-critical-failure-exception.html","searchKeys":["CordaServiceCriticalFailureException","constructor(message: String)","net.corda.core.node.services.CordaServiceCriticalFailureException.CordaServiceCriticalFailureException"]},{"name":"constructor(message: String)","description":"net.corda.core.node.services.UnknownAnonymousPartyException.UnknownAnonymousPartyException","location":"docs/net.corda.core.node.services/-unknown-anonymous-party-exception/-unknown-anonymous-party-exception.html","searchKeys":["UnknownAnonymousPartyException","constructor(message: String)","net.corda.core.node.services.UnknownAnonymousPartyException.UnknownAnonymousPartyException"]},{"name":"constructor(message: String, cause: Throwable)","description":"net.corda.core.observable.internal.OnNextFailedException.OnNextFailedException","location":"docs/net.corda.core.observable.internal/-on-next-failed-exception/-on-next-failed-exception.html","searchKeys":["OnNextFailedException","constructor(message: String, cause: Throwable)","net.corda.core.observable.internal.OnNextFailedException.OnNextFailedException"]},{"name":"constructor(message: String, cause: Throwable)","description":"net.corda.finance.flows.CashException.CashException","location":"docs/net.corda.finance.flows/-cash-exception/-cash-exception.html","searchKeys":["CashException","constructor(message: String, cause: Throwable)","net.corda.finance.flows.CashException.CashException"]},{"name":"constructor(message: String, cause: Throwable? = null)","description":"net.corda.core.flows.FlowRecoveryException.FlowRecoveryException","location":"docs/net.corda.core.flows/-flow-recovery-exception/-flow-recovery-exception.html","searchKeys":["FlowRecoveryException","constructor(message: String, cause: Throwable? = null)","net.corda.core.flows.FlowRecoveryException.FlowRecoveryException"]},{"name":"constructor(message: String, cause: Throwable?)","description":"net.corda.core.flows.UnexpectedFlowEndException.UnexpectedFlowEndException","location":"docs/net.corda.core.flows/-unexpected-flow-end-exception/-unexpected-flow-end-exception.html","searchKeys":["UnexpectedFlowEndException","constructor(message: String, cause: Throwable?)","net.corda.core.flows.UnexpectedFlowEndException.UnexpectedFlowEndException"]},{"name":"constructor(message: String, cause: Throwable?)","description":"net.corda.core.node.services.CordaServiceCriticalFailureException.CordaServiceCriticalFailureException","location":"docs/net.corda.core.node.services/-corda-service-critical-failure-exception/-corda-service-critical-failure-exception.html","searchKeys":["CordaServiceCriticalFailureException","constructor(message: String, cause: Throwable?)","net.corda.core.node.services.CordaServiceCriticalFailureException.CordaServiceCriticalFailureException"]},{"name":"constructor(message: String, cause: Throwable?, originalErrorId: Long?)","description":"net.corda.core.flows.UnexpectedFlowEndException.UnexpectedFlowEndException","location":"docs/net.corda.core.flows/-unexpected-flow-end-exception/-unexpected-flow-end-exception.html","searchKeys":["UnexpectedFlowEndException","constructor(message: String, cause: Throwable?, originalErrorId: Long?)","net.corda.core.flows.UnexpectedFlowEndException.UnexpectedFlowEndException"]},{"name":"constructor(message: String, typeDescriptor: String)","description":"net.corda.core.serialization.internal.MissingSerializerException.MissingSerializerException","location":"docs/net.corda.core.serialization.internal/-missing-serializer-exception/-missing-serializer-exception.html","searchKeys":["MissingSerializerException","constructor(message: String, typeDescriptor: String)","net.corda.core.serialization.internal.MissingSerializerException.MissingSerializerException"]},{"name":"constructor(message: String, typeNames: List<String>)","description":"net.corda.core.serialization.internal.MissingSerializerException.MissingSerializerException","location":"docs/net.corda.core.serialization.internal/-missing-serializer-exception/-missing-serializer-exception.html","searchKeys":["MissingSerializerException","constructor(message: String, typeNames: List<String>)","net.corda.core.serialization.internal.MissingSerializerException.MissingSerializerException"]},{"name":"constructor(message: String? = null, cause: Throwable? = null)","description":"net.corda.core.flows.StateReplacementException.StateReplacementException","location":"docs/net.corda.core.flows/-state-replacement-exception/-state-replacement-exception.html","searchKeys":["StateReplacementException","constructor(message: String? = null, cause: Throwable? = null)","net.corda.core.flows.StateReplacementException.StateReplacementException"]},{"name":"constructor(message: String?)","description":"net.corda.core.CordaException.CordaException","location":"docs/net.corda.core/-corda-exception/-corda-exception.html","searchKeys":["CordaException","constructor(message: String?)","net.corda.core.CordaException.CordaException"]},{"name":"constructor(message: String?)","description":"net.corda.core.CordaRuntimeException.CordaRuntimeException","location":"docs/net.corda.core/-corda-runtime-exception/-corda-runtime-exception.html","searchKeys":["CordaRuntimeException","constructor(message: String?)","net.corda.core.CordaRuntimeException.CordaRuntimeException"]},{"name":"constructor(message: String?)","description":"net.corda.core.flows.FlowException.FlowException","location":"docs/net.corda.core.flows/-flow-exception/-flow-exception.html","searchKeys":["FlowException","constructor(message: String?)","net.corda.core.flows.FlowException.FlowException"]},{"name":"constructor(message: String?)","description":"net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException","location":"docs/net.corda.core.flows/-hospitalize-flow-exception/-hospitalize-flow-exception.html","searchKeys":["HospitalizeFlowException","constructor(message: String?)","net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException"]},{"name":"constructor(message: String?, cause: Throwable? = null)","description":"net.corda.client.rpc.UnrecoverableRPCException.UnrecoverableRPCException","location":"docs/net.corda.client.rpc/-unrecoverable-r-p-c-exception/-unrecoverable-r-p-c-exception.html","searchKeys":["UnrecoverableRPCException","constructor(message: String?, cause: Throwable? = null)","net.corda.client.rpc.UnrecoverableRPCException.UnrecoverableRPCException"]},{"name":"constructor(message: String?, cause: Throwable? = null)","description":"net.corda.core.node.services.StatesNotAvailableException.StatesNotAvailableException","location":"docs/net.corda.core.node.services/-states-not-available-exception/-states-not-available-exception.html","searchKeys":["StatesNotAvailableException","constructor(message: String?, cause: Throwable? = null)","net.corda.core.node.services.StatesNotAvailableException.StatesNotAvailableException"]},{"name":"constructor(message: String?, cause: Throwable?)","description":"net.corda.client.rpc.RPCException.RPCException","location":"docs/net.corda.client.rpc/-r-p-c-exception/-r-p-c-exception.html","searchKeys":["RPCException","constructor(message: String?, cause: Throwable?)","net.corda.client.rpc.RPCException.RPCException"]},{"name":"constructor(message: String?, cause: Throwable?)","description":"net.corda.core.CordaException.CordaException","location":"docs/net.corda.core/-corda-exception/-corda-exception.html","searchKeys":["CordaException","constructor(message: String?, cause: Throwable?)","net.corda.core.CordaException.CordaException"]},{"name":"constructor(message: String?, cause: Throwable?)","description":"net.corda.core.CordaRuntimeException.CordaRuntimeException","location":"docs/net.corda.core/-corda-runtime-exception/-corda-runtime-exception.html","searchKeys":["CordaRuntimeException","constructor(message: String?, cause: Throwable?)","net.corda.core.CordaRuntimeException.CordaRuntimeException"]},{"name":"constructor(message: String?, cause: Throwable?)","description":"net.corda.core.flows.FlowException.FlowException","location":"docs/net.corda.core.flows/-flow-exception/-flow-exception.html","searchKeys":["FlowException","constructor(message: String?, cause: Throwable?)","net.corda.core.flows.FlowException.FlowException"]},{"name":"constructor(message: String?, cause: Throwable?)","description":"net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException","location":"docs/net.corda.core.flows/-hospitalize-flow-exception/-hospitalize-flow-exception.html","searchKeys":["HospitalizeFlowException","constructor(message: String?, cause: Throwable?)","net.corda.core.flows.HospitalizeFlowException.HospitalizeFlowException"]},{"name":"constructor(message: String?, cause: Throwable?, originalErrorId: Long? = null)","description":"net.corda.core.flows.FlowException.FlowException","location":"docs/net.corda.core.flows/-flow-exception/-flow-exception.html","searchKeys":["FlowException","constructor(message: String?, cause: Throwable?, originalErrorId: Long? = null)","net.corda.core.flows.FlowException.FlowException"]},{"name":"constructor(method: Method, call: () -> Any?)","description":"net.corda.testing.node.internal.RandomRpcUser.Companion.Call.Call","location":"docs/net.corda.testing.node.internal/-random-rpc-user/-companion/-call/-call.html","searchKeys":["Call","constructor(method: Method, call: () -> Any?)","net.corda.testing.node.internal.RandomRpcUser.Companion.Call.Call"]},{"name":"constructor(methodName: String)","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnknownMethod.UnknownMethod","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-unknown-method/-unknown-method.html","searchKeys":["UnknownMethod","constructor(methodName: String)","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnknownMethod.UnknownMethod"]},{"name":"constructor(methodName: String, argIndex: Int)","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.ReflectionDataMissing.ReflectionDataMissing","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-reflection-data-missing/-reflection-data-missing.html","searchKeys":["ReflectionDataMissing","constructor(methodName: String, argIndex: Int)","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.ReflectionDataMissing.ReflectionDataMissing"]},{"name":"constructor(methodName: String, command: String)","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.TooManyParameters.TooManyParameters","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-too-many-parameters/-too-many-parameters.html","searchKeys":["TooManyParameters","constructor(methodName: String, command: String)","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.TooManyParameters.TooManyParameters"]},{"name":"constructor(methodName: String, paramName: String, command: String)","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.MissingParameter.MissingParameter","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-missing-parameter/-missing-parameter.html","searchKeys":["MissingParameter","constructor(methodName: String, paramName: String, command: String)","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.MissingParameter.MissingParameter"]},{"name":"constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>)","description":"net.corda.core.node.NetworkParameters.NetworkParameters","location":"docs/net.corda.core.node/-network-parameters/-network-parameters.html","searchKeys":["NetworkParameters","constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>)","net.corda.core.node.NetworkParameters.NetworkParameters"]},{"name":"constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>, eventHorizon: Duration)","description":"net.corda.core.node.NetworkParameters.NetworkParameters","location":"docs/net.corda.core.node/-network-parameters/-network-parameters.html","searchKeys":["NetworkParameters","constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>, eventHorizon: Duration)","net.corda.core.node.NetworkParameters.NetworkParameters"]},{"name":"constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>, eventHorizon: Duration, packageOwnership: Map<String, PublicKey>)","description":"net.corda.core.node.NetworkParameters.NetworkParameters","location":"docs/net.corda.core.node/-network-parameters/-network-parameters.html","searchKeys":["NetworkParameters","constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>, eventHorizon: Duration, packageOwnership: Map<String, PublicKey>)","net.corda.core.node.NetworkParameters.NetworkParameters"]},{"name":"constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>, eventHorizon: Duration, packageOwnership: Map<String, PublicKey>, recoveryMaximumBackupInterval: Duration? = null, confidentialIdentityMinimumBackupInterval: Duration? = null)","description":"net.corda.core.node.NetworkParameters.NetworkParameters","location":"docs/net.corda.core.node/-network-parameters/-network-parameters.html","searchKeys":["NetworkParameters","constructor(minimumPlatformVersion: Int, notaries: List<NotaryInfo>, maxMessageSize: Int, maxTransactionSize: Int, modifiedTime: Instant, epoch: Int, whitelistedContractImplementations: Map<String, List<AttachmentId>>, eventHorizon: Duration, packageOwnership: Map<String, PublicKey>, recoveryMaximumBackupInterval: Duration? = null, confidentialIdentityMinimumBackupInterval: Duration? = null)","net.corda.core.node.NetworkParameters.NetworkParameters"]},{"name":"constructor(missing: Set<PublicKey>, descriptions: List<String>, id: SecureHash)","description":"net.corda.core.transactions.SignedTransaction.SignaturesMissingException.SignaturesMissingException","location":"docs/net.corda.core.transactions/-signed-transaction/-signatures-missing-exception/-signatures-missing-exception.html","searchKeys":["SignaturesMissingException","constructor(missing: Set<PublicKey>, descriptions: List<String>, id: SecureHash)","net.corda.core.transactions.SignedTransaction.SignaturesMissingException.SignaturesMissingException"]},{"name":"constructor(mockNodeParameters: MockNodeParameters)","description":"net.corda.testing.node.internal.InternalMockNodeParameters.InternalMockNodeParameters","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/-internal-mock-node-parameters.html","searchKeys":["InternalMockNodeParameters","constructor(mockNodeParameters: MockNodeParameters)","net.corda.testing.node.internal.InternalMockNodeParameters.InternalMockNodeParameters"]},{"name":"constructor(msg: String)","description":"net.corda.client.rpc.PermissionException.PermissionException","location":"docs/net.corda.client.rpc/-permission-exception/-permission-exception.html","searchKeys":["PermissionException","constructor(msg: String)","net.corda.client.rpc.PermissionException.PermissionException"]},{"name":"constructor(msg: String)","description":"net.corda.client.rpc.RPCException.RPCException","location":"docs/net.corda.client.rpc/-r-p-c-exception/-r-p-c-exception.html","searchKeys":["RPCException","constructor(msg: String)","net.corda.client.rpc.RPCException.RPCException"]},{"name":"constructor(msg: String)","description":"net.corda.core.internal.InvalidJarSignersException.InvalidJarSignersException","location":"docs/net.corda.core.internal/-invalid-jar-signers-exception/-invalid-jar-signers-exception.html","searchKeys":["InvalidJarSignersException","constructor(msg: String)","net.corda.core.internal.InvalidJarSignersException.InvalidJarSignersException"]},{"name":"constructor(msg: String, e: Throwable)","description":"net.corda.core.cordapp.CordappConfigException.CordappConfigException","location":"docs/net.corda.core.cordapp/-cordapp-config-exception/-cordapp-config-exception.html","searchKeys":["CordappConfigException","constructor(msg: String, e: Throwable)","net.corda.core.cordapp.CordappConfigException.CordappConfigException"]},{"name":"constructor(name: CordaX500Name, owningKey: PublicKey)","description":"net.corda.core.identity.Party.Party","location":"docs/net.corda.core.identity/-party/-party.html","searchKeys":["Party","constructor(name: CordaX500Name, owningKey: PublicKey)","net.corda.core.identity.Party.Party"]},{"name":"constructor(name: CordaX500Name, validating: Boolean = true)","description":"net.corda.testing.node.MockNetworkNotarySpec.MockNetworkNotarySpec","location":"docs/net.corda.testing.node/-mock-network-notary-spec/-mock-network-notary-spec.html","searchKeys":["MockNetworkNotarySpec","constructor(name: CordaX500Name, validating: Boolean = true)","net.corda.testing.node.MockNetworkNotarySpec.MockNetworkNotarySpec"]},{"name":"constructor(name: CordaX500Name, validating: Boolean = true, className: String? = null)","description":"net.corda.testing.node.MockNetworkNotarySpec.MockNetworkNotarySpec","location":"docs/net.corda.testing.node/-mock-network-notary-spec/-mock-network-notary-spec.html","searchKeys":["MockNetworkNotarySpec","constructor(name: CordaX500Name, validating: Boolean = true, className: String? = null)","net.corda.testing.node.MockNetworkNotarySpec.MockNetworkNotarySpec"]},{"name":"constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null)","description":"net.corda.testing.node.NotarySpec.NotarySpec","location":"docs/net.corda.testing.node/-notary-spec/-notary-spec.html","searchKeys":["NotarySpec","constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null)","net.corda.testing.node.NotarySpec.NotarySpec"]},{"name":"constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null, maximumHeapSize: String = \"512m\", startInProcess: Boolean = true)","description":"net.corda.testing.node.NotarySpec.NotarySpec","location":"docs/net.corda.testing.node/-notary-spec/-notary-spec.html","searchKeys":["NotarySpec","constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null, maximumHeapSize: String = \"512m\", startInProcess: Boolean = true)","net.corda.testing.node.NotarySpec.NotarySpec"]},{"name":"constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null, maximumHeapSize: String)","description":"net.corda.testing.node.NotarySpec.NotarySpec","location":"docs/net.corda.testing.node/-notary-spec/-notary-spec.html","searchKeys":["NotarySpec","constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null, maximumHeapSize: String)","net.corda.testing.node.NotarySpec.NotarySpec"]},{"name":"constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null, startInProcess: Boolean = true)","description":"net.corda.testing.node.NotarySpec.NotarySpec","location":"docs/net.corda.testing.node/-notary-spec/-notary-spec.html","searchKeys":["NotarySpec","constructor(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null, startInProcess: Boolean = true)","net.corda.testing.node.NotarySpec.NotarySpec"]},{"name":"constructor(name: String)","description":"net.corda.core.internal.ThreadLocalToggleField.ThreadLocalToggleField","location":"docs/net.corda.core.internal/-thread-local-toggle-field/-thread-local-toggle-field.html","searchKeys":["ThreadLocalToggleField","constructor(name: String)","net.corda.core.internal.ThreadLocalToggleField.ThreadLocalToggleField"]},{"name":"constructor(name: String)","description":"net.corda.core.internal.ToggleField.ToggleField","location":"docs/net.corda.core.internal/-toggle-field/-toggle-field.html","searchKeys":["ToggleField","constructor(name: String)","net.corda.core.internal.ToggleField.ToggleField"]},{"name":"constructor(name: String)","description":"net.corda.finance.contracts.Tenor.Tenor","location":"docs/net.corda.finance.contracts/-tenor/-tenor.html","searchKeys":["Tenor","constructor(name: String)","net.corda.finance.contracts.Tenor.Tenor"]},{"name":"constructor(name: String)","description":"net.corda.finance.workflows.utils.UnknownCalendar.UnknownCalendar","location":"docs/net.corda.finance.workflows.utils/-unknown-calendar/-unknown-calendar.html","searchKeys":["UnknownCalendar","constructor(name: String)","net.corda.finance.workflows.utils.UnknownCalendar.UnknownCalendar"]},{"name":"constructor(name: String, attributes: Map<String, String>, telemetryId: UUID, flowLogic: FlowLogic<*>?)","description":"net.corda.core.internal.telemetry.StartSpanEvent.StartSpanEvent","location":"docs/net.corda.core.internal.telemetry/-start-span-event/-start-span-event.html","searchKeys":["StartSpanEvent","constructor(name: String, attributes: Map<String, String>, telemetryId: UUID, flowLogic: FlowLogic<*>?)","net.corda.core.internal.telemetry.StartSpanEvent.StartSpanEvent"]},{"name":"constructor(name: String, attributes: Map<String, String>, telemetryId: UUID, flowLogic: FlowLogic<*>?, telemetryDataItem: TelemetryDataItem?)","description":"net.corda.core.internal.telemetry.StartSpanForFlowEvent.StartSpanForFlowEvent","location":"docs/net.corda.core.internal.telemetry/-start-span-for-flow-event/-start-span-for-flow-event.html","searchKeys":["StartSpanForFlowEvent","constructor(name: String, attributes: Map<String, String>, telemetryId: UUID, flowLogic: FlowLogic<*>?, telemetryDataItem: TelemetryDataItem?)","net.corda.core.internal.telemetry.StartSpanForFlowEvent.StartSpanForFlowEvent"]},{"name":"constructor(name: String, declaringClass: Class<*>)","description":"net.corda.core.node.services.vault.Column.Column","location":"docs/net.corda.core.node.services.vault/-column/-column.html","searchKeys":["Column","constructor(name: String, declaringClass: Class<*>)","net.corda.core.node.services.vault.Column.Column"]},{"name":"constructor(name: String, forDay: LocalDate, ofTenor: Tenor)","description":"net.corda.finance.contracts.FixOf.FixOf","location":"docs/net.corda.finance.contracts/-fix-of/-fix-of.html","searchKeys":["FixOf","constructor(name: String, forDay: LocalDate, ofTenor: Tenor)","net.corda.finance.contracts.FixOf.FixOf"]},{"name":"constructor(name: String, log: <Error class: unknown class> = staticLog, isAGlobalThreadBeingCreated: (Array<StackTraceElement>) -> Boolean)","description":"net.corda.core.internal.InheritableThreadLocalToggleField.InheritableThreadLocalToggleField","location":"docs/net.corda.core.internal/-inheritable-thread-local-toggle-field/-inheritable-thread-local-toggle-field.html","searchKeys":["InheritableThreadLocalToggleField","constructor(name: String, log: <Error class: unknown class> = staticLog, isAGlobalThreadBeingCreated: (Array<StackTraceElement>) -> Boolean)","net.corda.core.internal.InheritableThreadLocalToggleField.InheritableThreadLocalToggleField"]},{"name":"constructor(name: String, once: Boolean = false)","description":"net.corda.core.internal.SimpleToggleField.SimpleToggleField","location":"docs/net.corda.core.internal/-simple-toggle-field/-simple-toggle-field.html","searchKeys":["SimpleToggleField","constructor(name: String, once: Boolean = false)","net.corda.core.internal.SimpleToggleField.SimpleToggleField"]},{"name":"constructor(networkSendManuallyPumped: Boolean = false, threadPerNode: Boolean = false, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random(), notarySpecs: List<MockNetworkNotarySpec> = listOf(MockNetworkNotarySpec(DUMMY_NOTARY_NAME)), networkParameters: NetworkParameters = testNetworkParameters(), cordappsForAllNodes: Collection<TestCordapp> = emptyList())","description":"net.corda.testing.node.MockNetworkParameters.MockNetworkParameters","location":"docs/net.corda.testing.node/-mock-network-parameters/-mock-network-parameters.html","searchKeys":["MockNetworkParameters","constructor(networkSendManuallyPumped: Boolean = false, threadPerNode: Boolean = false, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random(), notarySpecs: List<MockNetworkNotarySpec> = listOf(MockNetworkNotarySpec(DUMMY_NOTARY_NAME)), networkParameters: NetworkParameters = testNetworkParameters(), cordappsForAllNodes: Collection<TestCordapp> = emptyList())","net.corda.testing.node.MockNetworkParameters.MockNetworkParameters"]},{"name":"constructor(networkSendManuallyPumped: Boolean, threadPerNode: Boolean, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec>, networkParameters: NetworkParameters)","description":"net.corda.testing.node.MockNetworkParameters.MockNetworkParameters","location":"docs/net.corda.testing.node/-mock-network-parameters/-mock-network-parameters.html","searchKeys":["MockNetworkParameters","constructor(networkSendManuallyPumped: Boolean, threadPerNode: Boolean, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec>, networkParameters: NetworkParameters)","net.corda.testing.node.MockNetworkParameters.MockNetworkParameters"]},{"name":"constructor(node: NodeInfo)","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Added.Added","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-added/-added.html","searchKeys":["Added","constructor(node: NodeInfo)","net.corda.core.node.services.NetworkMapCache.MapChange.Added.Added"]},{"name":"constructor(node: NodeInfo)","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Removed.Removed","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-removed/-removed.html","searchKeys":["Removed","constructor(node: NodeInfo)","net.corda.core.node.services.NetworkMapCache.MapChange.Removed.Removed"]},{"name":"constructor(node: NodeInfo, previousNode: NodeInfo)","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Modified.Modified","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-modified/-modified.html","searchKeys":["Modified","constructor(node: NodeInfo, previousNode: NodeInfo)","net.corda.core.node.services.NetworkMapCache.MapChange.Modified.Modified"]},{"name":"constructor(node: PublicKey, weight: Int)","description":"net.corda.core.crypto.CompositeKey.NodeAndWeight.NodeAndWeight","location":"docs/net.corda.core.crypto/-composite-key/-node-and-weight/-node-and-weight.html","searchKeys":["NodeAndWeight","constructor(node: PublicKey, weight: Int)","net.corda.core.crypto.CompositeKey.NodeAndWeight.NodeAndWeight"]},{"name":"constructor(nodeHostAndPorts: List<NetworkHostAndPort>, username: String, password: String, rpcConfiguration: CordaRPCClientConfiguration, gracefulReconnect: GracefulReconnect = GracefulReconnect(), sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, observersPool: ExecutorService)","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingCordaRPCOps","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-corda-r-p-c-ops.html","searchKeys":["ReconnectingCordaRPCOps","constructor(nodeHostAndPorts: List<NetworkHostAndPort>, username: String, password: String, rpcConfiguration: CordaRPCClientConfiguration, gracefulReconnect: GracefulReconnect = GracefulReconnect(), sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader? = null, observersPool: ExecutorService)","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingCordaRPCOps"]},{"name":"constructor(nodeHostAndPorts: List<NetworkHostAndPort>, username: String, password: String, rpcConfiguration: CordaRPCClientConfiguration, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader?, gracefulReconnect: GracefulReconnect = GracefulReconnect(), observersPool: ExecutorService)","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.ReconnectingRPCConnection","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-reconnecting-r-p-c-connection.html","searchKeys":["ReconnectingRPCConnection","constructor(nodeHostAndPorts: List<NetworkHostAndPort>, username: String, password: String, rpcConfiguration: CordaRPCClientConfiguration, sslConfiguration: ClientRpcSslOptions? = null, classLoader: ClassLoader?, gracefulReconnect: GracefulReconnect = GracefulReconnect(), observersPool: ExecutorService)","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.ReconnectingRPCConnection"]},{"name":"constructor(nodeInfo: NodeInfo, rpc: CordaRPCOps, configuration: <Error class: unknown class>, webAddress: NetworkHostAndPort, useHTTPS: Boolean, debugPort: Int?, process: Process, onStopCallback: () -> Unit)","description":"net.corda.testing.driver.internal.OutOfProcessImpl.OutOfProcessImpl","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/-out-of-process-impl.html","searchKeys":["OutOfProcessImpl","constructor(nodeInfo: NodeInfo, rpc: CordaRPCOps, configuration: <Error class: unknown class>, webAddress: NetworkHostAndPort, useHTTPS: Boolean, debugPort: Int?, process: Process, onStopCallback: () -> Unit)","net.corda.testing.driver.internal.OutOfProcessImpl.OutOfProcessImpl"]},{"name":"constructor(nodeInfo: NodeInfo, rpc: CordaRPCOps, configuration: <Error class: unknown class>, webAddress: NetworkHostAndPort, useHTTPS: Boolean, nodeThread: Thread, onStopCallback: () -> Unit, node: <Error class: unknown class>)","description":"net.corda.testing.driver.internal.InProcessImpl.InProcessImpl","location":"docs/net.corda.testing.driver.internal/-in-process-impl/-in-process-impl.html","searchKeys":["InProcessImpl","constructor(nodeInfo: NodeInfo, rpc: CordaRPCOps, configuration: <Error class: unknown class>, webAddress: NetworkHostAndPort, useHTTPS: Boolean, nodeThread: Thread, onStopCallback: () -> Unit, node: <Error class: unknown class>)","net.corda.testing.driver.internal.InProcessImpl.InProcessImpl"]},{"name":"constructor(notary: Party)","description":"net.corda.core.transactions.TransactionBuilder.TransactionBuilder","location":"docs/net.corda.core.transactions/-transaction-builder/-transaction-builder.html","searchKeys":["TransactionBuilder","constructor(notary: Party)","net.corda.core.transactions.TransactionBuilder.TransactionBuilder"]},{"name":"constructor(notary: Party, dealBeingOffered: DealState)","description":"net.corda.finance.flows.TwoPartyDealFlow.AutoOffer.AutoOffer","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-auto-offer/-auto-offer.html","searchKeys":["AutoOffer","constructor(notary: Party, dealBeingOffered: DealState)","net.corda.finance.flows.TwoPartyDealFlow.AutoOffer.AutoOffer"]},{"name":"constructor(notary: Party? = null, lockId: UUID = defaultLockId(), inputs: MutableList<StateRef> = arrayListOf(), attachments: MutableList<AttachmentId> = arrayListOf(), outputs: MutableList<TransactionState<ContractState>> = arrayListOf(), commands: MutableList<Command<*>> = arrayListOf(), window: TimeWindow? = null, privacySalt: PrivacySalt = PrivacySalt())","description":"net.corda.core.transactions.TransactionBuilder.TransactionBuilder","location":"docs/net.corda.core.transactions/-transaction-builder/-transaction-builder.html","searchKeys":["TransactionBuilder","constructor(notary: Party? = null, lockId: UUID = defaultLockId(), inputs: MutableList<StateRef> = arrayListOf(), attachments: MutableList<AttachmentId> = arrayListOf(), outputs: MutableList<TransactionState<ContractState>> = arrayListOf(), commands: MutableList<Command<*>> = arrayListOf(), window: TimeWindow? = null, privacySalt: PrivacySalt = PrivacySalt())","net.corda.core.transactions.TransactionBuilder.TransactionBuilder"]},{"name":"constructor(notary: Party? = null, lockId: UUID = defaultLockId(), inputs: MutableList<StateRef> = arrayListOf(), attachments: MutableList<AttachmentId> = arrayListOf(), outputs: MutableList<TransactionState<ContractState>> = arrayListOf(), commands: MutableList<Command<*>> = arrayListOf(), window: TimeWindow? = null, privacySalt: PrivacySalt = PrivacySalt(), references: MutableList<StateRef> = arrayListOf(), serviceHub: ServiceHub? = (Strand.currentStrand() as? FlowStateMachine<*>)?.serviceHub)","description":"net.corda.core.transactions.TransactionBuilder.TransactionBuilder","location":"docs/net.corda.core.transactions/-transaction-builder/-transaction-builder.html","searchKeys":["TransactionBuilder","constructor(notary: Party? = null, lockId: UUID = defaultLockId(), inputs: MutableList<StateRef> = arrayListOf(), attachments: MutableList<AttachmentId> = arrayListOf(), outputs: MutableList<TransactionState<ContractState>> = arrayListOf(), commands: MutableList<Command<*>> = arrayListOf(), window: TimeWindow? = null, privacySalt: PrivacySalt = PrivacySalt(), references: MutableList<StateRef> = arrayListOf(), serviceHub: ServiceHub? = (Strand.currentStrand() as? FlowStateMachine<*>)?.serviceHub)","net.corda.core.transactions.TransactionBuilder.TransactionBuilder"]},{"name":"constructor(notaryInfos: List<NotaryInfo>)","description":"net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap.LocalNetworkMap","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-local-network-map/-local-network-map.html","searchKeys":["LocalNetworkMap","constructor(notaryInfos: List<NotaryInfo>)","net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap.LocalNetworkMap"]},{"name":"constructor(obj: T, context: SerializationContext)","description":"net.corda.core.serialization.ObjectWithCompatibleContext.ObjectWithCompatibleContext","location":"docs/net.corda.core.serialization/-object-with-compatible-context/-object-with-compatible-context.html","searchKeys":["ObjectWithCompatibleContext","constructor(obj: T, context: SerializationContext)","net.corda.core.serialization.ObjectWithCompatibleContext.ObjectWithCompatibleContext"]},{"name":"constructor(of: FixOf, value: BigDecimal)","description":"net.corda.finance.contracts.Fix.Fix","location":"docs/net.corda.finance.contracts/-fix/-fix.html","searchKeys":["Fix","constructor(of: FixOf, value: BigDecimal)","net.corda.finance.contracts.Fix.Fix"]},{"name":"constructor(oldParticipants: Collection<Party>, sessions: Collection<FlowSession>, newApi: Boolean, statesToRecord: StatesToRecord, observerSessions: Collection<FlowSession>)","description":"net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.ExtraConstructorArgs","location":"docs/net.corda.core.flows/-finality-flow/-extra-constructor-args/-extra-constructor-args.html","searchKeys":["ExtraConstructorArgs","constructor(oldParticipants: Collection<Party>, sessions: Collection<FlowSession>, newApi: Boolean, statesToRecord: StatesToRecord, observerSessions: Collection<FlowSession>)","net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.ExtraConstructorArgs"]},{"name":"constructor(onDisconnect: () -> Unit = {}, onReconnect: () -> Unit = {}, maxAttempts: Int = 5)","description":"net.corda.client.rpc.GracefulReconnect.GracefulReconnect","location":"docs/net.corda.client.rpc/-graceful-reconnect/-graceful-reconnect.html","searchKeys":["GracefulReconnect","constructor(onDisconnect: () -> Unit = {}, onReconnect: () -> Unit = {}, maxAttempts: Int = 5)","net.corda.client.rpc.GracefulReconnect.GracefulReconnect"]},{"name":"constructor(onDisconnect: Runnable, onReconnect: Runnable, maxAttempts: Int = 5)","description":"net.corda.client.rpc.GracefulReconnect.GracefulReconnect","location":"docs/net.corda.client.rpc/-graceful-reconnect/-graceful-reconnect.html","searchKeys":["GracefulReconnect","constructor(onDisconnect: Runnable, onReconnect: Runnable, maxAttempts: Int = 5)","net.corda.client.rpc.GracefulReconnect.GracefulReconnect"]},{"name":"constructor(opaqueData: ByteArray, receiverStatesToRecord: StatesToRecord)","description":"net.corda.core.flows.DistributionList.ReceiverDistributionList.ReceiverDistributionList","location":"docs/net.corda.core.flows/-distribution-list/-receiver-distribution-list/-receiver-distribution-list.html","searchKeys":["ReceiverDistributionList","constructor(opaqueData: ByteArray, receiverStatesToRecord: StatesToRecord)","net.corda.core.flows.DistributionList.ReceiverDistributionList.ReceiverDistributionList"]},{"name":"constructor(operation: FlowAsyncOperation<T>)","description":"net.corda.core.internal.FlowIORequest.ExecuteAsyncOperation.ExecuteAsyncOperation","location":"docs/net.corda.core.internal/-flow-i-o-request/-execute-async-operation/-execute-async-operation.html","searchKeys":["ExecuteAsyncOperation","constructor(operation: FlowAsyncOperation<T>)","net.corda.core.internal.FlowIORequest.ExecuteAsyncOperation.ExecuteAsyncOperation"]},{"name":"constructor(operator: BinaryComparisonOperator, rightLiteral: C)","description":"net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison.BinaryComparison","location":"docs/net.corda.core.node.services.vault/-column-predicate/-binary-comparison/-binary-comparison.html","searchKeys":["BinaryComparison","constructor(operator: BinaryComparisonOperator, rightLiteral: C)","net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison.BinaryComparison"]},{"name":"constructor(operator: CollectionOperator, rightLiteral: Collection<C>)","description":"net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression.CollectionExpression","location":"docs/net.corda.core.node.services.vault/-column-predicate/-collection-expression/-collection-expression.html","searchKeys":["CollectionExpression","constructor(operator: CollectionOperator, rightLiteral: Collection<C>)","net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression.CollectionExpression"]},{"name":"constructor(operator: EqualityComparisonOperator, rightLiteral: C)","description":"net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison.EqualityComparison","location":"docs/net.corda.core.node.services.vault/-column-predicate/-equality-comparison/-equality-comparison.html","searchKeys":["EqualityComparison","constructor(operator: EqualityComparisonOperator, rightLiteral: C)","net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison.EqualityComparison"]},{"name":"constructor(operator: LikenessOperator, rightLiteral: String)","description":"net.corda.core.node.services.vault.ColumnPredicate.Likeness.Likeness","location":"docs/net.corda.core.node.services.vault/-column-predicate/-likeness/-likeness.html","searchKeys":["Likeness","constructor(operator: LikenessOperator, rightLiteral: String)","net.corda.core.node.services.vault.ColumnPredicate.Likeness.Likeness"]},{"name":"constructor(operator: NullOperator)","description":"net.corda.core.node.services.vault.ColumnPredicate.NullExpression.NullExpression","location":"docs/net.corda.core.node.services.vault/-column-predicate/-null-expression/-null-expression.html","searchKeys":["NullExpression","constructor(operator: NullOperator)","net.corda.core.node.services.vault.ColumnPredicate.NullExpression.NullExpression"]},{"name":"constructor(organisation: String, locality: String, country: String)","description":"net.corda.core.identity.CordaX500Name.CordaX500Name","location":"docs/net.corda.core.identity/-corda-x500-name/-corda-x500-name.html","searchKeys":["CordaX500Name","constructor(organisation: String, locality: String, country: String)","net.corda.core.identity.CordaX500Name.CordaX500Name"]},{"name":"constructor(origin: InvocationOrigin, trace: Trace, actor: Actor?, externalTrace: Trace? = null, impersonatedActor: Actor? = null)","description":"net.corda.core.context.InvocationContext.InvocationContext","location":"docs/net.corda.core.context/-invocation-context/-invocation-context.html","searchKeys":["InvocationContext","constructor(origin: InvocationOrigin, trace: Trace, actor: Actor?, externalTrace: Trace? = null, impersonatedActor: Actor? = null)","net.corda.core.context.InvocationContext.InvocationContext"]},{"name":"constructor(origin: InvocationOrigin, trace: Trace, actor: Actor?, externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?>? = emptyList(), clientId: String? = null)","description":"net.corda.core.context.InvocationContext.InvocationContext","location":"docs/net.corda.core.context/-invocation-context/-invocation-context.html","searchKeys":["InvocationContext","constructor(origin: InvocationOrigin, trace: Trace, actor: Actor?, externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?>? = emptyList(), clientId: String? = null)","net.corda.core.context.InvocationContext.InvocationContext"]},{"name":"constructor(origin: InvocationOrigin, trace: Trace, actor: Actor?, externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?>? = emptyList(), clientId: String? = null, serializedTelemetry: SerializedTelemetry? = null)","description":"net.corda.core.context.InvocationContext.InvocationContext","location":"docs/net.corda.core.context/-invocation-context/-invocation-context.html","searchKeys":["InvocationContext","constructor(origin: InvocationOrigin, trace: Trace, actor: Actor?, externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?>? = emptyList(), clientId: String? = null, serializedTelemetry: SerializedTelemetry? = null)","net.corda.core.context.InvocationContext.InvocationContext"]},{"name":"constructor(originalExceptionClassName: String?, _message: String?, _cause: Throwable?)","description":"net.corda.core.CordaRuntimeException.CordaRuntimeException","location":"docs/net.corda.core/-corda-runtime-exception/-corda-runtime-exception.html","searchKeys":["CordaRuntimeException","constructor(originalExceptionClassName: String?, _message: String?, _cause: Throwable?)","net.corda.core.CordaRuntimeException.CordaRuntimeException"]},{"name":"constructor(originalList: List<T>, transform: (T, Int) -> U)","description":"net.corda.core.internal.LazyMappedList.LazyMappedList","location":"docs/net.corda.core.internal/-lazy-mapped-list/-lazy-mapped-list.html","searchKeys":["LazyMappedList","constructor(originalList: List<T>, transform: (T, Int) -> U)","net.corda.core.internal.LazyMappedList.LazyMappedList"]},{"name":"constructor(originalState: StateAndRef<OldState>, newContractClass: Class<out UpgradedContract<OldState, NewState>>)","description":"net.corda.core.flows.ContractUpgradeFlow.Initiate.Initiate","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-initiate/-initiate.html","searchKeys":["Initiate","constructor(originalState: StateAndRef<OldState>, newContractClass: Class<out UpgradedContract<OldState, NewState>>)","net.corda.core.flows.ContractUpgradeFlow.Initiate.Initiate"]},{"name":"constructor(originalState: StateAndRef<S>, modification: M, progressTracker: ProgressTracker = Instigator.tracker())","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Instigator","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/-instigator.html","searchKeys":["Instigator","constructor(originalState: StateAndRef<S>, modification: M, progressTracker: ProgressTracker = Instigator.tracker())","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Instigator"]},{"name":"constructor(originalState: StateAndRef<T>, newNotary: Party, progressTracker: ProgressTracker = AbstractStateReplacementFlow.Instigator.tracker())","description":"net.corda.core.flows.NotaryChangeFlow.NotaryChangeFlow","location":"docs/net.corda.core.flows/-notary-change-flow/-notary-change-flow.html","searchKeys":["NotaryChangeFlow","constructor(originalState: StateAndRef<T>, newNotary: Party, progressTracker: ProgressTracker = AbstractStateReplacementFlow.Instigator.tracker())","net.corda.core.flows.NotaryChangeFlow.NotaryChangeFlow"]},{"name":"constructor(otherSessions: Set<FlowSession>, payload: Any, txnMetadata: TransactionMetadata? = null)","description":"net.corda.core.flows.DataVendingFlow.DataVendingFlow","location":"docs/net.corda.core.flows/-data-vending-flow/-data-vending-flow.html","searchKeys":["DataVendingFlow","constructor(otherSessions: Set<FlowSession>, payload: Any, txnMetadata: TransactionMetadata? = null)","net.corda.core.flows.DataVendingFlow.DataVendingFlow"]},{"name":"constructor(otherSide: FlowSession)","description":"net.corda.finance.flows.CashExitResponderFlow.CashExitResponderFlow","location":"docs/net.corda.finance.flows/-cash-exit-responder-flow/-cash-exit-responder-flow.html","searchKeys":["CashExitResponderFlow","constructor(otherSide: FlowSession)","net.corda.finance.flows.CashExitResponderFlow.CashExitResponderFlow"]},{"name":"constructor(otherSide: FlowSession)","description":"net.corda.finance.flows.CashPaymentReceiverFlow.CashPaymentReceiverFlow","location":"docs/net.corda.finance.flows/-cash-payment-receiver-flow/-cash-payment-receiver-flow.html","searchKeys":["CashPaymentReceiverFlow","constructor(otherSide: FlowSession)","net.corda.finance.flows.CashPaymentReceiverFlow.CashPaymentReceiverFlow"]},{"name":"constructor(otherSide: FlowSession, stx: SignedTransaction)","description":"net.corda.core.flows.SendTransactionFlow.SendTransactionFlow","location":"docs/net.corda.core.flows/-send-transaction-flow/-send-transaction-flow.html","searchKeys":["SendTransactionFlow","constructor(otherSide: FlowSession, stx: SignedTransaction)","net.corda.core.flows.SendTransactionFlow.SendTransactionFlow"]},{"name":"constructor(otherSideSession: FlowSession)","description":"net.corda.core.flows.ReceiveStateAndRefFlow.ReceiveStateAndRefFlow","location":"docs/net.corda.core.flows/-receive-state-and-ref-flow/-receive-state-and-ref-flow.html","searchKeys":["ReceiveStateAndRefFlow","constructor(otherSideSession: FlowSession)","net.corda.core.flows.ReceiveStateAndRefFlow.ReceiveStateAndRefFlow"]},{"name":"constructor(otherSideSession: FlowSession, assetToSell: StateAndRef<OwnableState>, price: Amount<Currency>, myParty: PartyAndCertificate, progressTracker: ProgressTracker = Seller.tracker())","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.Seller","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/-seller.html","searchKeys":["Seller","constructor(otherSideSession: FlowSession, assetToSell: StateAndRef<OwnableState>, price: Amount<Currency>, myParty: PartyAndCertificate, progressTracker: ProgressTracker = Seller.tracker())","net.corda.finance.flows.TwoPartyTradeFlow.Seller.Seller"]},{"name":"constructor(otherSideSession: FlowSession, checkSufficientSignatures: Boolean = true, statesToRecord: StatesToRecord = StatesToRecord.NONE)","description":"net.corda.core.flows.ReceiveTransactionFlow.ReceiveTransactionFlow","location":"docs/net.corda.core.flows/-receive-transaction-flow/-receive-transaction-flow.html","searchKeys":["ReceiveTransactionFlow","constructor(otherSideSession: FlowSession, checkSufficientSignatures: Boolean = true, statesToRecord: StatesToRecord = StatesToRecord.NONE)","net.corda.core.flows.ReceiveTransactionFlow.ReceiveTransactionFlow"]},{"name":"constructor(otherSideSession: FlowSession, checkSufficientSignatures: Boolean = true, statesToRecord: StatesToRecord = StatesToRecord.NONE, handlePropagatedNotaryError: Boolean? = null)","description":"net.corda.core.flows.ReceiveTransactionFlow.ReceiveTransactionFlow","location":"docs/net.corda.core.flows/-receive-transaction-flow/-receive-transaction-flow.html","searchKeys":["ReceiveTransactionFlow","constructor(otherSideSession: FlowSession, checkSufficientSignatures: Boolean = true, statesToRecord: StatesToRecord = StatesToRecord.NONE, handlePropagatedNotaryError: Boolean? = null)","net.corda.core.flows.ReceiveTransactionFlow.ReceiveTransactionFlow"]},{"name":"constructor(otherSideSession: FlowSession, expectedTxId: SecureHash? = null, statesToRecord: StatesToRecord = ONLY_RELEVANT)","description":"net.corda.core.flows.ReceiveFinalityFlow.ReceiveFinalityFlow","location":"docs/net.corda.core.flows/-receive-finality-flow/-receive-finality-flow.html","searchKeys":["ReceiveFinalityFlow","constructor(otherSideSession: FlowSession, expectedTxId: SecureHash? = null, statesToRecord: StatesToRecord = ONLY_RELEVANT)","net.corda.core.flows.ReceiveFinalityFlow.ReceiveFinalityFlow"]},{"name":"constructor(otherSideSession: FlowSession, expectedTxId: SecureHash? = null, statesToRecord: StatesToRecord = ONLY_RELEVANT, handlePropagatedNotaryError: Boolean? = null)","description":"net.corda.core.flows.ReceiveFinalityFlow.ReceiveFinalityFlow","location":"docs/net.corda.core.flows/-receive-finality-flow/-receive-finality-flow.html","searchKeys":["ReceiveFinalityFlow","constructor(otherSideSession: FlowSession, expectedTxId: SecureHash? = null, statesToRecord: StatesToRecord = ONLY_RELEVANT, handlePropagatedNotaryError: Boolean? = null)","net.corda.core.flows.ReceiveFinalityFlow.ReceiveFinalityFlow"]},{"name":"constructor(otherSideSession: FlowSession, notary: Party, acceptablePrice: Amount<Currency>, typeToBuy: Class<out OwnableState>)","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.Buyer","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-buyer.html","searchKeys":["Buyer","constructor(otherSideSession: FlowSession, notary: Party, acceptablePrice: Amount<Currency>, typeToBuy: Class<out OwnableState>)","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.Buyer"]},{"name":"constructor(otherSideSession: FlowSession, payload: Any)","description":"net.corda.core.flows.DataVendingFlow.DataVendingFlow","location":"docs/net.corda.core.flows/-data-vending-flow/-data-vending-flow.html","searchKeys":["DataVendingFlow","constructor(otherSideSession: FlowSession, payload: Any)","net.corda.core.flows.DataVendingFlow.DataVendingFlow"]},{"name":"constructor(otherSideSession: FlowSession, payload: Any, txnMetadata: TransactionMetadata? = null)","description":"net.corda.core.flows.DataVendingFlow.DataVendingFlow","location":"docs/net.corda.core.flows/-data-vending-flow/-data-vending-flow.html","searchKeys":["DataVendingFlow","constructor(otherSideSession: FlowSession, payload: Any, txnMetadata: TransactionMetadata? = null)","net.corda.core.flows.DataVendingFlow.DataVendingFlow"]},{"name":"constructor(otherSideSession: FlowSession, payload: TwoPartyDealFlow.AutoOffer, progressTracker: ProgressTracker = Primary.tracker())","description":"net.corda.finance.flows.TwoPartyDealFlow.Instigator.Instigator","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-instigator/-instigator.html","searchKeys":["Instigator","constructor(otherSideSession: FlowSession, payload: TwoPartyDealFlow.AutoOffer, progressTracker: ProgressTracker = Primary.tracker())","net.corda.finance.flows.TwoPartyDealFlow.Instigator.Instigator"]},{"name":"constructor(otherSideSession: FlowSession, progressTracker: ProgressTracker = Secondary.tracker())","description":"net.corda.finance.flows.TwoPartyDealFlow.Acceptor.Acceptor","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-acceptor/-acceptor.html","searchKeys":["Acceptor","constructor(otherSideSession: FlowSession, progressTracker: ProgressTracker = Secondary.tracker())","net.corda.finance.flows.TwoPartyDealFlow.Acceptor.Acceptor"]},{"name":"constructor(otherSideSession: FlowSession, progressTracker: ProgressTracker = tracker())","description":"net.corda.core.flows.SignTransactionFlow.SignTransactionFlow","location":"docs/net.corda.core.flows/-sign-transaction-flow/-sign-transaction-flow.html","searchKeys":["SignTransactionFlow","constructor(otherSideSession: FlowSession, progressTracker: ProgressTracker = tracker())","net.corda.core.flows.SignTransactionFlow.SignTransactionFlow"]},{"name":"constructor(otherSideSession: FlowSession, service: SinglePartyNotaryService, etaThreshold: Duration)","description":"net.corda.core.internal.notary.NotaryServiceFlow.NotaryServiceFlow","location":"docs/net.corda.core.internal.notary/-notary-service-flow/-notary-service-flow.html","searchKeys":["NotaryServiceFlow","constructor(otherSideSession: FlowSession, service: SinglePartyNotaryService, etaThreshold: Duration)","net.corda.core.internal.notary.NotaryServiceFlow.NotaryServiceFlow"]},{"name":"constructor(otherSideSession: FlowSession, stateAndRefs: List<StateAndRef<*>>)","description":"net.corda.core.flows.SendStateAndRefFlow.SendStateAndRefFlow","location":"docs/net.corda.core.flows/-send-state-and-ref-flow/-send-state-and-ref-flow.html","searchKeys":["SendStateAndRefFlow","constructor(otherSideSession: FlowSession, stateAndRefs: List<StateAndRef<*>>)","net.corda.core.flows.SendStateAndRefFlow.SendStateAndRefFlow"]},{"name":"constructor(owner: AbstractParty?, pennies: Long, currency: String, issuerPartyHash: String, issuerRef: ByteArray)","description":"net.corda.finance.schemas.CashSchemaV1.PersistentCashState.PersistentCashState","location":"docs/net.corda.finance.schemas/-cash-schema-v1/-persistent-cash-state/-persistent-cash-state.html","searchKeys":["PersistentCashState","constructor(owner: AbstractParty?, pennies: Long, currency: String, issuerPartyHash: String, issuerRef: ByteArray)","net.corda.finance.schemas.CashSchemaV1.PersistentCashState.PersistentCashState"]},{"name":"constructor(ownerHash: String, pennies: Long, currency: String, issuerPartyHash: String, issuerRef: ByteArray)","description":"net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.PersistentCashState","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/-persistent-cash-state/-persistent-cash-state.html","searchKeys":["PersistentCashState","constructor(ownerHash: String, pennies: Long, currency: String, issuerPartyHash: String, issuerRef: ByteArray)","net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.PersistentCashState"]},{"name":"constructor(owningKey: PublicKey)","description":"net.corda.core.identity.AbstractParty.AbstractParty","location":"docs/net.corda.core.identity/-abstract-party/-abstract-party.html","searchKeys":["AbstractParty","constructor(owningKey: PublicKey)","net.corda.core.identity.AbstractParty.AbstractParty"]},{"name":"constructor(owningKey: PublicKey)","description":"net.corda.core.identity.AnonymousParty.AnonymousParty","location":"docs/net.corda.core.identity/-anonymous-party/-anonymous-party.html","searchKeys":["AnonymousParty","constructor(owningKey: PublicKey)","net.corda.core.identity.AnonymousParty.AnonymousParty"]},{"name":"constructor(packages: Set<String> = emptySet(), name: String = \"custom-cordapp\", versionId: Int = 1, targetPlatformVersion: Int = PLATFORM_VERSION, classes: Set<Class<*>> = emptySet(), fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>> = emptyList(), signingInfo: CustomCordapp.SigningInfo? = null, config: Map<String, Any> = emptyMap())","description":"net.corda.testing.node.internal.CustomCordapp.CustomCordapp","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-custom-cordapp.html","searchKeys":["CustomCordapp","constructor(packages: Set<String> = emptySet(), name: String = \"custom-cordapp\", versionId: Int = 1, targetPlatformVersion: Int = PLATFORM_VERSION, classes: Set<Class<*>> = emptySet(), fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>> = emptyList(), signingInfo: CustomCordapp.SigningInfo? = null, config: Map<String, Any> = emptyMap())","net.corda.testing.node.internal.CustomCordapp.CustomCordapp"]},{"name":"constructor(pageNumber: Int = -1, pageSize: Int = DEFAULT_PAGE_SIZE)","description":"net.corda.core.node.services.vault.PageSpecification.PageSpecification","location":"docs/net.corda.core.node.services.vault/-page-specification/-page-specification.html","searchKeys":["PageSpecification","constructor(pageNumber: Int = -1, pageSize: Int = DEFAULT_PAGE_SIZE)","net.corda.core.node.services.vault.PageSpecification.PageSpecification"]},{"name":"constructor(parameters: LedgerRecoveryParameters)","description":"net.corda.core.flows.LedgerRecoveryFlow.ExtraConstructorArgs.ExtraConstructorArgs","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-extra-constructor-args/-extra-constructor-args.html","searchKeys":["ExtraConstructorArgs","constructor(parameters: LedgerRecoveryParameters)","net.corda.core.flows.LedgerRecoveryFlow.ExtraConstructorArgs.ExtraConstructorArgs"]},{"name":"constructor(parameters: LedgerRecoveryParameters, progressTracker: ProgressTracker = ProgressTracker())","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(parameters: LedgerRecoveryParameters, progressTracker: ProgressTracker = ProgressTracker())","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(parameters: MockNetworkParameters)","description":"net.corda.testing.node.MockNetwork.MockNetwork","location":"docs/net.corda.testing.node/-mock-network/-mock-network.html","searchKeys":["MockNetwork","constructor(parameters: MockNetworkParameters)","net.corda.testing.node.MockNetwork.MockNetwork"]},{"name":"constructor(partiallySignedTx: SignedTransaction, session: FlowSession, signingKeys: List<PublicKey>)","description":"net.corda.core.flows.CollectSignatureFlow.CollectSignatureFlow","location":"docs/net.corda.core.flows/-collect-signature-flow/-collect-signature-flow.html","searchKeys":["CollectSignatureFlow","constructor(partiallySignedTx: SignedTransaction, session: FlowSession, signingKeys: List<PublicKey>)","net.corda.core.flows.CollectSignatureFlow.CollectSignatureFlow"]},{"name":"constructor(partiallySignedTx: SignedTransaction, session: FlowSession, vararg signingKeys: PublicKey)","description":"net.corda.core.flows.CollectSignatureFlow.CollectSignatureFlow","location":"docs/net.corda.core.flows/-collect-signature-flow/-collect-signature-flow.html","searchKeys":["CollectSignatureFlow","constructor(partiallySignedTx: SignedTransaction, session: FlowSession, vararg signingKeys: PublicKey)","net.corda.core.flows.CollectSignatureFlow.CollectSignatureFlow"]},{"name":"constructor(partiallySignedTx: SignedTransaction, sessionsToCollectFrom: Collection<FlowSession>, myOptionalKeys: Iterable<PublicKey>?, progressTracker: ProgressTracker = tracker())","description":"net.corda.core.flows.CollectSignaturesFlow.CollectSignaturesFlow","location":"docs/net.corda.core.flows/-collect-signatures-flow/-collect-signatures-flow.html","searchKeys":["CollectSignaturesFlow","constructor(partiallySignedTx: SignedTransaction, sessionsToCollectFrom: Collection<FlowSession>, myOptionalKeys: Iterable<PublicKey>?, progressTracker: ProgressTracker = tracker())","net.corda.core.flows.CollectSignaturesFlow.CollectSignaturesFlow"]},{"name":"constructor(partiallySignedTx: SignedTransaction, sessionsToCollectFrom: Collection<FlowSession>, progressTracker: ProgressTracker = tracker())","description":"net.corda.core.flows.CollectSignaturesFlow.CollectSignaturesFlow","location":"docs/net.corda.core.flows/-collect-signatures-flow/-collect-signatures-flow.html","searchKeys":["CollectSignaturesFlow","constructor(partiallySignedTx: SignedTransaction, sessionsToCollectFrom: Collection<FlowSession>, progressTracker: ProgressTracker = tracker())","net.corda.core.flows.CollectSignaturesFlow.CollectSignaturesFlow"]},{"name":"constructor(participants: List<AbstractParty> = listOf(), ref: String)","description":"net.corda.testing.internal.vault.DummyDealContract.State.State","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/-state.html","searchKeys":["State","constructor(participants: List<AbstractParty> = listOf(), ref: String)","net.corda.testing.internal.vault.DummyDealContract.State.State"]},{"name":"constructor(participants: List<AbstractParty> = listOf(), ref: String)","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.State.State","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-state/-state.html","searchKeys":["State","constructor(participants: List<AbstractParty> = listOf(), ref: String)","net.corda.testing.internal.vault.UniqueDummyLinearContract.State.State"]},{"name":"constructor(participants: List<AbstractParty>, linearId: UniqueIdentifier)","description":"net.corda.testing.internal.vault.DummyDealContract.State.State","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/-state.html","searchKeys":["State","constructor(participants: List<AbstractParty>, linearId: UniqueIdentifier)","net.corda.testing.internal.vault.DummyDealContract.State.State"]},{"name":"constructor(participants: List<AbstractParty>, linearId: UniqueIdentifier)","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.State.State","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-state/-state.html","searchKeys":["State","constructor(participants: List<AbstractParty>, linearId: UniqueIdentifier)","net.corda.testing.internal.vault.UniqueDummyLinearContract.State.State"]},{"name":"constructor(participants: List<AbstractParty>? = null, linearId: List<UniqueIdentifier>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/-linear-state-query-criteria.html","searchKeys":["LinearStateQueryCriteria","constructor(participants: List<AbstractParty>? = null, linearId: List<UniqueIdentifier>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, linearId: List<UniqueIdentifier>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/-linear-state-query-criteria.html","searchKeys":["LinearStateQueryCriteria","constructor(participants: List<AbstractParty>? = null, linearId: List<UniqueIdentifier>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, owner: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, issuer: List<AbstractParty>? = null, issuerRef: List<OpaqueBytes>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.FungibleAssetQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/-fungible-asset-query-criteria.html","searchKeys":["FungibleAssetQueryCriteria","constructor(participants: List<AbstractParty>? = null, owner: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, issuer: List<AbstractParty>? = null, issuerRef: List<OpaqueBytes>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.FungibleAssetQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, owner: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, issuer: List<AbstractParty>? = null, issuerRef: List<OpaqueBytes>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus)","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.FungibleAssetQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/-fungible-asset-query-criteria.html","searchKeys":["FungibleAssetQueryCriteria","constructor(participants: List<AbstractParty>? = null, owner: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, issuer: List<AbstractParty>? = null, issuerRef: List<OpaqueBytes>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus)","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.FungibleAssetQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, owner: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, issuer: List<AbstractParty>? = null, issuerRef: List<OpaqueBytes>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus, exactParticipants: List<AbstractParty>? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.FungibleAssetQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/-fungible-asset-query-criteria.html","searchKeys":["FungibleAssetQueryCriteria","constructor(participants: List<AbstractParty>? = null, owner: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, issuer: List<AbstractParty>? = null, issuerRef: List<OpaqueBytes>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus, exactParticipants: List<AbstractParty>? = null)","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.FungibleAssetQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.FungibleStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/-fungible-state-query-criteria.html","searchKeys":["FungibleStateQueryCriteria","constructor(participants: List<AbstractParty>? = null, quantity: ColumnPredicate<Long>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.FungibleStateQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, uuid: List<UUID>? = null, externalId: List<String>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/-linear-state-query-criteria.html","searchKeys":["LinearStateQueryCriteria","constructor(participants: List<AbstractParty>? = null, uuid: List<UUID>? = null, externalId: List<String>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null)","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, uuid: List<UUID>? = null, externalId: List<String>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/-linear-state-query-criteria.html","searchKeys":["LinearStateQueryCriteria","constructor(participants: List<AbstractParty>? = null, uuid: List<UUID>? = null, externalId: List<String>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL)","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria"]},{"name":"constructor(participants: List<AbstractParty>? = null, uuid: List<UUID>? = null, externalId: List<String>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, exactParticipants: List<AbstractParty>?)","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/-linear-state-query-criteria.html","searchKeys":["LinearStateQueryCriteria","constructor(participants: List<AbstractParty>? = null, uuid: List<UUID>? = null, externalId: List<String>? = null, status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, exactParticipants: List<AbstractParty>?)","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.LinearStateQueryCriteria"]},{"name":"constructor(participants: MutableSet<AbstractParty>, externalId: String?, uuid: UUID, linearString: String?, linearNumber: Long, linearTimestamp: Instant, linearBoolean: Boolean)","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.PersistentDummyLinearState","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/-persistent-dummy-linear-state.html","searchKeys":["PersistentDummyLinearState","constructor(participants: MutableSet<AbstractParty>, externalId: String?, uuid: UUID, linearString: String?, linearNumber: Long, linearTimestamp: Instant, linearBoolean: Boolean)","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.PersistentDummyLinearState"]},{"name":"constructor(participants: MutableSet<AbstractParty>? = null, externalId: String?, uuid: UUID)","description":"net.corda.core.schemas.CommonSchemaV1.LinearState.LinearState","location":"docs/net.corda.core.schemas/-common-schema-v1/-linear-state/-linear-state.html","searchKeys":["LinearState","constructor(participants: MutableSet<AbstractParty>? = null, externalId: String?, uuid: UUID)","net.corda.core.schemas.CommonSchemaV1.LinearState.LinearState"]},{"name":"constructor(participants: MutableSet<AbstractParty>? = null, linearString: String?, linearNumber: Long, linearTimestamp: Instant, linearBoolean: Boolean, uid: UniqueIdentifier)","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.PersistentDummyLinearState","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/-persistent-dummy-linear-state.html","searchKeys":["PersistentDummyLinearState","constructor(participants: MutableSet<AbstractParty>? = null, linearString: String?, linearNumber: Long, linearTimestamp: Instant, linearBoolean: Boolean, uid: UniqueIdentifier)","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.PersistentDummyLinearState"]},{"name":"constructor(participants: MutableSet<AbstractParty>? = null, uid: UniqueIdentifier)","description":"net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState.PersistentDummyDealState","location":"docs/net.corda.testing.internal.vault/-dummy-deal-state-schema-v1/-persistent-dummy-deal-state/-persistent-dummy-deal-state.html","searchKeys":["PersistentDummyDealState","constructor(participants: MutableSet<AbstractParty>? = null, uid: UniqueIdentifier)","net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState.PersistentDummyDealState"]},{"name":"constructor(participants: MutableSet<AbstractParty?>? = null, owner: AbstractParty, quantity: Long, issuer: AbstractParty, issuerRef: ByteArray)","description":"net.corda.core.schemas.CommonSchemaV1.FungibleState.FungibleState","location":"docs/net.corda.core.schemas/-common-schema-v1/-fungible-state/-fungible-state.html","searchKeys":["FungibleState","constructor(participants: MutableSet<AbstractParty?>? = null, owner: AbstractParty, quantity: Long, issuer: AbstractParty, issuerRef: ByteArray)","net.corda.core.schemas.CommonSchemaV1.FungibleState.FungibleState"]},{"name":"constructor(participants: MutableSet<AbstractParty?>? = null, owner: AbstractParty?, pennies: Long, currency: String, issuer: AbstractParty?, issuerRef: ByteArray)","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.PersistentCashState","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/-persistent-cash-state.html","searchKeys":["PersistentCashState","constructor(participants: MutableSet<AbstractParty?>? = null, owner: AbstractParty?, pennies: Long, currency: String, issuer: AbstractParty?, issuerRef: ByteArray)","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.PersistentCashState"]},{"name":"constructor(party: AbstractParty, amount: Amount<T>)","description":"net.corda.finance.contracts.asset.PartyAndAmount.PartyAndAmount","location":"docs/net.corda.finance.contracts.asset/-party-and-amount/-party-and-amount.html","searchKeys":["PartyAndAmount","constructor(party: AbstractParty, amount: Amount<T>)","net.corda.finance.contracts.asset.PartyAndAmount.PartyAndAmount"]},{"name":"constructor(party: AbstractParty, reference: OpaqueBytes)","description":"net.corda.core.contracts.PartyAndReference.PartyAndReference","location":"docs/net.corda.core.contracts/-party-and-reference/-party-and-reference.html","searchKeys":["PartyAndReference","constructor(party: AbstractParty, reference: OpaqueBytes)","net.corda.core.contracts.PartyAndReference.PartyAndReference"]},{"name":"constructor(party: CordaX500Name)","description":"net.corda.core.context.InvocationOrigin.Peer.Peer","location":"docs/net.corda.core.context/-invocation-origin/-peer/-peer.html","searchKeys":["Peer","constructor(party: CordaX500Name)","net.corda.core.context.InvocationOrigin.Peer.Peer"]},{"name":"constructor(party: Party)","description":"net.corda.core.flows.FlowInitiator.Peer.Peer","location":"docs/net.corda.core.flows/-flow-initiator/-peer/-peer.html","searchKeys":["Peer","constructor(party: Party)","net.corda.core.flows.FlowInitiator.Peer.Peer"]},{"name":"constructor(party: Party)","description":"net.corda.core.node.services.PartyInfo.DistributedNode.DistributedNode","location":"docs/net.corda.core.node.services/-party-info/-distributed-node/-distributed-node.html","searchKeys":["DistributedNode","constructor(party: Party)","net.corda.core.node.services.PartyInfo.DistributedNode.DistributedNode"]},{"name":"constructor(party: Party)","description":"net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle.DistributedServiceHandle","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-distributed-service-handle/-distributed-service-handle.html","searchKeys":["DistributedServiceHandle","constructor(party: Party)","net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle.DistributedServiceHandle"]},{"name":"constructor(party: Party, addresses: List<NetworkHostAndPort>)","description":"net.corda.core.node.services.PartyInfo.SingleNode.SingleNode","location":"docs/net.corda.core.node.services/-party-info/-single-node/-single-node.html","searchKeys":["SingleNode","constructor(party: Party, addresses: List<NetworkHostAndPort>)","net.corda.core.node.services.PartyInfo.SingleNode.SingleNode"]},{"name":"constructor(partyKeys: Set<AbstractParty>, template: Obligation.Terms<P>)","description":"net.corda.finance.contracts.asset.BilateralNetState.BilateralNetState","location":"docs/net.corda.finance.contracts.asset/-bilateral-net-state/-bilateral-net-state.html","searchKeys":["BilateralNetState","constructor(partyKeys: Set<AbstractParty>, template: Obligation.Terms<P>)","net.corda.finance.contracts.asset.BilateralNetState.BilateralNetState"]},{"name":"constructor(payload: T, primaryIdentity: AnonymousParty, secondaryIdentity: AnonymousParty)","description":"net.corda.finance.flows.TwoPartyDealFlow.Handshake.Handshake","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-handshake/-handshake.html","searchKeys":["Handshake","constructor(payload: T, primaryIdentity: AnonymousParty, secondaryIdentity: AnonymousParty)","net.corda.finance.flows.TwoPartyDealFlow.Handshake.Handshake"]},{"name":"constructor(platformVersion: Int, schemeNumberID: Int)","description":"net.corda.core.crypto.SignatureMetadata.SignatureMetadata","location":"docs/net.corda.core.crypto/-signature-metadata/-signature-metadata.html","searchKeys":["SignatureMetadata","constructor(platformVersion: Int, schemeNumberID: Int)","net.corda.core.crypto.SignatureMetadata.SignatureMetadata"]},{"name":"constructor(pointer: StateRef, type: Class<T>)","description":"net.corda.core.contracts.StaticPointer.StaticPointer","location":"docs/net.corda.core.contracts/-static-pointer/-static-pointer.html","searchKeys":["StaticPointer","constructor(pointer: StateRef, type: Class<T>)","net.corda.core.contracts.StaticPointer.StaticPointer"]},{"name":"constructor(pointer: StateRef, type: Class<T>, isResolved: Boolean = false)","description":"net.corda.core.contracts.StaticPointer.StaticPointer","location":"docs/net.corda.core.contracts/-static-pointer/-static-pointer.html","searchKeys":["StaticPointer","constructor(pointer: StateRef, type: Class<T>, isResolved: Boolean = false)","net.corda.core.contracts.StaticPointer.StaticPointer"]},{"name":"constructor(pointer: UniqueIdentifier, type: Class<T>)","description":"net.corda.core.contracts.LinearPointer.LinearPointer","location":"docs/net.corda.core.contracts/-linear-pointer/-linear-pointer.html","searchKeys":["LinearPointer","constructor(pointer: UniqueIdentifier, type: Class<T>)","net.corda.core.contracts.LinearPointer.LinearPointer"]},{"name":"constructor(pointer: UniqueIdentifier, type: Class<T>, isResolved: Boolean = true)","description":"net.corda.core.contracts.LinearPointer.LinearPointer","location":"docs/net.corda.core.contracts/-linear-pointer/-linear-pointer.html","searchKeys":["LinearPointer","constructor(pointer: UniqueIdentifier, type: Class<T>, isResolved: Boolean = true)","net.corda.core.contracts.LinearPointer.LinearPointer"]},{"name":"constructor(pollInterval: Duration, hostAndPort: NetworkHostAndPort = NetworkHostAndPort(\"localhost\", 0), networkMapCertAndKeyPair: <Error class: unknown class> = createDevNetworkMapCa(), myHostNameValue: String = \"test.host.name\", vararg additionalServices: Any)","description":"net.corda.testing.node.internal.network.NetworkMapServer.NetworkMapServer","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-network-map-server.html","searchKeys":["NetworkMapServer","constructor(pollInterval: Duration, hostAndPort: NetworkHostAndPort = NetworkHostAndPort(\"localhost\", 0), networkMapCertAndKeyPair: <Error class: unknown class> = createDevNetworkMapCa(), myHostNameValue: String = \"test.host.name\", vararg additionalServices: Any)","net.corda.testing.node.internal.network.NetworkMapServer.NetworkMapServer"]},{"name":"constructor(portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, driverDirectory: Path, useTestClock: Boolean, isDebug: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, notarySpecs: List<NotarySpec>, compatibilityZone: CompatibilityZoneParams?, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordappInternal>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean = true, premigrateH2Database: Boolean = true, notaryHandleTimeout: Duration = Duration.ofMinutes(1))","description":"net.corda.testing.node.internal.DriverDSLImpl.DriverDSLImpl","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-driver-d-s-l-impl.html","searchKeys":["DriverDSLImpl","constructor(portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, driverDirectory: Path, useTestClock: Boolean, isDebug: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, notarySpecs: List<NotarySpec>, compatibilityZone: CompatibilityZoneParams?, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordappInternal>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean = true, premigrateH2Database: Boolean = true, notaryHandleTimeout: Duration = Duration.ofMinutes(1))","net.corda.testing.node.internal.DriverDSLImpl.DriverDSLImpl"]},{"name":"constructor(price: Amount<Currency>, payToIdentity: PartyAndCertificate)","description":"net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo.SellerTradeInfo","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller-trade-info/-seller-trade-info.html","searchKeys":["SellerTradeInfo","constructor(price: Amount<Currency>, payToIdentity: PartyAndCertificate)","net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo.SellerTradeInfo"]},{"name":"constructor(progressTracker: ProgressTracker = Primary.tracker())","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.Primary","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/-primary.html","searchKeys":["Primary","constructor(progressTracker: ProgressTracker = Primary.tracker())","net.corda.finance.flows.TwoPartyDealFlow.Primary.Primary"]},{"name":"constructor(progressTracker: ProgressTracker = Secondary.tracker())","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Secondary","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-secondary.html","searchKeys":["Secondary","constructor(progressTracker: ProgressTracker = Secondary.tracker())","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Secondary"]},{"name":"constructor(progressTracker: ProgressTracker = tracker(), flowLogicProducer: () -> FlowLogic<T>)","description":"net.corda.core.flows.WithReferencedStatesFlow.WithReferencedStatesFlow","location":"docs/net.corda.core.flows/-with-referenced-states-flow/-with-referenced-states-flow.html","searchKeys":["WithReferencedStatesFlow","constructor(progressTracker: ProgressTracker = tracker(), flowLogicProducer: () -> FlowLogic<T>)","net.corda.core.flows.WithReferencedStatesFlow.WithReferencedStatesFlow"]},{"name":"constructor(progressTracker: ProgressTracker)","description":"net.corda.finance.flows.AbstractCashFlow.AbstractCashFlow","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-abstract-cash-flow.html","searchKeys":["AbstractCashFlow","constructor(progressTracker: ProgressTracker)","net.corda.finance.flows.AbstractCashFlow.AbstractCashFlow"]},{"name":"constructor(property: KProperty1<O, C?>)","description":"net.corda.core.node.services.vault.Column.Column","location":"docs/net.corda.core.node.services.vault/-column/-column.html","searchKeys":["Column","constructor(property: KProperty1<O, C?>)","net.corda.core.node.services.vault.Column.Column"]},{"name":"constructor(providedName: CordaX500Name? = null, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, customOverrides: Map<String, Any?> = emptyMap(), startInSameProcess: Boolean? = null, maximumHeapSize: String = System.getenv(\"DRIVER_NODE_MEMORY\") ?: \"512m\", additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>> = emptyMap(), logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null, systemProperties: Map<String, String> = emptyMap(), legacyContracts: Collection<TestCordapp> = emptySet())","description":"net.corda.testing.driver.NodeParameters.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/-node-parameters.html","searchKeys":["NodeParameters","constructor(providedName: CordaX500Name? = null, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, customOverrides: Map<String, Any?> = emptyMap(), startInSameProcess: Boolean? = null, maximumHeapSize: String = System.getenv(\"DRIVER_NODE_MEMORY\") ?: \"512m\", additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>> = emptyMap(), logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null, systemProperties: Map<String, String> = emptyMap(), legacyContracts: Collection<TestCordapp> = emptySet())","net.corda.testing.driver.NodeParameters.NodeParameters"]},{"name":"constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String)","description":"net.corda.testing.driver.NodeParameters.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/-node-parameters.html","searchKeys":["NodeParameters","constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String)","net.corda.testing.driver.NodeParameters.NodeParameters"]},{"name":"constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>)","description":"net.corda.testing.driver.NodeParameters.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/-node-parameters.html","searchKeys":["NodeParameters","constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>)","net.corda.testing.driver.NodeParameters.NodeParameters"]},{"name":"constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null)","description":"net.corda.testing.driver.NodeParameters.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/-node-parameters.html","searchKeys":["NodeParameters","constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null)","net.corda.testing.driver.NodeParameters.NodeParameters"]},{"name":"constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null)","description":"net.corda.testing.driver.NodeParameters.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/-node-parameters.html","searchKeys":["NodeParameters","constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null)","net.corda.testing.driver.NodeParameters.NodeParameters"]},{"name":"constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null, systemProperties: Map<String, String> = emptyMap())","description":"net.corda.testing.driver.NodeParameters.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/-node-parameters.html","searchKeys":["NodeParameters","constructor(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null, systemProperties: Map<String, String> = emptyMap())","net.corda.testing.driver.NodeParameters.NodeParameters"]},{"name":"constructor(provider: Provider)","description":"net.corda.core.crypto.internal.PlatformSecureRandomService.PlatformSecureRandomService","location":"docs/net.corda.core.crypto.internal/-platform-secure-random-service/-platform-secure-random-service.html","searchKeys":["PlatformSecureRandomService","constructor(provider: Provider)","net.corda.core.crypto.internal.PlatformSecureRandomService.PlatformSecureRandomService"]},{"name":"constructor(quantity: Long, displayTokenSize: BigDecimal, token: T)","description":"net.corda.core.contracts.Amount.Amount","location":"docs/net.corda.core.contracts/-amount/-amount.html","searchKeys":["Amount","constructor(quantity: Long, displayTokenSize: BigDecimal, token: T)","net.corda.core.contracts.Amount.Amount"]},{"name":"constructor(quantityDelta: Long, token: T, source: P, destination: P)","description":"net.corda.core.contracts.AmountTransfer.AmountTransfer","location":"docs/net.corda.core.contracts/-amount-transfer/-amount-transfer.html","searchKeys":["AmountTransfer","constructor(quantityDelta: Long, token: T, source: P, destination: P)","net.corda.core.contracts.AmountTransfer.AmountTransfer"]},{"name":"constructor(random: SplittableRandom = SplittableRandom())","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random.Random","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/-random/-random.html","searchKeys":["Random","constructor(random: SplittableRandom = SplittableRandom())","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random.Random"]},{"name":"constructor(raw: SerializedBytes<T>, sig: DigitalSignature.WithKey)","description":"net.corda.core.crypto.SignedData.SignedData","location":"docs/net.corda.core.crypto/-signed-data/-signed-data.html","searchKeys":["SignedData","constructor(raw: SerializedBytes<T>, sig: DigitalSignature.WithKey)","net.corda.core.crypto.SignedData.SignedData"]},{"name":"constructor(raw: SerializedBytes<T>, sig: DigitalSignatureWithCert)","description":"net.corda.core.internal.SignedDataWithCert.SignedDataWithCert","location":"docs/net.corda.core.internal/-signed-data-with-cert/-signed-data-with-cert.html","searchKeys":["SignedDataWithCert","constructor(raw: SerializedBytes<T>, sig: DigitalSignatureWithCert)","net.corda.core.internal.SignedDataWithCert.SignedDataWithCert"]},{"name":"constructor(reason: String)","description":"net.corda.core.crypto.MerkleTreeException.MerkleTreeException","location":"docs/net.corda.core.crypto/-merkle-tree-exception/-merkle-tree-exception.html","searchKeys":["MerkleTreeException","constructor(reason: String)","net.corda.core.crypto.MerkleTreeException.MerkleTreeException"]},{"name":"constructor(reconnectingRPCConnection: ReconnectingCordaRPCOps.ReconnectingRPCConnection, initialDataFeed: DataFeed<*, T>, createDataFeed: () -> DataFeed<*, T>)","description":"net.corda.client.rpc.internal.ReconnectingObservable.ReconnectingObservable","location":"docs/net.corda.client.rpc.internal/-reconnecting-observable/-reconnecting-observable.html","searchKeys":["ReconnectingObservable","constructor(reconnectingRPCConnection: ReconnectingCordaRPCOps.ReconnectingRPCConnection, initialDataFeed: DataFeed<*, T>, createDataFeed: () -> DataFeed<*, T>)","net.corda.client.rpc.internal.ReconnectingObservable.ReconnectingObservable"]},{"name":"constructor(recoverAll: Boolean, forceRecover: Boolean = false)","description":"net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/-finality-recovery-flow.html","searchKeys":["FinalityRecoveryFlow","constructor(recoverAll: Boolean, forceRecover: Boolean = false)","net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow"]},{"name":"constructor(recoveryPeer: Party)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeer: Party)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow, dryRun: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow, dryRun: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, alsoFinalize: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeer: Party, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, alsoFinalize: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeers: Collection<Party>)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeers: Collection<Party>)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, dryRun: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, dryRun: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, alsoFinalize: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, alsoFinalize: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, useAllNetworkNodes: Boolean, dryRun: Boolean, useTimeWindowNarrowing: Boolean, verboseLogging: Boolean, recoveryBatchSize: Int)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow, useAllNetworkNodes: Boolean, dryRun: Boolean, useTimeWindowNarrowing: Boolean, verboseLogging: Boolean, recoveryBatchSize: Int)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow? = null, useAllNetworkNodes: Boolean = false, dryRun: Boolean = false, useTimeWindowNarrowing: Boolean = true, verboseLogging: Boolean = false, recoveryBatchSize: Int = 1000, alsoFinalize: Boolean = false)","description":"net.corda.core.flows.LedgerRecoveryParameters.LedgerRecoveryParameters","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/-ledger-recovery-parameters.html","searchKeys":["LedgerRecoveryParameters","constructor(recoveryPeers: Collection<Party>, timeWindow: RecoveryTimeWindow? = null, useAllNetworkNodes: Boolean = false, dryRun: Boolean = false, useTimeWindowNarrowing: Boolean = true, verboseLogging: Boolean = false, recoveryBatchSize: Int = 1000, alsoFinalize: Boolean = false)","net.corda.core.flows.LedgerRecoveryParameters.LedgerRecoveryParameters"]},{"name":"constructor(ref: StateRef, contractStateClassName: String, recordedTime: Instant, consumedTime: Instant?, status: Vault.StateStatus, notary: AbstractParty?, lockId: String?, lockUpdateTime: Instant?, relevancyStatus: Vault.RelevancyStatus? = null, constraintInfo: Vault.ConstraintInfo? = null)","description":"net.corda.core.node.services.Vault.StateMetadata.StateMetadata","location":"docs/net.corda.core.node.services/-vault/-state-metadata/-state-metadata.html","searchKeys":["StateMetadata","constructor(ref: StateRef, contractStateClassName: String, recordedTime: Instant, consumedTime: Instant?, status: Vault.StateStatus, notary: AbstractParty?, lockId: String?, lockUpdateTime: Instant?, relevancyStatus: Vault.RelevancyStatus? = null, constraintInfo: Vault.ConstraintInfo? = null)","net.corda.core.node.services.Vault.StateMetadata.StateMetadata"]},{"name":"constructor(ref: StateRef, scheduledAt: Instant)","description":"net.corda.core.contracts.ScheduledStateRef.ScheduledStateRef","location":"docs/net.corda.core.contracts/-scheduled-state-ref/-scheduled-state-ref.html","searchKeys":["ScheduledStateRef","constructor(ref: StateRef, scheduledAt: Instant)","net.corda.core.contracts.ScheduledStateRef.ScheduledStateRef"]},{"name":"constructor(releaseVersion: String, revision: String, platformVersion: Int, vendor: String)","description":"net.corda.core.node.services.diagnostics.NodeVersionInfo.NodeVersionInfo","location":"docs/net.corda.core.node.services.diagnostics/-node-version-info/-node-version-info.html","searchKeys":["NodeVersionInfo","constructor(releaseVersion: String, revision: String, platformVersion: Int, vendor: String)","net.corda.core.node.services.diagnostics.NodeVersionInfo.NodeVersionInfo"]},{"name":"constructor(request: CashExitFlow.ExitRequest)","description":"net.corda.finance.flows.CashExitFlow.CashExitFlow","location":"docs/net.corda.finance.flows/-cash-exit-flow/-cash-exit-flow.html","searchKeys":["CashExitFlow","constructor(request: CashExitFlow.ExitRequest)","net.corda.finance.flows.CashExitFlow.CashExitFlow"]},{"name":"constructor(request: CashIssueAndPaymentFlow.IssueAndPaymentRequest)","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.CashIssueAndPaymentFlow","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-cash-issue-and-payment-flow.html","searchKeys":["CashIssueAndPaymentFlow","constructor(request: CashIssueAndPaymentFlow.IssueAndPaymentRequest)","net.corda.finance.flows.CashIssueAndPaymentFlow.CashIssueAndPaymentFlow"]},{"name":"constructor(request: CashIssueFlow.IssueRequest)","description":"net.corda.finance.flows.CashIssueFlow.CashIssueFlow","location":"docs/net.corda.finance.flows/-cash-issue-flow/-cash-issue-flow.html","searchKeys":["CashIssueFlow","constructor(request: CashIssueFlow.IssueRequest)","net.corda.finance.flows.CashIssueFlow.CashIssueFlow"]},{"name":"constructor(request: CashPaymentFlow.PaymentRequest)","description":"net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow","location":"docs/net.corda.finance.flows/-cash-payment-flow/-cash-payment-flow.html","searchKeys":["CashPaymentFlow","constructor(request: CashPaymentFlow.PaymentRequest)","net.corda.finance.flows.CashPaymentFlow.CashPaymentFlow"]},{"name":"constructor(requested: Class<*>, actual: Class<*>)","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.TypeMismatch.TypeMismatch","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/-type-mismatch/-type-mismatch.html","searchKeys":["TypeMismatch","constructor(requested: Class<*>, actual: Class<*>)","net.corda.testing.dsl.TestLedgerDSLInterpreter.TypeMismatch.TypeMismatch"]},{"name":"constructor(requested: Int, got: Int)","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch.DownloadedVsRequestedSizeMismatch","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-size-mismatch/-downloaded-vs-requested-size-mismatch.html","searchKeys":["DownloadedVsRequestedSizeMismatch","constructor(requested: Int, got: Int)","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch.DownloadedVsRequestedSizeMismatch"]},{"name":"constructor(requested: SecureHash)","description":"net.corda.core.internal.FetchDataFlow.HashNotFound.HashNotFound","location":"docs/net.corda.core.internal/-fetch-data-flow/-hash-not-found/-hash-not-found.html","searchKeys":["HashNotFound","constructor(requested: SecureHash)","net.corda.core.internal.FetchDataFlow.HashNotFound.HashNotFound"]},{"name":"constructor(requested: SecureHash)","description":"net.corda.core.internal.FetchDataFlow.IllegalTransactionRequest.IllegalTransactionRequest","location":"docs/net.corda.core.internal/-fetch-data-flow/-illegal-transaction-request/-illegal-transaction-request.html","searchKeys":["IllegalTransactionRequest","constructor(requested: SecureHash)","net.corda.core.internal.FetchDataFlow.IllegalTransactionRequest.IllegalTransactionRequest"]},{"name":"constructor(requested: SecureHash)","description":"net.corda.core.internal.FetchDataFlow.MissingNetworkParameters.MissingNetworkParameters","location":"docs/net.corda.core.internal/-fetch-data-flow/-missing-network-parameters/-missing-network-parameters.html","searchKeys":["MissingNetworkParameters","constructor(requested: SecureHash)","net.corda.core.internal.FetchDataFlow.MissingNetworkParameters.MissingNetworkParameters"]},{"name":"constructor(requested: SecureHash, got: SecureHash)","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch.DownloadedVsRequestedDataMismatch","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-data-mismatch/-downloaded-vs-requested-data-mismatch.html","searchKeys":["DownloadedVsRequestedDataMismatch","constructor(requested: SecureHash, got: SecureHash)","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch.DownloadedVsRequestedDataMismatch"]},{"name":"constructor(requests: Set<SecureHash>, otherSide: FlowSession)","description":"net.corda.core.internal.FetchAttachmentsFlow.FetchAttachmentsFlow","location":"docs/net.corda.core.internal/-fetch-attachments-flow/-fetch-attachments-flow.html","searchKeys":["FetchAttachmentsFlow","constructor(requests: Set<SecureHash>, otherSide: FlowSession)","net.corda.core.internal.FetchAttachmentsFlow.FetchAttachmentsFlow"]},{"name":"constructor(requests: Set<SecureHash>, otherSide: FlowSession)","description":"net.corda.core.internal.FetchNetworkParametersFlow.FetchNetworkParametersFlow","location":"docs/net.corda.core.internal/-fetch-network-parameters-flow/-fetch-network-parameters-flow.html","searchKeys":["FetchNetworkParametersFlow","constructor(requests: Set<SecureHash>, otherSide: FlowSession)","net.corda.core.internal.FetchNetworkParametersFlow.FetchNetworkParametersFlow"]},{"name":"constructor(requests: Set<SecureHash>, otherSide: FlowSession, dataType: FetchDataFlow.DataType = DataType.TRANSACTION)","description":"net.corda.core.internal.FetchTransactionsFlow.FetchTransactionsFlow","location":"docs/net.corda.core.internal/-fetch-transactions-flow/-fetch-transactions-flow.html","searchKeys":["FetchTransactionsFlow","constructor(requests: Set<SecureHash>, otherSide: FlowSession, dataType: FetchDataFlow.DataType = DataType.TRANSACTION)","net.corda.core.internal.FetchTransactionsFlow.FetchTransactionsFlow"]},{"name":"constructor(requests: Set<SecureHash>, otherSide: FlowSession, recoveryMode: Boolean = false)","description":"net.corda.core.internal.FetchBatchTransactionsFlow.FetchBatchTransactionsFlow","location":"docs/net.corda.core.internal/-fetch-batch-transactions-flow/-fetch-batch-transactions-flow.html","searchKeys":["FetchBatchTransactionsFlow","constructor(requests: Set<SecureHash>, otherSide: FlowSession, recoveryMode: Boolean = false)","net.corda.core.internal.FetchBatchTransactionsFlow.FetchBatchTransactionsFlow"]},{"name":"constructor(resolvableTransactionHashesCount: Long = 0, downloadedDependencyCount: Long = 0, recordedTransactionCount: Long = 0, skippedRecordingTransactionCount: Long = 0)","description":"net.corda.core.internal.ResolveTransactionsFlowStats.ResolveTransactionsFlowStats","location":"docs/net.corda.core.internal/-resolve-transactions-flow-stats/-resolve-transactions-flow-stats.html","searchKeys":["ResolveTransactionsFlowStats","constructor(resolvableTransactionHashesCount: Long = 0, downloadedDependencyCount: Long = 0, recordedTransactionCount: Long = 0, skippedRecordingTransactionCount: Long = 0)","net.corda.core.internal.ResolveTransactionsFlowStats.ResolveTransactionsFlowStats"]},{"name":"constructor(rightFromLiteral: C, rightToLiteral: C)","description":"net.corda.core.node.services.vault.ColumnPredicate.Between.Between","location":"docs/net.corda.core.node.services.vault/-column-predicate/-between/-between.html","searchKeys":["Between","constructor(rightFromLiteral: C, rightToLiteral: C)","net.corda.core.node.services.vault.ColumnPredicate.Between.Between"]},{"name":"constructor(root: PartialMerkleTree.PartialTree)","description":"net.corda.core.crypto.PartialMerkleTree.PartialMerkleTree","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-merkle-tree.html","searchKeys":["PartialMerkleTree","constructor(root: PartialMerkleTree.PartialTree)","net.corda.core.crypto.PartialMerkleTree.PartialMerkleTree"]},{"name":"constructor(root: URL, mapper: <Error class: unknown class> = defaultMapper)","description":"net.corda.testing.http.HttpApi.HttpApi","location":"docs/net.corda.testing.http/-http-api/-http-api.html","searchKeys":["HttpApi","constructor(root: URL, mapper: <Error class: unknown class> = defaultMapper)","net.corda.testing.http.HttpApi.HttpApi"]},{"name":"constructor(rpc: CordaRPCOps, factory: <Error class: unknown class>, fuzzyIdentityMatch: Boolean, isFullParties: Boolean = false)","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.RpcObjectMapper","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/-rpc-object-mapper.html","searchKeys":["RpcObjectMapper","constructor(rpc: CordaRPCOps, factory: <Error class: unknown class>, fuzzyIdentityMatch: Boolean, isFullParties: Boolean = false)","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.RpcObjectMapper"]},{"name":"constructor(saltLength: Int)","description":"net.corda.core.contracts.PrivacySalt.PrivacySalt","location":"docs/net.corda.core.contracts/-privacy-salt/-privacy-salt.html","searchKeys":["PrivacySalt","constructor(saltLength: Int)","net.corda.core.contracts.PrivacySalt.PrivacySalt"]},{"name":"constructor(scanPackage: String, config: Map<String, Any> = emptyMap(), signed: Boolean = false)","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.ScanPackageTestCordapp","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/-scan-package-test-cordapp.html","searchKeys":["ScanPackageTestCordapp","constructor(scanPackage: String, config: Map<String, Any> = emptyMap(), signed: Boolean = false)","net.corda.testing.node.internal.ScanPackageTestCordapp.ScanPackageTestCordapp"]},{"name":"constructor(scheduledState: ScheduledStateRef)","description":"net.corda.core.context.InvocationOrigin.Scheduled.Scheduled","location":"docs/net.corda.core.context/-invocation-origin/-scheduled/-scheduled.html","searchKeys":["Scheduled","constructor(scheduledState: ScheduledStateRef)","net.corda.core.context.InvocationOrigin.Scheduled.Scheduled"]},{"name":"constructor(scheduledState: ScheduledStateRef)","description":"net.corda.core.flows.FlowInitiator.Scheduled.Scheduled","location":"docs/net.corda.core.flows/-flow-initiator/-scheduled/-scheduled.html","searchKeys":["Scheduled","constructor(scheduledState: ScheduledStateRef)","net.corda.core.flows.FlowInitiator.Scheduled.Scheduled"]},{"name":"constructor(schema: String, entity: String, referencedSchema: String, fieldOrMethod: String, fieldOrMethodType: String)","description":"net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport.SchemaCrossReferenceReport","location":"docs/net.corda.core.schemas/-mapped-schema-validator/-schema-cross-reference-report/-schema-cross-reference-report.html","searchKeys":["SchemaCrossReferenceReport","constructor(schema: String, entity: String, referencedSchema: String, fieldOrMethod: String, fieldOrMethodType: String)","net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport.SchemaCrossReferenceReport"]},{"name":"constructor(schemaFamily: Class<*>, version: Int, mappedTypes: Iterable<Class<*>>)","description":"net.corda.core.schemas.MappedSchema.MappedSchema","location":"docs/net.corda.core.schemas/-mapped-schema/-mapped-schema.html","searchKeys":["MappedSchema","constructor(schemaFamily: Class<*>, version: Int, mappedTypes: Iterable<Class<*>>)","net.corda.core.schemas.MappedSchema.MappedSchema"]},{"name":"constructor(schemeNumberID: Int, schemeCodeName: String, signatureOID: <Error class: unknown class>, alternativeOIDs: List<<Error class: unknown class>>, providerName: String, algorithmName: String, signatureName: String, algSpec: AlgorithmParameterSpec?, keySize: Int?, desc: String)","description":"net.corda.core.crypto.SignatureScheme.SignatureScheme","location":"docs/net.corda.core.crypto/-signature-scheme/-signature-scheme.html","searchKeys":["SignatureScheme","constructor(schemeNumberID: Int, schemeCodeName: String, signatureOID: <Error class: unknown class>, alternativeOIDs: List<<Error class: unknown class>>, providerName: String, algorithmName: String, signatureName: String, algSpec: AlgorithmParameterSpec?, keySize: Int?, desc: String)","net.corda.core.crypto.SignatureScheme.SignatureScheme"]},{"name":"constructor(sellerSession: FlowSession, notary: Party, acceptablePrice: Amount<Currency>, typeToBuy: Class<out OwnableState>, anonymous: Boolean)","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.Buyer","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-buyer.html","searchKeys":["Buyer","constructor(sellerSession: FlowSession, notary: Party, acceptablePrice: Amount<Currency>, typeToBuy: Class<out OwnableState>, anonymous: Boolean)","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.Buyer"]},{"name":"constructor(senderRecords: List<SenderDistributionRecord> = emptyList(), receiverRecords: List<ReceiverDistributionRecord> = emptyList())","description":"net.corda.core.flows.DistributionRecords.DistributionRecords","location":"docs/net.corda.core.flows/-distribution-records/-distribution-records.html","searchKeys":["DistributionRecords","constructor(senderRecords: List<SenderDistributionRecord> = emptyList(), receiverRecords: List<ReceiverDistributionRecord> = emptyList())","net.corda.core.flows.DistributionRecords.DistributionRecords"]},{"name":"constructor(senderStatesToRecord: StatesToRecord, peersToStatesToRecord: Map<CordaX500Name, StatesToRecord>)","description":"net.corda.core.flows.DistributionList.SenderDistributionList.SenderDistributionList","location":"docs/net.corda.core.flows/-distribution-list/-sender-distribution-list/-sender-distribution-list.html","searchKeys":["SenderDistributionList","constructor(senderStatesToRecord: StatesToRecord, peersToStatesToRecord: Map<CordaX500Name, StatesToRecord>)","net.corda.core.flows.DistributionList.SenderDistributionList.SenderDistributionList"]},{"name":"constructor(serializedComponents: List<OpaqueBytes>)","description":"net.corda.core.transactions.NotaryChangeWireTransaction.NotaryChangeWireTransaction","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-notary-change-wire-transaction.html","searchKeys":["NotaryChangeWireTransaction","constructor(serializedComponents: List<OpaqueBytes>)","net.corda.core.transactions.NotaryChangeWireTransaction.NotaryChangeWireTransaction"]},{"name":"constructor(serializedComponents: List<OpaqueBytes>, digestService: DigestService)","description":"net.corda.core.transactions.NotaryChangeWireTransaction.NotaryChangeWireTransaction","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-notary-change-wire-transaction.html","searchKeys":["NotaryChangeWireTransaction","constructor(serializedComponents: List<OpaqueBytes>, digestService: DigestService)","net.corda.core.transactions.NotaryChangeWireTransaction.NotaryChangeWireTransaction"]},{"name":"constructor(serializedComponents: List<OpaqueBytes>, privacySalt: PrivacySalt = PrivacySalt())","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.ContractUpgradeWireTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-contract-upgrade-wire-transaction.html","searchKeys":["ContractUpgradeWireTransaction","constructor(serializedComponents: List<OpaqueBytes>, privacySalt: PrivacySalt = PrivacySalt())","net.corda.core.transactions.ContractUpgradeWireTransaction.ContractUpgradeWireTransaction"]},{"name":"constructor(serializedComponents: List<OpaqueBytes>, privacySalt: PrivacySalt, digestService: DigestService)","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.ContractUpgradeWireTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-contract-upgrade-wire-transaction.html","searchKeys":["ContractUpgradeWireTransaction","constructor(serializedComponents: List<OpaqueBytes>, privacySalt: PrivacySalt, digestService: DigestService)","net.corda.core.transactions.ContractUpgradeWireTransaction.ContractUpgradeWireTransaction"]},{"name":"constructor(serializedState: SerializedTransactionState, ref: StateRef)","description":"net.corda.core.internal.SerializedStateAndRef.SerializedStateAndRef","location":"docs/net.corda.core.internal/-serialized-state-and-ref/-serialized-state-and-ref.html","searchKeys":["SerializedStateAndRef","constructor(serializedState: SerializedTransactionState, ref: StateRef)","net.corda.core.internal.SerializedStateAndRef.SerializedStateAndRef"]},{"name":"constructor(serializedTelemetryData: Map<String, OpaqueBytes>)","description":"net.corda.core.internal.telemetry.SerializedTelemetry.SerializedTelemetry","location":"docs/net.corda.core.internal.telemetry/-serialized-telemetry/-serialized-telemetry.html","searchKeys":["SerializedTelemetry","constructor(serializedTelemetryData: Map<String, OpaqueBytes>)","net.corda.core.internal.telemetry.SerializedTelemetry.SerializedTelemetry"]},{"name":"constructor(service: SinglePartyNotaryService, inputs: List<StateRef>, txId: SecureHash, caller: Party, requestSignature: NotarisationRequestSignature, timeWindow: TimeWindow?, references: List<StateRef>)","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.CommitOperation","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/-commit-operation.html","searchKeys":["CommitOperation","constructor(service: SinglePartyNotaryService, inputs: List<StateRef>, txId: SecureHash, caller: Party, requestSignature: NotarisationRequestSignature, timeWindow: TimeWindow?, references: List<StateRef>)","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.CommitOperation"]},{"name":"constructor(serviceClassName: String)","description":"net.corda.core.flows.FlowInitiator.Service.Service","location":"docs/net.corda.core.flows/-flow-initiator/-service/-service.html","searchKeys":["Service","constructor(serviceClassName: String)","net.corda.core.flows.FlowInitiator.Service.Service"]},{"name":"constructor(serviceClassName: String, owningLegalIdentity: CordaX500Name)","description":"net.corda.core.context.InvocationOrigin.Service.Service","location":"docs/net.corda.core.context/-invocation-origin/-service/-service.html","searchKeys":["Service","constructor(serviceClassName: String, owningLegalIdentity: CordaX500Name)","net.corda.core.context.InvocationOrigin.Service.Service"]},{"name":"constructor(serviceName: String, openTelemetryEnabled: Boolean, simpleLogTelemetryEnabled: Boolean, spanStartEndEventsEnabled: Boolean, copyBaggageToTags: Boolean)","description":"net.corda.client.rpc.internal.RPCClientTelemetry.RPCClientTelemetry","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/-r-p-c-client-telemetry.html","searchKeys":["RPCClientTelemetry","constructor(serviceName: String, openTelemetryEnabled: Boolean, simpleLogTelemetryEnabled: Boolean, spanStartEndEventsEnabled: Boolean, copyBaggageToTags: Boolean)","net.corda.client.rpc.internal.RPCClientTelemetry.RPCClientTelemetry"]},{"name":"constructor(services: AppServiceHub)","description":"net.corda.finance.internal.ConfigHolder.ConfigHolder","location":"docs/net.corda.finance.internal/-config-holder/-config-holder.html","searchKeys":["ConfigHolder","constructor(services: AppServiceHub)","net.corda.finance.internal.ConfigHolder.ConfigHolder"]},{"name":"constructor(services: ServiceHub)","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.TestLedgerDSLInterpreter","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/-test-ledger-d-s-l-interpreter.html","searchKeys":["TestLedgerDSLInterpreter","constructor(services: ServiceHub)","net.corda.testing.dsl.TestLedgerDSLInterpreter.TestLedgerDSLInterpreter"]},{"name":"constructor(services: ServiceHub, defaultNotary: <Error class: unknown class>, altNotary: Party = defaultNotary.party, rngFactory: () -> Random = { Random(0L) })","description":"net.corda.testing.internal.vault.VaultFiller.VaultFiller","location":"docs/net.corda.testing.internal.vault/-vault-filler/-vault-filler.html","searchKeys":["VaultFiller","constructor(services: ServiceHub, defaultNotary: <Error class: unknown class>, altNotary: Party = defaultNotary.party, rngFactory: () -> Random = { Random(0L) })","net.corda.testing.internal.vault.VaultFiller.VaultFiller"]},{"name":"constructor(sessionToMessage: Map<FlowSession, SerializedBytes<Any>>)","description":"net.corda.core.internal.FlowIORequest.Send.Send","location":"docs/net.corda.core.internal/-flow-i-o-request/-send/-send.html","searchKeys":["Send","constructor(sessionToMessage: Map<FlowSession, SerializedBytes<Any>>)","net.corda.core.internal.FlowIORequest.Send.Send"]},{"name":"constructor(sessionToMessage: Map<FlowSession, SerializedBytes<Any>>, shouldRetrySend: Boolean)","description":"net.corda.core.internal.FlowIORequest.SendAndReceive.SendAndReceive","location":"docs/net.corda.core.internal/-flow-i-o-request/-send-and-receive/-send-and-receive.html","searchKeys":["SendAndReceive","constructor(sessionToMessage: Map<FlowSession, SerializedBytes<Any>>, shouldRetrySend: Boolean)","net.corda.core.internal.FlowIORequest.SendAndReceive.SendAndReceive"]},{"name":"constructor(sessions: NonEmptySet<FlowSession>)","description":"net.corda.core.internal.FlowIORequest.CloseSessions.CloseSessions","location":"docs/net.corda.core.internal/-flow-i-o-request/-close-sessions/-close-sessions.html","searchKeys":["CloseSessions","constructor(sessions: NonEmptySet<FlowSession>)","net.corda.core.internal.FlowIORequest.CloseSessions.CloseSessions"]},{"name":"constructor(sessions: NonEmptySet<FlowSession>)","description":"net.corda.core.internal.FlowIORequest.GetFlowInfo.GetFlowInfo","location":"docs/net.corda.core.internal/-flow-i-o-request/-get-flow-info/-get-flow-info.html","searchKeys":["GetFlowInfo","constructor(sessions: NonEmptySet<FlowSession>)","net.corda.core.internal.FlowIORequest.GetFlowInfo.GetFlowInfo"]},{"name":"constructor(sessions: NonEmptySet<FlowSession>)","description":"net.corda.core.internal.FlowIORequest.Receive.Receive","location":"docs/net.corda.core.internal/-flow-i-o-request/-receive/-receive.html","searchKeys":["Receive","constructor(sessions: NonEmptySet<FlowSession>)","net.corda.core.internal.FlowIORequest.Receive.Receive"]},{"name":"constructor(shortName: String, vendor: String, version: String, licence: String)","description":"net.corda.core.cordapp.Cordapp.Info.Default.Default","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/-default.html","searchKeys":["Default","constructor(shortName: String, vendor: String, version: String, licence: String)","net.corda.core.cordapp.Cordapp.Info.Default.Default"]},{"name":"constructor(shortName: String, vendor: String, versionId: Int, licence: String)","description":"net.corda.core.cordapp.Cordapp.Info.Contract.Contract","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/-contract.html","searchKeys":["Contract","constructor(shortName: String, vendor: String, versionId: Int, licence: String)","net.corda.core.cordapp.Cordapp.Info.Contract.Contract"]},{"name":"constructor(shortName: String, vendor: String, versionId: Int, licence: String)","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.Workflow","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/-workflow.html","searchKeys":["Workflow","constructor(shortName: String, vendor: String, versionId: Int, licence: String)","net.corda.core.cordapp.Cordapp.Info.Workflow.Workflow"]},{"name":"constructor(signature: TransactionSignature)","description":"net.corda.core.internal.notary.UniquenessProvider.Result.Success.Success","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/-result/-success/-success.html","searchKeys":["Success","constructor(signature: TransactionSignature)","net.corda.core.internal.notary.UniquenessProvider.Result.Success.Success"]},{"name":"constructor(signatures: List<TransactionSignature>)","description":"net.corda.core.flows.NotarisationResponse.NotarisationResponse","location":"docs/net.corda.core.flows/-notarisation-response/-notarisation-response.html","searchKeys":["NotarisationResponse","constructor(signatures: List<TransactionSignature>)","net.corda.core.flows.NotarisationResponse.NotarisationResponse"]},{"name":"constructor(signers: List<PublicKey>, signingParties: List<Party>, value: T)","description":"net.corda.core.contracts.CommandWithParties.CommandWithParties","location":"docs/net.corda.core.contracts/-command-with-parties/-command-with-parties.html","searchKeys":["CommandWithParties","constructor(signers: List<PublicKey>, signingParties: List<Party>, value: T)","net.corda.core.contracts.CommandWithParties.CommandWithParties"]},{"name":"constructor(sigs: List<TransactionSignature>)","description":"net.corda.core.crypto.CompositeSignaturesWithKeys.CompositeSignaturesWithKeys","location":"docs/net.corda.core.crypto/-composite-signatures-with-keys/-composite-signatures-with-keys.html","searchKeys":["CompositeSignaturesWithKeys","constructor(sigs: List<TransactionSignature>)","net.corda.core.crypto.CompositeSignaturesWithKeys.CompositeSignaturesWithKeys"]},{"name":"constructor(size: Int, newInstance: () -> A)","description":"net.corda.core.internal.LazyStickyPool.LazyStickyPool","location":"docs/net.corda.core.internal/-lazy-sticky-pool/-lazy-sticky-pool.html","searchKeys":["LazyStickyPool","constructor(size: Int, newInstance: () -> A)","net.corda.core.internal.LazyStickyPool.LazyStickyPool"]},{"name":"constructor(sizeOverride: Long = 1024)","description":"net.corda.testing.internal.TestingNamedCacheFactory.TestingNamedCacheFactory","location":"docs/net.corda.testing.internal/-testing-named-cache-factory/-testing-named-cache-factory.html","searchKeys":["TestingNamedCacheFactory","constructor(sizeOverride: Long = 1024)","net.corda.testing.internal.TestingNamedCacheFactory.TestingNamedCacheFactory"]},{"name":"constructor(snapshot: A, updates: <Error class: unknown class><B>)","description":"net.corda.core.messaging.DataFeed.DataFeed","location":"docs/net.corda.core.messaging/-data-feed/-data-feed.html","searchKeys":["DataFeed","constructor(snapshot: A, updates: <Error class: unknown class><B>)","net.corda.core.messaging.DataFeed.DataFeed"]},{"name":"constructor(sortAttribute: AttachmentSort.AttachmentSortAttribute, direction: Sort.Direction = Sort.Direction.ASC)","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn.AttachmentSortColumn","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-column/-attachment-sort-column.html","searchKeys":["AttachmentSortColumn","constructor(sortAttribute: AttachmentSort.AttachmentSortAttribute, direction: Sort.Direction = Sort.Direction.ASC)","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn.AttachmentSortColumn"]},{"name":"constructor(sortAttribute: SortAttribute, direction: Sort.Direction = Sort.Direction.ASC)","description":"net.corda.core.node.services.vault.Sort.SortColumn.SortColumn","location":"docs/net.corda.core.node.services.vault/-sort/-sort-column/-sort-column.html","searchKeys":["SortColumn","constructor(sortAttribute: SortAttribute, direction: Sort.Direction = Sort.Direction.ASC)","net.corda.core.node.services.vault.Sort.SortColumn.SortColumn"]},{"name":"constructor(source: <Error class: unknown class><T>, strictMode: Boolean)","description":"net.corda.core.observable.internal.OnResilientSubscribe.OnResilientSubscribe","location":"docs/net.corda.core.observable.internal/-on-resilient-subscribe/-on-resilient-subscribe.html","searchKeys":["OnResilientSubscribe","constructor(source: <Error class: unknown class><T>, strictMode: Boolean)","net.corda.core.observable.internal.OnResilientSubscribe.OnResilientSubscribe"]},{"name":"constructor(source: P, amount: Amount<T>, ref: Any? = null)","description":"net.corda.core.contracts.SourceAndAmount.SourceAndAmount","location":"docs/net.corda.core.contracts/-source-and-amount/-source-and-amount.html","searchKeys":["SourceAndAmount","constructor(source: P, amount: Amount<T>, ref: Any? = null)","net.corda.core.contracts.SourceAndAmount.SourceAndAmount"]},{"name":"constructor(stackTraceElement: StackTraceElement, stackObjects: List<Any?>)","description":"net.corda.core.flows.FlowStackSnapshot.Frame.Frame","location":"docs/net.corda.core.flows/-flow-stack-snapshot/-frame/-frame.html","searchKeys":["Frame","constructor(stackTraceElement: StackTraceElement, stackObjects: List<Any?>)","net.corda.core.flows.FlowStackSnapshot.Frame.Frame"]},{"name":"constructor(startJmxHttpServer: Boolean = false, jmxHttpServerPortAllocation: PortAllocation = incrementalPortAllocation())","description":"net.corda.testing.driver.JmxPolicy.JmxPolicy","location":"docs/net.corda.testing.driver/-jmx-policy/-jmx-policy.html","searchKeys":["JmxPolicy","constructor(startJmxHttpServer: Boolean = false, jmxHttpServerPortAllocation: PortAllocation = incrementalPortAllocation())","net.corda.testing.driver.JmxPolicy.JmxPolicy"]},{"name":"constructor(startingPort: Int)","description":"net.corda.testing.driver.PortAllocation.Incremental.Incremental","location":"docs/net.corda.testing.driver/-port-allocation/-incremental/-incremental.html","searchKeys":["Incremental","constructor(startingPort: Int)","net.corda.testing.driver.PortAllocation.Incremental.Incremental"]},{"name":"constructor(state: ContractState)","description":"net.corda.core.internal.StatePointerSearch.StatePointerSearch","location":"docs/net.corda.core.internal/-state-pointer-search/-state-pointer-search.html","searchKeys":["StatePointerSearch","constructor(state: ContractState)","net.corda.core.internal.StatePointerSearch.StatePointerSearch"]},{"name":"constructor(state: ContractState, contract: ContractClassName)","description":"net.corda.core.contracts.StateAndContract.StateAndContract","location":"docs/net.corda.core.contracts/-state-and-contract/-state-and-contract.html","searchKeys":["StateAndContract","constructor(state: ContractState, contract: ContractClassName)","net.corda.core.contracts.StateAndContract.StateAndContract"]},{"name":"constructor(state: TransactionState<T>, ref: StateRef)","description":"net.corda.core.contracts.StateAndRef.StateAndRef","location":"docs/net.corda.core.contracts/-state-and-ref/-state-and-ref.html","searchKeys":["StateAndRef","constructor(state: TransactionState<T>, ref: StateRef)","net.corda.core.contracts.StateAndRef.StateAndRef"]},{"name":"constructor(stateAndRef: StateAndRef<*>, upgradedContractClass: Class<out UpgradedContract<*, *>>)","description":"net.corda.core.flows.ContractUpgradeFlow.Authorise.Authorise","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-authorise/-authorise.html","searchKeys":["Authorise","constructor(stateAndRef: StateAndRef<*>, upgradedContractClass: Class<out UpgradedContract<*, *>>)","net.corda.core.flows.ContractUpgradeFlow.Authorise.Authorise"]},{"name":"constructor(stateAndRef: StateAndRef<T>)","description":"net.corda.core.contracts.ReferencedStateAndRef.ReferencedStateAndRef","location":"docs/net.corda.core.contracts/-referenced-state-and-ref/-referenced-state-and-ref.html","searchKeys":["ReferencedStateAndRef","constructor(stateAndRef: StateAndRef<T>)","net.corda.core.contracts.ReferencedStateAndRef.ReferencedStateAndRef"]},{"name":"constructor(stateMachineInfo: StateMachineInfo)","description":"net.corda.core.messaging.StateMachineUpdate.Added.Added","location":"docs/net.corda.core.messaging/-state-machine-update/-added/-added.html","searchKeys":["Added","constructor(stateMachineInfo: StateMachineInfo)","net.corda.core.messaging.StateMachineUpdate.Added.Added"]},{"name":"constructor(stateMachineRunId: StateMachineRunId, transactionId: SecureHash)","description":"net.corda.core.messaging.StateMachineTransactionMapping.StateMachineTransactionMapping","location":"docs/net.corda.core.messaging/-state-machine-transaction-mapping/-state-machine-transaction-mapping.html","searchKeys":["StateMachineTransactionMapping","constructor(stateMachineRunId: StateMachineRunId, transactionId: SecureHash)","net.corda.core.messaging.StateMachineTransactionMapping.StateMachineTransactionMapping"]},{"name":"constructor(stateMachineRunId: StateMachineRunId, txId: String, status: TransactionStatus, timestamp: Instant, metadata: TransactionMetadata?)","description":"net.corda.core.flows.FlowTransactionInfo.FlowTransactionInfo","location":"docs/net.corda.core.flows/-flow-transaction-info/-flow-transaction-info.html","searchKeys":["FlowTransactionInfo","constructor(stateMachineRunId: StateMachineRunId, txId: String, status: TransactionStatus, timestamp: Instant, metadata: TransactionMetadata?)","net.corda.core.flows.FlowTransactionInfo.FlowTransactionInfo"]},{"name":"constructor(stateRef: PersistentStateRef? = null)","description":"net.corda.core.schemas.PersistentState.PersistentState","location":"docs/net.corda.core.schemas/-persistent-state/-persistent-state.html","searchKeys":["PersistentState","constructor(stateRef: PersistentStateRef? = null)","net.corda.core.schemas.PersistentState.PersistentState"]},{"name":"constructor(stateRef: StateRef)","description":"net.corda.core.flows.ContractUpgradeFlow.Deauthorise.Deauthorise","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-deauthorise/-deauthorise.html","searchKeys":["Deauthorise","constructor(stateRef: StateRef)","net.corda.core.flows.ContractUpgradeFlow.Deauthorise.Deauthorise"]},{"name":"constructor(stateRef: StateRef)","description":"net.corda.core.schemas.PersistentStateRef.PersistentStateRef","location":"docs/net.corda.core.schemas/-persistent-state-ref/-persistent-state-ref.html","searchKeys":["PersistentStateRef","constructor(stateRef: StateRef)","net.corda.core.schemas.PersistentStateRef.PersistentStateRef"]},{"name":"constructor(stateRef: StateRef)","description":"net.corda.core.transactions.ReferenceStateRef.ReferenceStateRef","location":"docs/net.corda.core.transactions/-reference-state-ref/-reference-state-ref.html","searchKeys":["ReferenceStateRef","constructor(stateRef: StateRef)","net.corda.core.transactions.ReferenceStateRef.ReferenceStateRef"]},{"name":"constructor(stateRef: StateRef, modification: M)","description":"net.corda.core.flows.AbstractStateReplacementFlow.Proposal.Proposal","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-proposal/-proposal.html","searchKeys":["Proposal","constructor(stateRef: StateRef, modification: M)","net.corda.core.flows.AbstractStateReplacementFlow.Proposal.Proposal"]},{"name":"constructor(stateRefs: Set<StateRef>, services: ServiceHub)","description":"net.corda.core.internal.WaitForStateConsumption.WaitForStateConsumption","location":"docs/net.corda.core.internal/-wait-for-state-consumption/-wait-for-state-consumption.html","searchKeys":["WaitForStateConsumption","constructor(stateRefs: Set<StateRef>, services: ServiceHub)","net.corda.core.internal.WaitForStateConsumption.WaitForStateConsumption"]},{"name":"constructor(states: Iterable<StateAndRef<T>>)","description":"net.corda.core.node.services.Vault.Vault","location":"docs/net.corda.core.node.services/-vault/-vault.html","searchKeys":["Vault","constructor(states: Iterable<StateAndRef<T>>)","net.corda.core.node.services.Vault.Vault"]},{"name":"constructor(states: List<StateAndRef<T>>, statesMetadata: List<Vault.StateMetadata>, totalStatesAvailable: Long, stateTypes: Vault.StateStatus, otherResults: List<Any>, previousPageAnchor: StateRef? = null)","description":"net.corda.core.node.services.Vault.Page.Page","location":"docs/net.corda.core.node.services/-vault/-page/-page.html","searchKeys":["Page","constructor(states: List<StateAndRef<T>>, statesMetadata: List<Vault.StateMetadata>, totalStatesAvailable: Long, stateTypes: Vault.StateStatus, otherResults: List<Any>, previousPageAnchor: StateRef? = null)","net.corda.core.node.services.Vault.Page.Page"]},{"name":"constructor(states: List<TransactionState<ContractState>>, contractsClassName: String? = null, minimumRequiredContractClassVersion: Version? = null)","description":"net.corda.core.transactions.MissingContractAttachments.MissingContractAttachments","location":"docs/net.corda.core.transactions/-missing-contract-attachments/-missing-contract-attachments.html","searchKeys":["MissingContractAttachments","constructor(states: List<TransactionState<ContractState>>, contractsClassName: String? = null, minimumRequiredContractClassVersion: Version? = null)","net.corda.core.transactions.MissingContractAttachments.MissingContractAttachments"]},{"name":"constructor(statesToConsume: List<StateRef>, transactionId: SecureHash)","description":"net.corda.core.flows.NotarisationRequest.NotarisationRequest","location":"docs/net.corda.core.flows/-notarisation-request/-notarisation-request.html","searchKeys":["NotarisationRequest","constructor(statesToConsume: List<StateRef>, transactionId: SecureHash)","net.corda.core.flows.NotarisationRequest.NotarisationRequest"]},{"name":"constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null, externalIds: List<UUID> = emptyList())","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null, externalIds: List<UUID> = emptyList())","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null, externalIds: List<UUID> = emptyList(), exactParticipants: List<AbstractParty>? = null)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null, externalIds: List<UUID> = emptyList(), exactParticipants: List<AbstractParty>? = null)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?, stateRefs: List<StateRef>?)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?, stateRefs: List<StateRef>?)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?, stateRefs: List<StateRef>?, notary: List<AbstractParty>?)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?, stateRefs: List<StateRef>?, notary: List<AbstractParty>?)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?, stateRefs: List<StateRef>?, notary: List<AbstractParty>?, softLockingCondition: QueryCriteria.SoftLockingCondition?)","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/-vault-query-criteria.html","searchKeys":["VaultQueryCriteria","constructor(status: Vault.StateStatus, contractStateTypes: Set<Class<out ContractState>>?, stateRefs: List<StateRef>?, notary: List<AbstractParty>?, softLockingCondition: QueryCriteria.SoftLockingCondition?)","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.VaultQueryCriteria"]},{"name":"constructor(stx: SignedTransaction)","description":"net.corda.core.flows.AbstractStateReplacementFlow.UpgradeTx.UpgradeTx","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-upgrade-tx/-upgrade-tx.html","searchKeys":["UpgradeTx","constructor(stx: SignedTransaction)","net.corda.core.flows.AbstractStateReplacementFlow.UpgradeTx.UpgradeTx"]},{"name":"constructor(stx: SignedTransaction, distributionList: ByteArray, isFinality: Boolean)","description":"net.corda.core.flows.SignedTransactionWithDistributionList.SignedTransactionWithDistributionList","location":"docs/net.corda.core.flows/-signed-transaction-with-distribution-list/-signed-transaction-with-distribution-list.html","searchKeys":["SignedTransactionWithDistributionList","constructor(stx: SignedTransaction, distributionList: ByteArray, isFinality: Boolean)","net.corda.core.flows.SignedTransactionWithDistributionList.SignedTransactionWithDistributionList"]},{"name":"constructor(stx: SignedTransaction, participantSessions: Set<FlowSession>, observerSessions: Set<FlowSession>, senderStatesToRecord: StatesToRecord, recordMetaDataEvenIfNotFullySigned: Boolean = false)","description":"net.corda.core.flows.SendTransactionFlow.SendTransactionFlow","location":"docs/net.corda.core.flows/-send-transaction-flow/-send-transaction-flow.html","searchKeys":["SendTransactionFlow","constructor(stx: SignedTransaction, participantSessions: Set<FlowSession>, observerSessions: Set<FlowSession>, senderStatesToRecord: StatesToRecord, recordMetaDataEvenIfNotFullySigned: Boolean = false)","net.corda.core.flows.SendTransactionFlow.SendTransactionFlow"]},{"name":"constructor(stx: SignedTransaction, progressTracker: ProgressTracker)","description":"net.corda.core.flows.NotaryFlow.Client.Client","location":"docs/net.corda.core.flows/-notary-flow/-client/-client.html","searchKeys":["Client","constructor(stx: SignedTransaction, progressTracker: ProgressTracker)","net.corda.core.flows.NotaryFlow.Client.Client"]},{"name":"constructor(stx: SignedTransaction, progressTracker: ProgressTracker, skipVerification: Boolean = false)","description":"net.corda.core.flows.NotaryFlow.Client.Client","location":"docs/net.corda.core.flows/-notary-flow/-client/-client.html","searchKeys":["Client","constructor(stx: SignedTransaction, progressTracker: ProgressTracker, skipVerification: Boolean = false)","net.corda.core.flows.NotaryFlow.Client.Client"]},{"name":"constructor(stx: SignedTransaction, recipient: AbstractParty?)","description":"net.corda.finance.flows.AbstractCashFlow.Result.Result","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-result/-result.html","searchKeys":["Result","constructor(stx: SignedTransaction, recipient: AbstractParty?)","net.corda.finance.flows.AbstractCashFlow.Result.Result"]},{"name":"constructor(stx: SignedTransaction, skipVerification: Boolean = false)","description":"net.corda.core.flows.NotaryFlow.Client.Client","location":"docs/net.corda.core.flows/-notary-flow/-client/-client.html","searchKeys":["Client","constructor(stx: SignedTransaction, skipVerification: Boolean = false)","net.corda.core.flows.NotaryFlow.Client.Client"]},{"name":"constructor(stx: SignedTransaction, status: TransactionStatus)","description":"net.corda.core.node.services.SignedTransactionWithStatus.SignedTransactionWithStatus","location":"docs/net.corda.core.node.services/-signed-transaction-with-status/-signed-transaction-with-status.html","searchKeys":["SignedTransactionWithStatus","constructor(stx: SignedTransaction, status: TransactionStatus)","net.corda.core.node.services.SignedTransactionWithStatus.SignedTransactionWithStatus"]},{"name":"constructor(target: T?, method: Method, args: Array<Any?>)","description":"net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.ParsedMethodCall","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-parsed-method-call/-parsed-method-call.html","searchKeys":["ParsedMethodCall","constructor(target: T?, method: Method, args: Array<Any?>)","net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.ParsedMethodCall"]},{"name":"constructor(targetType: Class<out T>, om: <Error class: unknown class> = JacksonSupport.createNonRpcMapper(YAMLFactory()))","description":"net.corda.client.jackson.StringToMethodCallParser.StringToMethodCallParser","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-string-to-method-call-parser.html","searchKeys":["StringToMethodCallParser","constructor(targetType: Class<out T>, om: <Error class: unknown class> = JacksonSupport.createNonRpcMapper(YAMLFactory()))","net.corda.client.jackson.StringToMethodCallParser.StringToMethodCallParser"]},{"name":"constructor(targetType: KClass<out T>)","description":"net.corda.client.jackson.StringToMethodCallParser.StringToMethodCallParser","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-string-to-method-call-parser.html","searchKeys":["StringToMethodCallParser","constructor(targetType: KClass<out T>)","net.corda.client.jackson.StringToMethodCallParser.StringToMethodCallParser"]},{"name":"constructor(telemetryId: UUID)","description":"net.corda.core.internal.telemetry.EndSpanEvent.EndSpanEvent","location":"docs/net.corda.core.internal.telemetry/-end-span-event/-end-span-event.html","searchKeys":["EndSpanEvent","constructor(telemetryId: UUID)","net.corda.core.internal.telemetry.EndSpanEvent.EndSpanEvent"]},{"name":"constructor(telemetryId: UUID)","description":"net.corda.core.internal.telemetry.EndSpanForFlowEvent.EndSpanForFlowEvent","location":"docs/net.corda.core.internal.telemetry/-end-span-for-flow-event/-end-span-for-flow-event.html","searchKeys":["EndSpanForFlowEvent","constructor(telemetryId: UUID)","net.corda.core.internal.telemetry.EndSpanForFlowEvent.EndSpanForFlowEvent"]},{"name":"constructor(telemetryId: UUID, telemetryStatusCode: TelemetryStatusCode, message: String)","description":"net.corda.core.internal.telemetry.SetStatusEvent.SetStatusEvent","location":"docs/net.corda.core.internal.telemetry/-set-status-event/-set-status-event.html","searchKeys":["SetStatusEvent","constructor(telemetryId: UUID, telemetryStatusCode: TelemetryStatusCode, message: String)","net.corda.core.internal.telemetry.SetStatusEvent.SetStatusEvent"]},{"name":"constructor(telemetryId: UUID, throwable: Throwable)","description":"net.corda.core.internal.telemetry.RecordExceptionEvent.RecordExceptionEvent","location":"docs/net.corda.core.internal.telemetry/-record-exception-event/-record-exception-event.html","searchKeys":["RecordExceptionEvent","constructor(telemetryId: UUID, throwable: Throwable)","net.corda.core.internal.telemetry.RecordExceptionEvent.RecordExceptionEvent"]},{"name":"constructor(telemetryService: TelemetryServiceImpl)","description":"net.corda.core.internal.telemetry.TelemetryId.TelemetryId","location":"docs/net.corda.core.internal.telemetry/-telemetry-id/-telemetry-id.html","searchKeys":["TelemetryId","constructor(telemetryService: TelemetryServiceImpl)","net.corda.core.internal.telemetry.TelemetryId.TelemetryId"]},{"name":"constructor(template: Obligation.Terms<P>)","description":"net.corda.finance.contracts.asset.MultilateralNetState.MultilateralNetState","location":"docs/net.corda.finance.contracts.asset/-multilateral-net-state/-multilateral-net-state.html","searchKeys":["MultilateralNetState","constructor(template: Obligation.Terms<P>)","net.corda.finance.contracts.asset.MultilateralNetState.MultilateralNetState"]},{"name":"constructor(time: Instant, flowClass: String, stackFrames: List<FlowStackSnapshot.Frame>)","description":"net.corda.core.flows.FlowStackSnapshot.FlowStackSnapshot","location":"docs/net.corda.core.flows/-flow-stack-snapshot/-flow-stack-snapshot.html","searchKeys":["FlowStackSnapshot","constructor(time: Instant, flowClass: String, stackFrames: List<FlowStackSnapshot.Frame>)","net.corda.core.flows.FlowStackSnapshot.FlowStackSnapshot"]},{"name":"constructor(timeframe: FlowTimeWindow? = null, initiatedBy: List<CordaX500Name>? = null, counterParties: List<CordaX500Name>? = null)","description":"net.corda.core.flows.FlowRecoveryQuery.FlowRecoveryQuery","location":"docs/net.corda.core.flows/-flow-recovery-query/-flow-recovery-query.html","searchKeys":["FlowRecoveryQuery","constructor(timeframe: FlowTimeWindow? = null, initiatedBy: List<CordaX500Name>? = null, counterParties: List<CordaX500Name>? = null)","net.corda.core.flows.FlowRecoveryQuery.FlowRecoveryQuery"]},{"name":"constructor(timeout: Duration, maxRestartCount: Int, backoffBase: Double)","description":"net.corda.testing.node.MockNetFlowTimeOut.MockNetFlowTimeOut","location":"docs/net.corda.testing.node/-mock-net-flow-time-out/-mock-net-flow-time-out.html","searchKeys":["MockNetFlowTimeOut","constructor(timeout: Duration, maxRestartCount: Int, backoffBase: Double)","net.corda.testing.node.MockNetFlowTimeOut.MockNetFlowTimeOut"]},{"name":"constructor(tokenQuantity: Long, token: T)","description":"net.corda.core.contracts.Amount.Amount","location":"docs/net.corda.core.contracts/-amount/-amount.html","searchKeys":["Amount","constructor(tokenQuantity: Long, token: T)","net.corda.core.contracts.Amount.Amount"]},{"name":"constructor(topic: String, data: ByteSequence, uniqueMessageId: <Error class: unknown class>, debugTimestamp: Instant = Instant.now(), senderUUID: String? = null)","description":"net.corda.testing.node.internal.InMemoryMessage.InMemoryMessage","location":"docs/net.corda.testing.node.internal/-in-memory-message/-in-memory-message.html","searchKeys":["InMemoryMessage","constructor(topic: String, data: ByteSequence, uniqueMessageId: <Error class: unknown class>, debugTimestamp: Instant = Instant.now(), senderUUID: String? = null)","net.corda.testing.node.internal.InMemoryMessage.InMemoryMessage"]},{"name":"constructor(totalRecoveredRecords: Long, totalRecoveredTransactions: Long, totalRecoveredInFlightTransactions: Long, totalErrors: Long)","description":"net.corda.core.flows.LedgerRecoveryResult.LedgerRecoveryResult","location":"docs/net.corda.core.flows/-ledger-recovery-result/-ledger-recovery-result.html","searchKeys":["LedgerRecoveryResult","constructor(totalRecoveredRecords: Long, totalRecoveredTransactions: Long, totalRecoveredInFlightTransactions: Long, totalErrors: Long)","net.corda.core.flows.LedgerRecoveryResult.LedgerRecoveryResult"]},{"name":"constructor(traceId: UUID, baggage: Map<String, String>)","description":"net.corda.core.internal.telemetry.SimpleLogContext.SimpleLogContext","location":"docs/net.corda.core.internal.telemetry/-simple-log-context/-simple-log-context.html","searchKeys":["SimpleLogContext","constructor(traceId: UUID, baggage: Map<String, String>)","net.corda.core.internal.telemetry.SimpleLogContext.SimpleLogContext"]},{"name":"constructor(tracker: ProgressTracker, newStep: ProgressTracker.Step)","description":"net.corda.core.utilities.ProgressTracker.Change.Position.Position","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-position/-position.html","searchKeys":["Position","constructor(tracker: ProgressTracker, newStep: ProgressTracker.Step)","net.corda.core.utilities.ProgressTracker.Change.Position.Position"]},{"name":"constructor(tracker: ProgressTracker, ofStep: ProgressTracker.Step)","description":"net.corda.core.utilities.ProgressTracker.Change.Rendering.Rendering","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-rendering/-rendering.html","searchKeys":["Rendering","constructor(tracker: ProgressTracker, ofStep: ProgressTracker.Step)","net.corda.core.utilities.ProgressTracker.Change.Rendering.Rendering"]},{"name":"constructor(tracker: ProgressTracker, parent: ProgressTracker.Step)","description":"net.corda.core.utilities.ProgressTracker.Change.Structural.Structural","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-structural/-structural.html","searchKeys":["Structural","constructor(tracker: ProgressTracker, parent: ProgressTracker.Step)","net.corda.core.utilities.ProgressTracker.Change.Structural.Structural"]},{"name":"constructor(transaction: Any, requestSignature: NotarisationRequestSignature)","description":"net.corda.core.flows.NotarisationPayload.NotarisationPayload","location":"docs/net.corda.core.flows/-notarisation-payload/-notarisation-payload.html","searchKeys":["NotarisationPayload","constructor(transaction: Any, requestSignature: NotarisationRequestSignature)","net.corda.core.flows.NotarisationPayload.NotarisationPayload"]},{"name":"constructor(transaction: SignedTransaction)","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction)","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, extraRecipients: Set<Party>)","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, extraRecipients: Set<Party>)","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, extraRecipients: Set<Party>, progressTracker: ProgressTracker)","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, extraRecipients: Set<Party>, progressTracker: ProgressTracker)","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, firstSession: FlowSession, vararg restSessions: FlowSession)","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, firstSession: FlowSession, vararg restSessions: FlowSession)","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, otherSide: FlowSession, statesToRecord: StatesToRecord = StatesToRecord.NONE)","description":"net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow","location":"docs/net.corda.core.internal/-resolve-transactions-flow/-resolve-transactions-flow.html","searchKeys":["ResolveTransactionsFlow","constructor(transaction: SignedTransaction, otherSide: FlowSession, statesToRecord: StatesToRecord = StatesToRecord.NONE)","net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow"]},{"name":"constructor(transaction: SignedTransaction, otherSide: FlowSession, statesToRecord: StatesToRecord = StatesToRecord.NONE, deferredAck: Boolean = false)","description":"net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow","location":"docs/net.corda.core.internal/-resolve-transactions-flow/-resolve-transactions-flow.html","searchKeys":["ResolveTransactionsFlow","constructor(transaction: SignedTransaction, otherSide: FlowSession, statesToRecord: StatesToRecord = StatesToRecord.NONE, deferredAck: Boolean = false)","net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow"]},{"name":"constructor(transaction: SignedTransaction, progressTracker: ProgressTracker)","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, progressTracker: ProgressTracker)","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, observerSessions: Collection<FlowSession>)","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, observerSessions: Collection<FlowSession>)","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, oldParticipants: Collection<Party>, progressTracker: ProgressTracker)","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, oldParticipants: Collection<Party>, progressTracker: ProgressTracker)","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, progressTracker: ProgressTracker = tracker())","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, progressTracker: ProgressTracker = tracker())","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, statesToRecord: StatesToRecord, progressTracker: ProgressTracker = tracker())","description":"net.corda.core.flows.FinalityFlow.FinalityFlow","location":"docs/net.corda.core.flows/-finality-flow/-finality-flow.html","searchKeys":["FinalityFlow","constructor(transaction: SignedTransaction, sessions: Collection<FlowSession>, statesToRecord: StatesToRecord, progressTracker: ProgressTracker = tracker())","net.corda.core.flows.FinalityFlow.FinalityFlow"]},{"name":"constructor(transactionClassLoader: ClassLoader)","description":"net.corda.core.internal.verification.TransactionVerifier.TransactionVerifier","location":"docs/net.corda.core.internal.verification/-transaction-verifier/-transaction-verifier.html","searchKeys":["TransactionVerifier","constructor(transactionClassLoader: ClassLoader)","net.corda.core.internal.verification.TransactionVerifier.TransactionVerifier"]},{"name":"constructor(transactionName: String, cause: Throwable)","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.VerifiesFailed.VerifiesFailed","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/-verifies-failed/-verifies-failed.html","searchKeys":["VerifiesFailed","constructor(transactionName: String, cause: Throwable)","net.corda.testing.dsl.TestLedgerDSLInterpreter.VerifiesFailed.VerifiesFailed"]},{"name":"constructor(transport: <Error class: unknown class>, rpcConfiguration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT, haPoolTransportConfigurations: List<<Error class: unknown class>> = emptyList())","description":"net.corda.client.rpc.internal.RPCClient.RPCClient","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/-r-p-c-client.html","searchKeys":["RPCClient","constructor(transport: <Error class: unknown class>, rpcConfiguration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, serializationContext: SerializationContext = SerializationDefaults.RPC_CLIENT_CONTEXT, haPoolTransportConfigurations: List<<Error class: unknown class>> = emptyList())","net.corda.client.rpc.internal.RPCClient.RPCClient"]},{"name":"constructor(trustStorePath: Path, trustStorePassword: String, trustStoreProvider: String = \"JKS\")","description":"net.corda.core.messaging.ClientRpcSslOptions.ClientRpcSslOptions","location":"docs/net.corda.core.messaging/-client-rpc-ssl-options/-client-rpc-ssl-options.html","searchKeys":["ClientRpcSslOptions","constructor(trustStorePath: Path, trustStorePassword: String, trustStoreProvider: String = \"JKS\")","net.corda.core.messaging.ClientRpcSslOptions.ClientRpcSslOptions"]},{"name":"constructor(tx: TransactionBuilder, cashSigningPubKeys: List<PublicKey>)","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx.SharedTx","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-shared-tx/-shared-tx.html","searchKeys":["SharedTx","constructor(tx: TransactionBuilder, cashSigningPubKeys: List<PublicKey>)","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx.SharedTx"]},{"name":"constructor(txBits: SerializedBytes<CoreTransaction>, sigs: List<TransactionSignature>)","description":"net.corda.core.transactions.SignedTransaction.SignedTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/-signed-transaction.html","searchKeys":["SignedTransaction","constructor(txBits: SerializedBytes<CoreTransaction>, sigs: List<TransactionSignature>)","net.corda.core.transactions.SignedTransaction.SignedTransaction"]},{"name":"constructor(txHashes: Set<SecureHash>, otherSide: FlowSession, statesToRecord: StatesToRecord = StatesToRecord.NONE)","description":"net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow","location":"docs/net.corda.core.internal/-resolve-transactions-flow/-resolve-transactions-flow.html","searchKeys":["ResolveTransactionsFlow","constructor(txHashes: Set<SecureHash>, otherSide: FlowSession, statesToRecord: StatesToRecord = StatesToRecord.NONE)","net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow"]},{"name":"constructor(txHashes: Set<SecureHash>, otherSide: FlowSession, statesToRecord: StatesToRecord, deferredAck: Boolean)","description":"net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow","location":"docs/net.corda.core.internal/-resolve-transactions-flow/-resolve-transactions-flow.html","searchKeys":["ResolveTransactionsFlow","constructor(txHashes: Set<SecureHash>, otherSide: FlowSession, statesToRecord: StatesToRecord, deferredAck: Boolean)","net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow"]},{"name":"constructor(txHashes: Set<SecureHash>, otherSide: FlowSession, statesToRecord: StatesToRecord, deferredAck: Boolean, recoveryMode: Boolean)","description":"net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow","location":"docs/net.corda.core.internal/-resolve-transactions-flow/-resolve-transactions-flow.html","searchKeys":["ResolveTransactionsFlow","constructor(txHashes: Set<SecureHash>, otherSide: FlowSession, statesToRecord: StatesToRecord, deferredAck: Boolean, recoveryMode: Boolean)","net.corda.core.internal.ResolveTransactionsFlow.ResolveTransactionsFlow"]},{"name":"constructor(txId: SecureHash)","description":"net.corda.core.contracts.TransactionVerificationException.AttachmentTooBigException.AttachmentTooBigException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-attachment-too-big-exception/-attachment-too-big-exception.html","searchKeys":["AttachmentTooBigException","constructor(txId: SecureHash)","net.corda.core.contracts.TransactionVerificationException.AttachmentTooBigException.AttachmentTooBigException"]},{"name":"constructor(txId: SecureHash)","description":"net.corda.core.contracts.TransactionVerificationException.UnsupportedHashTypeException.UnsupportedHashTypeException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-unsupported-hash-type-exception/-unsupported-hash-type-exception.html","searchKeys":["UnsupportedHashTypeException","constructor(txId: SecureHash)","net.corda.core.contracts.TransactionVerificationException.UnsupportedHashTypeException.UnsupportedHashTypeException"]},{"name":"constructor(txId: SecureHash, attachmentHash: AttachmentId)","description":"net.corda.core.contracts.TransactionVerificationException.InvalidAttachmentException.InvalidAttachmentException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-invalid-attachment-exception/-invalid-attachment-exception.html","searchKeys":["InvalidAttachmentException","constructor(txId: SecureHash, attachmentHash: AttachmentId)","net.corda.core.contracts.TransactionVerificationException.InvalidAttachmentException.InvalidAttachmentException"]},{"name":"constructor(txId: SecureHash, attachmentHash: AttachmentId, invalidClassName: String, packageName: String)","description":"net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.PackageOwnershipException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-package-ownership-exception/-package-ownership-exception.html","searchKeys":["PackageOwnershipException","constructor(txId: SecureHash, attachmentHash: AttachmentId, invalidClassName: String, packageName: String)","net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.PackageOwnershipException"]},{"name":"constructor(txId: SecureHash, attachmentId: Attachment)","description":"net.corda.core.contracts.TransactionVerificationException.DuplicateAttachmentsRejection.DuplicateAttachmentsRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-duplicate-attachments-rejection/-duplicate-attachments-rejection.html","searchKeys":["DuplicateAttachmentsRejection","constructor(txId: SecureHash, attachmentId: Attachment)","net.corda.core.contracts.TransactionVerificationException.DuplicateAttachmentsRejection.DuplicateAttachmentsRejection"]},{"name":"constructor(txId: SecureHash, consumedStates: Map<StateRef, StateConsumptionDetails>)","description":"net.corda.core.flows.NotaryError.Conflict.Conflict","location":"docs/net.corda.core.flows/-notary-error/-conflict/-conflict.html","searchKeys":["Conflict","constructor(txId: SecureHash, consumedStates: Map<StateRef, StateConsumptionDetails>)","net.corda.core.flows.NotaryError.Conflict.Conflict"]},{"name":"constructor(txId: SecureHash, contractClass: String)","description":"net.corda.core.contracts.TransactionVerificationException.ConflictingAttachmentsRejection.ConflictingAttachmentsRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-conflicting-attachments-rejection/-conflicting-attachments-rejection.html","searchKeys":["ConflictingAttachmentsRejection","constructor(txId: SecureHash, contractClass: String)","net.corda.core.contracts.TransactionVerificationException.ConflictingAttachmentsRejection.ConflictingAttachmentsRejection"]},{"name":"constructor(txId: SecureHash, contractClass: String)","description":"net.corda.core.contracts.TransactionVerificationException.ContractConstraintRejection.ContractConstraintRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-contract-constraint-rejection/-contract-constraint-rejection.html","searchKeys":["ContractConstraintRejection","constructor(txId: SecureHash, contractClass: String)","net.corda.core.contracts.TransactionVerificationException.ContractConstraintRejection.ContractConstraintRejection"]},{"name":"constructor(txId: SecureHash, contractClass: String)","description":"net.corda.core.contracts.TransactionVerificationException.MissingAttachmentRejection.MissingAttachmentRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-missing-attachment-rejection/-missing-attachment-rejection.html","searchKeys":["MissingAttachmentRejection","constructor(txId: SecureHash, contractClass: String)","net.corda.core.contracts.TransactionVerificationException.MissingAttachmentRejection.MissingAttachmentRejection"]},{"name":"constructor(txId: SecureHash, contractClass: String, inputConstraint: AttachmentConstraint, outputConstraint: AttachmentConstraint)","description":"net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection.ConstraintPropagationRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-constraint-propagation-rejection/-constraint-propagation-rejection.html","searchKeys":["ConstraintPropagationRejection","constructor(txId: SecureHash, contractClass: String, inputConstraint: AttachmentConstraint, outputConstraint: AttachmentConstraint)","net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection.ConstraintPropagationRejection"]},{"name":"constructor(txId: SecureHash, contractClass: String, reason: String)","description":"net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection.InvalidConstraintRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-invalid-constraint-rejection/-invalid-constraint-rejection.html","searchKeys":["InvalidConstraintRejection","constructor(txId: SecureHash, contractClass: String, reason: String)","net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection.InvalidConstraintRejection"]},{"name":"constructor(txId: SecureHash, encumberedIndex: Int, encumbranceIndex: Int, encumberedNotary: Party, encumbranceNotary: Party)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNotaryMismatchEncumbranceException.TransactionNotaryMismatchEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-notary-mismatch-encumbrance-exception/-transaction-notary-mismatch-encumbrance-exception.html","searchKeys":["TransactionNotaryMismatchEncumbranceException","constructor(txId: SecureHash, encumberedIndex: Int, encumbranceIndex: Int, encumberedNotary: Party, encumbranceNotary: Party)","net.corda.core.contracts.TransactionVerificationException.TransactionNotaryMismatchEncumbranceException.TransactionNotaryMismatchEncumbranceException"]},{"name":"constructor(txId: SecureHash, forceRecover: Boolean = false)","description":"net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/-finality-recovery-flow.html","searchKeys":["FinalityRecoveryFlow","constructor(txId: SecureHash, forceRecover: Boolean = false)","net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow"]},{"name":"constructor(txId: SecureHash, ids: List<SecureHash>)","description":"net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException.UntrustedAttachmentsException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-untrusted-attachments-exception/-untrusted-attachments-exception.html","searchKeys":["UntrustedAttachmentsException","constructor(txId: SecureHash, ids: List<SecureHash>)","net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException.UntrustedAttachmentsException"]},{"name":"constructor(txId: SecureHash, index: Int)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionDuplicateEncumbranceException.TransactionDuplicateEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-duplicate-encumbrance-exception/-transaction-duplicate-encumbrance-exception.html","searchKeys":["TransactionDuplicateEncumbranceException","constructor(txId: SecureHash, index: Int)","net.corda.core.contracts.TransactionVerificationException.TransactionDuplicateEncumbranceException.TransactionDuplicateEncumbranceException"]},{"name":"constructor(txId: SecureHash, inputStateRef: StateRef, txnNetworkParameters: NetworkParameters, inputNetworkParameters: NetworkParameters)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNetworkParameterOrderingException.TransactionNetworkParameterOrderingException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-network-parameter-ordering-exception/-transaction-network-parameter-ordering-exception.html","searchKeys":["TransactionNetworkParameterOrderingException","constructor(txId: SecureHash, inputStateRef: StateRef, txnNetworkParameters: NetworkParameters, inputNetworkParameters: NetworkParameters)","net.corda.core.contracts.TransactionVerificationException.TransactionNetworkParameterOrderingException.TransactionNetworkParameterOrderingException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.BrokenTransactionException.BrokenTransactionException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-broken-transaction-exception/-broken-transaction-exception.html","searchKeys":["BrokenTransactionException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.BrokenTransactionException.BrokenTransactionException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection.ConstraintPropagationRejection","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-constraint-propagation-rejection/-constraint-propagation-rejection.html","searchKeys":["ConstraintPropagationRejection","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection.ConstraintPropagationRejection"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.MissingNetworkParametersException.MissingNetworkParametersException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-missing-network-parameters-exception/-missing-network-parameters-exception.html","searchKeys":["MissingNetworkParametersException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.MissingNetworkParametersException.MissingNetworkParametersException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionContractConflictException.TransactionContractConflictException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-contract-conflict-exception/-transaction-contract-conflict-exception.html","searchKeys":["TransactionContractConflictException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.TransactionContractConflictException.TransactionContractConflictException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionDuplicateEncumbranceException.TransactionDuplicateEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-duplicate-encumbrance-exception/-transaction-duplicate-encumbrance-exception.html","searchKeys":["TransactionDuplicateEncumbranceException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.TransactionDuplicateEncumbranceException.TransactionDuplicateEncumbranceException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNetworkParameterOrderingException.TransactionNetworkParameterOrderingException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-network-parameter-ordering-exception/-transaction-network-parameter-ordering-exception.html","searchKeys":["TransactionNetworkParameterOrderingException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.TransactionNetworkParameterOrderingException.TransactionNetworkParameterOrderingException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNonMatchingEncumbranceException.TransactionNonMatchingEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-non-matching-encumbrance-exception/-transaction-non-matching-encumbrance-exception.html","searchKeys":["TransactionNonMatchingEncumbranceException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.TransactionNonMatchingEncumbranceException.TransactionNonMatchingEncumbranceException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNotaryMismatchEncumbranceException.TransactionNotaryMismatchEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-notary-mismatch-encumbrance-exception/-transaction-notary-mismatch-encumbrance-exception.html","searchKeys":["TransactionNotaryMismatchEncumbranceException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.TransactionNotaryMismatchEncumbranceException.TransactionNotaryMismatchEncumbranceException"]},{"name":"constructor(txId: SecureHash, message: String)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionRequiredContractUnspecifiedException.TransactionRequiredContractUnspecifiedException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-required-contract-unspecified-exception/-transaction-required-contract-unspecified-exception.html","searchKeys":["TransactionRequiredContractUnspecifiedException","constructor(txId: SecureHash, message: String)","net.corda.core.contracts.TransactionVerificationException.TransactionRequiredContractUnspecifiedException.TransactionRequiredContractUnspecifiedException"]},{"name":"constructor(txId: SecureHash, message: String, cause: Throwable)","description":"net.corda.core.contracts.TransactionVerificationException.UnsupportedClassVersionError.UnsupportedClassVersionError","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-unsupported-class-version-error/-unsupported-class-version-error.html","searchKeys":["UnsupportedClassVersionError","constructor(txId: SecureHash, message: String, cause: Throwable)","net.corda.core.contracts.TransactionVerificationException.UnsupportedClassVersionError.UnsupportedClassVersionError"]},{"name":"constructor(txId: SecureHash, message: String, cause: Throwable?)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionVerificationException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-verification-exception.html","searchKeys":["TransactionVerificationException","constructor(txId: SecureHash, message: String, cause: Throwable?)","net.corda.core.contracts.TransactionVerificationException.TransactionVerificationException"]},{"name":"constructor(txId: SecureHash, missing: Int, inOut: TransactionVerificationException.Direction)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException.TransactionMissingEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-missing-encumbrance-exception/-transaction-missing-encumbrance-exception.html","searchKeys":["TransactionMissingEncumbranceException","constructor(txId: SecureHash, missing: Int, inOut: TransactionVerificationException.Direction)","net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException.TransactionMissingEncumbranceException"]},{"name":"constructor(txId: SecureHash, missingNetworkParametersHash: SecureHash)","description":"net.corda.core.contracts.TransactionVerificationException.MissingNetworkParametersException.MissingNetworkParametersException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-missing-network-parameters-exception/-missing-network-parameters-exception.html","searchKeys":["MissingNetworkParametersException","constructor(txId: SecureHash, missingNetworkParametersHash: SecureHash)","net.corda.core.contracts.TransactionVerificationException.MissingNetworkParametersException.MissingNetworkParametersException"]},{"name":"constructor(txId: SecureHash, nonMatching: Collection<Int>)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionNonMatchingEncumbranceException.TransactionNonMatchingEncumbranceException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-non-matching-encumbrance-exception/-transaction-non-matching-encumbrance-exception.html","searchKeys":["TransactionNonMatchingEncumbranceException","constructor(txId: SecureHash, nonMatching: Collection<Int>)","net.corda.core.contracts.TransactionVerificationException.TransactionNonMatchingEncumbranceException.TransactionNonMatchingEncumbranceException"]},{"name":"constructor(txId: SecureHash, paramsHash: SecureHash)","description":"net.corda.core.contracts.TransactionResolutionException.UnknownParametersException.UnknownParametersException","location":"docs/net.corda.core.contracts/-transaction-resolution-exception/-unknown-parameters-exception/-unknown-parameters-exception.html","searchKeys":["UnknownParametersException","constructor(txId: SecureHash, paramsHash: SecureHash)","net.corda.core.contracts.TransactionResolutionException.UnknownParametersException.UnknownParametersException"]},{"name":"constructor(txId: SecureHash, path: String)","description":"net.corda.core.contracts.TransactionVerificationException.OverlappingAttachmentsException.OverlappingAttachmentsException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-overlapping-attachments-exception/-overlapping-attachments-exception.html","searchKeys":["OverlappingAttachmentsException","constructor(txId: SecureHash, path: String)","net.corda.core.contracts.TransactionVerificationException.OverlappingAttachmentsException.OverlappingAttachmentsException"]},{"name":"constructor(txId: SecureHash, peerPartyId: SecureHash, timestamp: Instant, timestampDiscriminator: Int, encryptedDistributionList: OpaqueBytes, receiverStatesToRecord: StatesToRecord)","description":"net.corda.core.flows.ReceiverDistributionRecord.ReceiverDistributionRecord","location":"docs/net.corda.core.flows/-receiver-distribution-record/-receiver-distribution-record.html","searchKeys":["ReceiverDistributionRecord","constructor(txId: SecureHash, peerPartyId: SecureHash, timestamp: Instant, timestampDiscriminator: Int, encryptedDistributionList: OpaqueBytes, receiverStatesToRecord: StatesToRecord)","net.corda.core.flows.ReceiverDistributionRecord.ReceiverDistributionRecord"]},{"name":"constructor(txId: SecureHash, peerPartyId: SecureHash, timestamp: Instant, timestampDiscriminator: Int, senderStatesToRecord: StatesToRecord, receiverStatesToRecord: StatesToRecord)","description":"net.corda.core.flows.SenderDistributionRecord.SenderDistributionRecord","location":"docs/net.corda.core.flows/-sender-distribution-record/-sender-distribution-record.html","searchKeys":["SenderDistributionRecord","constructor(txId: SecureHash, peerPartyId: SecureHash, timestamp: Instant, timestampDiscriminator: Int, senderStatesToRecord: StatesToRecord, receiverStatesToRecord: StatesToRecord)","net.corda.core.flows.SenderDistributionRecord.SenderDistributionRecord"]},{"name":"constructor(txId: SecureHash, signatureMetadata: SignatureMetadata)","description":"net.corda.core.crypto.SignableData.SignableData","location":"docs/net.corda.core.crypto/-signable-data/-signable-data.html","searchKeys":["SignableData","constructor(txId: SecureHash, signatureMetadata: SignatureMetadata)","net.corda.core.crypto.SignableData.SignableData"]},{"name":"constructor(txId: SecureHash, state: TransactionState<ContractState>)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionRequiredContractUnspecifiedException.TransactionRequiredContractUnspecifiedException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-required-contract-unspecified-exception/-transaction-required-contract-unspecified-exception.html","searchKeys":["TransactionRequiredContractUnspecifiedException","constructor(txId: SecureHash, state: TransactionState<ContractState>)","net.corda.core.contracts.TransactionVerificationException.TransactionRequiredContractUnspecifiedException.TransactionRequiredContractUnspecifiedException"]},{"name":"constructor(txId: SecureHash, state: TransactionState<ContractState>, requiredContractClassName: String)","description":"net.corda.core.contracts.TransactionVerificationException.TransactionContractConflictException.TransactionContractConflictException","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-contract-conflict-exception/-transaction-contract-conflict-exception.html","searchKeys":["TransactionContractConflictException","constructor(txId: SecureHash, state: TransactionState<ContractState>, requiredContractClassName: String)","net.corda.core.contracts.TransactionVerificationException.TransactionContractConflictException.TransactionContractConflictException"]},{"name":"constructor(txId: SecureHash, txNotary: Party, outputNotary: Party)","description":"net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType.NotaryChangeInWrongTransactionType","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-notary-change-in-wrong-transaction-type/-notary-change-in-wrong-transaction-type.html","searchKeys":["NotaryChangeInWrongTransactionType","constructor(txId: SecureHash, txNotary: Party, outputNotary: Party)","net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType.NotaryChangeInWrongTransactionType"]},{"name":"constructor(txId: String, index: Int)","description":"net.corda.core.schemas.PersistentStateRef.PersistentStateRef","location":"docs/net.corda.core.schemas/-persistent-state-ref/-persistent-state-ref.html","searchKeys":["PersistentStateRef","constructor(txId: String, index: Int)","net.corda.core.schemas.PersistentStateRef.PersistentStateRef"]},{"name":"constructor(txIds: Collection<SecureHash> = emptySet(), flowIds: Collection<StateMachineRunId> = emptySet(), matchingCriteria: FlowRecoveryQuery? = null, forceRecover: Boolean = false, recoverAll: Boolean = false, forceRecoverFlowIds: Collection<StateMachineRunId> = emptySet(), progressTracker: ProgressTracker = ProgressTracker())","description":"net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/-finality-recovery-flow.html","searchKeys":["FinalityRecoveryFlow","constructor(txIds: Collection<SecureHash> = emptySet(), flowIds: Collection<StateMachineRunId> = emptySet(), matchingCriteria: FlowRecoveryQuery? = null, forceRecover: Boolean = false, recoverAll: Boolean = false, forceRecoverFlowIds: Collection<StateMachineRunId> = emptySet(), progressTracker: ProgressTracker = ProgressTracker())","net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow"]},{"name":"constructor(txIds: Collection<SecureHash>, flowIds: Collection<StateMachineRunId>, matchingCriteria: FlowRecoveryQuery?, forceRecover: Boolean, recoverAll: Boolean, forceRecoverFlowIds: Collection<StateMachineRunId>)","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.ExtraConstructorArgs","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/-extra-constructor-args.html","searchKeys":["ExtraConstructorArgs","constructor(txIds: Collection<SecureHash>, flowIds: Collection<StateMachineRunId>, matchingCriteria: FlowRecoveryQuery?, forceRecover: Boolean, recoverAll: Boolean, forceRecoverFlowIds: Collection<StateMachineRunId>)","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.ExtraConstructorArgs"]},{"name":"constructor(txIds: Collection<SecureHash>, forceRecover: Boolean = false, recoverAll: Boolean = false)","description":"net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow","location":"docs/net.corda.core.flows/-finality-recovery-flow/-finality-recovery-flow.html","searchKeys":["FinalityRecoveryFlow","constructor(txIds: Collection<SecureHash>, forceRecover: Boolean = false, recoverAll: Boolean = false)","net.corda.core.flows.FinalityRecoveryFlow.FinalityRecoveryFlow"]},{"name":"constructor(txhash: SecureHash, index: Int)","description":"net.corda.core.contracts.StateRef.StateRef","location":"docs/net.corda.core.contracts/-state-ref/-state-ref.html","searchKeys":["StateRef","constructor(txhash: SecureHash, index: Int)","net.corda.core.contracts.StateRef.StateRef"]},{"name":"constructor(txnId: SecureHash, message: String, cause: Throwable? = null)","description":"net.corda.core.flows.FlowRecoveryException.FlowRecoveryException","location":"docs/net.corda.core.flows/-flow-recovery-exception/-flow-recovery-exception.html","searchKeys":["FlowRecoveryException","constructor(txnId: SecureHash, message: String, cause: Throwable? = null)","net.corda.core.flows.FlowRecoveryException.FlowRecoveryException"]},{"name":"constructor(txnId: SecureHash, timestamp: Instant, timestampDiscriminator: Int)","description":"net.corda.core.flows.DistributionRecordKey.DistributionRecordKey","location":"docs/net.corda.core.flows/-distribution-record-key/-distribution-record-key.html","searchKeys":["DistributionRecordKey","constructor(txnId: SecureHash, timestamp: Instant, timestampDiscriminator: Int)","net.corda.core.flows.DistributionRecordKey.DistributionRecordKey"]},{"name":"constructor(type: AggregateFunctionType)","description":"net.corda.core.node.services.vault.ColumnPredicate.AggregateFunction.AggregateFunction","location":"docs/net.corda.core.node.services.vault/-column-predicate/-aggregate-function/-aggregate-function.html","searchKeys":["AggregateFunction","constructor(type: AggregateFunctionType)","net.corda.core.node.services.vault.ColumnPredicate.AggregateFunction.AggregateFunction"]},{"name":"constructor(type: Class<*>, msg: String)","description":"net.corda.core.flows.IllegalFlowLogicException.IllegalFlowLogicException","location":"docs/net.corda.core.flows/-illegal-flow-logic-exception/-illegal-flow-logic-exception.html","searchKeys":["IllegalFlowLogicException","constructor(type: Class<*>, msg: String)","net.corda.core.flows.IllegalFlowLogicException.IllegalFlowLogicException"]},{"name":"constructor(type: NetType)","description":"net.corda.finance.contracts.asset.Obligation.Commands.Net.Net","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-net/-net.html","searchKeys":["Net","constructor(type: NetType)","net.corda.finance.contracts.asset.Obligation.Commands.Net.Net"]},{"name":"constructor(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = emptyList())","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition.SoftLockingCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-condition/-soft-locking-condition.html","searchKeys":["SoftLockingCondition","constructor(type: QueryCriteria.SoftLockingType, lockIds: List<UUID> = emptyList())","net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition.SoftLockingCondition"]},{"name":"constructor(type: QueryCriteria.TimeInstantType, predicate: ColumnPredicate<Instant>)","description":"net.corda.core.node.services.vault.QueryCriteria.TimeCondition.TimeCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-condition/-time-condition.html","searchKeys":["TimeCondition","constructor(type: QueryCriteria.TimeInstantType, predicate: ColumnPredicate<Instant>)","net.corda.core.node.services.vault.QueryCriteria.TimeCondition.TimeCondition"]},{"name":"constructor(type: String, msg: String)","description":"net.corda.core.flows.IllegalFlowLogicException.IllegalFlowLogicException","location":"docs/net.corda.core.flows/-illegal-flow-logic-exception/-illegal-flow-logic-exception.html","searchKeys":["IllegalFlowLogicException","constructor(type: String, msg: String)","net.corda.core.flows.IllegalFlowLogicException.IllegalFlowLogicException"]},{"name":"constructor(type: String, name: String, shortName: String, minimumPlatformVersion: Int, targetPlatformVersion: Int, version: String, vendor: String, licence: String, jarHash: SecureHash.SHA256)","description":"net.corda.core.cordapp.CordappInfo.CordappInfo","location":"docs/net.corda.core.cordapp/-cordapp-info/-cordapp-info.html","searchKeys":["CordappInfo","constructor(type: String, name: String, shortName: String, minimumPlatformVersion: Int, targetPlatformVersion: Int, version: String, vendor: String, licence: String, jarHash: SecureHash.SHA256)","net.corda.core.cordapp.CordappInfo.CordappInfo"]},{"name":"constructor(uid: UniqueIdentifier, _participants: Set<AbstractParty>)","description":"net.corda.core.schemas.CommonSchemaV1.LinearState.LinearState","location":"docs/net.corda.core.schemas/-common-schema-v1/-linear-state/-linear-state.html","searchKeys":["LinearState","constructor(uid: UniqueIdentifier, _participants: Set<AbstractParty>)","net.corda.core.schemas.CommonSchemaV1.LinearState.LinearState"]},{"name":"constructor(uploaderCondition: ColumnPredicate<String>? = null, filenameCondition: ColumnPredicate<String>? = null, uploadDateCondition: ColumnPredicate<Instant>? = null)","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/-attachments-query-criteria.html","searchKeys":["AttachmentsQueryCriteria","constructor(uploaderCondition: ColumnPredicate<String>? = null, filenameCondition: ColumnPredicate<String>? = null, uploadDateCondition: ColumnPredicate<Instant>? = null)","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria"]},{"name":"constructor(uploaderCondition: ColumnPredicate<String>? = null, filenameCondition: ColumnPredicate<String>? = null, uploadDateCondition: ColumnPredicate<Instant>? = null, contractClassNamesCondition: ColumnPredicate<List<ContractClassName>>? = null, signersCondition: ColumnPredicate<List<PublicKey>>? = null, isSignedCondition: ColumnPredicate<Boolean>? = null, versionCondition: ColumnPredicate<Int>? = null)","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/-attachments-query-criteria.html","searchKeys":["AttachmentsQueryCriteria","constructor(uploaderCondition: ColumnPredicate<String>? = null, filenameCondition: ColumnPredicate<String>? = null, uploadDateCondition: ColumnPredicate<Instant>? = null, contractClassNamesCondition: ColumnPredicate<List<ContractClassName>>? = null, signersCondition: ColumnPredicate<List<PublicKey>>? = null, isSignedCondition: ColumnPredicate<Boolean>? = null, versionCondition: ColumnPredicate<Int>? = null)","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria"]},{"name":"constructor(uploaderCondition: ColumnPredicate<String>?)","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/-attachments-query-criteria.html","searchKeys":["AttachmentsQueryCriteria","constructor(uploaderCondition: ColumnPredicate<String>?)","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria"]},{"name":"constructor(uploaderCondition: ColumnPredicate<String>?, filenameCondition: ColumnPredicate<String>?)","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/-attachments-query-criteria.html","searchKeys":["AttachmentsQueryCriteria","constructor(uploaderCondition: ColumnPredicate<String>?, filenameCondition: ColumnPredicate<String>?)","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.AttachmentsQueryCriteria"]},{"name":"constructor(uri: URI, config: Map<String, Any> = emptyMap(), signed: Boolean = false)","description":"net.corda.testing.node.internal.UriTestCordapp.UriTestCordapp","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/-uri-test-cordapp.html","searchKeys":["UriTestCordapp","constructor(uri: URI, config: Map<String, Any> = emptyMap(), signed: Boolean = false)","net.corda.testing.node.internal.UriTestCordapp.UriTestCordapp"]},{"name":"constructor(url: URL, pnm: UUID?, publishNotaries: (List<NotaryInfo>) -> Unit, rootCert: X509Certificate? = null)","description":"net.corda.testing.node.internal.SharedCompatibilityZoneParams.SharedCompatibilityZoneParams","location":"docs/net.corda.testing.node.internal/-shared-compatibility-zone-params/-shared-compatibility-zone-params.html","searchKeys":["SharedCompatibilityZoneParams","constructor(url: URL, pnm: UUID?, publishNotaries: (List<NotaryInfo>) -> Unit, rootCert: X509Certificate? = null)","net.corda.testing.node.internal.SharedCompatibilityZoneParams.SharedCompatibilityZoneParams"]},{"name":"constructor(useAllNetworkNodes: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(useAllNetworkNodes: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, recoveryBatchSize: Int)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, recoveryBatchSize: Int)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, recoveryBatchSize: Int, alsoFinalize: Boolean)","description":"net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-ledger-recovery-flow.html","searchKeys":["LedgerRecoveryFlow","constructor(useAllNetworkNodes: Boolean, timeWindow: RecoveryTimeWindow, dryRun: Boolean, verboseLogging: Boolean, recoveryBatchSize: Int, alsoFinalize: Boolean)","net.corda.core.flows.LedgerRecoveryFlow.LedgerRecoveryFlow"]},{"name":"constructor(username: String)","description":"net.corda.core.flows.FlowInitiator.RPC.RPC","location":"docs/net.corda.core.flows/-flow-initiator/-r-p-c/-r-p-c.html","searchKeys":["RPC","constructor(username: String)","net.corda.core.flows.FlowInitiator.RPC.RPC"]},{"name":"constructor(username: String, password: String, permissions: Set<String>)","description":"net.corda.testing.node.User.User","location":"docs/net.corda.testing.node/-user/-user.html","searchKeys":["User","constructor(username: String, password: String, permissions: Set<String>)","net.corda.testing.node.User.User"]},{"name":"constructor(uuid: UUID)","description":"net.corda.core.flows.StateMachineRunId.StateMachineRunId","location":"docs/net.corda.core.flows/-state-machine-run-id/-state-machine-run-id.html","searchKeys":["StateMachineRunId","constructor(uuid: UUID)","net.corda.core.flows.StateMachineRunId.StateMachineRunId"]},{"name":"constructor(validating: Boolean, extraConfig: <Error class: unknown class>? = null, className: String? = null, serviceLegalName: CordaX500Name? = null)","description":"net.corda.testing.node.MockNetNotaryConfig.MockNetNotaryConfig","location":"docs/net.corda.testing.node/-mock-net-notary-config/-mock-net-notary-config.html","searchKeys":["MockNetNotaryConfig","constructor(validating: Boolean, extraConfig: <Error class: unknown class>? = null, className: String? = null, serviceLegalName: CordaX500Name? = null)","net.corda.testing.node.MockNetNotaryConfig.MockNetNotaryConfig"]},{"name":"constructor(value: A)","description":"net.corda.core.utilities.Try.Success.Success","location":"docs/net.corda.core.utilities/-try/-success/-success.html","searchKeys":["Success","constructor(value: A)","net.corda.core.utilities.Try.Success.Success"]},{"name":"constructor(value: BigInteger)","description":"net.corda.core.crypto.internal.Curve25519.ModP.ModP","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/-mod-p.html","searchKeys":["ModP","constructor(value: BigInteger)","net.corda.core.crypto.internal.Curve25519.ModP.ModP"]},{"name":"constructor(value: String)","description":"net.corda.core.context.Actor.Id.Id","location":"docs/net.corda.core.context/-actor/-id/-id.html","searchKeys":["Id","constructor(value: String)","net.corda.core.context.Actor.Id.Id"]},{"name":"constructor(value: String)","description":"net.corda.core.context.AuthServiceId.AuthServiceId","location":"docs/net.corda.core.context/-auth-service-id/-auth-service-id.html","searchKeys":["AuthServiceId","constructor(value: String)","net.corda.core.context.AuthServiceId.AuthServiceId"]},{"name":"constructor(value: String, timestamp: Instant)","description":"net.corda.core.context.Trace.InvocationId.InvocationId","location":"docs/net.corda.core.context/-trace/-invocation-id/-invocation-id.html","searchKeys":["InvocationId","constructor(value: String, timestamp: Instant)","net.corda.core.context.Trace.InvocationId.InvocationId"]},{"name":"constructor(value: String, timestamp: Instant)","description":"net.corda.core.context.Trace.SessionId.SessionId","location":"docs/net.corda.core.context/-trace/-session-id/-session-id.html","searchKeys":["SessionId","constructor(value: String, timestamp: Instant)","net.corda.core.context.Trace.SessionId.SessionId"]},{"name":"constructor(value: T, signers: List<PublicKey>)","description":"net.corda.core.contracts.Command.Command","location":"docs/net.corda.core.contracts/-command/-command.html","searchKeys":["Command","constructor(value: T, signers: List<PublicKey>)","net.corda.core.contracts.Command.Command"]},{"name":"constructor(value: VALUE, entityType: String?, timestamp: Instant)","description":"net.corda.core.utilities.Id.Id","location":"docs/net.corda.core.utilities/-id/-id.html","searchKeys":["Id","constructor(value: VALUE, entityType: String?, timestamp: Instant)","net.corda.core.utilities.Id.Id"]},{"name":"constructor(valueToString: String)","description":"net.corda.core.internal.ThreadLeakException.ThreadLeakException","location":"docs/net.corda.core.internal/-thread-leak-exception/-thread-leak-exception.html","searchKeys":["ThreadLeakException","constructor(valueToString: String)","net.corda.core.internal.ThreadLeakException.ThreadLeakException"]},{"name":"constructor(vararg inputSteps: ProgressTracker.Step)","description":"net.corda.core.utilities.ProgressTracker.ProgressTracker","location":"docs/net.corda.core.utilities/-progress-tracker/-progress-tracker.html","searchKeys":["ProgressTracker","constructor(vararg inputSteps: ProgressTracker.Step)","net.corda.core.utilities.ProgressTracker.ProgressTracker"]},{"name":"constructor(verifier: IternabilityVerifier<T> = AlwaysInternableVerifier())","description":"net.corda.core.internal.utilities.PrivateInterner.PrivateInterner","location":"docs/net.corda.core.internal.utilities/-private-interner/-private-interner.html","searchKeys":["PrivateInterner","constructor(verifier: IternabilityVerifier<T> = AlwaysInternableVerifier())","net.corda.core.internal.utilities.PrivateInterner.PrivateInterner"]},{"name":"constructor(version: String, revision: String, platformVersion: Int, vendor: String, cordapps: List<CordappInfo>)","description":"net.corda.core.node.NodeDiagnosticInfo.NodeDiagnosticInfo","location":"docs/net.corda.core.node/-node-diagnostic-info/-node-diagnostic-info.html","searchKeys":["NodeDiagnosticInfo","constructor(version: String, revision: String, platformVersion: Int, vendor: String, cordapps: List<CordappInfo>)","net.corda.core.node.NodeDiagnosticInfo.NodeDiagnosticInfo"]},{"name":"constructor(visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, hiddenComponents: Map<Int, SecureHash>)","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.ContractUpgradeFilteredTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/-contract-upgrade-filtered-transaction.html","searchKeys":["ContractUpgradeFilteredTransaction","constructor(visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, hiddenComponents: Map<Int, SecureHash>)","net.corda.core.transactions.ContractUpgradeFilteredTransaction.ContractUpgradeFilteredTransaction"]},{"name":"constructor(visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, hiddenComponents: Map<Int, SecureHash>, digestService: DigestService)","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.ContractUpgradeFilteredTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/-contract-upgrade-filtered-transaction.html","searchKeys":["ContractUpgradeFilteredTransaction","constructor(visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, hiddenComponents: Map<Int, SecureHash>, digestService: DigestService)","net.corda.core.transactions.ContractUpgradeFilteredTransaction.ContractUpgradeFilteredTransaction"]},{"name":"constructor(waitTime: Duration)","description":"net.corda.core.flows.WaitTimeUpdate.WaitTimeUpdate","location":"docs/net.corda.core.flows/-wait-time-update/-wait-time-update.html","searchKeys":["WaitTimeUpdate","constructor(waitTime: Duration)","net.corda.core.flows.WaitTimeUpdate.WaitTimeUpdate"]},{"name":"constructor(wakeUpAfter: Instant)","description":"net.corda.core.internal.FlowIORequest.Sleep.Sleep","location":"docs/net.corda.core.internal/-flow-i-o-request/-sleep/-sleep.html","searchKeys":["Sleep","constructor(wakeUpAfter: Instant)","net.corda.core.internal.FlowIORequest.Sleep.Sleep"]},{"name":"data class Actor(val id: Actor.Id, val serviceId: AuthServiceId, val owningLegalIdentity: CordaX500Name)","description":"net.corda.core.context.Actor","location":"docs/net.corda.core.context/-actor/index.html","searchKeys":["Actor","data class Actor(val id: Actor.Id, val serviceId: AuthServiceId, val owningLegalIdentity: CordaX500Name)","net.corda.core.context.Actor"]},{"name":"data class Added(val node: NodeInfo) : NetworkMapCache.MapChange","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Added","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-added/index.html","searchKeys":["Added","data class Added(val node: NodeInfo) : NetworkMapCache.MapChange","net.corda.core.node.services.NetworkMapCache.MapChange.Added"]},{"name":"data class Added(val stateMachineInfo: StateMachineInfo) : StateMachineUpdate","description":"net.corda.core.messaging.StateMachineUpdate.Added","location":"docs/net.corda.core.messaging/-state-machine-update/-added/index.html","searchKeys":["Added","data class Added(val stateMachineInfo: StateMachineInfo) : StateMachineUpdate","net.corda.core.messaging.StateMachineUpdate.Added"]},{"name":"data class AggregateFunction<C>(val type: AggregateFunctionType) : ColumnPredicate<C> ","description":"net.corda.core.node.services.vault.ColumnPredicate.AggregateFunction","location":"docs/net.corda.core.node.services.vault/-column-predicate/-aggregate-function/index.html","searchKeys":["AggregateFunction","data class AggregateFunction<C>(val type: AggregateFunctionType) : ColumnPredicate<C> ","net.corda.core.node.services.vault.ColumnPredicate.AggregateFunction"]},{"name":"data class AggregateFunctionExpression<O, C>(val column: Column<O, C>, val predicate: ColumnPredicate<C>, val groupByColumns: List<Column<O, C>>?, val orderBy: Sort.Direction?) : CriteriaExpression<O, Boolean> ","description":"net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-aggregate-function-expression/index.html","searchKeys":["AggregateFunctionExpression","data class AggregateFunctionExpression<O, C>(val column: Column<O, C>, val predicate: ColumnPredicate<C>, val groupByColumns: List<Column<O, C>>?, val orderBy: Sort.Direction?) : CriteriaExpression<O, Boolean> ","net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression"]},{"name":"data class AliasPrivateKey(val alias: String) : PrivateKey","description":"net.corda.core.crypto.internal.AliasPrivateKey","location":"docs/net.corda.core.crypto.internal/-alias-private-key/index.html","searchKeys":["AliasPrivateKey","data class AliasPrivateKey(val alias: String) : PrivateKey","net.corda.core.crypto.internal.AliasPrivateKey"]},{"name":"data class Amount<T : Any>(val quantity: Long, val displayTokenSize: BigDecimal, val token: T) : Comparable<Amount<T>> ","description":"net.corda.core.contracts.Amount","location":"docs/net.corda.core.contracts/-amount/index.html","searchKeys":["Amount","data class Amount<T : Any>(val quantity: Long, val displayTokenSize: BigDecimal, val token: T) : Comparable<Amount<T>> ","net.corda.core.contracts.Amount"]},{"name":"data class AttachmentSort(val columns: Collection<AttachmentSort.AttachmentSortColumn>) : BaseSort","description":"net.corda.core.node.services.vault.AttachmentSort","location":"docs/net.corda.core.node.services.vault/-attachment-sort/index.html","searchKeys":["AttachmentSort","data class AttachmentSort(val columns: Collection<AttachmentSort.AttachmentSortColumn>) : BaseSort","net.corda.core.node.services.vault.AttachmentSort"]},{"name":"data class AttachmentSortColumn(val sortAttribute: AttachmentSort.AttachmentSortAttribute, val direction: Sort.Direction = Sort.Direction.ASC)","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-column/index.html","searchKeys":["AttachmentSortColumn","data class AttachmentSortColumn(val sortAttribute: AttachmentSort.AttachmentSortAttribute, val direction: Sort.Direction = Sort.Direction.ASC)","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn"]},{"name":"data class AttachmentTrustInfo(val attachmentId: AttachmentId, val fileName: String?, val uploader: String?, val trustRootId: AttachmentId?, val trustRootFileName: String?)","description":"net.corda.core.internal.AttachmentTrustInfo","location":"docs/net.corda.core.internal/-attachment-trust-info/index.html","searchKeys":["AttachmentTrustInfo","data class AttachmentTrustInfo(val attachmentId: AttachmentId, val fileName: String?, val uploader: String?, val trustRootId: AttachmentId?, val trustRootFileName: String?)","net.corda.core.internal.AttachmentTrustInfo"]},{"name":"data class AttachmentsClassLoaderKey(val hashes: Set<SecureHash>, val params: NetworkParameters)","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderKey","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-key/index.html","searchKeys":["AttachmentsClassLoaderKey","data class AttachmentsClassLoaderKey(val hashes: Set<SecureHash>, val params: NetworkParameters)","net.corda.core.serialization.internal.AttachmentsClassLoaderKey"]},{"name":"data class AttachmentsQueryCriteria(val uploaderCondition: ColumnPredicate<String>? = null, val filenameCondition: ColumnPredicate<String>? = null, val uploadDateCondition: ColumnPredicate<Instant>? = null, val contractClassNamesCondition: ColumnPredicate<List<ContractClassName>>? = null, val signersCondition: ColumnPredicate<List<PublicKey>>? = null, val isSignedCondition: ColumnPredicate<Boolean>? = null, val versionCondition: ColumnPredicate<Int>? = null) : AttachmentQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/index.html","searchKeys":["AttachmentsQueryCriteria","data class AttachmentsQueryCriteria(val uploaderCondition: ColumnPredicate<String>? = null, val filenameCondition: ColumnPredicate<String>? = null, val uploadDateCondition: ColumnPredicate<Instant>? = null, val contractClassNamesCondition: ColumnPredicate<List<ContractClassName>>? = null, val signersCondition: ColumnPredicate<List<PublicKey>>? = null, val isSignedCondition: ColumnPredicate<Boolean>? = null, val versionCondition: ColumnPredicate<Int>? = null) : AttachmentQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria"]},{"name":"data class AuthServiceId(val value: String)","description":"net.corda.core.context.AuthServiceId","location":"docs/net.corda.core.context/-auth-service-id/index.html","searchKeys":["AuthServiceId","data class AuthServiceId(val value: String)","net.corda.core.context.AuthServiceId"]},{"name":"data class AutoOffer(val notary: Party, val dealBeingOffered: DealState)","description":"net.corda.finance.flows.TwoPartyDealFlow.AutoOffer","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-auto-offer/index.html","searchKeys":["AutoOffer","data class AutoOffer(val notary: Party, val dealBeingOffered: DealState)","net.corda.finance.flows.TwoPartyDealFlow.AutoOffer"]},{"name":"data class Between<C : Comparable<C>>(val rightFromLiteral: C, val rightToLiteral: C) : ColumnPredicate<C> ","description":"net.corda.core.node.services.vault.ColumnPredicate.Between","location":"docs/net.corda.core.node.services.vault/-column-predicate/-between/index.html","searchKeys":["Between","data class Between<C : Comparable<C>>(val rightFromLiteral: C, val rightToLiteral: C) : ColumnPredicate<C> ","net.corda.core.node.services.vault.ColumnPredicate.Between"]},{"name":"data class BilateralNetState<P : Any>(val partyKeys: Set<AbstractParty>, val template: Obligation.Terms<P>) : NetState<P> ","description":"net.corda.finance.contracts.asset.BilateralNetState","location":"docs/net.corda.finance.contracts.asset/-bilateral-net-state/index.html","searchKeys":["BilateralNetState","data class BilateralNetState<P : Any>(val partyKeys: Set<AbstractParty>, val template: Obligation.Terms<P>) : NetState<P> ","net.corda.finance.contracts.asset.BilateralNetState"]},{"name":"data class BinaryComparison<C : Comparable<C>>(val operator: BinaryComparisonOperator, val rightLiteral: C) : ColumnPredicate<C> ","description":"net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison","location":"docs/net.corda.core.node.services.vault/-column-predicate/-binary-comparison/index.html","searchKeys":["BinaryComparison","data class BinaryComparison<C : Comparable<C>>(val operator: BinaryComparisonOperator, val rightLiteral: C) : ColumnPredicate<C> ","net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison"]},{"name":"data class BinaryLogical<O>(val left: CriteriaExpression<O, Boolean>, val right: CriteriaExpression<O, Boolean>, val operator: BinaryLogicalOperator) : CriteriaExpression<O, Boolean> ","description":"net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-binary-logical/index.html","searchKeys":["BinaryLogical","data class BinaryLogical<O>(val left: CriteriaExpression<O, Boolean>, val right: CriteriaExpression<O, Boolean>, val operator: BinaryLogicalOperator) : CriteriaExpression<O, Boolean> ","net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical"]},{"name":"data class Bytecode(val classFileMajorVersion: Int, val kotlinMetadataVersion: KotlinMetadataVersion?) : LanguageVersion","description":"net.corda.core.internal.cordapp.LanguageVersion.Bytecode","location":"docs/net.corda.core.internal.cordapp/-language-version/-bytecode/index.html","searchKeys":["Bytecode","data class Bytecode(val classFileMajorVersion: Int, val kotlinMetadataVersion: KotlinMetadataVersion?) : LanguageVersion","net.corda.core.internal.cordapp.LanguageVersion.Bytecode"]},{"name":"data class Call(val method: Method, val call: () -> Any?)","description":"net.corda.testing.node.internal.RandomRpcUser.Companion.Call","location":"docs/net.corda.testing.node.internal/-random-rpc-user/-companion/-call/index.html","searchKeys":["Call","data class Call(val method: Method, val call: () -> Any?)","net.corda.testing.node.internal.RandomRpcUser.Companion.Call"]},{"name":"data class CashConfiguration(val issuableCurrencies: List<Currency>, val supportedCurrencies: List<Currency>)","description":"net.corda.finance.internal.CashConfiguration","location":"docs/net.corda.finance.internal/-cash-configuration/index.html","searchKeys":["CashConfiguration","data class CashConfiguration(val issuableCurrencies: List<Currency>, val supportedCurrencies: List<Currency>)","net.corda.finance.internal.CashConfiguration"]},{"name":"data class ClientRpcSslOptions(val trustStorePath: Path, val trustStorePassword: String, val trustStoreProvider: String = \"JKS\")","description":"net.corda.core.messaging.ClientRpcSslOptions","location":"docs/net.corda.core.messaging/-client-rpc-ssl-options/index.html","searchKeys":["ClientRpcSslOptions","data class ClientRpcSslOptions(val trustStorePath: Path, val trustStorePassword: String, val trustStoreProvider: String = \"JKS\")","net.corda.core.messaging.ClientRpcSslOptions"]},{"name":"data class CloseSessions(val sessions: NonEmptySet<FlowSession>) : FlowIORequest<Unit> ","description":"net.corda.core.internal.FlowIORequest.CloseSessions","location":"docs/net.corda.core.internal/-flow-i-o-request/-close-sessions/index.html","searchKeys":["CloseSessions","data class CloseSessions(val sessions: NonEmptySet<FlowSession>) : FlowIORequest<Unit> ","net.corda.core.internal.FlowIORequest.CloseSessions"]},{"name":"data class CollectionExpression<C>(val operator: CollectionOperator, val rightLiteral: Collection<C>) : ColumnPredicate<C> ","description":"net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression","location":"docs/net.corda.core.node.services.vault/-column-predicate/-collection-expression/index.html","searchKeys":["CollectionExpression","data class CollectionExpression<C>(val operator: CollectionOperator, val rightLiteral: Collection<C>) : ColumnPredicate<C> ","net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression"]},{"name":"data class ColumnPredicateExpression<O, C>(val column: Column<O, C>, val predicate: ColumnPredicate<C>) : CriteriaExpression<O, Boolean> ","description":"net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-column-predicate-expression/index.html","searchKeys":["ColumnPredicateExpression","data class ColumnPredicateExpression<O, C>(val column: Column<O, C>, val predicate: ColumnPredicate<C>) : CriteriaExpression<O, Boolean> ","net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression"]},{"name":"data class Command<T : CommandData>(val value: T, val signers: List<PublicKey>)","description":"net.corda.core.contracts.Command","location":"docs/net.corda.core.contracts/-command/index.html","searchKeys":["Command","data class Command<T : CommandData>(val value: T, val signers: List<PublicKey>)","net.corda.core.contracts.Command"]},{"name":"data class CommandAndState(val command: CommandData, val ownableState: OwnableState)","description":"net.corda.core.contracts.CommandAndState","location":"docs/net.corda.core.contracts/-command-and-state/index.html","searchKeys":["CommandAndState","data class CommandAndState(val command: CommandData, val ownableState: OwnableState)","net.corda.core.contracts.CommandAndState"]},{"name":"data class CommandWithParties<out T : CommandData>(val signers: List<PublicKey>, val signingParties: List<Party>, val value: T)","description":"net.corda.core.contracts.CommandWithParties","location":"docs/net.corda.core.contracts/-command-with-parties/index.html","searchKeys":["CommandWithParties","data class CommandWithParties<out T : CommandData>(val signers: List<PublicKey>, val signingParties: List<Party>, val value: T)","net.corda.core.contracts.CommandWithParties"]},{"name":"data class Commodity(val commodityCode: String, val displayName: String, val defaultFractionDigits: Int = 0) : TokenizableAssetInfo","description":"net.corda.finance.contracts.Commodity","location":"docs/net.corda.finance.contracts/-commodity/index.html","searchKeys":["Commodity","data class Commodity(val commodityCode: String, val displayName: String, val defaultFractionDigits: Int = 0) : TokenizableAssetInfo","net.corda.finance.contracts.Commodity"]},{"name":"data class CommodityState(val amount: Amount<Issued<Commodity>>, val owner: AbstractParty) : FungibleAsset<Commodity> ","description":"net.corda.testing.internal.vault.CommodityState","location":"docs/net.corda.testing.internal.vault/-commodity-state/index.html","searchKeys":["CommodityState","data class CommodityState(val amount: Amount<Issued<Commodity>>, val owner: AbstractParty) : FungibleAsset<Commodity> ","net.corda.testing.internal.vault.CommodityState"]},{"name":"data class ComparableRecoveryTimeWindow(val fromTime: Instant, val fromTimestampDiscriminator: Int, val untilTime: Instant, val untilTimestampDiscriminator: Int)","description":"net.corda.core.flows.ComparableRecoveryTimeWindow","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/index.html","searchKeys":["ComparableRecoveryTimeWindow","data class ComparableRecoveryTimeWindow(val fromTime: Instant, val fromTimestampDiscriminator: Int, val untilTime: Instant, val untilTimestampDiscriminator: Int)","net.corda.core.flows.ComparableRecoveryTimeWindow"]},{"name":"data class ComponentTelemetryIds(val componentTelemetryIds: Map<String, UUID>)","description":"net.corda.core.internal.telemetry.ComponentTelemetryIds","location":"docs/net.corda.core.internal.telemetry/-component-telemetry-ids/index.html","searchKeys":["ComponentTelemetryIds","data class ComponentTelemetryIds(val componentTelemetryIds: Map<String, UUID>)","net.corda.core.internal.telemetry.ComponentTelemetryIds"]},{"name":"data class CompositeSignaturesWithKeys(val sigs: List<TransactionSignature>)","description":"net.corda.core.crypto.CompositeSignaturesWithKeys","location":"docs/net.corda.core.crypto/-composite-signatures-with-keys/index.html","searchKeys":["CompositeSignaturesWithKeys","data class CompositeSignaturesWithKeys(val sigs: List<TransactionSignature>)","net.corda.core.crypto.CompositeSignaturesWithKeys"]},{"name":"data class Conflict(val txId: SecureHash, val consumedStates: Map<StateRef, StateConsumptionDetails>) : NotaryError","description":"net.corda.core.flows.NotaryError.Conflict","location":"docs/net.corda.core.flows/-notary-error/-conflict/index.html","searchKeys":["Conflict","data class Conflict(val txId: SecureHash, val consumedStates: Map<StateRef, StateConsumptionDetails>) : NotaryError","net.corda.core.flows.NotaryError.Conflict"]},{"name":"data class ConstraintInfo(val constraint: AttachmentConstraint)","description":"net.corda.core.node.services.Vault.ConstraintInfo","location":"docs/net.corda.core.node.services/-vault/-constraint-info/index.html","searchKeys":["ConstraintInfo","data class ConstraintInfo(val constraint: AttachmentConstraint)","net.corda.core.node.services.Vault.ConstraintInfo"]},{"name":"data class Contract(val shortName: String, val vendor: String, val versionId: Int, val licence: String) : Cordapp.Info","description":"net.corda.core.cordapp.Cordapp.Info.Contract","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/index.html","searchKeys":["Contract","data class Contract(val shortName: String, val vendor: String, val versionId: Int, val licence: String) : Cordapp.Info","net.corda.core.cordapp.Cordapp.Info.Contract"]},{"name":"data class ContractAndWorkflow(val contract: Cordapp.Info.Contract, val workflow: Cordapp.Info.Workflow) : Cordapp.Info","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/index.html","searchKeys":["ContractAndWorkflow","data class ContractAndWorkflow(val contract: Cordapp.Info.Contract, val workflow: Cordapp.Info.Workflow) : Cordapp.Info","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow"]},{"name":"data class ContractAttachmentWithLegacy(val currentAttachment: ContractAttachment, val legacyAttachment: ContractAttachment? = null)","description":"net.corda.core.internal.cordapp.ContractAttachmentWithLegacy","location":"docs/net.corda.core.internal.cordapp/-contract-attachment-with-legacy/index.html","searchKeys":["ContractAttachmentWithLegacy","data class ContractAttachmentWithLegacy(val currentAttachment: ContractAttachment, val legacyAttachment: ContractAttachment? = null)","net.corda.core.internal.cordapp.ContractAttachmentWithLegacy"]},{"name":"data class ContractUpgradeFilteredTransaction(val visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, val hiddenComponents: Map<Int, SecureHash>, val digestService: DigestService) : CoreTransaction","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/index.html","searchKeys":["ContractUpgradeFilteredTransaction","data class ContractUpgradeFilteredTransaction(val visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, val hiddenComponents: Map<Int, SecureHash>, val digestService: DigestService) : CoreTransaction","net.corda.core.transactions.ContractUpgradeFilteredTransaction"]},{"name":"data class ContractUpgradeWireTransaction(val serializedComponents: List<OpaqueBytes>, val privacySalt: PrivacySalt, val digestService: DigestService) : CoreTransaction","description":"net.corda.core.transactions.ContractUpgradeWireTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/index.html","searchKeys":["ContractUpgradeWireTransaction","data class ContractUpgradeWireTransaction(val serializedComponents: List<OpaqueBytes>, val privacySalt: PrivacySalt, val digestService: DigestService) : CoreTransaction","net.corda.core.transactions.ContractUpgradeWireTransaction"]},{"name":"data class CordaX500Name(val commonName: String?, val organisationUnit: String?, val organisation: String, val locality: String, val state: String?, val country: String)","description":"net.corda.core.identity.CordaX500Name","location":"docs/net.corda.core.identity/-corda-x500-name/index.html","searchKeys":["CordaX500Name","data class CordaX500Name(val commonName: String?, val organisationUnit: String?, val organisation: String, val locality: String, val state: String?, val country: String)","net.corda.core.identity.CordaX500Name"]},{"name":"data class CordappImpl(val jarFile: Path, val contractClassNames: List<String>, val initiatedFlows: List<Class<out FlowLogic<*>>>, val rpcFlows: List<Class<out FlowLogic<*>>>, val serviceFlows: List<Class<out FlowLogic<*>>>, val schedulableFlows: List<Class<out FlowLogic<*>>>, val services: List<Class<out SerializeAsToken>>, val telemetryComponents: List<Class<out TelemetryComponent>>, val serializationWhitelists: List<SerializationWhitelist>, val serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>, val checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>, val customSchemas: Set<MappedSchema>, val allFlows: List<Class<out FlowLogic<*>>>, val info: Cordapp.Info, val minimumPlatformVersion: Int, val targetPlatformVersion: Int, val jarHash: SecureHash.SHA256 = jarFile.hash, val languageVersion: LanguageVersion = LanguageVersion.Data, val notaryService: Class<out NotaryService>? = null, val isLoaded: Boolean = true, explicitCordappClasses: List<String> = emptyList(), val isVirtual: Boolean = false) : Cordapp","description":"net.corda.core.internal.cordapp.CordappImpl","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/index.html","searchKeys":["CordappImpl","data class CordappImpl(val jarFile: Path, val contractClassNames: List<String>, val initiatedFlows: List<Class<out FlowLogic<*>>>, val rpcFlows: List<Class<out FlowLogic<*>>>, val serviceFlows: List<Class<out FlowLogic<*>>>, val schedulableFlows: List<Class<out FlowLogic<*>>>, val services: List<Class<out SerializeAsToken>>, val telemetryComponents: List<Class<out TelemetryComponent>>, val serializationWhitelists: List<SerializationWhitelist>, val serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>, val checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>, val customSchemas: Set<MappedSchema>, val allFlows: List<Class<out FlowLogic<*>>>, val info: Cordapp.Info, val minimumPlatformVersion: Int, val targetPlatformVersion: Int, val jarHash: SecureHash.SHA256 = jarFile.hash, val languageVersion: LanguageVersion = LanguageVersion.Data, val notaryService: Class<out NotaryService>? = null, val isLoaded: Boolean = true, explicitCordappClasses: List<String> = emptyList(), val isVirtual: Boolean = false) : Cordapp","net.corda.core.internal.cordapp.CordappImpl"]},{"name":"data class CordappInfo(val type: String, val name: String, val shortName: String, val minimumPlatformVersion: Int, val targetPlatformVersion: Int, val version: String, val vendor: String, val licence: String, val jarHash: SecureHash.SHA256)","description":"net.corda.core.cordapp.CordappInfo","location":"docs/net.corda.core.cordapp/-cordapp-info/index.html","searchKeys":["CordappInfo","data class CordappInfo(val type: String, val name: String, val shortName: String, val minimumPlatformVersion: Int, val targetPlatformVersion: Int, val version: String, val vendor: String, val licence: String, val jarHash: SecureHash.SHA256)","net.corda.core.cordapp.CordappInfo"]},{"name":"data class Custom(val entityStateClass: Class<out StatePersistable>, val entityStateColumnName: String) : SortAttribute","description":"net.corda.core.node.services.vault.SortAttribute.Custom","location":"docs/net.corda.core.node.services.vault/-sort-attribute/-custom/index.html","searchKeys":["Custom","data class Custom(val entityStateClass: Class<out StatePersistable>, val entityStateColumnName: String) : SortAttribute","net.corda.core.node.services.vault.SortAttribute.Custom"]},{"name":"data class CustomCordapp(val packages: Set<String> = emptySet(), val name: String = \"custom-cordapp\", val versionId: Int = 1, val targetPlatformVersion: Int = PLATFORM_VERSION, val classes: Set<Class<*>> = emptySet(), val fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>> = emptyList(), val signingInfo: CustomCordapp.SigningInfo? = null, val config: Map<String, Any> = emptyMap()) : TestCordappInternal","description":"net.corda.testing.node.internal.CustomCordapp","location":"docs/net.corda.testing.node.internal/-custom-cordapp/index.html","searchKeys":["CustomCordapp","data class CustomCordapp(val packages: Set<String> = emptySet(), val name: String = \"custom-cordapp\", val versionId: Int = 1, val targetPlatformVersion: Int = PLATFORM_VERSION, val classes: Set<Class<*>> = emptySet(), val fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>> = emptyList(), val signingInfo: CustomCordapp.SigningInfo? = null, val config: Map<String, Any> = emptyMap()) : TestCordappInternal","net.corda.testing.node.internal.CustomCordapp"]},{"name":"data class Data(val hashes: NonEmptySet<SecureHash>, val dataType: FetchDataFlow.DataType) : FetchDataFlow.Request","description":"net.corda.core.internal.FetchDataFlow.Request.Data","location":"docs/net.corda.core.internal/-fetch-data-flow/-request/-data/index.html","searchKeys":["Data","data class Data(val hashes: NonEmptySet<SecureHash>, val dataType: FetchDataFlow.DataType) : FetchDataFlow.Request","net.corda.core.internal.FetchDataFlow.Request.Data"]},{"name":"data class DataFeed<out A, B>(val snapshot: A, val updates: <Error class: unknown class><B>)","description":"net.corda.core.messaging.DataFeed","location":"docs/net.corda.core.messaging/-data-feed/index.html","searchKeys":["DataFeed","data class DataFeed<out A, B>(val snapshot: A, val updates: <Error class: unknown class><B>)","net.corda.core.messaging.DataFeed"]},{"name":"data class Default(val shortName: String, val vendor: String, val version: String, val licence: String) : Cordapp.Info","description":"net.corda.core.cordapp.Cordapp.Info.Default","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/index.html","searchKeys":["Default","data class Default(val shortName: String, val vendor: String, val version: String, val licence: String) : Cordapp.Info","net.corda.core.cordapp.Cordapp.Info.Default"]},{"name":"data class DigestService(val hashAlgorithm: String)","description":"net.corda.core.crypto.DigestService","location":"docs/net.corda.core.crypto/-digest-service/index.html","searchKeys":["DigestService","data class DigestService(val hashAlgorithm: String)","net.corda.core.crypto.DigestService"]},{"name":"data class DistributedNode(val party: Party) : PartyInfo","description":"net.corda.core.node.services.PartyInfo.DistributedNode","location":"docs/net.corda.core.node.services/-party-info/-distributed-node/index.html","searchKeys":["DistributedNode","data class DistributedNode(val party: Party) : PartyInfo","net.corda.core.node.services.PartyInfo.DistributedNode"]},{"name":"data class DistributedServiceHandle(val party: Party) : MessageRecipientGroup","description":"net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-distributed-service-handle/index.html","searchKeys":["DistributedServiceHandle","data class DistributedServiceHandle(val party: Party) : MessageRecipientGroup","net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle"]},{"name":"data class DistributionRecordKey(val txnId: SecureHash, val timestamp: Instant, val timestampDiscriminator: Int)","description":"net.corda.core.flows.DistributionRecordKey","location":"docs/net.corda.core.flows/-distribution-record-key/index.html","searchKeys":["DistributionRecordKey","data class DistributionRecordKey(val txnId: SecureHash, val timestamp: Instant, val timestampDiscriminator: Int)","net.corda.core.flows.DistributionRecordKey"]},{"name":"data class DriverParameters(val isDebug: Boolean = false, val driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), val portAllocation: PortAllocation = incrementalPortAllocation(), val debugPortAllocation: PortAllocation = incrementalPortAllocation(), val systemProperties: Map<String, String> = emptyMap(), val useTestClock: Boolean = false, val startNodesInProcess: Boolean = false, val waitForAllNodesToFinish: Boolean = false, val notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), val extraCordappPackagesToScan: List<String> = emptyList(), val jmxPolicy: JmxPolicy = JmxPolicy(), val networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), val notaryCustomOverrides: Map<String, Any?> = emptyMap(), val inMemoryDB: Boolean = false, val cordappsForAllNodes: Collection<TestCordapp>? = null, val environmentVariables: Map<String, String> = emptyMap(), val allowHibernateToManageAppSchema: Boolean = true, val premigrateH2Database: Boolean = true, val notaryHandleTimeout: Duration = Duration.ofMinutes(1))","description":"net.corda.testing.driver.DriverParameters","location":"docs/net.corda.testing.driver/-driver-parameters/index.html","searchKeys":["DriverParameters","data class DriverParameters(val isDebug: Boolean = false, val driverDirectory: Path = Paths.get(\"build\") / \"node-driver\" / getTimestampAsDirectoryName(), val portAllocation: PortAllocation = incrementalPortAllocation(), val debugPortAllocation: PortAllocation = incrementalPortAllocation(), val systemProperties: Map<String, String> = emptyMap(), val useTestClock: Boolean = false, val startNodesInProcess: Boolean = false, val waitForAllNodesToFinish: Boolean = false, val notarySpecs: List<NotarySpec> = listOf(NotarySpec(DUMMY_NOTARY_NAME)), val extraCordappPackagesToScan: List<String> = emptyList(), val jmxPolicy: JmxPolicy = JmxPolicy(), val networkParameters: NetworkParameters = testNetworkParameters(notaries = emptyList()), val notaryCustomOverrides: Map<String, Any?> = emptyMap(), val inMemoryDB: Boolean = false, val cordappsForAllNodes: Collection<TestCordapp>? = null, val environmentVariables: Map<String, String> = emptyMap(), val allowHibernateToManageAppSchema: Boolean = true, val premigrateH2Database: Boolean = true, val notaryHandleTimeout: Duration = Duration.ofMinutes(1))","net.corda.testing.driver.DriverParameters"]},{"name":"data class DummyClusterSpec(val clusterSize: Int, val compositeServiceIdentity: Boolean = false) : ClusterSpec","description":"net.corda.testing.node.internal.DummyClusterSpec","location":"docs/net.corda.testing.node.internal/-dummy-cluster-spec/index.html","searchKeys":["DummyClusterSpec","data class DummyClusterSpec(val clusterSize: Int, val compositeServiceIdentity: Boolean = false) : ClusterSpec","net.corda.testing.node.internal.DummyClusterSpec"]},{"name":"data class EqualityComparison<C>(val operator: EqualityComparisonOperator, val rightLiteral: C) : ColumnPredicate<C> ","description":"net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison","location":"docs/net.corda.core.node.services.vault/-column-predicate/-equality-comparison/index.html","searchKeys":["EqualityComparison","data class EqualityComparison<C>(val operator: EqualityComparisonOperator, val rightLiteral: C) : ColumnPredicate<C> ","net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison"]},{"name":"data class ExecuteAsyncOperation<T : Any>(val operation: FlowAsyncOperation<T>) : FlowIORequest<T> ","description":"net.corda.core.internal.FlowIORequest.ExecuteAsyncOperation","location":"docs/net.corda.core.internal/-flow-i-o-request/-execute-async-operation/index.html","searchKeys":["ExecuteAsyncOperation","data class ExecuteAsyncOperation<T : Any>(val operation: FlowAsyncOperation<T>) : FlowIORequest<T> ","net.corda.core.internal.FlowIORequest.ExecuteAsyncOperation"]},{"name":"data class Exit(val amount: Amount<Issued<Currency>>) : CommandData","description":"net.corda.finance.contracts.asset.Cash.Commands.Exit","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-exit/index.html","searchKeys":["Exit","data class Exit(val amount: Amount<Issued<Currency>>) : CommandData","net.corda.finance.contracts.asset.Cash.Commands.Exit"]},{"name":"data class Exit<P : Any>(val amount: Amount<Issued<Obligation.Terms<P>>>) : CommandData","description":"net.corda.finance.contracts.asset.Obligation.Commands.Exit","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-exit/index.html","searchKeys":["Exit","data class Exit<P : Any>(val amount: Amount<Issued<Obligation.Terms<P>>>) : CommandData","net.corda.finance.contracts.asset.Obligation.Commands.Exit"]},{"name":"data class Expression(val expr: String)","description":"net.corda.finance.contracts.Expression","location":"docs/net.corda.finance.contracts/-expression/index.html","searchKeys":["Expression","data class Expression(val expr: String)","net.corda.finance.contracts.Expression"]},{"name":"data class External(val externalResult: Try<Unit>) : VerificationResult","description":"net.corda.core.internal.verification.VerificationResult.External","location":"docs/net.corda.core.internal.verification/-verification-result/-external/index.html","searchKeys":["External","data class External(val externalResult: Try<Unit>) : VerificationResult","net.corda.core.internal.verification.VerificationResult.External"]},{"name":"data class ExtraConstructorArgs(val oldParticipants: Collection<Party>, val sessions: Collection<FlowSession>, val newApi: Boolean, val statesToRecord: StatesToRecord, val observerSessions: Collection<FlowSession>)","description":"net.corda.core.flows.FinalityFlow.ExtraConstructorArgs","location":"docs/net.corda.core.flows/-finality-flow/-extra-constructor-args/index.html","searchKeys":["ExtraConstructorArgs","data class ExtraConstructorArgs(val oldParticipants: Collection<Party>, val sessions: Collection<FlowSession>, val newApi: Boolean, val statesToRecord: StatesToRecord, val observerSessions: Collection<FlowSession>)","net.corda.core.flows.FinalityFlow.ExtraConstructorArgs"]},{"name":"data class ExtraConstructorArgs(val parameters: LedgerRecoveryParameters)","description":"net.corda.core.flows.LedgerRecoveryFlow.ExtraConstructorArgs","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-extra-constructor-args/index.html","searchKeys":["ExtraConstructorArgs","data class ExtraConstructorArgs(val parameters: LedgerRecoveryParameters)","net.corda.core.flows.LedgerRecoveryFlow.ExtraConstructorArgs"]},{"name":"data class ExtraConstructorArgs(val txIds: Collection<SecureHash>, val flowIds: Collection<StateMachineRunId>, val matchingCriteria: FlowRecoveryQuery?, val forceRecover: Boolean, val recoverAll: Boolean, val forceRecoverFlowIds: Collection<StateMachineRunId>)","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/index.html","searchKeys":["ExtraConstructorArgs","data class ExtraConstructorArgs(val txIds: Collection<SecureHash>, val flowIds: Collection<StateMachineRunId>, val matchingCriteria: FlowRecoveryQuery?, val forceRecover: Boolean, val recoverAll: Boolean, val forceRecoverFlowIds: Collection<StateMachineRunId>)","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs"]},{"name":"data class Failure(val error: NotaryError) : UniquenessProvider.Result","description":"net.corda.core.internal.notary.UniquenessProvider.Result.Failure","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/-result/-failure/index.html","searchKeys":["Failure","data class Failure(val error: NotaryError) : UniquenessProvider.Result","net.corda.core.internal.notary.UniquenessProvider.Result.Failure"]},{"name":"data class Failure<out A>(val exception: Throwable) : Try<A> ","description":"net.corda.core.utilities.Try.Failure","location":"docs/net.corda.core.utilities/-try/-failure/index.html","searchKeys":["Failure","data class Failure<out A>(val exception: Throwable) : Try<A> ","net.corda.core.utilities.Try.Failure"]},{"name":"data class FilteredComponentGroup(val groupIndex: Int, val components: List<OpaqueBytes>, val nonces: List<SecureHash>, val partialMerkleTree: PartialMerkleTree) : ComponentGroup","description":"net.corda.core.transactions.FilteredComponentGroup","location":"docs/net.corda.core.transactions/-filtered-component-group/index.html","searchKeys":["FilteredComponentGroup","data class FilteredComponentGroup(val groupIndex: Int, val components: List<OpaqueBytes>, val nonces: List<SecureHash>, val partialMerkleTree: PartialMerkleTree) : ComponentGroup","net.corda.core.transactions.FilteredComponentGroup"]},{"name":"data class Fix(val of: FixOf, val value: BigDecimal) : CommandData","description":"net.corda.finance.contracts.Fix","location":"docs/net.corda.finance.contracts/-fix/index.html","searchKeys":["Fix","data class Fix(val of: FixOf, val value: BigDecimal) : CommandData","net.corda.finance.contracts.Fix"]},{"name":"data class FixOf(val name: String, val forDay: LocalDate, val ofTenor: Tenor)","description":"net.corda.finance.contracts.FixOf","location":"docs/net.corda.finance.contracts/-fix-of/index.html","searchKeys":["FixOf","data class FixOf(val name: String, val forDay: LocalDate, val ofTenor: Tenor)","net.corda.finance.contracts.FixOf"]},{"name":"data class FlowHandleImpl<A>(val id: StateMachineRunId, val returnValue: CordaFuture<A>) : FlowHandle<A> ","description":"net.corda.core.messaging.FlowHandleImpl","location":"docs/net.corda.core.messaging/-flow-handle-impl/index.html","searchKeys":["FlowHandleImpl","data class FlowHandleImpl<A>(val id: StateMachineRunId, val returnValue: CordaFuture<A>) : FlowHandle<A> ","net.corda.core.messaging.FlowHandleImpl"]},{"name":"data class FlowHandleWithClientIdImpl<A>(val id: StateMachineRunId, val returnValue: CordaFuture<A>, val clientId: String) : FlowHandleWithClientId<A> ","description":"net.corda.core.messaging.FlowHandleWithClientIdImpl","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id-impl/index.html","searchKeys":["FlowHandleWithClientIdImpl","data class FlowHandleWithClientIdImpl<A>(val id: StateMachineRunId, val returnValue: CordaFuture<A>, val clientId: String) : FlowHandleWithClientId<A> ","net.corda.core.messaging.FlowHandleWithClientIdImpl"]},{"name":"data class FlowInfo(val flowVersion: Int, val appName: String)","description":"net.corda.core.flows.FlowInfo","location":"docs/net.corda.core.flows/-flow-info/index.html","searchKeys":["FlowInfo","data class FlowInfo(val flowVersion: Int, val appName: String)","net.corda.core.flows.FlowInfo"]},{"name":"data class FlowProgressHandleImpl<A> constructor(val id: StateMachineRunId, val returnValue: CordaFuture<A>, val progress: <Error class: unknown class><String>, val stepsTreeIndexFeed: DataFeed<Int, Int>? = null, val stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>? = null) : FlowProgressHandle<A> ","description":"net.corda.core.messaging.FlowProgressHandleImpl","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/index.html","searchKeys":["FlowProgressHandleImpl","data class FlowProgressHandleImpl<A> constructor(val id: StateMachineRunId, val returnValue: CordaFuture<A>, val progress: <Error class: unknown class><String>, val stepsTreeIndexFeed: DataFeed<Int, Int>? = null, val stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>? = null) : FlowProgressHandle<A> ","net.corda.core.messaging.FlowProgressHandleImpl"]},{"name":"data class FlowRecoveryQuery(val timeframe: FlowTimeWindow? = null, val initiatedBy: List<CordaX500Name>? = null, val counterParties: List<CordaX500Name>? = null)","description":"net.corda.core.flows.FlowRecoveryQuery","location":"docs/net.corda.core.flows/-flow-recovery-query/index.html","searchKeys":["FlowRecoveryQuery","data class FlowRecoveryQuery(val timeframe: FlowTimeWindow? = null, val initiatedBy: List<CordaX500Name>? = null, val counterParties: List<CordaX500Name>? = null)","net.corda.core.flows.FlowRecoveryQuery"]},{"name":"data class FlowStackSnapshot(val time: Instant, val flowClass: String, val stackFrames: List<FlowStackSnapshot.Frame>)","description":"net.corda.core.flows.FlowStackSnapshot","location":"docs/net.corda.core.flows/-flow-stack-snapshot/index.html","searchKeys":["FlowStackSnapshot","data class FlowStackSnapshot(val time: Instant, val flowClass: String, val stackFrames: List<FlowStackSnapshot.Frame>)","net.corda.core.flows.FlowStackSnapshot"]},{"name":"data class FlowTimeWindow(val fromTime: Instant? = null, val untilTime: Instant? = null)","description":"net.corda.core.flows.FlowTimeWindow","location":"docs/net.corda.core.flows/-flow-time-window/index.html","searchKeys":["FlowTimeWindow","data class FlowTimeWindow(val fromTime: Instant? = null, val untilTime: Instant? = null)","net.corda.core.flows.FlowTimeWindow"]},{"name":"data class FlowTransactionInfo(val stateMachineRunId: StateMachineRunId, val txId: String, val status: TransactionStatus, val timestamp: Instant, val metadata: TransactionMetadata?)","description":"net.corda.core.flows.FlowTransactionInfo","location":"docs/net.corda.core.flows/-flow-transaction-info/index.html","searchKeys":["FlowTransactionInfo","data class FlowTransactionInfo(val stateMachineRunId: StateMachineRunId, val txId: String, val status: TransactionStatus, val timestamp: Instant, val metadata: TransactionMetadata?)","net.corda.core.flows.FlowTransactionInfo"]},{"name":"data class Frame(val stackTraceElement: StackTraceElement, val stackObjects: List<Any?>)","description":"net.corda.core.flows.FlowStackSnapshot.Frame","location":"docs/net.corda.core.flows/-flow-stack-snapshot/-frame/index.html","searchKeys":["Frame","data class Frame(val stackTraceElement: StackTraceElement, val stackObjects: List<Any?>)","net.corda.core.flows.FlowStackSnapshot.Frame"]},{"name":"data class FungibleAssetQueryCriteria(val participants: List<AbstractParty>? = null, val owner: List<AbstractParty>? = null, val quantity: ColumnPredicate<Long>? = null, val issuer: List<AbstractParty>? = null, val issuerRef: List<OpaqueBytes>? = null, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus, val exactParticipants: List<AbstractParty>? = null) : QueryCriteria.CommonQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/index.html","searchKeys":["FungibleAssetQueryCriteria","data class FungibleAssetQueryCriteria(val participants: List<AbstractParty>? = null, val owner: List<AbstractParty>? = null, val quantity: ColumnPredicate<Long>? = null, val issuer: List<AbstractParty>? = null, val issuerRef: List<OpaqueBytes>? = null, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus, val exactParticipants: List<AbstractParty>? = null) : QueryCriteria.CommonQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria"]},{"name":"data class FungibleStateQueryCriteria(val participants: List<AbstractParty>? = null, val quantity: ColumnPredicate<Long>? = null, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL) : QueryCriteria.CommonQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/index.html","searchKeys":["FungibleStateQueryCriteria","data class FungibleStateQueryCriteria(val participants: List<AbstractParty>? = null, val quantity: ColumnPredicate<Long>? = null, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL) : QueryCriteria.CommonQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria"]},{"name":"data class General(val cause: Throwable) : NotaryError","description":"net.corda.core.flows.NotaryError.General","location":"docs/net.corda.core.flows/-notary-error/-general/index.html","searchKeys":["General","data class General(val cause: Throwable) : NotaryError","net.corda.core.flows.NotaryError.General"]},{"name":"data class GetFlowInfo(val sessions: NonEmptySet<FlowSession>) : FlowIORequest<Map<FlowSession, FlowInfo>> ","description":"net.corda.core.internal.FlowIORequest.GetFlowInfo","location":"docs/net.corda.core.internal/-flow-i-o-request/-get-flow-info/index.html","searchKeys":["GetFlowInfo","data class GetFlowInfo(val sessions: NonEmptySet<FlowSession>) : FlowIORequest<Map<FlowSession, FlowInfo>> ","net.corda.core.internal.FlowIORequest.GetFlowInfo"]},{"name":"data class Handshake<out T>(val payload: T, val primaryIdentity: AnonymousParty, val secondaryIdentity: AnonymousParty)","description":"net.corda.finance.flows.TwoPartyDealFlow.Handshake","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-handshake/index.html","searchKeys":["Handshake","data class Handshake<out T>(val payload: T, val primaryIdentity: AnonymousParty, val secondaryIdentity: AnonymousParty)","net.corda.finance.flows.TwoPartyDealFlow.Handshake"]},{"name":"data class HashAttachmentConstraint(val attachmentId: SecureHash) : AttachmentConstraint","description":"net.corda.core.contracts.HashAttachmentConstraint","location":"docs/net.corda.core.contracts/-hash-attachment-constraint/index.html","searchKeys":["HashAttachmentConstraint","data class HashAttachmentConstraint(val attachmentId: SecureHash) : AttachmentConstraint","net.corda.core.contracts.HashAttachmentConstraint"]},{"name":"data class Id(val value: String)","description":"net.corda.core.context.Actor.Id","location":"docs/net.corda.core.context/-actor/-id/index.html","searchKeys":["Id","data class Id(val value: String)","net.corda.core.context.Actor.Id"]},{"name":"data class InMemoryMessage(val topic: String, val data: ByteSequence, val uniqueMessageId: <Error class: unknown class>, val debugTimestamp: Instant = Instant.now(), val senderUUID: String? = null)","description":"net.corda.testing.node.internal.InMemoryMessage","location":"docs/net.corda.testing.node.internal/-in-memory-message/index.html","searchKeys":["InMemoryMessage","data class InMemoryMessage(val topic: String, val data: ByteSequence, val uniqueMessageId: <Error class: unknown class>, val debugTimestamp: Instant = Instant.now(), val senderUUID: String? = null)","net.corda.testing.node.internal.InMemoryMessage"]},{"name":"data class InOutGroup<out T : ContractState, out K : Any>(val inputs: List<T>, val outputs: List<T>, val groupingKey: K)","description":"net.corda.core.transactions.LedgerTransaction.InOutGroup","location":"docs/net.corda.core.transactions/-ledger-transaction/-in-out-group/index.html","searchKeys":["InOutGroup","data class InOutGroup<out T : ContractState, out K : Any>(val inputs: List<T>, val outputs: List<T>, val groupingKey: K)","net.corda.core.transactions.LedgerTransaction.InOutGroup"]},{"name":"data class InProcess(val inProcessResult: Try<LedgerTransaction?>) : VerificationResult","description":"net.corda.core.internal.verification.VerificationResult.InProcess","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process/index.html","searchKeys":["InProcess","data class InProcess(val inProcessResult: Try<LedgerTransaction?>) : VerificationResult","net.corda.core.internal.verification.VerificationResult.InProcess"]},{"name":"data class InProcessAndExternal(val inProcessResult: Try<LedgerTransaction>, val externalResult: Try<Unit>) : VerificationResult","description":"net.corda.core.internal.verification.VerificationResult.InProcessAndExternal","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process-and-external/index.html","searchKeys":["InProcessAndExternal","data class InProcessAndExternal(val inProcessResult: Try<LedgerTransaction>, val externalResult: Try<Unit>) : VerificationResult","net.corda.core.internal.verification.VerificationResult.InProcessAndExternal"]},{"name":"data class InProcessImpl(val nodeInfo: NodeInfo, val rpc: CordaRPCOps, val configuration: <Error class: unknown class>, val webAddress: NetworkHostAndPort, val useHTTPS: Boolean, nodeThread: Thread, onStopCallback: () -> Unit, node: <Error class: unknown class>) : InProcess, NodeHandleInternal","description":"net.corda.testing.driver.internal.InProcessImpl","location":"docs/net.corda.testing.driver.internal/-in-process-impl/index.html","searchKeys":["InProcessImpl","data class InProcessImpl(val nodeInfo: NodeInfo, val rpc: CordaRPCOps, val configuration: <Error class: unknown class>, val webAddress: NetworkHostAndPort, val useHTTPS: Boolean, nodeThread: Thread, onStopCallback: () -> Unit, node: <Error class: unknown class>) : InProcess, NodeHandleInternal","net.corda.testing.driver.internal.InProcessImpl"]},{"name":"data class IncludedLeaf(val hash: SecureHash) : PartialMerkleTree.PartialTree","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.IncludedLeaf","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-included-leaf/index.html","searchKeys":["IncludedLeaf","data class IncludedLeaf(val hash: SecureHash) : PartialMerkleTree.PartialTree","net.corda.core.crypto.PartialMerkleTree.PartialTree.IncludedLeaf"]},{"name":"data class InputStreamAndHash(val inputStream: InputStream, val sha256: SecureHash.SHA256)","description":"net.corda.core.internal.InputStreamAndHash","location":"docs/net.corda.core.internal/-input-stream-and-hash/index.html","searchKeys":["InputStreamAndHash","data class InputStreamAndHash(val inputStream: InputStream, val sha256: SecureHash.SHA256)","net.corda.core.internal.InputStreamAndHash"]},{"name":"data class InternalMockNodeParameters(val forcedID: Int? = null, val legalName: CordaX500Name? = null, val entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), val configOverrides: (<Error class: unknown class>) -> Any? = {}, val version: <Error class: unknown class> = MOCK_VERSION_INFO, val additionalCordapps: Collection<TestCordappInternal> = emptyList(), val flowManager: MockNodeFlowManager = MockNodeFlowManager())","description":"net.corda.testing.node.internal.InternalMockNodeParameters","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/index.html","searchKeys":["InternalMockNodeParameters","data class InternalMockNodeParameters(val forcedID: Int? = null, val legalName: CordaX500Name? = null, val entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), val configOverrides: (<Error class: unknown class>) -> Any? = {}, val version: <Error class: unknown class> = MOCK_VERSION_INFO, val additionalCordapps: Collection<TestCordappInternal> = emptyList(), val flowManager: MockNodeFlowManager = MockNodeFlowManager())","net.corda.testing.node.internal.InternalMockNodeParameters"]},{"name":"data class InvocationContext(val origin: InvocationOrigin, val trace: Trace, val actor: Actor?, val externalTrace: Trace? = null, val impersonatedActor: Actor? = null, val arguments: List<Any?>? = emptyList(), val clientId: String? = null, val serializedTelemetry: SerializedTelemetry? = null)","description":"net.corda.core.context.InvocationContext","location":"docs/net.corda.core.context/-invocation-context/index.html","searchKeys":["InvocationContext","data class InvocationContext(val origin: InvocationOrigin, val trace: Trace, val actor: Actor?, val externalTrace: Trace? = null, val impersonatedActor: Actor? = null, val arguments: List<Any?>? = emptyList(), val clientId: String? = null, val serializedTelemetry: SerializedTelemetry? = null)","net.corda.core.context.InvocationContext"]},{"name":"data class Issued<out P : Any>(val issuer: PartyAndReference, val product: P)","description":"net.corda.core.contracts.Issued","location":"docs/net.corda.core.contracts/-issued/index.html","searchKeys":["Issued","data class Issued<out P : Any>(val issuer: PartyAndReference, val product: P)","net.corda.core.contracts.Issued"]},{"name":"data class JmxPolicy constructor(val startJmxHttpServer: Boolean = false, val jmxHttpServerPortAllocation: PortAllocation = incrementalPortAllocation())","description":"net.corda.testing.driver.JmxPolicy","location":"docs/net.corda.testing.driver/-jmx-policy/index.html","searchKeys":["JmxPolicy","data class JmxPolicy constructor(val startJmxHttpServer: Boolean = false, val jmxHttpServerPortAllocation: PortAllocation = incrementalPortAllocation())","net.corda.testing.driver.JmxPolicy"]},{"name":"data class KotlinMetadataVersion(val major: Int, val minor: Int, val patch: Int = 0) : Comparable<KotlinMetadataVersion> ","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/index.html","searchKeys":["KotlinMetadataVersion","data class KotlinMetadataVersion(val major: Int, val minor: Int, val patch: Int = 0) : Comparable<KotlinMetadataVersion> ","net.corda.core.internal.cordapp.KotlinMetadataVersion"]},{"name":"data class Leaf(val hash: SecureHash) : MerkleTree","description":"net.corda.core.crypto.MerkleTree.Leaf","location":"docs/net.corda.core.crypto/-merkle-tree/-leaf/index.html","searchKeys":["Leaf","data class Leaf(val hash: SecureHash) : MerkleTree","net.corda.core.crypto.MerkleTree.Leaf"]},{"name":"data class Leaf(val hash: SecureHash) : PartialMerkleTree.PartialTree","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Leaf","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-leaf/index.html","searchKeys":["Leaf","data class Leaf(val hash: SecureHash) : PartialMerkleTree.PartialTree","net.corda.core.crypto.PartialMerkleTree.PartialTree.Leaf"]},{"name":"data class LedgerRecoveryParameters(val recoveryPeers: Collection<Party>, val timeWindow: RecoveryTimeWindow? = null, val useAllNetworkNodes: Boolean = false, val dryRun: Boolean = false, val useTimeWindowNarrowing: Boolean = true, val verboseLogging: Boolean = false, val recoveryBatchSize: Int = 1000, val alsoFinalize: Boolean = false)","description":"net.corda.core.flows.LedgerRecoveryParameters","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/index.html","searchKeys":["LedgerRecoveryParameters","data class LedgerRecoveryParameters(val recoveryPeers: Collection<Party>, val timeWindow: RecoveryTimeWindow? = null, val useAllNetworkNodes: Boolean = false, val dryRun: Boolean = false, val useTimeWindowNarrowing: Boolean = true, val verboseLogging: Boolean = false, val recoveryBatchSize: Int = 1000, val alsoFinalize: Boolean = false)","net.corda.core.flows.LedgerRecoveryParameters"]},{"name":"data class LedgerRecoveryResult(val totalRecoveredRecords: Long, val totalRecoveredTransactions: Long, val totalRecoveredInFlightTransactions: Long, val totalErrors: Long)","description":"net.corda.core.flows.LedgerRecoveryResult","location":"docs/net.corda.core.flows/-ledger-recovery-result/index.html","searchKeys":["LedgerRecoveryResult","data class LedgerRecoveryResult(val totalRecoveredRecords: Long, val totalRecoveredTransactions: Long, val totalRecoveredInFlightTransactions: Long, val totalErrors: Long)","net.corda.core.flows.LedgerRecoveryResult"]},{"name":"data class Likeness(val operator: LikenessOperator, val rightLiteral: String) : ColumnPredicate<String> ","description":"net.corda.core.node.services.vault.ColumnPredicate.Likeness","location":"docs/net.corda.core.node.services.vault/-column-predicate/-likeness/index.html","searchKeys":["Likeness","data class Likeness(val operator: LikenessOperator, val rightLiteral: String) : ColumnPredicate<String> ","net.corda.core.node.services.vault.ColumnPredicate.Likeness"]},{"name":"data class LinearStateQueryCriteria(val participants: List<AbstractParty>? = null, val uuid: List<UUID>? = null, val externalId: List<String>? = null, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, val exactParticipants: List<AbstractParty>?) : QueryCriteria.CommonQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/index.html","searchKeys":["LinearStateQueryCriteria","data class LinearStateQueryCriteria(val participants: List<AbstractParty>? = null, val uuid: List<UUID>? = null, val externalId: List<String>? = null, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, val exactParticipants: List<AbstractParty>?) : QueryCriteria.CommonQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria"]},{"name":"data class MockNetworkNotarySpec constructor(val name: CordaX500Name, val validating: Boolean = true)","description":"net.corda.testing.node.MockNetworkNotarySpec","location":"docs/net.corda.testing.node/-mock-network-notary-spec/index.html","searchKeys":["MockNetworkNotarySpec","data class MockNetworkNotarySpec constructor(val name: CordaX500Name, val validating: Boolean = true)","net.corda.testing.node.MockNetworkNotarySpec"]},{"name":"data class MockNetworkParameters(val networkSendManuallyPumped: Boolean = false, val threadPerNode: Boolean = false, val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random(), val notarySpecs: List<MockNetworkNotarySpec> = listOf(MockNetworkNotarySpec(DUMMY_NOTARY_NAME)), val networkParameters: NetworkParameters = testNetworkParameters(), val cordappsForAllNodes: Collection<TestCordapp> = emptyList())","description":"net.corda.testing.node.MockNetworkParameters","location":"docs/net.corda.testing.node/-mock-network-parameters/index.html","searchKeys":["MockNetworkParameters","data class MockNetworkParameters(val networkSendManuallyPumped: Boolean = false, val threadPerNode: Boolean = false, val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random(), val notarySpecs: List<MockNetworkNotarySpec> = listOf(MockNetworkNotarySpec(DUMMY_NOTARY_NAME)), val networkParameters: NetworkParameters = testNetworkParameters(), val cordappsForAllNodes: Collection<TestCordapp> = emptyList())","net.corda.testing.node.MockNetworkParameters"]},{"name":"data class MockNodeArgs(val config: <Error class: unknown class>, val network: InternalMockNetwork, val id: Int, val entropyRoot: BigInteger, val version: <Error class: unknown class> = MOCK_VERSION_INFO, val flowManager: MockNodeFlowManager = MockNodeFlowManager())","description":"net.corda.testing.node.internal.MockNodeArgs","location":"docs/net.corda.testing.node.internal/-mock-node-args/index.html","searchKeys":["MockNodeArgs","data class MockNodeArgs(val config: <Error class: unknown class>, val network: InternalMockNetwork, val id: Int, val entropyRoot: BigInteger, val version: <Error class: unknown class> = MOCK_VERSION_INFO, val flowManager: MockNodeFlowManager = MockNodeFlowManager())","net.corda.testing.node.internal.MockNodeArgs"]},{"name":"data class MockNodeParameters(val forcedID: Int? = null, val legalName: CordaX500Name? = null, val entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), val configOverrides: MockNodeConfigOverrides? = null, val additionalCordapps: Collection<TestCordapp> = emptyList())","description":"net.corda.testing.node.MockNodeParameters","location":"docs/net.corda.testing.node/-mock-node-parameters/index.html","searchKeys":["MockNodeParameters","data class MockNodeParameters(val forcedID: Int? = null, val legalName: CordaX500Name? = null, val entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), val configOverrides: MockNodeConfigOverrides? = null, val additionalCordapps: Collection<TestCordapp> = emptyList())","net.corda.testing.node.MockNodeParameters"]},{"name":"data class ModP(val value: BigInteger) : Comparable<Curve25519.ModP> ","description":"net.corda.core.crypto.internal.Curve25519.ModP","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/index.html","searchKeys":["ModP","data class ModP(val value: BigInteger) : Comparable<Curve25519.ModP> ","net.corda.core.crypto.internal.Curve25519.ModP"]},{"name":"data class Modified(val node: NodeInfo, val previousNode: NodeInfo) : NetworkMapCache.MapChange","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Modified","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-modified/index.html","searchKeys":["Modified","data class Modified(val node: NodeInfo, val previousNode: NodeInfo) : NetworkMapCache.MapChange","net.corda.core.node.services.NetworkMapCache.MapChange.Modified"]},{"name":"data class Move(val contract: Class<out Contract>? = null) : MoveCommand","description":"net.corda.finance.contracts.asset.Cash.Commands.Move","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-move/index.html","searchKeys":["Move","data class Move(val contract: Class<out Contract>? = null) : MoveCommand","net.corda.finance.contracts.asset.Cash.Commands.Move"]},{"name":"data class Move(val contract: Class<out Contract>? = null) : MoveCommand","description":"net.corda.finance.contracts.asset.Obligation.Commands.Move","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-move/index.html","searchKeys":["Move","data class Move(val contract: Class<out Contract>? = null) : MoveCommand","net.corda.finance.contracts.asset.Obligation.Commands.Move"]},{"name":"data class MultilateralNetState<P : Any>(val template: Obligation.Terms<P>) : NetState<P> ","description":"net.corda.finance.contracts.asset.MultilateralNetState","location":"docs/net.corda.finance.contracts.asset/-multilateral-net-state/index.html","searchKeys":["MultilateralNetState","data class MultilateralNetState<P : Any>(val template: Obligation.Terms<P>) : NetState<P> ","net.corda.finance.contracts.asset.MultilateralNetState"]},{"name":"data class Net(val type: NetType) : NetCommand","description":"net.corda.finance.contracts.asset.Obligation.Commands.Net","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-net/index.html","searchKeys":["Net","data class Net(val type: NetType) : NetCommand","net.corda.finance.contracts.asset.Obligation.Commands.Net"]},{"name":"data class NetworkHostAndPort(val host: String, val port: Int)","description":"net.corda.core.utilities.NetworkHostAndPort","location":"docs/net.corda.core.utilities/-network-host-and-port/index.html","searchKeys":["NetworkHostAndPort","data class NetworkHostAndPort(val host: String, val port: Int)","net.corda.core.utilities.NetworkHostAndPort"]},{"name":"data class NetworkParameters(val minimumPlatformVersion: Int, val notaries: List<NotaryInfo>, val maxMessageSize: Int, val maxTransactionSize: Int, val modifiedTime: Instant, val epoch: Int, val whitelistedContractImplementations: Map<String, List<AttachmentId>>, val eventHorizon: Duration, val packageOwnership: Map<String, PublicKey>, val recoveryMaximumBackupInterval: Duration? = null, val confidentialIdentityMinimumBackupInterval: Duration? = null)","description":"net.corda.core.node.NetworkParameters","location":"docs/net.corda.core.node/-network-parameters/index.html","searchKeys":["NetworkParameters","data class NetworkParameters(val minimumPlatformVersion: Int, val notaries: List<NotaryInfo>, val maxMessageSize: Int, val maxTransactionSize: Int, val modifiedTime: Instant, val epoch: Int, val whitelistedContractImplementations: Map<String, List<AttachmentId>>, val eventHorizon: Duration, val packageOwnership: Map<String, PublicKey>, val recoveryMaximumBackupInterval: Duration? = null, val confidentialIdentityMinimumBackupInterval: Duration? = null)","net.corda.core.node.NetworkParameters"]},{"name":"data class NetworkParametersHash(val hash: SecureHash)","description":"net.corda.core.transactions.NetworkParametersHash","location":"docs/net.corda.core.transactions/-network-parameters-hash/index.html","searchKeys":["NetworkParametersHash","data class NetworkParametersHash(val hash: SecureHash)","net.corda.core.transactions.NetworkParametersHash"]},{"name":"data class Node(val hash: SecureHash, val left: MerkleTree, val right: MerkleTree) : MerkleTree","description":"net.corda.core.crypto.MerkleTree.Node","location":"docs/net.corda.core.crypto/-merkle-tree/-node/index.html","searchKeys":["Node","data class Node(val hash: SecureHash, val left: MerkleTree, val right: MerkleTree) : MerkleTree","net.corda.core.crypto.MerkleTree.Node"]},{"name":"data class Node(val left: PartialMerkleTree.PartialTree, val right: PartialMerkleTree.PartialTree, val hashAlgorithm: String? = SecureHash.SHA2_256) : PartialMerkleTree.PartialTree","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Node","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-node/index.html","searchKeys":["Node","data class Node(val left: PartialMerkleTree.PartialTree, val right: PartialMerkleTree.PartialTree, val hashAlgorithm: String? = SecureHash.SHA2_256) : PartialMerkleTree.PartialTree","net.corda.core.crypto.PartialMerkleTree.PartialTree.Node"]},{"name":"data class NodeAndWeight(val node: PublicKey, val weight: Int) : Comparable<CompositeKey.NodeAndWeight> ","description":"net.corda.core.crypto.CompositeKey.NodeAndWeight","location":"docs/net.corda.core.crypto/-composite-key/-node-and-weight/index.html","searchKeys":["NodeAndWeight","data class NodeAndWeight(val node: PublicKey, val weight: Int) : Comparable<CompositeKey.NodeAndWeight> ","net.corda.core.crypto.CompositeKey.NodeAndWeight"]},{"name":"data class NodeDiagnosticInfo(val version: String, val revision: String, val platformVersion: Int, val vendor: String, val cordapps: List<CordappInfo>)","description":"net.corda.core.node.NodeDiagnosticInfo","location":"docs/net.corda.core.node/-node-diagnostic-info/index.html","searchKeys":["NodeDiagnosticInfo","data class NodeDiagnosticInfo(val version: String, val revision: String, val platformVersion: Int, val vendor: String, val cordapps: List<CordappInfo>)","net.corda.core.node.NodeDiagnosticInfo"]},{"name":"data class NodeInfo(val addresses: List<NetworkHostAndPort>, val legalIdentitiesAndCerts: List<PartyAndCertificate>, val platformVersion: Int, val serial: Long)","description":"net.corda.core.node.NodeInfo","location":"docs/net.corda.core.node/-node-info/index.html","searchKeys":["NodeInfo","data class NodeInfo(val addresses: List<NetworkHostAndPort>, val legalIdentitiesAndCerts: List<PartyAndCertificate>, val platformVersion: Int, val serial: Long)","net.corda.core.node.NodeInfo"]},{"name":"data class NodeParameters(val providedName: CordaX500Name? = null, val rpcUsers: List<User> = emptyList(), val verifierType: VerifierType = VerifierType.InMemory, val customOverrides: Map<String, Any?> = emptyMap(), val startInSameProcess: Boolean? = null, val maximumHeapSize: String = System.getenv(\"DRIVER_NODE_MEMORY\") ?: \"512m\", val additionalCordapps: Collection<TestCordapp> = emptySet(), val flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>> = emptyMap(), val logLevelOverride: String? = null, val rpcAddress: NetworkHostAndPort? = null, val systemProperties: Map<String, String> = emptyMap(), val legacyContracts: Collection<TestCordapp> = emptySet())","description":"net.corda.testing.driver.NodeParameters","location":"docs/net.corda.testing.driver/-node-parameters/index.html","searchKeys":["NodeParameters","data class NodeParameters(val providedName: CordaX500Name? = null, val rpcUsers: List<User> = emptyList(), val verifierType: VerifierType = VerifierType.InMemory, val customOverrides: Map<String, Any?> = emptyMap(), val startInSameProcess: Boolean? = null, val maximumHeapSize: String = System.getenv(\"DRIVER_NODE_MEMORY\") ?: \"512m\", val additionalCordapps: Collection<TestCordapp> = emptySet(), val flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>> = emptyMap(), val logLevelOverride: String? = null, val rpcAddress: NetworkHostAndPort? = null, val systemProperties: Map<String, String> = emptyMap(), val legacyContracts: Collection<TestCordapp> = emptySet())","net.corda.testing.driver.NodeParameters"]},{"name":"data class NodeVersionInfo(val releaseVersion: String, val revision: String, val platformVersion: Int, val vendor: String)","description":"net.corda.core.node.services.diagnostics.NodeVersionInfo","location":"docs/net.corda.core.node.services.diagnostics/-node-version-info/index.html","searchKeys":["NodeVersionInfo","data class NodeVersionInfo(val releaseVersion: String, val revision: String, val platformVersion: Int, val vendor: String)","net.corda.core.node.services.diagnostics.NodeVersionInfo"]},{"name":"data class Not<O>(val expression: CriteriaExpression<O, Boolean>) : CriteriaExpression<O, Boolean> ","description":"net.corda.core.node.services.vault.CriteriaExpression.Not","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-not/index.html","searchKeys":["Not","data class Not<O>(val expression: CriteriaExpression<O, Boolean>) : CriteriaExpression<O, Boolean> ","net.corda.core.node.services.vault.CriteriaExpression.Not"]},{"name":"data class NotarisationPayload(val transaction: Any, val requestSignature: NotarisationRequestSignature)","description":"net.corda.core.flows.NotarisationPayload","location":"docs/net.corda.core.flows/-notarisation-payload/index.html","searchKeys":["NotarisationPayload","data class NotarisationPayload(val transaction: Any, val requestSignature: NotarisationRequestSignature)","net.corda.core.flows.NotarisationPayload"]},{"name":"data class NotarisationRequestSignature(val digitalSignature: DigitalSignature.WithKey, val platformVersion: Int)","description":"net.corda.core.flows.NotarisationRequestSignature","location":"docs/net.corda.core.flows/-notarisation-request-signature/index.html","searchKeys":["NotarisationRequestSignature","data class NotarisationRequestSignature(val digitalSignature: DigitalSignature.WithKey, val platformVersion: Int)","net.corda.core.flows.NotarisationRequestSignature"]},{"name":"data class NotarisationResponse(val signatures: List<TransactionSignature>)","description":"net.corda.core.flows.NotarisationResponse","location":"docs/net.corda.core.flows/-notarisation-response/index.html","searchKeys":["NotarisationResponse","data class NotarisationResponse(val signatures: List<TransactionSignature>)","net.corda.core.flows.NotarisationResponse"]},{"name":"data class NotaryChangeWireTransaction(val serializedComponents: List<OpaqueBytes>, val digestService: DigestService) : CoreTransaction","description":"net.corda.core.transactions.NotaryChangeWireTransaction","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/index.html","searchKeys":["NotaryChangeWireTransaction","data class NotaryChangeWireTransaction(val serializedComponents: List<OpaqueBytes>, val digestService: DigestService) : CoreTransaction","net.corda.core.transactions.NotaryChangeWireTransaction"]},{"name":"data class NotaryHandle(val identity: Party, val validating: Boolean, val nodeHandles: CordaFuture<List<NodeHandle>>)","description":"net.corda.testing.driver.NotaryHandle","location":"docs/net.corda.testing.driver/-notary-handle/index.html","searchKeys":["NotaryHandle","data class NotaryHandle(val identity: Party, val validating: Boolean, val nodeHandles: CordaFuture<List<NodeHandle>>)","net.corda.testing.driver.NotaryHandle"]},{"name":"data class NotaryInfo(val identity: Party, val validating: Boolean)","description":"net.corda.core.node.NotaryInfo","location":"docs/net.corda.core.node/-notary-info/index.html","searchKeys":["NotaryInfo","data class NotaryInfo(val identity: Party, val validating: Boolean)","net.corda.core.node.NotaryInfo"]},{"name":"data class NotarySpec(val name: CordaX500Name, val validating: Boolean = true, val rpcUsers: List<User> = emptyList(), val verifierType: VerifierType = VerifierType.InMemory, val cluster: ClusterSpec? = null, val startInProcess: Boolean = true)","description":"net.corda.testing.node.NotarySpec","location":"docs/net.corda.testing.node/-notary-spec/index.html","searchKeys":["NotarySpec","data class NotarySpec(val name: CordaX500Name, val validating: Boolean = true, val rpcUsers: List<User> = emptyList(), val verifierType: VerifierType = VerifierType.InMemory, val cluster: ClusterSpec? = null, val startInProcess: Boolean = true)","net.corda.testing.node.NotarySpec"]},{"name":"data class NullExpression<C>(val operator: NullOperator) : ColumnPredicate<C> ","description":"net.corda.core.node.services.vault.ColumnPredicate.NullExpression","location":"docs/net.corda.core.node.services.vault/-column-predicate/-null-expression/index.html","searchKeys":["NullExpression","data class NullExpression<C>(val operator: NullOperator) : ColumnPredicate<C> ","net.corda.core.node.services.vault.ColumnPredicate.NullExpression"]},{"name":"data class ObjectWithCompatibleContext<out T : Any>(val obj: T, val context: SerializationContext)","description":"net.corda.core.serialization.ObjectWithCompatibleContext","location":"docs/net.corda.core.serialization/-object-with-compatible-context/index.html","searchKeys":["ObjectWithCompatibleContext","data class ObjectWithCompatibleContext<out T : Any>(val obj: T, val context: SerializationContext)","net.corda.core.serialization.ObjectWithCompatibleContext"]},{"name":"data class OutOfProcessImpl(val nodeInfo: NodeInfo, val rpc: CordaRPCOps, val configuration: <Error class: unknown class>, val webAddress: NetworkHostAndPort, val useHTTPS: Boolean, val debugPort: Int?, val process: Process, val onStopCallback: () -> Unit) : OutOfProcess, NodeHandleInternal","description":"net.corda.testing.driver.internal.OutOfProcessImpl","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/index.html","searchKeys":["OutOfProcessImpl","data class OutOfProcessImpl(val nodeInfo: NodeInfo, val rpc: CordaRPCOps, val configuration: <Error class: unknown class>, val webAddress: NetworkHostAndPort, val useHTTPS: Boolean, val debugPort: Int?, val process: Process, val onStopCallback: () -> Unit) : OutOfProcess, NodeHandleInternal","net.corda.testing.driver.internal.OutOfProcessImpl"]},{"name":"data class Page<T : ContractState> constructor(val states: List<StateAndRef<T>>, val statesMetadata: List<Vault.StateMetadata>, val totalStatesAvailable: Long, val stateTypes: Vault.StateStatus, val otherResults: List<Any>, val previousPageAnchor: StateRef? = null)","description":"net.corda.core.node.services.Vault.Page","location":"docs/net.corda.core.node.services/-vault/-page/index.html","searchKeys":["Page","data class Page<T : ContractState> constructor(val states: List<StateAndRef<T>>, val statesMetadata: List<Vault.StateMetadata>, val totalStatesAvailable: Long, val stateTypes: Vault.StateStatus, val otherResults: List<Any>, val previousPageAnchor: StateRef? = null)","net.corda.core.node.services.Vault.Page"]},{"name":"data class PageSpecification(val pageNumber: Int = -1, val pageSize: Int = DEFAULT_PAGE_SIZE)","description":"net.corda.core.node.services.vault.PageSpecification","location":"docs/net.corda.core.node.services.vault/-page-specification/index.html","searchKeys":["PageSpecification","data class PageSpecification(val pageNumber: Int = -1, val pageSize: Int = DEFAULT_PAGE_SIZE)","net.corda.core.node.services.vault.PageSpecification"]},{"name":"data class ParametersUpdateInfo(val hash: SecureHash, val parameters: NetworkParameters, val description: String, val updateDeadline: Instant)","description":"net.corda.core.messaging.ParametersUpdateInfo","location":"docs/net.corda.core.messaging/-parameters-update-info/index.html","searchKeys":["ParametersUpdateInfo","data class ParametersUpdateInfo(val hash: SecureHash, val parameters: NetworkParameters, val description: String, val updateDeadline: Instant)","net.corda.core.messaging.ParametersUpdateInfo"]},{"name":"data class PartyAndAmount<T : Any>(val party: AbstractParty, val amount: Amount<T>)","description":"net.corda.finance.contracts.asset.PartyAndAmount","location":"docs/net.corda.finance.contracts.asset/-party-and-amount/index.html","searchKeys":["PartyAndAmount","data class PartyAndAmount<T : Any>(val party: AbstractParty, val amount: Amount<T>)","net.corda.finance.contracts.asset.PartyAndAmount"]},{"name":"data class PartyAndReference(val party: AbstractParty, val reference: OpaqueBytes)","description":"net.corda.core.contracts.PartyAndReference","location":"docs/net.corda.core.contracts/-party-and-reference/index.html","searchKeys":["PartyAndReference","data class PartyAndReference(val party: AbstractParty, val reference: OpaqueBytes)","net.corda.core.contracts.PartyAndReference"]},{"name":"data class Peer(val party: CordaX500Name) : InvocationOrigin","description":"net.corda.core.context.InvocationOrigin.Peer","location":"docs/net.corda.core.context/-invocation-origin/-peer/index.html","searchKeys":["Peer","data class Peer(val party: CordaX500Name) : InvocationOrigin","net.corda.core.context.InvocationOrigin.Peer"]},{"name":"data class Peer(val party: Party) : FlowInitiator","description":"net.corda.core.flows.FlowInitiator.Peer","location":"docs/net.corda.core.flows/-flow-initiator/-peer/index.html","searchKeys":["Peer","data class Peer(val party: Party) : FlowInitiator","net.corda.core.flows.FlowInitiator.Peer"]},{"name":"data class PeerHandle(val id: Int, val name: CordaX500Name) : SingleMessageRecipient","description":"net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-peer-handle/index.html","searchKeys":["PeerHandle","data class PeerHandle(val id: Int, val name: CordaX500Name) : SingleMessageRecipient","net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle"]},{"name":"data class PersistentStateRef(var txId: String, var index: Int) : Serializable","description":"net.corda.core.schemas.PersistentStateRef","location":"docs/net.corda.core.schemas/-persistent-state-ref/index.html","searchKeys":["PersistentStateRef","data class PersistentStateRef(var txId: String, var index: Int) : Serializable","net.corda.core.schemas.PersistentStateRef"]},{"name":"data class Position(val tracker: ProgressTracker, val newStep: ProgressTracker.Step) : ProgressTracker.Change","description":"net.corda.core.utilities.ProgressTracker.Change.Position","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-position/index.html","searchKeys":["Position","data class Position(val tracker: ProgressTracker, val newStep: ProgressTracker.Step) : ProgressTracker.Change","net.corda.core.utilities.ProgressTracker.Change.Position"]},{"name":"data class Proposal<out M>(val stateRef: StateRef, val modification: M)","description":"net.corda.core.flows.AbstractStateReplacementFlow.Proposal","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-proposal/index.html","searchKeys":["Proposal","data class Proposal<out M>(val stateRef: StateRef, val modification: M)","net.corda.core.flows.AbstractStateReplacementFlow.Proposal"]},{"name":"data class RPC(val actor: Actor) : InvocationOrigin","description":"net.corda.core.context.InvocationOrigin.RPC","location":"docs/net.corda.core.context/-invocation-origin/-r-p-c/index.html","searchKeys":["RPC","data class RPC(val actor: Actor) : InvocationOrigin","net.corda.core.context.InvocationOrigin.RPC"]},{"name":"data class RPC(val username: String) : FlowInitiator","description":"net.corda.core.flows.FlowInitiator.RPC","location":"docs/net.corda.core.flows/-flow-initiator/-r-p-c/index.html","searchKeys":["RPC","data class RPC(val username: String) : FlowInitiator","net.corda.core.flows.FlowInitiator.RPC"]},{"name":"data class RPCDriverDSL(driverDSL: DriverDSLImpl, externalTrace: Trace?) : InternalDriverDSL","description":"net.corda.testing.node.internal.RPCDriverDSL","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/index.html","searchKeys":["RPCDriverDSL","data class RPCDriverDSL(driverDSL: DriverDSLImpl, externalTrace: Trace?) : InternalDriverDSL","net.corda.testing.node.internal.RPCDriverDSL"]},{"name":"data class Raft(val clusterSize: Int) : ClusterSpec","description":"net.corda.testing.node.ClusterSpec.Raft","location":"docs/net.corda.testing.node/-cluster-spec/-raft/index.html","searchKeys":["Raft","data class Raft(val clusterSize: Int) : ClusterSpec","net.corda.testing.node.ClusterSpec.Raft"]},{"name":"data class Receive(val sessions: NonEmptySet<FlowSession>) : FlowIORequest<Map<FlowSession, SerializedBytes<Any>>> ","description":"net.corda.core.internal.FlowIORequest.Receive","location":"docs/net.corda.core.internal/-flow-i-o-request/-receive/index.html","searchKeys":["Receive","data class Receive(val sessions: NonEmptySet<FlowSession>) : FlowIORequest<Map<FlowSession, SerializedBytes<Any>>> ","net.corda.core.internal.FlowIORequest.Receive"]},{"name":"data class ReceiverDistributionList(val opaqueData: ByteArray, val receiverStatesToRecord: StatesToRecord) : DistributionList","description":"net.corda.core.flows.DistributionList.ReceiverDistributionList","location":"docs/net.corda.core.flows/-distribution-list/-receiver-distribution-list/index.html","searchKeys":["ReceiverDistributionList","data class ReceiverDistributionList(val opaqueData: ByteArray, val receiverStatesToRecord: StatesToRecord) : DistributionList","net.corda.core.flows.DistributionList.ReceiverDistributionList"]},{"name":"data class ReceiverDistributionRecord(val txId: SecureHash, val peerPartyId: SecureHash, val timestamp: Instant, val timestampDiscriminator: Int, val encryptedDistributionList: OpaqueBytes, val receiverStatesToRecord: StatesToRecord) : DistributionRecord","description":"net.corda.core.flows.ReceiverDistributionRecord","location":"docs/net.corda.core.flows/-receiver-distribution-record/index.html","searchKeys":["ReceiverDistributionRecord","data class ReceiverDistributionRecord(val txId: SecureHash, val peerPartyId: SecureHash, val timestamp: Instant, val timestampDiscriminator: Int, val encryptedDistributionList: OpaqueBytes, val receiverStatesToRecord: StatesToRecord) : DistributionRecord","net.corda.core.flows.ReceiverDistributionRecord"]},{"name":"data class ReconnectingRPCConnection(val nodeHostAndPorts: List<NetworkHostAndPort>, val username: String, val password: String, val rpcConfiguration: CordaRPCClientConfiguration, val sslConfiguration: ClientRpcSslOptions? = null, val classLoader: ClassLoader?, val gracefulReconnect: GracefulReconnect = GracefulReconnect(), val observersPool: ExecutorService) : RPCConnection<CordaRPCOps> ","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/index.html","searchKeys":["ReconnectingRPCConnection","data class ReconnectingRPCConnection(val nodeHostAndPorts: List<NetworkHostAndPort>, val username: String, val password: String, val rpcConfiguration: CordaRPCClientConfiguration, val sslConfiguration: ClientRpcSslOptions? = null, val classLoader: ClassLoader?, val gracefulReconnect: GracefulReconnect = GracefulReconnect(), val observersPool: ExecutorService) : RPCConnection<CordaRPCOps> ","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection"]},{"name":"data class RecoveryTimeWindow(val fromTime: Instant, val untilTime: Instant = Instant.now())","description":"net.corda.core.flows.RecoveryTimeWindow","location":"docs/net.corda.core.flows/-recovery-time-window/index.html","searchKeys":["RecoveryTimeWindow","data class RecoveryTimeWindow(val fromTime: Instant, val untilTime: Instant = Instant.now())","net.corda.core.flows.RecoveryTimeWindow"]},{"name":"data class ReferenceStateRef(val stateRef: StateRef)","description":"net.corda.core.transactions.ReferenceStateRef","location":"docs/net.corda.core.transactions/-reference-state-ref/index.html","searchKeys":["ReferenceStateRef","data class ReferenceStateRef(val stateRef: StateRef)","net.corda.core.transactions.ReferenceStateRef"]},{"name":"data class ReferencedStateAndRef<out T : ContractState>(val stateAndRef: StateAndRef<T>)","description":"net.corda.core.contracts.ReferencedStateAndRef","location":"docs/net.corda.core.contracts/-referenced-state-and-ref/index.html","searchKeys":["ReferencedStateAndRef","data class ReferencedStateAndRef<out T : ContractState>(val stateAndRef: StateAndRef<T>)","net.corda.core.contracts.ReferencedStateAndRef"]},{"name":"data class Removed(val id: StateMachineRunId, val result: Try<*>) : StateMachineUpdate","description":"net.corda.core.messaging.StateMachineUpdate.Removed","location":"docs/net.corda.core.messaging/-state-machine-update/-removed/index.html","searchKeys":["Removed","data class Removed(val id: StateMachineRunId, val result: Try<*>) : StateMachineUpdate","net.corda.core.messaging.StateMachineUpdate.Removed"]},{"name":"data class Removed(val node: NodeInfo) : NetworkMapCache.MapChange","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Removed","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-removed/index.html","searchKeys":["Removed","data class Removed(val node: NodeInfo) : NetworkMapCache.MapChange","net.corda.core.node.services.NetworkMapCache.MapChange.Removed"]},{"name":"data class Rendering(val tracker: ProgressTracker, val ofStep: ProgressTracker.Step) : ProgressTracker.Change","description":"net.corda.core.utilities.ProgressTracker.Change.Rendering","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-rendering/index.html","searchKeys":["Rendering","data class Rendering(val tracker: ProgressTracker, val ofStep: ProgressTracker.Step) : ProgressTracker.Change","net.corda.core.utilities.ProgressTracker.Change.Rendering"]},{"name":"data class RequestSignatureInvalid(val cause: Throwable) : NotaryError","description":"net.corda.core.flows.NotaryError.RequestSignatureInvalid","location":"docs/net.corda.core.flows/-notary-error/-request-signature-invalid/index.html","searchKeys":["RequestSignatureInvalid","data class RequestSignatureInvalid(val cause: Throwable) : NotaryError","net.corda.core.flows.NotaryError.RequestSignatureInvalid"]},{"name":"data class ResolveTransactionsFlowStats(val resolvableTransactionHashesCount: Long = 0, val downloadedDependencyCount: Long = 0, val recordedTransactionCount: Long = 0, val skippedRecordingTransactionCount: Long = 0)","description":"net.corda.core.internal.ResolveTransactionsFlowStats","location":"docs/net.corda.core.internal/-resolve-transactions-flow-stats/index.html","searchKeys":["ResolveTransactionsFlowStats","data class ResolveTransactionsFlowStats(val resolvableTransactionHashesCount: Long = 0, val downloadedDependencyCount: Long = 0, val recordedTransactionCount: Long = 0, val skippedRecordingTransactionCount: Long = 0)","net.corda.core.internal.ResolveTransactionsFlowStats"]},{"name":"data class Result(val stx: SignedTransaction, val recipient: AbstractParty?)","description":"net.corda.finance.flows.AbstractCashFlow.Result","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-result/index.html","searchKeys":["Result","data class Result(val stx: SignedTransaction, val recipient: AbstractParty?)","net.corda.finance.flows.AbstractCashFlow.Result"]},{"name":"data class Result<out T : NamedByHash>(val fromDisk: List<T>, val downloaded: List<T>)","description":"net.corda.core.internal.FetchDataFlow.Result","location":"docs/net.corda.core.internal/-fetch-data-flow/-result/index.html","searchKeys":["Result","data class Result<out T : NamedByHash>(val fromDisk: List<T>, val downloaded: List<T>)","net.corda.core.internal.FetchDataFlow.Result"]},{"name":"data class RpcBrokerHandle(val hostAndPort: NetworkHostAndPort?, val clientTransportConfiguration: <Error class: unknown class>, val serverControl: <Error class: unknown class>, val shutdown: () -> Unit)","description":"net.corda.testing.node.internal.RpcBrokerHandle","location":"docs/net.corda.testing.node.internal/-rpc-broker-handle/index.html","searchKeys":["RpcBrokerHandle","data class RpcBrokerHandle(val hostAndPort: NetworkHostAndPort?, val clientTransportConfiguration: <Error class: unknown class>, val serverControl: <Error class: unknown class>, val shutdown: () -> Unit)","net.corda.testing.node.internal.RpcBrokerHandle"]},{"name":"data class RpcServerHandle(val broker: RpcBrokerHandle, val rpcServer: <Error class: unknown class>)","description":"net.corda.testing.node.internal.RpcServerHandle","location":"docs/net.corda.testing.node.internal/-rpc-server-handle/index.html","searchKeys":["RpcServerHandle","data class RpcServerHandle(val broker: RpcBrokerHandle, val rpcServer: <Error class: unknown class>)","net.corda.testing.node.internal.RpcServerHandle"]},{"name":"data class ScanPackageTestCordapp(val scanPackage: String, val config: Map<String, Any> = emptyMap(), val signed: Boolean = false) : TestCordappInternal","description":"net.corda.testing.node.internal.ScanPackageTestCordapp","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/index.html","searchKeys":["ScanPackageTestCordapp","data class ScanPackageTestCordapp(val scanPackage: String, val config: Map<String, Any> = emptyMap(), val signed: Boolean = false) : TestCordappInternal","net.corda.testing.node.internal.ScanPackageTestCordapp"]},{"name":"data class Scheduled(val scheduledState: ScheduledStateRef) : FlowInitiator","description":"net.corda.core.flows.FlowInitiator.Scheduled","location":"docs/net.corda.core.flows/-flow-initiator/-scheduled/index.html","searchKeys":["Scheduled","data class Scheduled(val scheduledState: ScheduledStateRef) : FlowInitiator","net.corda.core.flows.FlowInitiator.Scheduled"]},{"name":"data class Scheduled(val scheduledState: ScheduledStateRef) : InvocationOrigin","description":"net.corda.core.context.InvocationOrigin.Scheduled","location":"docs/net.corda.core.context/-invocation-origin/-scheduled/index.html","searchKeys":["Scheduled","data class Scheduled(val scheduledState: ScheduledStateRef) : InvocationOrigin","net.corda.core.context.InvocationOrigin.Scheduled"]},{"name":"data class ScheduledActivity(val logicRef: FlowLogicRef, val scheduledAt: Instant) : Scheduled","description":"net.corda.core.contracts.ScheduledActivity","location":"docs/net.corda.core.contracts/-scheduled-activity/index.html","searchKeys":["ScheduledActivity","data class ScheduledActivity(val logicRef: FlowLogicRef, val scheduledAt: Instant) : Scheduled","net.corda.core.contracts.ScheduledActivity"]},{"name":"data class ScheduledStateRef(val ref: StateRef, val scheduledAt: Instant) : Scheduled","description":"net.corda.core.contracts.ScheduledStateRef","location":"docs/net.corda.core.contracts/-scheduled-state-ref/index.html","searchKeys":["ScheduledStateRef","data class ScheduledStateRef(val ref: StateRef, val scheduledAt: Instant) : Scheduled","net.corda.core.contracts.ScheduledStateRef"]},{"name":"data class SellerTradeInfo(val price: Amount<Currency>, val payToIdentity: PartyAndCertificate)","description":"net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller-trade-info/index.html","searchKeys":["SellerTradeInfo","data class SellerTradeInfo(val price: Amount<Currency>, val payToIdentity: PartyAndCertificate)","net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo"]},{"name":"data class Send(val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>) : FlowIORequest<Unit> ","description":"net.corda.core.internal.FlowIORequest.Send","location":"docs/net.corda.core.internal/-flow-i-o-request/-send/index.html","searchKeys":["Send","data class Send(val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>) : FlowIORequest<Unit> ","net.corda.core.internal.FlowIORequest.Send"]},{"name":"data class SendAndReceive(val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>, val shouldRetrySend: Boolean) : FlowIORequest<Map<FlowSession, SerializedBytes<Any>>> ","description":"net.corda.core.internal.FlowIORequest.SendAndReceive","location":"docs/net.corda.core.internal/-flow-i-o-request/-send-and-receive/index.html","searchKeys":["SendAndReceive","data class SendAndReceive(val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>, val shouldRetrySend: Boolean) : FlowIORequest<Map<FlowSession, SerializedBytes<Any>>> ","net.corda.core.internal.FlowIORequest.SendAndReceive"]},{"name":"data class SenderDistributionList(val senderStatesToRecord: StatesToRecord, val peersToStatesToRecord: Map<CordaX500Name, StatesToRecord>) : DistributionList","description":"net.corda.core.flows.DistributionList.SenderDistributionList","location":"docs/net.corda.core.flows/-distribution-list/-sender-distribution-list/index.html","searchKeys":["SenderDistributionList","data class SenderDistributionList(val senderStatesToRecord: StatesToRecord, val peersToStatesToRecord: Map<CordaX500Name, StatesToRecord>) : DistributionList","net.corda.core.flows.DistributionList.SenderDistributionList"]},{"name":"data class SenderDistributionRecord(val txId: SecureHash, val peerPartyId: SecureHash, val timestamp: Instant, val timestampDiscriminator: Int, val senderStatesToRecord: StatesToRecord, val receiverStatesToRecord: StatesToRecord) : DistributionRecord","description":"net.corda.core.flows.SenderDistributionRecord","location":"docs/net.corda.core.flows/-sender-distribution-record/index.html","searchKeys":["SenderDistributionRecord","data class SenderDistributionRecord(val txId: SecureHash, val peerPartyId: SecureHash, val timestamp: Instant, val timestampDiscriminator: Int, val senderStatesToRecord: StatesToRecord, val receiverStatesToRecord: StatesToRecord) : DistributionRecord","net.corda.core.flows.SenderDistributionRecord"]},{"name":"data class SerializedStateAndRef(val serializedState: SerializedTransactionState, val ref: StateRef)","description":"net.corda.core.internal.SerializedStateAndRef","location":"docs/net.corda.core.internal/-serialized-state-and-ref/index.html","searchKeys":["SerializedStateAndRef","data class SerializedStateAndRef(val serializedState: SerializedTransactionState, val ref: StateRef)","net.corda.core.internal.SerializedStateAndRef"]},{"name":"data class SerializedTelemetry(val serializedTelemetryData: Map<String, OpaqueBytes>)","description":"net.corda.core.internal.telemetry.SerializedTelemetry","location":"docs/net.corda.core.internal.telemetry/-serialized-telemetry/index.html","searchKeys":["SerializedTelemetry","data class SerializedTelemetry(val serializedTelemetryData: Map<String, OpaqueBytes>)","net.corda.core.internal.telemetry.SerializedTelemetry"]},{"name":"data class Service(val serviceClassName: String) : FlowInitiator","description":"net.corda.core.flows.FlowInitiator.Service","location":"docs/net.corda.core.flows/-flow-initiator/-service/index.html","searchKeys":["Service","data class Service(val serviceClassName: String) : FlowInitiator","net.corda.core.flows.FlowInitiator.Service"]},{"name":"data class Service(val serviceClassName: String, val owningLegalIdentity: CordaX500Name) : InvocationOrigin","description":"net.corda.core.context.InvocationOrigin.Service","location":"docs/net.corda.core.context/-invocation-origin/-service/index.html","searchKeys":["Service","data class Service(val serviceClassName: String, val owningLegalIdentity: CordaX500Name) : InvocationOrigin","net.corda.core.context.InvocationOrigin.Service"]},{"name":"data class SetLifecycle(val lifecycle: Obligation.Lifecycle) : CommandData","description":"net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-set-lifecycle/index.html","searchKeys":["SetLifecycle","data class SetLifecycle(val lifecycle: Obligation.Lifecycle) : CommandData","net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle"]},{"name":"data class Settle<P : Any>(val amount: Amount<Issued<Obligation.Terms<P>>>) : CommandData","description":"net.corda.finance.contracts.asset.Obligation.Commands.Settle","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-settle/index.html","searchKeys":["Settle","data class Settle<P : Any>(val amount: Amount<Issued<Obligation.Terms<P>>>) : CommandData","net.corda.finance.contracts.asset.Obligation.Commands.Settle"]},{"name":"data class SharedTx(val tx: TransactionBuilder, val cashSigningPubKeys: List<PublicKey>)","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-shared-tx/index.html","searchKeys":["SharedTx","data class SharedTx(val tx: TransactionBuilder, val cashSigningPubKeys: List<PublicKey>)","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx"]},{"name":"data class SignableData(val txId: SecureHash, val signatureMetadata: SignatureMetadata)","description":"net.corda.core.crypto.SignableData","location":"docs/net.corda.core.crypto/-signable-data/index.html","searchKeys":["SignableData","data class SignableData(val txId: SecureHash, val signatureMetadata: SignatureMetadata)","net.corda.core.crypto.SignableData"]},{"name":"data class SignatureAttachmentConstraint(val key: PublicKey) : AttachmentConstraint","description":"net.corda.core.contracts.SignatureAttachmentConstraint","location":"docs/net.corda.core.contracts/-signature-attachment-constraint/index.html","searchKeys":["SignatureAttachmentConstraint","data class SignatureAttachmentConstraint(val key: PublicKey) : AttachmentConstraint","net.corda.core.contracts.SignatureAttachmentConstraint"]},{"name":"data class SignatureMetadata(val platformVersion: Int, val schemeNumberID: Int)","description":"net.corda.core.crypto.SignatureMetadata","location":"docs/net.corda.core.crypto/-signature-metadata/index.html","searchKeys":["SignatureMetadata","data class SignatureMetadata(val platformVersion: Int, val schemeNumberID: Int)","net.corda.core.crypto.SignatureMetadata"]},{"name":"data class SignatureScheme(val schemeNumberID: Int, val schemeCodeName: String, val signatureOID: <Error class: unknown class>, val alternativeOIDs: List<<Error class: unknown class>>, val providerName: String, val algorithmName: String, val signatureName: String, val algSpec: AlgorithmParameterSpec?, val keySize: Int?, val desc: String)","description":"net.corda.core.crypto.SignatureScheme","location":"docs/net.corda.core.crypto/-signature-scheme/index.html","searchKeys":["SignatureScheme","data class SignatureScheme(val schemeNumberID: Int, val schemeCodeName: String, val signatureOID: <Error class: unknown class>, val alternativeOIDs: List<<Error class: unknown class>>, val providerName: String, val algorithmName: String, val signatureName: String, val algSpec: AlgorithmParameterSpec?, val keySize: Int?, val desc: String)","net.corda.core.crypto.SignatureScheme"]},{"name":"data class SignedTransaction(val txBits: SerializedBytes<CoreTransaction>, val sigs: List<TransactionSignature>) : TransactionWithSignatures","description":"net.corda.core.transactions.SignedTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/index.html","searchKeys":["SignedTransaction","data class SignedTransaction(val txBits: SerializedBytes<CoreTransaction>, val sigs: List<TransactionSignature>) : TransactionWithSignatures","net.corda.core.transactions.SignedTransaction"]},{"name":"data class SignedTransactionWithDistributionList(val stx: SignedTransaction, val distributionList: ByteArray, val isFinality: Boolean)","description":"net.corda.core.flows.SignedTransactionWithDistributionList","location":"docs/net.corda.core.flows/-signed-transaction-with-distribution-list/index.html","searchKeys":["SignedTransactionWithDistributionList","data class SignedTransactionWithDistributionList(val stx: SignedTransaction, val distributionList: ByteArray, val isFinality: Boolean)","net.corda.core.flows.SignedTransactionWithDistributionList"]},{"name":"data class SignedTransactionWithStatus(val stx: SignedTransaction, val status: TransactionStatus) : NamedByHash","description":"net.corda.core.node.services.SignedTransactionWithStatus","location":"docs/net.corda.core.node.services/-signed-transaction-with-status/index.html","searchKeys":["SignedTransactionWithStatus","data class SignedTransactionWithStatus(val stx: SignedTransaction, val status: TransactionStatus) : NamedByHash","net.corda.core.node.services.SignedTransactionWithStatus"]},{"name":"data class SigningInfo(val keyStorePath: Path?, val signatureCount: Int, val algorithm: String)","description":"net.corda.testing.node.internal.CustomCordapp.SigningInfo","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-signing-info/index.html","searchKeys":["SigningInfo","data class SigningInfo(val keyStorePath: Path?, val signatureCount: Int, val algorithm: String)","net.corda.testing.node.internal.CustomCordapp.SigningInfo"]},{"name":"data class SimpleLogContext(val traceId: UUID, val baggage: Map<String, String>) : TelemetryDataItem","description":"net.corda.core.internal.telemetry.SimpleLogContext","location":"docs/net.corda.core.internal.telemetry/-simple-log-context/index.html","searchKeys":["SimpleLogContext","data class SimpleLogContext(val traceId: UUID, val baggage: Map<String, String>) : TelemetryDataItem","net.corda.core.internal.telemetry.SimpleLogContext"]},{"name":"data class SingleNode(val party: Party, val addresses: List<NetworkHostAndPort>) : PartyInfo","description":"net.corda.core.node.services.PartyInfo.SingleNode","location":"docs/net.corda.core.node.services/-party-info/-single-node/index.html","searchKeys":["SingleNode","data class SingleNode(val party: Party, val addresses: List<NetworkHostAndPort>) : PartyInfo","net.corda.core.node.services.PartyInfo.SingleNode"]},{"name":"data class Sleep(val wakeUpAfter: Instant) : FlowIORequest<Unit> ","description":"net.corda.core.internal.FlowIORequest.Sleep","location":"docs/net.corda.core.internal/-flow-i-o-request/-sleep/index.html","searchKeys":["Sleep","data class Sleep(val wakeUpAfter: Instant) : FlowIORequest<Unit> ","net.corda.core.internal.FlowIORequest.Sleep"]},{"name":"data class SoftLockingCondition(val type: QueryCriteria.SoftLockingType, val lockIds: List<UUID> = emptyList())","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-condition/index.html","searchKeys":["SoftLockingCondition","data class SoftLockingCondition(val type: QueryCriteria.SoftLockingType, val lockIds: List<UUID> = emptyList())","net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition"]},{"name":"data class Sort(val columns: Collection<Sort.SortColumn>) : BaseSort","description":"net.corda.core.node.services.vault.Sort","location":"docs/net.corda.core.node.services.vault/-sort/index.html","searchKeys":["Sort","data class Sort(val columns: Collection<Sort.SortColumn>) : BaseSort","net.corda.core.node.services.vault.Sort"]},{"name":"data class SortColumn(val sortAttribute: SortAttribute, val direction: Sort.Direction = Sort.Direction.ASC)","description":"net.corda.core.node.services.vault.Sort.SortColumn","location":"docs/net.corda.core.node.services.vault/-sort/-sort-column/index.html","searchKeys":["SortColumn","data class SortColumn(val sortAttribute: SortAttribute, val direction: Sort.Direction = Sort.Direction.ASC)","net.corda.core.node.services.vault.Sort.SortColumn"]},{"name":"data class SourceAndAmount<T : Any, out P : Any>(val source: P, val amount: Amount<T>, val ref: Any? = null)","description":"net.corda.core.contracts.SourceAndAmount","location":"docs/net.corda.core.contracts/-source-and-amount/index.html","searchKeys":["SourceAndAmount","data class SourceAndAmount<T : Any, out P : Any>(val source: P, val amount: Amount<T>, val ref: Any? = null)","net.corda.core.contracts.SourceAndAmount"]},{"name":"data class StackFrameDataToken(val className: String)","description":"net.corda.core.flows.StackFrameDataToken","location":"docs/net.corda.core.flows/-stack-frame-data-token/index.html","searchKeys":["StackFrameDataToken","data class StackFrameDataToken(val className: String)","net.corda.core.flows.StackFrameDataToken"]},{"name":"data class Standard(val attribute: Sort.Attribute) : SortAttribute","description":"net.corda.core.node.services.vault.SortAttribute.Standard","location":"docs/net.corda.core.node.services.vault/-sort-attribute/-standard/index.html","searchKeys":["Standard","data class Standard(val attribute: Sort.Attribute) : SortAttribute","net.corda.core.node.services.vault.SortAttribute.Standard"]},{"name":"data class State(val amount: Amount<Issued<Currency>>, val owner: AbstractParty) : FungibleAsset<Currency> , QueryableState","description":"net.corda.finance.contracts.asset.Cash.State","location":"docs/net.corda.finance.contracts.asset/-cash/-state/index.html","searchKeys":["State","data class State(val amount: Amount<Issued<Currency>>, val owner: AbstractParty) : FungibleAsset<Currency> , QueryableState","net.corda.finance.contracts.asset.Cash.State"]},{"name":"data class State(val amount: Amount<Issued<Currency>>, val owner: AbstractParty) : FungibleAsset<Currency> , QueryableState","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/index.html","searchKeys":["State","data class State(val amount: Amount<Issued<Currency>>, val owner: AbstractParty) : FungibleAsset<Currency> , QueryableState","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State"]},{"name":"data class State(val buffer: ByteArrayOutputStream, val verifyKey: CompositeKey)","description":"net.corda.core.crypto.CompositeSignature.State","location":"docs/net.corda.core.crypto/-composite-signature/-state/index.html","searchKeys":["State","data class State(val buffer: ByteArrayOutputStream, val verifyKey: CompositeKey)","net.corda.core.crypto.CompositeSignature.State"]},{"name":"data class State(val issuance: PartyAndReference, val owner: AbstractParty, val faceValue: Amount<Issued<Currency>>, val maturityDate: Instant) : OwnableState, QueryableState","description":"net.corda.finance.contracts.CommercialPaper.State","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/index.html","searchKeys":["State","data class State(val issuance: PartyAndReference, val owner: AbstractParty, val faceValue: Amount<Issued<Currency>>, val maturityDate: Instant) : OwnableState, QueryableState","net.corda.finance.contracts.CommercialPaper.State"]},{"name":"data class State(val linearId: UniqueIdentifier = UniqueIdentifier(), val participants: List<AbstractParty> = listOf(), val linearString: String = \"ABC\", val linearNumber: Long = 123, val linearTimestamp: Instant = LocalDateTime.now().toInstant(UTC), val linearBoolean: Boolean = true, val nonce: SecureHash = SecureHash.randomSHA256()) : LinearState, QueryableState","description":"net.corda.testing.internal.vault.DummyLinearContract.State","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/index.html","searchKeys":["State","data class State(val linearId: UniqueIdentifier = UniqueIdentifier(), val participants: List<AbstractParty> = listOf(), val linearString: String = \"ABC\", val linearNumber: Long = 123, val linearTimestamp: Instant = LocalDateTime.now().toInstant(UTC), val linearBoolean: Boolean = true, val nonce: SecureHash = SecureHash.randomSHA256()) : LinearState, QueryableState","net.corda.testing.internal.vault.DummyLinearContract.State"]},{"name":"data class State(val participants: List<AbstractParty>, val linearId: UniqueIdentifier) : DealState, QueryableState","description":"net.corda.testing.internal.vault.DummyDealContract.State","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/index.html","searchKeys":["State","data class State(val participants: List<AbstractParty>, val linearId: UniqueIdentifier) : DealState, QueryableState","net.corda.testing.internal.vault.DummyDealContract.State"]},{"name":"data class State(val participants: List<AbstractParty>, val linearId: UniqueIdentifier) : LinearState, QueryableState","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.State","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-state/index.html","searchKeys":["State","data class State(val participants: List<AbstractParty>, val linearId: UniqueIdentifier) : LinearState, QueryableState","net.corda.testing.internal.vault.UniqueDummyLinearContract.State"]},{"name":"data class State<P : Any>(var lifecycle: Obligation.Lifecycle = Lifecycle.NORMAL, val obligor: AbstractParty, val template: Obligation.Terms<P>, val quantity: Long, val beneficiary: AbstractParty) : FungibleAsset<Obligation.Terms<P>> , NettableState<Obligation.State<P>, MultilateralNetState<P>> ","description":"net.corda.finance.contracts.asset.Obligation.State","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/index.html","searchKeys":["State","data class State<P : Any>(var lifecycle: Obligation.Lifecycle = Lifecycle.NORMAL, val obligor: AbstractParty, val template: Obligation.Terms<P>, val quantity: Long, val beneficiary: AbstractParty) : FungibleAsset<Obligation.Terms<P>> , NettableState<Obligation.State<P>, MultilateralNetState<P>> ","net.corda.finance.contracts.asset.Obligation.State"]},{"name":"data class StateAndContract(val state: ContractState, val contract: ContractClassName)","description":"net.corda.core.contracts.StateAndContract","location":"docs/net.corda.core.contracts/-state-and-contract/index.html","searchKeys":["StateAndContract","data class StateAndContract(val state: ContractState, val contract: ContractClassName)","net.corda.core.contracts.StateAndContract"]},{"name":"data class StateAndRef<out T : ContractState>(val state: TransactionState<T>, val ref: StateRef)","description":"net.corda.core.contracts.StateAndRef","location":"docs/net.corda.core.contracts/-state-and-ref/index.html","searchKeys":["StateAndRef","data class StateAndRef<out T : ContractState>(val state: TransactionState<T>, val ref: StateRef)","net.corda.core.contracts.StateAndRef"]},{"name":"data class StateConsumptionDetails(val hashOfTransactionId: SecureHash, val type: StateConsumptionDetails.ConsumedStateType)","description":"net.corda.core.flows.StateConsumptionDetails","location":"docs/net.corda.core.flows/-state-consumption-details/index.html","searchKeys":["StateConsumptionDetails","data class StateConsumptionDetails(val hashOfTransactionId: SecureHash, val type: StateConsumptionDetails.ConsumedStateType)","net.corda.core.flows.StateConsumptionDetails"]},{"name":"data class StateMachineInfo constructor(val id: StateMachineRunId, val flowLogicClassName: String, val initiator: FlowInitiator, val progressTrackerStepAndUpdates: DataFeed<String, String>?, val invocationContext: InvocationContext = initiator.invocationContext)","description":"net.corda.core.messaging.StateMachineInfo","location":"docs/net.corda.core.messaging/-state-machine-info/index.html","searchKeys":["StateMachineInfo","data class StateMachineInfo constructor(val id: StateMachineRunId, val flowLogicClassName: String, val initiator: FlowInitiator, val progressTrackerStepAndUpdates: DataFeed<String, String>?, val invocationContext: InvocationContext = initiator.invocationContext)","net.corda.core.messaging.StateMachineInfo"]},{"name":"data class StateMachineRunId(val uuid: UUID)","description":"net.corda.core.flows.StateMachineRunId","location":"docs/net.corda.core.flows/-state-machine-run-id/index.html","searchKeys":["StateMachineRunId","data class StateMachineRunId(val uuid: UUID)","net.corda.core.flows.StateMachineRunId"]},{"name":"data class StateMachineTransactionMapping(val stateMachineRunId: StateMachineRunId, val transactionId: SecureHash)","description":"net.corda.core.messaging.StateMachineTransactionMapping","location":"docs/net.corda.core.messaging/-state-machine-transaction-mapping/index.html","searchKeys":["StateMachineTransactionMapping","data class StateMachineTransactionMapping(val stateMachineRunId: StateMachineRunId, val transactionId: SecureHash)","net.corda.core.messaging.StateMachineTransactionMapping"]},{"name":"data class StateMetadata constructor(val ref: StateRef, val contractStateClassName: String, val recordedTime: Instant, val consumedTime: Instant?, val status: Vault.StateStatus, val notary: AbstractParty?, val lockId: String?, val lockUpdateTime: Instant?, val relevancyStatus: Vault.RelevancyStatus? = null, val constraintInfo: Vault.ConstraintInfo? = null)","description":"net.corda.core.node.services.Vault.StateMetadata","location":"docs/net.corda.core.node.services/-vault/-state-metadata/index.html","searchKeys":["StateMetadata","data class StateMetadata constructor(val ref: StateRef, val contractStateClassName: String, val recordedTime: Instant, val consumedTime: Instant?, val status: Vault.StateStatus, val notary: AbstractParty?, val lockId: String?, val lockUpdateTime: Instant?, val relevancyStatus: Vault.RelevancyStatus? = null, val constraintInfo: Vault.ConstraintInfo? = null)","net.corda.core.node.services.Vault.StateMetadata"]},{"name":"data class StateRef(val txhash: SecureHash, val index: Int)","description":"net.corda.core.contracts.StateRef","location":"docs/net.corda.core.contracts/-state-ref/index.html","searchKeys":["StateRef","data class StateRef(val txhash: SecureHash, val index: Int)","net.corda.core.contracts.StateRef"]},{"name":"data class Structural(val tracker: ProgressTracker, val parent: ProgressTracker.Step) : ProgressTracker.Change","description":"net.corda.core.utilities.ProgressTracker.Change.Structural","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-structural/index.html","searchKeys":["Structural","data class Structural(val tracker: ProgressTracker, val parent: ProgressTracker.Step) : ProgressTracker.Change","net.corda.core.utilities.ProgressTracker.Change.Structural"]},{"name":"data class Success(val signature: TransactionSignature) : UniquenessProvider.Result","description":"net.corda.core.internal.notary.UniquenessProvider.Result.Success","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/-result/-success/index.html","searchKeys":["Success","data class Success(val signature: TransactionSignature) : UniquenessProvider.Result","net.corda.core.internal.notary.UniquenessProvider.Result.Success"]},{"name":"data class Success<out A>(val value: A) : Try<A> ","description":"net.corda.core.utilities.Try.Success","location":"docs/net.corda.core.utilities/-try/-success/index.html","searchKeys":["Success","data class Success<out A>(val value: A) : Try<A> ","net.corda.core.utilities.Try.Success"]},{"name":"data class TelemetryId(telemetryService: TelemetryServiceImpl)","description":"net.corda.core.internal.telemetry.TelemetryId","location":"docs/net.corda.core.internal.telemetry/-telemetry-id/index.html","searchKeys":["TelemetryId","data class TelemetryId(telemetryService: TelemetryServiceImpl)","net.corda.core.internal.telemetry.TelemetryId"]},{"name":"data class Tenor(val name: String)","description":"net.corda.finance.contracts.Tenor","location":"docs/net.corda.finance.contracts/-tenor/index.html","searchKeys":["Tenor","data class Tenor(val name: String)","net.corda.finance.contracts.Tenor"]},{"name":"data class Terms<P : Any>(val acceptableContracts: NonEmptySet<SecureHash>, val acceptableIssuedProducts: NonEmptySet<Issued<P>>, val dueBefore: Instant, val timeTolerance: Duration = 30.seconds)","description":"net.corda.finance.contracts.asset.Obligation.Terms","location":"docs/net.corda.finance.contracts.asset/-obligation/-terms/index.html","searchKeys":["Terms","data class Terms<P : Any>(val acceptableContracts: NonEmptySet<SecureHash>, val acceptableIssuedProducts: NonEmptySet<Issued<P>>, val dueBefore: Instant, val timeTolerance: Duration = 30.seconds)","net.corda.finance.contracts.asset.Obligation.Terms"]},{"name":"data class TestLedgerDSLInterpreter : LedgerDSLInterpreter<TestTransactionDSLInterpreter> ","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/index.html","searchKeys":["TestLedgerDSLInterpreter","data class TestLedgerDSLInterpreter : LedgerDSLInterpreter<TestTransactionDSLInterpreter> ","net.corda.testing.dsl.TestLedgerDSLInterpreter"]},{"name":"data class TestTransactionDSLInterpreter : TransactionDSLInterpreter, OutputStateLookup","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/index.html","searchKeys":["TestTransactionDSLInterpreter","data class TestTransactionDSLInterpreter : TransactionDSLInterpreter, OutputStateLookup","net.corda.testing.dsl.TestTransactionDSLInterpreter"]},{"name":"data class TimeCondition(val type: QueryCriteria.TimeInstantType, val predicate: ColumnPredicate<Instant>)","description":"net.corda.core.node.services.vault.QueryCriteria.TimeCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-condition/index.html","searchKeys":["TimeCondition","data class TimeCondition(val type: QueryCriteria.TimeInstantType, val predicate: ColumnPredicate<Instant>)","net.corda.core.node.services.vault.QueryCriteria.TimeCondition"]},{"name":"data class TimeWindowInvalid(val currentTime: Instant, val txTimeWindow: TimeWindow) : NotaryError","description":"net.corda.core.flows.NotaryError.TimeWindowInvalid","location":"docs/net.corda.core.flows/-notary-error/-time-window-invalid/index.html","searchKeys":["TimeWindowInvalid","data class TimeWindowInvalid(val currentTime: Instant, val txTimeWindow: TimeWindow) : NotaryError","net.corda.core.flows.NotaryError.TimeWindowInvalid"]},{"name":"data class Trace(val invocationId: Trace.InvocationId, val sessionId: Trace.SessionId)","description":"net.corda.core.context.Trace","location":"docs/net.corda.core.context/-trace/index.html","searchKeys":["Trace","data class Trace(val invocationId: Trace.InvocationId, val sessionId: Trace.SessionId)","net.corda.core.context.Trace"]},{"name":"data class TransactionInvalid(val cause: Throwable) : NotaryError","description":"net.corda.core.flows.NotaryError.TransactionInvalid","location":"docs/net.corda.core.flows/-notary-error/-transaction-invalid/index.html","searchKeys":["TransactionInvalid","data class TransactionInvalid(val cause: Throwable) : NotaryError","net.corda.core.flows.NotaryError.TransactionInvalid"]},{"name":"data class TransactionMetadata(val initiator: CordaX500Name, val distributionList: DistributionList)","description":"net.corda.core.flows.TransactionMetadata","location":"docs/net.corda.core.flows/-transaction-metadata/index.html","searchKeys":["TransactionMetadata","data class TransactionMetadata(val initiator: CordaX500Name, val distributionList: DistributionList)","net.corda.core.flows.TransactionMetadata"]},{"name":"data class TransactionState<out T : ContractState> constructor(val data: T, val contract: ContractClassName = requireNotNull(data.requiredContractClassName) {\n            //TODO: add link to docsite page, when there is one.\n            \"\"\"\n    Unable to infer Contract class name because state class ${data::class.java.name} is not annotated with\n    @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate ${data::class.java.name}\n    with @BelongsToContract, or supply an explicit contract parameter to TransactionState().\n    \"\"\".trimIndent().replace('\\n', ' ')\n        }, val notary: Party, val encumbrance: Int? = null, val constraint: AttachmentConstraint = AutomaticPlaceholderConstraint)","description":"net.corda.core.contracts.TransactionState","location":"docs/net.corda.core.contracts/-transaction-state/index.html","searchKeys":["TransactionState","data class TransactionState<out T : ContractState> constructor(val data: T, val contract: ContractClassName = requireNotNull(data.requiredContractClassName) {\n            //TODO: add link to docsite page, when there is one.\n            \"\"\"\n    Unable to infer Contract class name because state class ${data::class.java.name} is not annotated with\n    @BelongsToContract, and does not have an enclosing class which implements Contract. Either annotate ${data::class.java.name}\n    with @BelongsToContract, or supply an explicit contract parameter to TransactionState().\n    \"\"\".trimIndent().replace('\\n', ' ')\n        }, val notary: Party, val encumbrance: Int? = null, val constraint: AttachmentConstraint = AutomaticPlaceholderConstraint)","net.corda.core.contracts.TransactionState"]},{"name":"data class UniqueIdentifier constructor(val externalId: String? = null, val id: UUID = UUID.randomUUID()) : Comparable<UniqueIdentifier> ","description":"net.corda.core.contracts.UniqueIdentifier","location":"docs/net.corda.core.contracts/-unique-identifier/index.html","searchKeys":["UniqueIdentifier","data class UniqueIdentifier constructor(val externalId: String? = null, val id: UUID = UUID.randomUUID()) : Comparable<UniqueIdentifier> ","net.corda.core.contracts.UniqueIdentifier"]},{"name":"data class Update<U : ContractState>(val consumed: Set<StateAndRef<U>>, val produced: Set<StateAndRef<U>>, val flowId: UUID? = null, val type: Vault.UpdateType = UpdateType.GENERAL, val references: Set<StateAndRef<U>> = emptySet(), val consumingTxIds: Map<StateRef, SecureHash> = emptyMap())","description":"net.corda.core.node.services.Vault.Update","location":"docs/net.corda.core.node.services/-vault/-update/index.html","searchKeys":["Update","data class Update<U : ContractState>(val consumed: Set<StateAndRef<U>>, val produced: Set<StateAndRef<U>>, val flowId: UUID? = null, val type: Vault.UpdateType = UpdateType.GENERAL, val references: Set<StateAndRef<U>> = emptySet(), val consumingTxIds: Map<StateRef, SecureHash> = emptyMap())","net.corda.core.node.services.Vault.Update"]},{"name":"data class UpgradeTx(val stx: SignedTransaction)","description":"net.corda.core.flows.AbstractStateReplacementFlow.UpgradeTx","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-upgrade-tx/index.html","searchKeys":["UpgradeTx","data class UpgradeTx(val stx: SignedTransaction)","net.corda.core.flows.AbstractStateReplacementFlow.UpgradeTx"]},{"name":"data class UriTestCordapp(val uri: URI, val config: Map<String, Any> = emptyMap(), val signed: Boolean = false) : TestCordappInternal","description":"net.corda.testing.node.internal.UriTestCordapp","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/index.html","searchKeys":["UriTestCordapp","data class UriTestCordapp(val uri: URI, val config: Map<String, Any> = emptyMap(), val signed: Boolean = false) : TestCordappInternal","net.corda.testing.node.internal.UriTestCordapp"]},{"name":"data class User(val username: String, val password: String, val permissions: Set<String>)","description":"net.corda.testing.node.User","location":"docs/net.corda.testing.node/-user/index.html","searchKeys":["User","data class User(val username: String, val password: String, val permissions: Set<String>)","net.corda.testing.node.User"]},{"name":"data class VaultCustomQueryCriteria<L : StatePersistable>(val expression: CriteriaExpression<L, Boolean>, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL) : QueryCriteria.CommonQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/index.html","searchKeys":["VaultCustomQueryCriteria","data class VaultCustomQueryCriteria<L : StatePersistable>(val expression: CriteriaExpression<L, Boolean>, val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL) : QueryCriteria.CommonQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria"]},{"name":"data class VaultQueryCriteria(val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val stateRefs: List<StateRef>? = null, val notary: List<AbstractParty>? = null, val softLockingCondition: QueryCriteria.SoftLockingCondition? = null, val timeCondition: QueryCriteria.TimeCondition? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, val constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), val constraints: Set<Vault.ConstraintInfo> = emptySet(), val participants: List<AbstractParty>? = null, val externalIds: List<UUID> = emptyList(), val exactParticipants: List<AbstractParty>? = null) : QueryCriteria.CommonQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/index.html","searchKeys":["VaultQueryCriteria","data class VaultQueryCriteria(val status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, val contractStateTypes: Set<Class<out ContractState>>? = null, val stateRefs: List<StateRef>? = null, val notary: List<AbstractParty>? = null, val softLockingCondition: QueryCriteria.SoftLockingCondition? = null, val timeCondition: QueryCriteria.TimeCondition? = null, val relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, val constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), val constraints: Set<Vault.ConstraintInfo> = emptySet(), val participants: List<AbstractParty>? = null, val externalIds: List<UUID> = emptyList(), val exactParticipants: List<AbstractParty>? = null) : QueryCriteria.CommonQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria"]},{"name":"data class WaitForLedgerCommit(val hash: SecureHash) : FlowIORequest<SignedTransaction> ","description":"net.corda.core.internal.FlowIORequest.WaitForLedgerCommit","location":"docs/net.corda.core.internal/-flow-i-o-request/-wait-for-ledger-commit/index.html","searchKeys":["WaitForLedgerCommit","data class WaitForLedgerCommit(val hash: SecureHash) : FlowIORequest<SignedTransaction> ","net.corda.core.internal.FlowIORequest.WaitForLedgerCommit"]},{"name":"data class WaitTimeUpdate(val waitTime: Duration)","description":"net.corda.core.flows.WaitTimeUpdate","location":"docs/net.corda.core.flows/-wait-time-update/index.html","searchKeys":["WaitTimeUpdate","data class WaitTimeUpdate(val waitTime: Duration)","net.corda.core.flows.WaitTimeUpdate"]},{"name":"data class WebserverHandle(val listenAddress: NetworkHostAndPort, val process: Process)","description":"net.corda.testing.driver.WebserverHandle","location":"docs/net.corda.testing.driver/-webserver-handle/index.html","searchKeys":["WebserverHandle","data class WebserverHandle(val listenAddress: NetworkHostAndPort, val process: Process)","net.corda.testing.driver.WebserverHandle"]},{"name":"data class Workflow(val shortName: String, val vendor: String, val versionId: Int, val licence: String) : Cordapp.Info","description":"net.corda.core.cordapp.Cordapp.Info.Workflow","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/index.html","searchKeys":["Workflow","data class Workflow(val shortName: String, val vendor: String, val versionId: Int, val licence: String) : Cordapp.Info","net.corda.core.cordapp.Cordapp.Info.Workflow"]},{"name":"enum AccrualAdjustment : Enum<AccrualAdjustment> ","description":"net.corda.finance.contracts.AccrualAdjustment","location":"docs/net.corda.finance.contracts/-accrual-adjustment/index.html","searchKeys":["AccrualAdjustment","enum AccrualAdjustment : Enum<AccrualAdjustment> ","net.corda.finance.contracts.AccrualAdjustment"]},{"name":"enum AggregateFunctionType : Enum<AggregateFunctionType> ","description":"net.corda.core.node.services.vault.AggregateFunctionType","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/index.html","searchKeys":["AggregateFunctionType","enum AggregateFunctionType : Enum<AggregateFunctionType> ","net.corda.core.node.services.vault.AggregateFunctionType"]},{"name":"enum AttachmentSortAttribute : Enum<AttachmentSort.AttachmentSortAttribute> ","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/index.html","searchKeys":["AttachmentSortAttribute","enum AttachmentSortAttribute : Enum<AttachmentSort.AttachmentSortAttribute> ","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute"]},{"name":"enum BinaryComparisonOperator : Enum<BinaryComparisonOperator> , Operator","description":"net.corda.core.node.services.vault.BinaryComparisonOperator","location":"docs/net.corda.core.node.services.vault/-binary-comparison-operator/index.html","searchKeys":["BinaryComparisonOperator","enum BinaryComparisonOperator : Enum<BinaryComparisonOperator> , Operator","net.corda.core.node.services.vault.BinaryComparisonOperator"]},{"name":"enum BinaryLogicalOperator : Enum<BinaryLogicalOperator> , Operator","description":"net.corda.core.node.services.vault.BinaryLogicalOperator","location":"docs/net.corda.core.node.services.vault/-binary-logical-operator/index.html","searchKeys":["BinaryLogicalOperator","enum BinaryLogicalOperator : Enum<BinaryLogicalOperator> , Operator","net.corda.core.node.services.vault.BinaryLogicalOperator"]},{"name":"enum CertRole : Enum<CertRole> ","description":"net.corda.core.internal.CertRole","location":"docs/net.corda.core.internal/-cert-role/index.html","searchKeys":["CertRole","enum CertRole : Enum<CertRole> ","net.corda.core.internal.CertRole"]},{"name":"enum CollectionOperator : Enum<CollectionOperator> , Operator","description":"net.corda.core.node.services.vault.CollectionOperator","location":"docs/net.corda.core.node.services.vault/-collection-operator/index.html","searchKeys":["CollectionOperator","enum CollectionOperator : Enum<CollectionOperator> , Operator","net.corda.core.node.services.vault.CollectionOperator"]},{"name":"enum CommonStateAttribute : Enum<Sort.CommonStateAttribute> , Sort.Attribute","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/index.html","searchKeys":["CommonStateAttribute","enum CommonStateAttribute : Enum<Sort.CommonStateAttribute> , Sort.Attribute","net.corda.core.node.services.vault.Sort.CommonStateAttribute"]},{"name":"enum Component : Enum<ContractUpgradeWireTransaction.Component> ","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/index.html","searchKeys":["Component","enum Component : Enum<ContractUpgradeWireTransaction.Component> ","net.corda.core.transactions.ContractUpgradeWireTransaction.Component"]},{"name":"enum Component : Enum<NotaryChangeWireTransaction.Component> ","description":"net.corda.core.transactions.NotaryChangeWireTransaction.Component","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-component/index.html","searchKeys":["Component","enum Component : Enum<NotaryChangeWireTransaction.Component> ","net.corda.core.transactions.NotaryChangeWireTransaction.Component"]},{"name":"enum ComponentGroupEnum : Enum<ComponentGroupEnum> ","description":"net.corda.core.contracts.ComponentGroupEnum","location":"docs/net.corda.core.contracts/-component-group-enum/index.html","searchKeys":["ComponentGroupEnum","enum ComponentGroupEnum : Enum<ComponentGroupEnum> ","net.corda.core.contracts.ComponentGroupEnum"]},{"name":"enum ConsumedStateType : Enum<StateConsumptionDetails.ConsumedStateType> ","description":"net.corda.core.flows.StateConsumptionDetails.ConsumedStateType","location":"docs/net.corda.core.flows/-state-consumption-details/-consumed-state-type/index.html","searchKeys":["ConsumedStateType","enum ConsumedStateType : Enum<StateConsumptionDetails.ConsumedStateType> ","net.corda.core.flows.StateConsumptionDetails.ConsumedStateType"]},{"name":"enum ContextPropertyKeys : Enum<ContextPropertyKeys> ","description":"net.corda.core.serialization.ContextPropertyKeys","location":"docs/net.corda.core.serialization/-context-property-keys/index.html","searchKeys":["ContextPropertyKeys","enum ContextPropertyKeys : Enum<ContextPropertyKeys> ","net.corda.core.serialization.ContextPropertyKeys"]},{"name":"enum CurrentState : Enum<ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState> ","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/index.html","searchKeys":["CurrentState","enum CurrentState : Enum<ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState> ","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState"]},{"name":"enum DataType : Enum<FetchDataFlow.DataType> ","description":"net.corda.core.internal.FetchDataFlow.DataType","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/index.html","searchKeys":["DataType","enum DataType : Enum<FetchDataFlow.DataType> ","net.corda.core.internal.FetchDataFlow.DataType"]},{"name":"enum DateRollConvention : Enum<DateRollConvention> ","description":"net.corda.finance.contracts.DateRollConvention","location":"docs/net.corda.finance.contracts/-date-roll-convention/index.html","searchKeys":["DateRollConvention","enum DateRollConvention : Enum<DateRollConvention> ","net.corda.finance.contracts.DateRollConvention"]},{"name":"enum DateRollDirection : Enum<DateRollDirection> ","description":"net.corda.finance.contracts.DateRollDirection","location":"docs/net.corda.finance.contracts/-date-roll-direction/index.html","searchKeys":["DateRollDirection","enum DateRollDirection : Enum<DateRollDirection> ","net.corda.finance.contracts.DateRollDirection"]},{"name":"enum DayCountBasisDay : Enum<DayCountBasisDay> ","description":"net.corda.finance.contracts.DayCountBasisDay","location":"docs/net.corda.finance.contracts/-day-count-basis-day/index.html","searchKeys":["DayCountBasisDay","enum DayCountBasisDay : Enum<DayCountBasisDay> ","net.corda.finance.contracts.DayCountBasisDay"]},{"name":"enum DayCountBasisYear : Enum<DayCountBasisYear> ","description":"net.corda.finance.contracts.DayCountBasisYear","location":"docs/net.corda.finance.contracts/-day-count-basis-year/index.html","searchKeys":["DayCountBasisYear","enum DayCountBasisYear : Enum<DayCountBasisYear> ","net.corda.finance.contracts.DayCountBasisYear"]},{"name":"enum Direction : Enum<Sort.Direction> ","description":"net.corda.core.node.services.vault.Sort.Direction","location":"docs/net.corda.core.node.services.vault/-sort/-direction/index.html","searchKeys":["Direction","enum Direction : Enum<Sort.Direction> ","net.corda.core.node.services.vault.Sort.Direction"]},{"name":"enum Direction : Enum<TransactionVerificationException.Direction> ","description":"net.corda.core.contracts.TransactionVerificationException.Direction","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-direction/index.html","searchKeys":["Direction","enum Direction : Enum<TransactionVerificationException.Direction> ","net.corda.core.contracts.TransactionVerificationException.Direction"]},{"name":"enum DistributionRecordType : Enum<DistributionRecordType> ","description":"net.corda.core.flows.DistributionRecordType","location":"docs/net.corda.core.flows/-distribution-record-type/index.html","searchKeys":["DistributionRecordType","enum DistributionRecordType : Enum<DistributionRecordType> ","net.corda.core.flows.DistributionRecordType"]},{"name":"enum EqualityComparisonOperator : Enum<EqualityComparisonOperator> , Operator","description":"net.corda.core.node.services.vault.EqualityComparisonOperator","location":"docs/net.corda.core.node.services.vault/-equality-comparison-operator/index.html","searchKeys":["EqualityComparisonOperator","enum EqualityComparisonOperator : Enum<EqualityComparisonOperator> , Operator","net.corda.core.node.services.vault.EqualityComparisonOperator"]},{"name":"enum Frequency : Enum<Frequency> ","description":"net.corda.finance.contracts.Frequency","location":"docs/net.corda.finance.contracts/-frequency/index.html","searchKeys":["Frequency","enum Frequency : Enum<Frequency> ","net.corda.finance.contracts.Frequency"]},{"name":"enum FungibleStateAttribute : Enum<Sort.FungibleStateAttribute> , Sort.Attribute","description":"net.corda.core.node.services.vault.Sort.FungibleStateAttribute","location":"docs/net.corda.core.node.services.vault/-sort/-fungible-state-attribute/index.html","searchKeys":["FungibleStateAttribute","enum FungibleStateAttribute : Enum<Sort.FungibleStateAttribute> , Sort.Attribute","net.corda.core.node.services.vault.Sort.FungibleStateAttribute"]},{"name":"enum Lifecycle : Enum<Obligation.Lifecycle> ","description":"net.corda.finance.contracts.asset.Obligation.Lifecycle","location":"docs/net.corda.finance.contracts.asset/-obligation/-lifecycle/index.html","searchKeys":["Lifecycle","enum Lifecycle : Enum<Obligation.Lifecycle> ","net.corda.finance.contracts.asset.Obligation.Lifecycle"]},{"name":"enum LikenessOperator : Enum<LikenessOperator> , Operator","description":"net.corda.core.node.services.vault.LikenessOperator","location":"docs/net.corda.core.node.services.vault/-likeness-operator/index.html","searchKeys":["LikenessOperator","enum LikenessOperator : Enum<LikenessOperator> , Operator","net.corda.core.node.services.vault.LikenessOperator"]},{"name":"enum LinearStateAttribute : Enum<Sort.LinearStateAttribute> , Sort.Attribute","description":"net.corda.core.node.services.vault.Sort.LinearStateAttribute","location":"docs/net.corda.core.node.services.vault/-sort/-linear-state-attribute/index.html","searchKeys":["LinearStateAttribute","enum LinearStateAttribute : Enum<Sort.LinearStateAttribute> , Sort.Attribute","net.corda.core.node.services.vault.Sort.LinearStateAttribute"]},{"name":"enum NetType : Enum<NetType> ","description":"net.corda.finance.contracts.NetType","location":"docs/net.corda.finance.contracts/-net-type/index.html","searchKeys":["NetType","enum NetType : Enum<NetType> ","net.corda.finance.contracts.NetType"]},{"name":"enum NullOperator : Enum<NullOperator> , Operator","description":"net.corda.core.node.services.vault.NullOperator","location":"docs/net.corda.core.node.services.vault/-null-operator/index.html","searchKeys":["NullOperator","enum NullOperator : Enum<NullOperator> , Operator","net.corda.core.node.services.vault.NullOperator"]},{"name":"enum PaymentRule : Enum<PaymentRule> ","description":"net.corda.finance.contracts.PaymentRule","location":"docs/net.corda.finance.contracts/-payment-rule/index.html","searchKeys":["PaymentRule","enum PaymentRule : Enum<PaymentRule> ","net.corda.finance.contracts.PaymentRule"]},{"name":"enum RelevancyStatus : Enum<Vault.RelevancyStatus> ","description":"net.corda.core.node.services.Vault.RelevancyStatus","location":"docs/net.corda.core.node.services/-vault/-relevancy-status/index.html","searchKeys":["RelevancyStatus","enum RelevancyStatus : Enum<Vault.RelevancyStatus> ","net.corda.core.node.services.Vault.RelevancyStatus"]},{"name":"enum ServiceLifecycleEvent : Enum<ServiceLifecycleEvent> ","description":"net.corda.core.node.services.ServiceLifecycleEvent","location":"docs/net.corda.core.node.services/-service-lifecycle-event/index.html","searchKeys":["ServiceLifecycleEvent","enum ServiceLifecycleEvent : Enum<ServiceLifecycleEvent> ","net.corda.core.node.services.ServiceLifecycleEvent"]},{"name":"enum SoftLockingType : Enum<QueryCriteria.SoftLockingType> ","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingType","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-type/index.html","searchKeys":["SoftLockingType","enum SoftLockingType : Enum<QueryCriteria.SoftLockingType> ","net.corda.core.node.services.vault.QueryCriteria.SoftLockingType"]},{"name":"enum StateStatus : Enum<Vault.StateStatus> ","description":"net.corda.core.node.services.Vault.StateStatus","location":"docs/net.corda.core.node.services/-vault/-state-status/index.html","searchKeys":["StateStatus","enum StateStatus : Enum<Vault.StateStatus> ","net.corda.core.node.services.Vault.StateStatus"]},{"name":"enum StatesToRecord : Enum<StatesToRecord> ","description":"net.corda.core.node.StatesToRecord","location":"docs/net.corda.core.node/-states-to-record/index.html","searchKeys":["StatesToRecord","enum StatesToRecord : Enum<StatesToRecord> ","net.corda.core.node.StatesToRecord"]},{"name":"enum TelemetryStatusCode : Enum<TelemetryStatusCode> ","description":"net.corda.core.internal.telemetry.TelemetryStatusCode","location":"docs/net.corda.core.internal.telemetry/-telemetry-status-code/index.html","searchKeys":["TelemetryStatusCode","enum TelemetryStatusCode : Enum<TelemetryStatusCode> ","net.corda.core.internal.telemetry.TelemetryStatusCode"]},{"name":"enum TimeInstantType : Enum<QueryCriteria.TimeInstantType> ","description":"net.corda.core.node.services.vault.QueryCriteria.TimeInstantType","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-instant-type/index.html","searchKeys":["TimeInstantType","enum TimeInstantType : Enum<QueryCriteria.TimeInstantType> ","net.corda.core.node.services.vault.QueryCriteria.TimeInstantType"]},{"name":"enum TimeUnit : Enum<Tenor.TimeUnit> ","description":"net.corda.finance.contracts.Tenor.TimeUnit","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/index.html","searchKeys":["TimeUnit","enum TimeUnit : Enum<Tenor.TimeUnit> ","net.corda.finance.contracts.Tenor.TimeUnit"]},{"name":"enum TransactionStatus : Enum<TransactionStatus> ","description":"net.corda.core.node.services.TransactionStatus","location":"docs/net.corda.core.node.services/-transaction-status/index.html","searchKeys":["TransactionStatus","enum TransactionStatus : Enum<TransactionStatus> ","net.corda.core.node.services.TransactionStatus"]},{"name":"enum Type : Enum<Vault.ConstraintInfo.Type> ","description":"net.corda.core.node.services.Vault.ConstraintInfo.Type","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-type/index.html","searchKeys":["Type","enum Type : Enum<Vault.ConstraintInfo.Type> ","net.corda.core.node.services.Vault.ConstraintInfo.Type"]},{"name":"enum UpdateType : Enum<Vault.UpdateType> ","description":"net.corda.core.node.services.Vault.UpdateType","location":"docs/net.corda.core.node.services/-vault/-update-type/index.html","searchKeys":["UpdateType","enum UpdateType : Enum<Vault.UpdateType> ","net.corda.core.node.services.Vault.UpdateType"]},{"name":"enum UseCase : Enum<SerializationContext.UseCase> ","description":"net.corda.core.serialization.SerializationContext.UseCase","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/index.html","searchKeys":["UseCase","enum UseCase : Enum<SerializationContext.UseCase> ","net.corda.core.serialization.SerializationContext.UseCase"]},{"name":"enum Validation : Enum<LegalNameValidator.Validation> ","description":"net.corda.core.internal.LegalNameValidator.Validation","location":"docs/net.corda.core.internal/-legal-name-validator/-validation/index.html","searchKeys":["Validation","enum Validation : Enum<LegalNameValidator.Validation> ","net.corda.core.internal.LegalNameValidator.Validation"]},{"name":"enum VaultStateAttribute : Enum<Sort.VaultStateAttribute> , Sort.Attribute","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/index.html","searchKeys":["VaultStateAttribute","enum VaultStateAttribute : Enum<Sort.VaultStateAttribute> , Sort.Attribute","net.corda.core.node.services.vault.Sort.VaultStateAttribute"]},{"name":"enum VerifierType : Enum<VerifierType> ","description":"net.corda.testing.driver.VerifierType","location":"docs/net.corda.testing.driver/-verifier-type/index.html","searchKeys":["VerifierType","enum VerifierType : Enum<VerifierType> ","net.corda.testing.driver.VerifierType"]},{"name":"fun <A> CordaFuture<out A>.toObservable(): <Error class: unknown class><A>","description":"net.corda.core.toObservable","location":"docs/net.corda.core/to-observable.html","searchKeys":["toObservable","fun <A> CordaFuture<out A>.toObservable(): <Error class: unknown class><A>","net.corda.core.toObservable"]},{"name":"fun <A> driver(defaultParameters: DriverParameters = DriverParameters(), dsl: DriverDSL.() -> A): A","description":"net.corda.testing.driver.driver","location":"docs/net.corda.testing.driver/driver.html","searchKeys":["driver","fun <A> driver(defaultParameters: DriverParameters = DriverParameters(), dsl: DriverDSL.() -> A): A","net.corda.testing.driver.driver"]},{"name":"fun <A> internalDriver(isDebug: Boolean = DriverParameters().isDebug, driverDirectory: Path = DriverParameters().driverDirectory, portAllocation: PortAllocation = DriverParameters().portAllocation, debugPortAllocation: PortAllocation = DriverParameters().debugPortAllocation, systemProperties: Map<String, String> = DriverParameters().systemProperties, useTestClock: Boolean = DriverParameters().useTestClock, startNodesInProcess: Boolean = DriverParameters().startNodesInProcess, extraCordappPackagesToScan: List<String> = @Suppress(\"DEPRECATION\") DriverParameters().extraCordappPackagesToScan, waitForAllNodesToFinish: Boolean = DriverParameters().waitForAllNodesToFinish, notarySpecs: List<NotarySpec> = DriverParameters().notarySpecs, jmxPolicy: JmxPolicy = DriverParameters().jmxPolicy, networkParameters: NetworkParameters = DriverParameters().networkParameters, compatibilityZone: CompatibilityZoneParams? = null, notaryCustomOverrides: Map<String, Any?> = DriverParameters().notaryCustomOverrides, inMemoryDB: Boolean = DriverParameters().inMemoryDB, cordappsForAllNodes: Collection<TestCordappInternal>? = null, environmentVariables: Map<String, String> = emptyMap(), allowHibernateToManageAppSchema: Boolean = true, premigrateH2Database: Boolean = true, notaryHandleTimeout: Duration = Duration.ofMinutes(1), dsl: DriverDSLImpl.() -> A): A","description":"net.corda.testing.node.internal.internalDriver","location":"docs/net.corda.testing.node.internal/internal-driver.html","searchKeys":["internalDriver","fun <A> internalDriver(isDebug: Boolean = DriverParameters().isDebug, driverDirectory: Path = DriverParameters().driverDirectory, portAllocation: PortAllocation = DriverParameters().portAllocation, debugPortAllocation: PortAllocation = DriverParameters().debugPortAllocation, systemProperties: Map<String, String> = DriverParameters().systemProperties, useTestClock: Boolean = DriverParameters().useTestClock, startNodesInProcess: Boolean = DriverParameters().startNodesInProcess, extraCordappPackagesToScan: List<String> = @Suppress(\"DEPRECATION\") DriverParameters().extraCordappPackagesToScan, waitForAllNodesToFinish: Boolean = DriverParameters().waitForAllNodesToFinish, notarySpecs: List<NotarySpec> = DriverParameters().notarySpecs, jmxPolicy: JmxPolicy = DriverParameters().jmxPolicy, networkParameters: NetworkParameters = DriverParameters().networkParameters, compatibilityZone: CompatibilityZoneParams? = null, notaryCustomOverrides: Map<String, Any?> = DriverParameters().notaryCustomOverrides, inMemoryDB: Boolean = DriverParameters().inMemoryDB, cordappsForAllNodes: Collection<TestCordappInternal>? = null, environmentVariables: Map<String, String> = emptyMap(), allowHibernateToManageAppSchema: Boolean = true, premigrateH2Database: Boolean = true, notaryHandleTimeout: Duration = Duration.ofMinutes(1), dsl: DriverDSLImpl.() -> A): A","net.corda.testing.node.internal.internalDriver"]},{"name":"fun <A> poll(executorService: ScheduledExecutorService, pollName: String, pollInterval: Duration = 500.millis, warnCount: Int = 120, check: () -> A?): CordaFuture<A>","description":"net.corda.testing.node.internal.poll","location":"docs/net.corda.testing.node.internal/poll.html","searchKeys":["poll","fun <A> poll(executorService: ScheduledExecutorService, pollName: String, pollInterval: Duration = 500.millis, warnCount: Int = 120, check: () -> A?): CordaFuture<A>","net.corda.testing.node.internal.poll"]},{"name":"fun <A> requireState(errorMessage: (S) -> String, predicate: (S) -> Boolean, block: () -> A): A","description":"net.corda.core.internal.LifeCycle.requireState","location":"docs/net.corda.core.internal/-life-cycle/require-state.html","searchKeys":["requireState","fun <A> requireState(errorMessage: (S) -> String, predicate: (S) -> Boolean, block: () -> A): A","net.corda.core.internal.LifeCycle.requireState"]},{"name":"fun <A> requireState(requiredState: S, block: () -> A): A","description":"net.corda.core.internal.LifeCycle.requireState","location":"docs/net.corda.core.internal/-life-cycle/require-state.html","searchKeys":["requireState","fun <A> requireState(requiredState: S, block: () -> A): A","net.corda.core.internal.LifeCycle.requireState"]},{"name":"fun <A> requireState(requiredState: S, throwable: Throwable, block: () -> A): A","description":"net.corda.core.internal.LifeCycle.requireState","location":"docs/net.corda.core.internal/-life-cycle/require-state.html","searchKeys":["requireState","fun <A> requireState(requiredState: S, throwable: Throwable, block: () -> A): A","net.corda.core.internal.LifeCycle.requireState"]},{"name":"fun <A> rpcDriver(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"rpc-driver\" /  getTimestampAsDirectoryName(), portAllocation: PortAllocation = globalPortAllocation, debugPortAllocation: PortAllocation = globalDebugPortAllocation, systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForNodesToFinish: Boolean = false, extraCordappPackagesToScan: List<String> = emptyList(), notarySpecs: List<NotarySpec> = emptyList(), externalTrace: Trace? = null, jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = true, cordappsForAllNodes: Collection<TestCordappInternal>? = null, environmentVariables: Map<String, String> = emptyMap(), dsl: RPCDriverDSL.() -> A): A","description":"net.corda.testing.node.internal.rpcDriver","location":"docs/net.corda.testing.node.internal/rpc-driver.html","searchKeys":["rpcDriver","fun <A> rpcDriver(isDebug: Boolean = false, driverDirectory: Path = Paths.get(\"build\") / \"rpc-driver\" /  getTimestampAsDirectoryName(), portAllocation: PortAllocation = globalPortAllocation, debugPortAllocation: PortAllocation = globalDebugPortAllocation, systemProperties: Map<String, String> = emptyMap(), useTestClock: Boolean = false, startNodesInProcess: Boolean = false, waitForNodesToFinish: Boolean = false, extraCordappPackagesToScan: List<String> = emptyList(), notarySpecs: List<NotarySpec> = emptyList(), externalTrace: Trace? = null, jmxPolicy: JmxPolicy = JmxPolicy(), networkParameters: NetworkParameters = testNetworkParameters(), notaryCustomOverrides: Map<String, Any?> = emptyMap(), inMemoryDB: Boolean = true, cordappsForAllNodes: Collection<TestCordappInternal>? = null, environmentVariables: Map<String, String> = emptyMap(), dsl: RPCDriverDSL.() -> A): A","net.corda.testing.node.internal.rpcDriver"]},{"name":"fun <A> withSignature(signatureScheme: SignatureScheme, func: (signature: Signature) -> A): A","description":"net.corda.core.crypto.internal.Instances.withSignature","location":"docs/net.corda.core.crypto.internal/-instances/with-signature.html","searchKeys":["withSignature","fun <A> withSignature(signatureScheme: SignatureScheme, func: (signature: Signature) -> A): A","net.corda.core.crypto.internal.Instances.withSignature"]},{"name":"fun <C : CommandData> Collection<CommandWithParties<CommandData>>.requireSingleCommand(klass: Class<C>): Nothing","description":"net.corda.core.contracts.requireSingleCommand","location":"docs/net.corda.core.contracts/require-single-command.html","searchKeys":["requireSingleCommand","fun <C : CommandData> Collection<CommandWithParties<CommandData>>.requireSingleCommand(klass: Class<C>): Nothing","net.corda.core.contracts.requireSingleCommand"]},{"name":"fun <C : CommandData> Collection<CommandWithParties<CommandData>>.select(klass: Class<C>, signer: PublicKey? = null, party: AbstractParty? = null): <Error class: unknown class>","description":"net.corda.core.contracts.select","location":"docs/net.corda.core.contracts/select.html","searchKeys":["select","fun <C : CommandData> Collection<CommandWithParties<CommandData>>.select(klass: Class<C>, signer: PublicKey? = null, party: AbstractParty? = null): <Error class: unknown class>","net.corda.core.contracts.select"]},{"name":"fun <C : CommandData> Collection<CommandWithParties<CommandData>>.select(klass: Class<C>, signers: Collection<PublicKey>?, parties: Collection<Party>?): <Error class: unknown class>","description":"net.corda.core.contracts.select","location":"docs/net.corda.core.contracts/select.html","searchKeys":["select","fun <C : CommandData> Collection<CommandWithParties<CommandData>>.select(klass: Class<C>, signers: Collection<PublicKey>?, parties: Collection<Party>?): <Error class: unknown class>","net.corda.core.contracts.select"]},{"name":"fun <DI : DriverDSL, D : InternalDriverDSL, A> genericDriver(driverDsl: D, coerce: (D) -> DI, dsl: DI.() -> A): A","description":"net.corda.testing.node.internal.genericDriver","location":"docs/net.corda.testing.node.internal/generic-driver.html","searchKeys":["genericDriver","fun <DI : DriverDSL, D : InternalDriverDSL, A> genericDriver(driverDsl: D, coerce: (D) -> DI, dsl: DI.() -> A): A","net.corda.testing.node.internal.genericDriver"]},{"name":"fun <E> MutableSet<E>.toSynchronised(): MutableSet<E>","description":"net.corda.core.internal.toSynchronised","location":"docs/net.corda.core.internal/to-synchronised.html","searchKeys":["toSynchronised","fun <E> MutableSet<E>.toSynchronised(): MutableSet<E>","net.corda.core.internal.toSynchronised"]},{"name":"fun <ELEMENT> <Error class: unknown class><ELEMENT>.mapErrors(transform: (Throwable) -> Throwable): <Error class: unknown class><ELEMENT>","description":"net.corda.core.mapErrors","location":"docs/net.corda.core/map-errors.html","searchKeys":["mapErrors","fun <ELEMENT> <Error class: unknown class><ELEMENT>.mapErrors(transform: (Throwable) -> Throwable): <Error class: unknown class><ELEMENT>","net.corda.core.mapErrors"]},{"name":"fun <ELEMENT> CordaFuture<out ELEMENT>.mapError(transform: (Throwable) -> Throwable): CordaFuture<ELEMENT>","description":"net.corda.core.internal.concurrent.mapError","location":"docs/net.corda.core.internal.concurrent/map-error.html","searchKeys":["mapError","fun <ELEMENT> CordaFuture<out ELEMENT>.mapError(transform: (Throwable) -> Throwable): CordaFuture<ELEMENT>","net.corda.core.internal.concurrent.mapError"]},{"name":"fun <Error class: unknown class>.fromUserList(id: AuthServiceId, users: List<<Error class: unknown class>>): <Error class: unknown class>","description":"net.corda.testing.internal.fromUserList","location":"docs/net.corda.testing.internal/from-user-list.html","searchKeys":["fromUserList","fun <Error class: unknown class>.fromUserList(id: AuthServiceId, users: List<<Error class: unknown class>>): <Error class: unknown class>","net.corda.testing.internal.fromUserList"]},{"name":"fun <Error class: unknown class>.isShutdownCmd(): <Error class: unknown class>","description":"net.corda.client.rpc.internal.RPCUtils.isShutdownCmd","location":"docs/net.corda.client.rpc.internal/-r-p-c-utils/is-shutdown-cmd.html","searchKeys":["isShutdownCmd","fun <Error class: unknown class>.isShutdownCmd(): <Error class: unknown class>","net.corda.client.rpc.internal.RPCUtils.isShutdownCmd"]},{"name":"fun <Error class: unknown class>.newContext(): InvocationContext","description":"net.corda.testing.node.internal.newContext","location":"docs/net.corda.testing.node.internal/new-context.html","searchKeys":["newContext","fun <Error class: unknown class>.newContext(): InvocationContext","net.corda.testing.node.internal.newContext"]},{"name":"fun <Error class: unknown class>.pooledScan(): <Error class: unknown class>","description":"net.corda.core.internal.pooledScan","location":"docs/net.corda.core.internal/pooled-scan.html","searchKeys":["pooledScan","fun <Error class: unknown class>.pooledScan(): <Error class: unknown class>","net.corda.core.internal.pooledScan"]},{"name":"fun <Error class: unknown class>.useSslRpcOverrides(): Map<String, String>","description":"net.corda.testing.internal.useSslRpcOverrides","location":"docs/net.corda.testing.internal/use-ssl-rpc-overrides.html","searchKeys":["useSslRpcOverrides","fun <Error class: unknown class>.useSslRpcOverrides(): Map<String, String>","net.corda.testing.internal.useSslRpcOverrides"]},{"name":"fun <Error class: unknown class>.warnOnce(warning: String)","description":"net.corda.core.internal.warnOnce","location":"docs/net.corda.core.internal/warn-once.html","searchKeys":["warnOnce","fun <Error class: unknown class>.warnOnce(warning: String)","net.corda.core.internal.warnOnce"]},{"name":"fun <F : FlowLogic<*>> findStateMachines(flowClass: Class<F>): List<<Error class: unknown class><F, CordaFuture<*>>>","description":"net.corda.testing.node.StartedMockNode.findStateMachines","location":"docs/net.corda.testing.node/-started-mock-node/find-state-machines.html","searchKeys":["findStateMachines","fun <F : FlowLogic<*>> findStateMachines(flowClass: Class<F>): List<<Error class: unknown class><F, CordaFuture<*>>>","net.corda.testing.node.StartedMockNode.findStateMachines"]},{"name":"fun <F : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<F>): <Error class: unknown class><F>","description":"net.corda.testing.node.StartedMockNode.registerInitiatedFlow","location":"docs/net.corda.testing.node/-started-mock-node/register-initiated-flow.html","searchKeys":["registerInitiatedFlow","fun <F : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<F>): <Error class: unknown class><F>","net.corda.testing.node.StartedMockNode.registerInitiatedFlow"]},{"name":"fun <F : FlowLogic<*>> registerInitiatedFlow(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<F>): <Error class: unknown class><F>","description":"net.corda.testing.node.StartedMockNode.registerInitiatedFlow","location":"docs/net.corda.testing.node/-started-mock-node/register-initiated-flow.html","searchKeys":["registerInitiatedFlow","fun <F : FlowLogic<*>> registerInitiatedFlow(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<F>): <Error class: unknown class><F>","net.corda.testing.node.StartedMockNode.registerInitiatedFlow"]},{"name":"fun <I : RPCOps> startInVmRpcClient(rpcOpsClass: Class<I>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): CordaFuture<I>","description":"net.corda.testing.node.internal.RPCDriverDSL.startInVmRpcClient","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-in-vm-rpc-client.html","searchKeys":["startInVmRpcClient","fun <I : RPCOps> startInVmRpcClient(rpcOpsClass: Class<I>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): CordaFuture<I>","net.corda.testing.node.internal.RPCDriverDSL.startInVmRpcClient"]},{"name":"fun <I : RPCOps> startInVmRpcServer(rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 10L * MAX_MESSAGE_SIZE, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, ops: I, queueDrainTimeout: Duration = 5.seconds): CordaFuture<RpcServerHandle>","description":"net.corda.testing.node.internal.RPCDriverDSL.startInVmRpcServer","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-in-vm-rpc-server.html","searchKeys":["startInVmRpcServer","fun <I : RPCOps> startInVmRpcServer(rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 10L * MAX_MESSAGE_SIZE, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, ops: I, queueDrainTimeout: Duration = 5.seconds): CordaFuture<RpcServerHandle>","net.corda.testing.node.internal.RPCDriverDSL.startInVmRpcServer"]},{"name":"fun <I : RPCOps> startRandomRpcClient(rpcOpsClass: Class<I>, rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password): CordaFuture<Process>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRandomRpcClient","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-random-rpc-client.html","searchKeys":["startRandomRpcClient","fun <I : RPCOps> startRandomRpcClient(rpcOpsClass: Class<I>, rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password): CordaFuture<Process>","net.corda.testing.node.internal.RPCDriverDSL.startRandomRpcClient"]},{"name":"fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, haAddressPool: List<NetworkHostAndPort>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): CordaFuture<I>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcClient","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-client.html","searchKeys":["startRpcClient","fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, haAddressPool: List<NetworkHostAndPort>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): CordaFuture<I>","net.corda.testing.node.internal.RPCDriverDSL.startRpcClient"]},{"name":"fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, haAddressPool: List<NetworkHostAndPort>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, listeners: Iterable<RPCConnectionListener<I>> = emptyList()): CordaFuture<<Error class: unknown class><RPCConnection<I>, RPCClient<I>>>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcClient","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-client.html","searchKeys":["startRpcClient","fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, haAddressPool: List<NetworkHostAndPort>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, listeners: Iterable<RPCConnectionListener<I>> = emptyList()): CordaFuture<<Error class: unknown class><RPCConnection<I>, RPCClient<I>>>","net.corda.testing.node.internal.RPCDriverDSL.startRpcClient"]},{"name":"fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): CordaFuture<I>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcClient","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-client.html","searchKeys":["startRpcClient","fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): CordaFuture<I>","net.corda.testing.node.internal.RPCDriverDSL.startRpcClient"]},{"name":"fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, listeners: Iterable<RPCConnectionListener<I>> = emptyList()): CordaFuture<<Error class: unknown class><RPCConnection<I>, RPCClient<I>>>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcClient","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-client.html","searchKeys":["startRpcClient","fun <I : RPCOps> startRpcClient(rpcOpsClass: Class<I>, rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT, listeners: Iterable<RPCConnectionListener<I>> = emptyList()): CordaFuture<<Error class: unknown class><RPCConnection<I>, RPCClient<I>>>","net.corda.testing.node.internal.RPCDriverDSL.startRpcClient"]},{"name":"fun <I : RPCOps> startRpcServer(serverName: String = \"driver-rpc-server-\", rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 5L * MAX_MESSAGE_SIZE, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, customPort: NetworkHostAndPort? = null, listOps: List<I>): CordaFuture<RpcServerHandle>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcServer","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-server.html","searchKeys":["startRpcServer","fun <I : RPCOps> startRpcServer(serverName: String = \"driver-rpc-server-\", rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 5L * MAX_MESSAGE_SIZE, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, customPort: NetworkHostAndPort? = null, listOps: List<I>): CordaFuture<RpcServerHandle>","net.corda.testing.node.internal.RPCDriverDSL.startRpcServer"]},{"name":"fun <I : RPCOps> startRpcServer(serverName: String = \"driver-rpc-server-\", rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 5L * MAX_MESSAGE_SIZE, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, customPort: NetworkHostAndPort? = null, ops: I): CordaFuture<RpcServerHandle>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcServer","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-server.html","searchKeys":["startRpcServer","fun <I : RPCOps> startRpcServer(serverName: String = \"driver-rpc-server-\", rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 5L * MAX_MESSAGE_SIZE, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, customPort: NetworkHostAndPort? = null, ops: I): CordaFuture<RpcServerHandle>","net.corda.testing.node.internal.RPCDriverDSL.startRpcServer"]},{"name":"fun <I : RPCOps> startRpcServerWithBrokerRunning(rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, ops: I, brokerHandle: RpcBrokerHandle, queueDrainTimeout: Duration = 5.seconds): RpcServerHandle","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcServerWithBrokerRunning","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-server-with-broker-running.html","searchKeys":["startRpcServerWithBrokerRunning","fun <I : RPCOps> startRpcServerWithBrokerRunning(rpcUser: User = rpcTestUser, nodeLegalName: CordaX500Name = fakeNodeLegalName, configuration: <Error class: unknown class> = RPCServerConfiguration.DEFAULT, ops: I, brokerHandle: RpcBrokerHandle, queueDrainTimeout: Duration = 5.seconds): RpcServerHandle","net.corda.testing.node.internal.RPCDriverDSL.startRpcServerWithBrokerRunning"]},{"name":"fun <K, V> Iterable<<Error class: unknown class><K, V>>.toMultiMap(): Map<K, List<V>>","description":"net.corda.core.internal.toMultiMap","location":"docs/net.corda.core.internal/to-multi-map.html","searchKeys":["toMultiMap","fun <K, V> Iterable<<Error class: unknown class><K, V>>.toMultiMap(): Map<K, List<V>>","net.corda.core.internal.toMultiMap"]},{"name":"fun <K, V> MutableMap<K, V>.toSynchronised(): MutableMap<K, V>","description":"net.corda.core.internal.toSynchronised","location":"docs/net.corda.core.internal/to-synchronised.html","searchKeys":["toSynchronised","fun <K, V> MutableMap<K, V>.toSynchronised(): MutableMap<K, V>","net.corda.core.internal.toSynchronised"]},{"name":"fun <K, V> createSimpleCache(maxSize: Int, onEject: (MutableMap.MutableEntry<K, V>) -> Unit = {}): MutableMap<K, V>","description":"net.corda.core.internal.createSimpleCache","location":"docs/net.corda.core.internal/create-simple-cache.html","searchKeys":["createSimpleCache","fun <K, V> createSimpleCache(maxSize: Int, onEject: (MutableMap.MutableEntry<K, V>) -> Unit = {}): MutableMap<K, V>","net.corda.core.internal.createSimpleCache"]},{"name":"fun <O, C> getColumnName(column: Column<O, C>): String","description":"net.corda.core.node.services.vault.getColumnName","location":"docs/net.corda.core.node.services.vault/get-column-name.html","searchKeys":["getColumnName","fun <O, C> getColumnName(column: Column<O, C>): String","net.corda.core.node.services.vault.getColumnName"]},{"name":"fun <O, C> resolveEnclosingObjectFromColumn(column: Column<O, C>): Class<O>","description":"net.corda.core.node.services.vault.resolveEnclosingObjectFromColumn","location":"docs/net.corda.core.node.services.vault/resolve-enclosing-object-from-column.html","searchKeys":["resolveEnclosingObjectFromColumn","fun <O, C> resolveEnclosingObjectFromColumn(column: Column<O, C>): Class<O>","net.corda.core.node.services.vault.resolveEnclosingObjectFromColumn"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.between(from: R, to: R): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.between","location":"docs/net.corda.core.node.services.vault/-builder/between.html","searchKeys":["between","fun <O, R : Comparable<R>> KProperty1<O, R?>.between(from: R, to: R): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.between"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.comparePredicate(operator: BinaryComparisonOperator, value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.comparePredicate","location":"docs/net.corda.core.node.services.vault/-builder/compare-predicate.html","searchKeys":["comparePredicate","fun <O, R : Comparable<R>> KProperty1<O, R?>.comparePredicate(operator: BinaryComparisonOperator, value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.comparePredicate"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.greaterThan(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.greaterThan","location":"docs/net.corda.core.node.services.vault/-builder/greater-than.html","searchKeys":["greaterThan","fun <O, R : Comparable<R>> KProperty1<O, R?>.greaterThan(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.greaterThan"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.greaterThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.greaterThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/greater-than-or-equal.html","searchKeys":["greaterThanOrEqual","fun <O, R : Comparable<R>> KProperty1<O, R?>.greaterThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.greaterThanOrEqual"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.in(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.in","location":"docs/net.corda.core.node.services.vault/-builder/in.html","searchKeys":["in","fun <O, R : Comparable<R>> KProperty1<O, R?>.in(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.in"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.lessThan(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.lessThan","location":"docs/net.corda.core.node.services.vault/-builder/less-than.html","searchKeys":["lessThan","fun <O, R : Comparable<R>> KProperty1<O, R?>.lessThan(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.lessThan"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.lessThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.lessThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/less-than-or-equal.html","searchKeys":["lessThanOrEqual","fun <O, R : Comparable<R>> KProperty1<O, R?>.lessThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.lessThanOrEqual"]},{"name":"fun <O, R : Comparable<R>> KProperty1<O, R?>.notIn(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.notIn","location":"docs/net.corda.core.node.services.vault/-builder/not-in.html","searchKeys":["notIn","fun <O, R : Comparable<R>> KProperty1<O, R?>.notIn(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.notIn"]},{"name":"fun <O, R> KProperty1<O, R?>.avg(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.avg","location":"docs/net.corda.core.node.services.vault/-builder/avg.html","searchKeys":["avg","fun <O, R> KProperty1<O, R?>.avg(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","net.corda.core.node.services.vault.Builder.avg"]},{"name":"fun <O, R> KProperty1<O, R?>.count(): CriteriaExpression.AggregateFunctionExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.count","location":"docs/net.corda.core.node.services.vault/-builder/count.html","searchKeys":["count","fun <O, R> KProperty1<O, R?>.count(): CriteriaExpression.AggregateFunctionExpression<O, R>","net.corda.core.node.services.vault.Builder.count"]},{"name":"fun <O, R> KProperty1<O, R?>.equal(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.equal","location":"docs/net.corda.core.node.services.vault/-builder/equal.html","searchKeys":["equal","fun <O, R> KProperty1<O, R?>.equal(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.equal"]},{"name":"fun <O, R> KProperty1<O, R?>.functionPredicate(predicate: ColumnPredicate<R>, groupByColumns: List<Column<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.functionPredicate","location":"docs/net.corda.core.node.services.vault/-builder/function-predicate.html","searchKeys":["functionPredicate","fun <O, R> KProperty1<O, R?>.functionPredicate(predicate: ColumnPredicate<R>, groupByColumns: List<Column<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","net.corda.core.node.services.vault.Builder.functionPredicate"]},{"name":"fun <O, R> KProperty1<O, R?>.isNull(): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.isNull","location":"docs/net.corda.core.node.services.vault/-builder/is-null.html","searchKeys":["isNull","fun <O, R> KProperty1<O, R?>.isNull(): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.isNull"]},{"name":"fun <O, R> KProperty1<O, R?>.max(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.max","location":"docs/net.corda.core.node.services.vault/-builder/max.html","searchKeys":["max","fun <O, R> KProperty1<O, R?>.max(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","net.corda.core.node.services.vault.Builder.max"]},{"name":"fun <O, R> KProperty1<O, R?>.min(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.min","location":"docs/net.corda.core.node.services.vault/-builder/min.html","searchKeys":["min","fun <O, R> KProperty1<O, R?>.min(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","net.corda.core.node.services.vault.Builder.min"]},{"name":"fun <O, R> KProperty1<O, R?>.notEqual(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.notEqual","location":"docs/net.corda.core.node.services.vault/-builder/not-equal.html","searchKeys":["notEqual","fun <O, R> KProperty1<O, R?>.notEqual(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.notEqual"]},{"name":"fun <O, R> KProperty1<O, R?>.notNull(): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.notNull","location":"docs/net.corda.core.node.services.vault/-builder/not-null.html","searchKeys":["notNull","fun <O, R> KProperty1<O, R?>.notNull(): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.notNull"]},{"name":"fun <O, R> KProperty1<O, R?>.predicate(predicate: ColumnPredicate<R>): CriteriaExpression.ColumnPredicateExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.predicate","location":"docs/net.corda.core.node.services.vault/-builder/predicate.html","searchKeys":["predicate","fun <O, R> KProperty1<O, R?>.predicate(predicate: ColumnPredicate<R>): CriteriaExpression.ColumnPredicateExpression<O, R>","net.corda.core.node.services.vault.Builder.predicate"]},{"name":"fun <O, R> KProperty1<O, R?>.sum(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","description":"net.corda.core.node.services.vault.Builder.sum","location":"docs/net.corda.core.node.services.vault/-builder/sum.html","searchKeys":["sum","fun <O, R> KProperty1<O, R?>.sum(groupByColumns: List<KProperty1<O, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<O, R>","net.corda.core.node.services.vault.Builder.sum"]},{"name":"fun <O, R> resolveEnclosingObjectFromExpression(expression: CriteriaExpression<O, R>): Class<O>","description":"net.corda.core.node.services.vault.resolveEnclosingObjectFromExpression","location":"docs/net.corda.core.node.services.vault/resolve-enclosing-object-from-expression.html","searchKeys":["resolveEnclosingObjectFromExpression","fun <O, R> resolveEnclosingObjectFromExpression(expression: CriteriaExpression<O, R>): Class<O>","net.corda.core.node.services.vault.resolveEnclosingObjectFromExpression"]},{"name":"fun <O> KProperty1<O, String?>.like(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, String>","description":"net.corda.core.node.services.vault.Builder.like","location":"docs/net.corda.core.node.services.vault/-builder/like.html","searchKeys":["like","fun <O> KProperty1<O, String?>.like(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, String>","net.corda.core.node.services.vault.Builder.like"]},{"name":"fun <O> KProperty1<O, String?>.notLike(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, String>","description":"net.corda.core.node.services.vault.Builder.notLike","location":"docs/net.corda.core.node.services.vault/-builder/not-like.html","searchKeys":["notLike","fun <O> KProperty1<O, String?>.notLike(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<O, String>","net.corda.core.node.services.vault.Builder.notLike"]},{"name":"fun <OldState : ContractState, NewState : ContractState> assembleUpgradeTx(stateAndRef: StateAndRef<OldState>, upgradedContractClass: Class<out UpgradedContract<OldState, NewState>>, privacySalt: PrivacySalt, services: ServicesForResolution): ContractUpgradeWireTransaction","description":"net.corda.core.internal.ContractUpgradeUtils.assembleUpgradeTx","location":"docs/net.corda.core.internal/-contract-upgrade-utils/assemble-upgrade-tx.html","searchKeys":["assembleUpgradeTx","fun <OldState : ContractState, NewState : ContractState> assembleUpgradeTx(stateAndRef: StateAndRef<OldState>, upgradedContractClass: Class<out UpgradedContract<OldState, NewState>>, privacySalt: PrivacySalt, services: ServicesForResolution): ContractUpgradeWireTransaction","net.corda.core.internal.ContractUpgradeUtils.assembleUpgradeTx"]},{"name":"fun <P : AbstractParty, T : Any> netAmountsDue(balances: Map<<Error class: unknown class><P, P>, Amount<T>>): Map<<Error class: unknown class><P, P>, Amount<T>>","description":"net.corda.finance.contracts.asset.netAmountsDue","location":"docs/net.corda.finance.contracts.asset/net-amounts-due.html","searchKeys":["netAmountsDue","fun <P : AbstractParty, T : Any> netAmountsDue(balances: Map<<Error class: unknown class><P, P>, Amount<T>>): Map<<Error class: unknown class><P, P>, Amount<T>>","net.corda.finance.contracts.asset.netAmountsDue"]},{"name":"fun <P : AbstractParty, T : Any> sumAmountsDue(balances: Map<<Error class: unknown class><P, P>, Amount<T>>): Map<P, Long>","description":"net.corda.finance.contracts.asset.sumAmountsDue","location":"docs/net.corda.finance.contracts.asset/sum-amounts-due.html","searchKeys":["sumAmountsDue","fun <P : AbstractParty, T : Any> sumAmountsDue(balances: Map<<Error class: unknown class><P, P>, Amount<T>>): Map<P, Long>","net.corda.finance.contracts.asset.sumAmountsDue"]},{"name":"fun <P : Any> Iterable<ContractState>.sumObligations(): Amount<Issued<Obligation.Terms<P>>>","description":"net.corda.finance.contracts.utils.sumObligations","location":"docs/net.corda.finance.contracts.utils/sum-obligations.html","searchKeys":["sumObligations","fun <P : Any> Iterable<ContractState>.sumObligations(): Amount<Issued<Obligation.Terms<P>>>","net.corda.finance.contracts.utils.sumObligations"]},{"name":"fun <P : Any> Iterable<ContractState>.sumObligationsOrNull(): Amount<Issued<Obligation.Terms<P>>>?","description":"net.corda.finance.contracts.utils.sumObligationsOrNull","location":"docs/net.corda.finance.contracts.utils/sum-obligations-or-null.html","searchKeys":["sumObligationsOrNull","fun <P : Any> Iterable<ContractState>.sumObligationsOrNull(): Amount<Issued<Obligation.Terms<P>>>?","net.corda.finance.contracts.utils.sumObligationsOrNull"]},{"name":"fun <P : Any> Iterable<ContractState>.sumObligationsOrZero(issuanceDef: Issued<Obligation.Terms<P>>): Amount<Issued<Obligation.Terms<P>>>","description":"net.corda.finance.contracts.utils.sumObligationsOrZero","location":"docs/net.corda.finance.contracts.utils/sum-obligations-or-zero.html","searchKeys":["sumObligationsOrZero","fun <P : Any> Iterable<ContractState>.sumObligationsOrZero(issuanceDef: Issued<Obligation.Terms<P>>): Amount<Issued<Obligation.Terms<P>>>","net.corda.finance.contracts.utils.sumObligationsOrZero"]},{"name":"fun <P : Any> extractAmountsDue(product: Obligation.Terms<P>, states: Iterable<Obligation.State<P>>): Map<<Error class: unknown class><AbstractParty, AbstractParty>, Amount<Obligation.Terms<P>>>","description":"net.corda.finance.contracts.asset.extractAmountsDue","location":"docs/net.corda.finance.contracts.asset/extract-amounts-due.html","searchKeys":["extractAmountsDue","fun <P : Any> extractAmountsDue(product: Obligation.Terms<P>, states: Iterable<Obligation.State<P>>): Map<<Error class: unknown class><AbstractParty, AbstractParty>, Amount<Obligation.Terms<P>>>","net.corda.finance.contracts.asset.extractAmountsDue"]},{"name":"fun <P : Any> generateCloseOutNetting(tx: TransactionBuilder, signer: AbstractParty, vararg inputs: StateAndRef<Obligation.State<P>>)","description":"net.corda.finance.workflows.asset.ObligationUtils.generateCloseOutNetting","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/generate-close-out-netting.html","searchKeys":["generateCloseOutNetting","fun <P : Any> generateCloseOutNetting(tx: TransactionBuilder, signer: AbstractParty, vararg inputs: StateAndRef<Obligation.State<P>>)","net.corda.finance.workflows.asset.ObligationUtils.generateCloseOutNetting"]},{"name":"fun <P : Any> generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<Obligation.Terms<P>>>, assetStates: List<StateAndRef<Obligation.State<P>>>): Set<PublicKey>","description":"net.corda.finance.workflows.asset.ObligationUtils.generateExit","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/generate-exit.html","searchKeys":["generateExit","fun <P : Any> generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<Obligation.Terms<P>>>, assetStates: List<StateAndRef<Obligation.State<P>>>): Set<PublicKey>","net.corda.finance.workflows.asset.ObligationUtils.generateExit"]},{"name":"fun <P : Any> generateIssue(tx: TransactionBuilder, obligor: AbstractParty, issuanceDef: Obligation.Terms<P>, pennies: Long, beneficiary: AbstractParty, notary: Party): Set<PublicKey>","description":"net.corda.finance.workflows.asset.ObligationUtils.generateIssue","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/generate-issue.html","searchKeys":["generateIssue","fun <P : Any> generateIssue(tx: TransactionBuilder, obligor: AbstractParty, issuanceDef: Obligation.Terms<P>, pennies: Long, beneficiary: AbstractParty, notary: Party): Set<PublicKey>","net.corda.finance.workflows.asset.ObligationUtils.generateIssue"]},{"name":"fun <P : Any> generatePaymentNetting(tx: TransactionBuilder, issued: Issued<Obligation.Terms<P>>, notary: Party, vararg inputs: StateAndRef<Obligation.State<P>>)","description":"net.corda.finance.workflows.asset.ObligationUtils.generatePaymentNetting","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/generate-payment-netting.html","searchKeys":["generatePaymentNetting","fun <P : Any> generatePaymentNetting(tx: TransactionBuilder, issued: Issued<Obligation.Terms<P>>, notary: Party, vararg inputs: StateAndRef<Obligation.State<P>>)","net.corda.finance.workflows.asset.ObligationUtils.generatePaymentNetting"]},{"name":"fun <P : Any> generateSetLifecycle(tx: TransactionBuilder, statesAndRefs: List<StateAndRef<Obligation.State<P>>>, lifecycle: Obligation.Lifecycle, notary: Party)","description":"net.corda.finance.workflows.asset.ObligationUtils.generateSetLifecycle","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/generate-set-lifecycle.html","searchKeys":["generateSetLifecycle","fun <P : Any> generateSetLifecycle(tx: TransactionBuilder, statesAndRefs: List<StateAndRef<Obligation.State<P>>>, lifecycle: Obligation.Lifecycle, notary: Party)","net.corda.finance.workflows.asset.ObligationUtils.generateSetLifecycle"]},{"name":"fun <P : Any> generateSettle(tx: TransactionBuilder, statesAndRefs: Iterable<StateAndRef<Obligation.State<P>>>, assetStatesAndRefs: Iterable<StateAndRef<FungibleAsset<P>>>, moveCommand: MoveCommand, notary: Party)","description":"net.corda.finance.workflows.asset.ObligationUtils.generateSettle","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/generate-settle.html","searchKeys":["generateSettle","fun <P : Any> generateSettle(tx: TransactionBuilder, statesAndRefs: Iterable<StateAndRef<Obligation.State<P>>>, assetStatesAndRefs: Iterable<StateAndRef<FungibleAsset<P>>>, moveCommand: MoveCommand, notary: Party)","net.corda.finance.workflows.asset.ObligationUtils.generateSettle"]},{"name":"fun <R : Any> FlowLogic<*>.receiveAll(receiveType: Class<R>, session: FlowSession, vararg sessions: FlowSession): List<UntrustworthyData<R>>","description":"net.corda.testing.flows.receiveAll","location":"docs/net.corda.testing.flows/receive-all.html","searchKeys":["receiveAll","fun <R : Any> FlowLogic<*>.receiveAll(receiveType: Class<R>, session: FlowSession, vararg sessions: FlowSession): List<UntrustworthyData<R>>","net.corda.testing.flows.receiveAll"]},{"name":"fun <R : Any> await(operation: FlowExternalAsyncOperation<R>): R","description":"net.corda.core.flows.FlowLogic.await","location":"docs/net.corda.core.flows/-flow-logic/await.html","searchKeys":["await","fun <R : Any> await(operation: FlowExternalAsyncOperation<R>): R","net.corda.core.flows.FlowLogic.await"]},{"name":"fun <R : Any> await(operation: FlowExternalOperation<R>): R","description":"net.corda.core.flows.FlowLogic.await","location":"docs/net.corda.core.flows/-flow-logic/await.html","searchKeys":["await","fun <R : Any> await(operation: FlowExternalOperation<R>): R","net.corda.core.flows.FlowLogic.await"]},{"name":"fun <R : Comparable<R>> Field.between(from: R, to: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.between","location":"docs/net.corda.core.node.services.vault/-builder/between.html","searchKeys":["between","fun <R : Comparable<R>> Field.between(from: R, to: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.between"]},{"name":"fun <R : Comparable<R>> Field.comparePredicate(operator: BinaryComparisonOperator, value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.comparePredicate","location":"docs/net.corda.core.node.services.vault/-builder/compare-predicate.html","searchKeys":["comparePredicate","fun <R : Comparable<R>> Field.comparePredicate(operator: BinaryComparisonOperator, value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.comparePredicate"]},{"name":"fun <R : Comparable<R>> Field.greaterThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.greaterThan","location":"docs/net.corda.core.node.services.vault/-builder/greater-than.html","searchKeys":["greaterThan","fun <R : Comparable<R>> Field.greaterThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.greaterThan"]},{"name":"fun <R : Comparable<R>> Field.greaterThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.greaterThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/greater-than-or-equal.html","searchKeys":["greaterThanOrEqual","fun <R : Comparable<R>> Field.greaterThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.greaterThanOrEqual"]},{"name":"fun <R : Comparable<R>> Field.in(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.in","location":"docs/net.corda.core.node.services.vault/-builder/in.html","searchKeys":["in","fun <R : Comparable<R>> Field.in(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.in"]},{"name":"fun <R : Comparable<R>> Field.lessThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.lessThan","location":"docs/net.corda.core.node.services.vault/-builder/less-than.html","searchKeys":["lessThan","fun <R : Comparable<R>> Field.lessThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.lessThan"]},{"name":"fun <R : Comparable<R>> Field.lessThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.lessThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/less-than-or-equal.html","searchKeys":["lessThanOrEqual","fun <R : Comparable<R>> Field.lessThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.lessThanOrEqual"]},{"name":"fun <R : Comparable<R>> Field.notIn(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.notIn","location":"docs/net.corda.core.node.services.vault/-builder/not-in.html","searchKeys":["notIn","fun <R : Comparable<R>> Field.notIn(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.notIn"]},{"name":"fun <R : Comparable<R>> FieldInfo.between(from: R, to: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.between","location":"docs/net.corda.core.node.services.vault/-builder/between.html","searchKeys":["between","fun <R : Comparable<R>> FieldInfo.between(from: R, to: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.between"]},{"name":"fun <R : Comparable<R>> FieldInfo.comparePredicate(operator: BinaryComparisonOperator, value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.comparePredicate","location":"docs/net.corda.core.node.services.vault/-builder/compare-predicate.html","searchKeys":["comparePredicate","fun <R : Comparable<R>> FieldInfo.comparePredicate(operator: BinaryComparisonOperator, value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.comparePredicate"]},{"name":"fun <R : Comparable<R>> FieldInfo.greaterThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.greaterThan","location":"docs/net.corda.core.node.services.vault/-builder/greater-than.html","searchKeys":["greaterThan","fun <R : Comparable<R>> FieldInfo.greaterThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.greaterThan"]},{"name":"fun <R : Comparable<R>> FieldInfo.greaterThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.greaterThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/greater-than-or-equal.html","searchKeys":["greaterThanOrEqual","fun <R : Comparable<R>> FieldInfo.greaterThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.greaterThanOrEqual"]},{"name":"fun <R : Comparable<R>> FieldInfo.in(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.in","location":"docs/net.corda.core.node.services.vault/-builder/in.html","searchKeys":["in","fun <R : Comparable<R>> FieldInfo.in(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.in"]},{"name":"fun <R : Comparable<R>> FieldInfo.lessThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.lessThan","location":"docs/net.corda.core.node.services.vault/-builder/less-than.html","searchKeys":["lessThan","fun <R : Comparable<R>> FieldInfo.lessThan(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.lessThan"]},{"name":"fun <R : Comparable<R>> FieldInfo.lessThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.lessThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/less-than-or-equal.html","searchKeys":["lessThanOrEqual","fun <R : Comparable<R>> FieldInfo.lessThanOrEqual(value: R): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.lessThanOrEqual"]},{"name":"fun <R : Comparable<R>> FieldInfo.notIn(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.notIn","location":"docs/net.corda.core.node.services.vault/-builder/not-in.html","searchKeys":["notIn","fun <R : Comparable<R>> FieldInfo.notIn(collection: Collection<R>, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.notIn"]},{"name":"fun <R : Comparable<R>> between(from: R, to: R): ColumnPredicate.Between<R>","description":"net.corda.core.node.services.vault.Builder.between","location":"docs/net.corda.core.node.services.vault/-builder/between.html","searchKeys":["between","fun <R : Comparable<R>> between(from: R, to: R): ColumnPredicate.Between<R>","net.corda.core.node.services.vault.Builder.between"]},{"name":"fun <R : Comparable<R>> compare(operator: BinaryComparisonOperator, value: R): ColumnPredicate.BinaryComparison<R>","description":"net.corda.core.node.services.vault.Builder.compare","location":"docs/net.corda.core.node.services.vault/-builder/compare.html","searchKeys":["compare","fun <R : Comparable<R>> compare(operator: BinaryComparisonOperator, value: R): ColumnPredicate.BinaryComparison<R>","net.corda.core.node.services.vault.Builder.compare"]},{"name":"fun <R : Comparable<R>> greaterThan(value: R): ColumnPredicate.BinaryComparison<R>","description":"net.corda.core.node.services.vault.Builder.greaterThan","location":"docs/net.corda.core.node.services.vault/-builder/greater-than.html","searchKeys":["greaterThan","fun <R : Comparable<R>> greaterThan(value: R): ColumnPredicate.BinaryComparison<R>","net.corda.core.node.services.vault.Builder.greaterThan"]},{"name":"fun <R : Comparable<R>> greaterThanOrEqual(value: R): ColumnPredicate.BinaryComparison<R>","description":"net.corda.core.node.services.vault.Builder.greaterThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/greater-than-or-equal.html","searchKeys":["greaterThanOrEqual","fun <R : Comparable<R>> greaterThanOrEqual(value: R): ColumnPredicate.BinaryComparison<R>","net.corda.core.node.services.vault.Builder.greaterThanOrEqual"]},{"name":"fun <R : Comparable<R>> in(collection: Collection<R>, exactMatch: Boolean = true): ColumnPredicate.CollectionExpression<R>","description":"net.corda.core.node.services.vault.Builder.in","location":"docs/net.corda.core.node.services.vault/-builder/in.html","searchKeys":["in","fun <R : Comparable<R>> in(collection: Collection<R>, exactMatch: Boolean = true): ColumnPredicate.CollectionExpression<R>","net.corda.core.node.services.vault.Builder.in"]},{"name":"fun <R : Comparable<R>> lessThan(value: R): ColumnPredicate.BinaryComparison<R>","description":"net.corda.core.node.services.vault.Builder.lessThan","location":"docs/net.corda.core.node.services.vault/-builder/less-than.html","searchKeys":["lessThan","fun <R : Comparable<R>> lessThan(value: R): ColumnPredicate.BinaryComparison<R>","net.corda.core.node.services.vault.Builder.lessThan"]},{"name":"fun <R : Comparable<R>> lessThanOrEqual(value: R): ColumnPredicate.BinaryComparison<R>","description":"net.corda.core.node.services.vault.Builder.lessThanOrEqual","location":"docs/net.corda.core.node.services.vault/-builder/less-than-or-equal.html","searchKeys":["lessThanOrEqual","fun <R : Comparable<R>> lessThanOrEqual(value: R): ColumnPredicate.BinaryComparison<R>","net.corda.core.node.services.vault.Builder.lessThanOrEqual"]},{"name":"fun <R : Comparable<R>> notIn(collection: Collection<R>, exactMatch: Boolean = true): ColumnPredicate.CollectionExpression<R>","description":"net.corda.core.node.services.vault.Builder.notIn","location":"docs/net.corda.core.node.services.vault/-builder/not-in.html","searchKeys":["notIn","fun <R : Comparable<R>> notIn(collection: Collection<R>, exactMatch: Boolean = true): ColumnPredicate.CollectionExpression<R>","net.corda.core.node.services.vault.Builder.notIn"]},{"name":"fun <R> Field.avg(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.avg","location":"docs/net.corda.core.node.services.vault/-builder/avg.html","searchKeys":["avg","fun <R> Field.avg(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.avg"]},{"name":"fun <R> Field.equal(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.equal","location":"docs/net.corda.core.node.services.vault/-builder/equal.html","searchKeys":["equal","fun <R> Field.equal(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.equal"]},{"name":"fun <R> Field.functionPredicate(predicate: ColumnPredicate<R>, groupByColumns: List<Column<Any, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.functionPredicate","location":"docs/net.corda.core.node.services.vault/-builder/function-predicate.html","searchKeys":["functionPredicate","fun <R> Field.functionPredicate(predicate: ColumnPredicate<R>, groupByColumns: List<Column<Any, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<Any, R>","net.corda.core.node.services.vault.Builder.functionPredicate"]},{"name":"fun <R> Field.max(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.max","location":"docs/net.corda.core.node.services.vault/-builder/max.html","searchKeys":["max","fun <R> Field.max(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.max"]},{"name":"fun <R> Field.min(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.min","location":"docs/net.corda.core.node.services.vault/-builder/min.html","searchKeys":["min","fun <R> Field.min(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.min"]},{"name":"fun <R> Field.notEqual(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.notEqual","location":"docs/net.corda.core.node.services.vault/-builder/not-equal.html","searchKeys":["notEqual","fun <R> Field.notEqual(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.notEqual"]},{"name":"fun <R> Field.predicate(predicate: ColumnPredicate<R>): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.predicate","location":"docs/net.corda.core.node.services.vault/-builder/predicate.html","searchKeys":["predicate","fun <R> Field.predicate(predicate: ColumnPredicate<R>): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.predicate"]},{"name":"fun <R> Field.sum(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.sum","location":"docs/net.corda.core.node.services.vault/-builder/sum.html","searchKeys":["sum","fun <R> Field.sum(groupByColumns: List<Field>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.sum"]},{"name":"fun <R> FieldInfo.avg(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.avg","location":"docs/net.corda.core.node.services.vault/-builder/avg.html","searchKeys":["avg","fun <R> FieldInfo.avg(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.avg"]},{"name":"fun <R> FieldInfo.equal(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.equal","location":"docs/net.corda.core.node.services.vault/-builder/equal.html","searchKeys":["equal","fun <R> FieldInfo.equal(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.equal"]},{"name":"fun <R> FieldInfo.functionPredicate(predicate: ColumnPredicate<R>, groupByColumns: List<Column<Any, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.functionPredicate","location":"docs/net.corda.core.node.services.vault/-builder/function-predicate.html","searchKeys":["functionPredicate","fun <R> FieldInfo.functionPredicate(predicate: ColumnPredicate<R>, groupByColumns: List<Column<Any, R>>? = null, orderBy: Sort.Direction? = null): CriteriaExpression.AggregateFunctionExpression<Any, R>","net.corda.core.node.services.vault.Builder.functionPredicate"]},{"name":"fun <R> FieldInfo.max(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.max","location":"docs/net.corda.core.node.services.vault/-builder/max.html","searchKeys":["max","fun <R> FieldInfo.max(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.max"]},{"name":"fun <R> FieldInfo.min(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.min","location":"docs/net.corda.core.node.services.vault/-builder/min.html","searchKeys":["min","fun <R> FieldInfo.min(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.min"]},{"name":"fun <R> FieldInfo.notEqual(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.notEqual","location":"docs/net.corda.core.node.services.vault/-builder/not-equal.html","searchKeys":["notEqual","fun <R> FieldInfo.notEqual(value: R, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.notEqual"]},{"name":"fun <R> FieldInfo.predicate(predicate: ColumnPredicate<R>): CriteriaExpression.ColumnPredicateExpression<Any, R>","description":"net.corda.core.node.services.vault.Builder.predicate","location":"docs/net.corda.core.node.services.vault/-builder/predicate.html","searchKeys":["predicate","fun <R> FieldInfo.predicate(predicate: ColumnPredicate<R>): CriteriaExpression.ColumnPredicateExpression<Any, R>","net.corda.core.node.services.vault.Builder.predicate"]},{"name":"fun <R> FieldInfo.sum(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","description":"net.corda.core.node.services.vault.Builder.sum","location":"docs/net.corda.core.node.services.vault/-builder/sum.html","searchKeys":["sum","fun <R> FieldInfo.sum(groupByColumns: List<FieldInfo>? = null, orderBy: Sort.Direction? = null): <Error class: unknown class>","net.corda.core.node.services.vault.Builder.sum"]},{"name":"fun <R> equal(value: R, exactMatch: Boolean = true): ColumnPredicate.EqualityComparison<R>","description":"net.corda.core.node.services.vault.Builder.equal","location":"docs/net.corda.core.node.services.vault/-builder/equal.html","searchKeys":["equal","fun <R> equal(value: R, exactMatch: Boolean = true): ColumnPredicate.EqualityComparison<R>","net.corda.core.node.services.vault.Builder.equal"]},{"name":"fun <R> isNotNull(): ColumnPredicate.NullExpression<R>","description":"net.corda.core.node.services.vault.Builder.isNotNull","location":"docs/net.corda.core.node.services.vault/-builder/is-not-null.html","searchKeys":["isNotNull","fun <R> isNotNull(): ColumnPredicate.NullExpression<R>","net.corda.core.node.services.vault.Builder.isNotNull"]},{"name":"fun <R> isNull(): ColumnPredicate.NullExpression<R>","description":"net.corda.core.node.services.vault.Builder.isNull","location":"docs/net.corda.core.node.services.vault/-builder/is-null.html","searchKeys":["isNull","fun <R> isNull(): ColumnPredicate.NullExpression<R>","net.corda.core.node.services.vault.Builder.isNull"]},{"name":"fun <R> notEqual(value: R, exactMatch: Boolean = true): ColumnPredicate.EqualityComparison<R>","description":"net.corda.core.node.services.vault.Builder.notEqual","location":"docs/net.corda.core.node.services.vault/-builder/not-equal.html","searchKeys":["notEqual","fun <R> notEqual(value: R, exactMatch: Boolean = true): ColumnPredicate.EqualityComparison<R>","net.corda.core.node.services.vault.Builder.notEqual"]},{"name":"fun <R> reentrantRun(withInstance: (A) -> R): R","description":"net.corda.core.internal.LazyPool.reentrantRun","location":"docs/net.corda.core.internal/-lazy-pool/reentrant-run.html","searchKeys":["reentrantRun","fun <R> reentrantRun(withInstance: (A) -> R): R","net.corda.core.internal.LazyPool.reentrantRun"]},{"name":"fun <R> unwrap(validator: UntrustworthyData.Validator<T, R>): R","description":"net.corda.core.utilities.UntrustworthyData.unwrap","location":"docs/net.corda.core.utilities/-untrustworthy-data/unwrap.html","searchKeys":["unwrap","fun <R> unwrap(validator: UntrustworthyData.Validator<T, R>): R","net.corda.core.utilities.UntrustworthyData.unwrap"]},{"name":"fun <R> withTestSerializationEnvIfNotSet(block: () -> R): R","description":"net.corda.testing.internal.withTestSerializationEnvIfNotSet","location":"docs/net.corda.testing.internal/with-test-serialization-env-if-not-set.html","searchKeys":["withTestSerializationEnvIfNotSet","fun <R> withTestSerializationEnvIfNotSet(block: () -> R): R","net.corda.testing.internal.withTestSerializationEnvIfNotSet"]},{"name":"fun <RESULT> CordaFuture<out RESULT>.doOnComplete(accept: (RESULT) -> Unit): CordaFuture<RESULT>","description":"net.corda.core.internal.concurrent.doOnComplete","location":"docs/net.corda.core.internal.concurrent/do-on-complete.html","searchKeys":["doOnComplete","fun <RESULT> CordaFuture<out RESULT>.doOnComplete(accept: (RESULT) -> Unit): CordaFuture<RESULT>","net.corda.core.internal.concurrent.doOnComplete"]},{"name":"fun <RESULT> CordaFuture<out RESULT>.doOnError(accept: (Throwable) -> Unit): CordaFuture<RESULT>","description":"net.corda.core.internal.concurrent.doOnError","location":"docs/net.corda.core.internal.concurrent/do-on-error.html","searchKeys":["doOnError","fun <RESULT> CordaFuture<out RESULT>.doOnError(accept: (Throwable) -> Unit): CordaFuture<RESULT>","net.corda.core.internal.concurrent.doOnError"]},{"name":"fun <S : ContractState> retrieveOutput(clazz: Class<S>, label: String): S","description":"net.corda.testing.dsl.LedgerDSL.retrieveOutput","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/retrieve-output.html","searchKeys":["retrieveOutput","fun <S : ContractState> retrieveOutput(clazz: Class<S>, label: String): S","net.corda.testing.dsl.LedgerDSL.retrieveOutput"]},{"name":"fun <S : FungibleAsset<T>, T : Any> generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData, generateExitCommand: (Amount<Issued<T>>) -> CommandData): Set<PublicKey>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateExit","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/-companion/generate-exit.html","searchKeys":["generateExit","fun <S : FungibleAsset<T>, T : Any> generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData, generateExitCommand: (Amount<Issued<T>>) -> CommandData): Set<PublicKey>","net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateExit"]},{"name":"fun <S : FungibleAsset<T>, T : Any> generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>, payChangeTo: AbstractParty, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData, generateExitCommand: (Amount<Issued<T>>) -> CommandData): Set<PublicKey>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateExit","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/-companion/generate-exit.html","searchKeys":["generateExit","fun <S : FungibleAsset<T>, T : Any> generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>, payChangeTo: AbstractParty, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData, generateExitCommand: (Amount<Issued<T>>) -> CommandData): Set<PublicKey>","net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateExit"]},{"name":"fun <S : FungibleAsset<T>, T : Any> generateIssue(tx: TransactionBuilder, transactionState: TransactionState<S>, issueCommand: CommandData): Set<PublicKey>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateIssue","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/-companion/generate-issue.html","searchKeys":["generateIssue","fun <S : FungibleAsset<T>, T : Any> generateIssue(tx: TransactionBuilder, transactionState: TransactionState<S>, issueCommand: CommandData): Set<PublicKey>","net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateIssue"]},{"name":"fun <S : FungibleAsset<T>, T : Any> generateSpend(tx: TransactionBuilder, amount: Amount<T>, to: AbstractParty, acceptableStates: List<StateAndRef<S>>, payChangeTo: AbstractParty, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateSpend","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/-companion/generate-spend.html","searchKeys":["generateSpend","fun <S : FungibleAsset<T>, T : Any> generateSpend(tx: TransactionBuilder, amount: Amount<T>, to: AbstractParty, acceptableStates: List<StateAndRef<S>>, payChangeTo: AbstractParty, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateSpend"]},{"name":"fun <S : FungibleAsset<T>, T : Any> generateSpend(tx: TransactionBuilder, payments: List<PartyAndAmount<T>>, acceptableStates: List<StateAndRef<S>>, payChangeTo: AbstractParty, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateSpend","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/-companion/generate-spend.html","searchKeys":["generateSpend","fun <S : FungibleAsset<T>, T : Any> generateSpend(tx: TransactionBuilder, payments: List<PartyAndAmount<T>>, acceptableStates: List<StateAndRef<S>>, payChangeTo: AbstractParty, deriveState: (TransactionState<S>, Amount<Issued<T>>, AbstractParty) -> TransactionState<S>, generateMoveCommand: () -> CommandData): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","net.corda.finance.contracts.asset.OnLedgerAsset.Companion.generateSpend"]},{"name":"fun <S : T> intern(sample: S): S","description":"net.corda.core.internal.utilities.PrivateInterner.intern","location":"docs/net.corda.core.internal.utilities/-private-interner/intern.html","searchKeys":["intern","fun <S : T> intern(sample: S): S","net.corda.core.internal.utilities.PrivateInterner.intern"]},{"name":"fun <SNAPSHOT, ELEMENT> DataFeed<SNAPSHOT, ELEMENT>.doOnError(action: (Throwable) -> Unit): DataFeed<SNAPSHOT, ELEMENT>","description":"net.corda.core.doOnError","location":"docs/net.corda.core/do-on-error.html","searchKeys":["doOnError","fun <SNAPSHOT, ELEMENT> DataFeed<SNAPSHOT, ELEMENT>.doOnError(action: (Throwable) -> Unit): DataFeed<SNAPSHOT, ELEMENT>","net.corda.core.doOnError"]},{"name":"fun <SNAPSHOT, ELEMENT> DataFeed<SNAPSHOT, ELEMENT>.mapErrors(transform: (Throwable) -> Throwable): DataFeed<SNAPSHOT, ELEMENT>","description":"net.corda.core.mapErrors","location":"docs/net.corda.core/map-errors.html","searchKeys":["mapErrors","fun <SNAPSHOT, ELEMENT> DataFeed<SNAPSHOT, ELEMENT>.mapErrors(transform: (Throwable) -> Throwable): DataFeed<SNAPSHOT, ELEMENT>","net.corda.core.mapErrors"]},{"name":"fun <T : Any, P : Any> fromDecimal(displayQuantityDelta: BigDecimal, token: T, source: P, destination: P, rounding: RoundingMode = RoundingMode.DOWN): AmountTransfer<T, P>","description":"net.corda.core.contracts.AmountTransfer.Companion.fromDecimal","location":"docs/net.corda.core.contracts/-amount-transfer/-companion/from-decimal.html","searchKeys":["fromDecimal","fun <T : Any, P : Any> fromDecimal(displayQuantityDelta: BigDecimal, token: T, source: P, destination: P, rounding: RoundingMode = RoundingMode.DOWN): AmountTransfer<T, P>","net.corda.core.contracts.AmountTransfer.Companion.fromDecimal"]},{"name":"fun <T : Any, P : Any> zero(token: T, source: P, destination: P): AmountTransfer<T, P>","description":"net.corda.core.contracts.AmountTransfer.Companion.zero","location":"docs/net.corda.core.contracts/-amount-transfer/-companion/zero.html","searchKeys":["zero","fun <T : Any, P : Any> zero(token: T, source: P, destination: P): AmountTransfer<T, P>","net.corda.core.contracts.AmountTransfer.Companion.zero"]},{"name":"fun <T : Any> AMOUNT(amount: Double, token: T): Amount<T>","description":"net.corda.finance.AMOUNT","location":"docs/net.corda.finance/-a-m-o-u-n-t.html","searchKeys":["AMOUNT","fun <T : Any> AMOUNT(amount: Double, token: T): Amount<T>","net.corda.finance.AMOUNT"]},{"name":"fun <T : Any> AMOUNT(amount: Int, token: T): Amount<T>","description":"net.corda.finance.AMOUNT","location":"docs/net.corda.finance/-a-m-o-u-n-t.html","searchKeys":["AMOUNT","fun <T : Any> AMOUNT(amount: Int, token: T): Amount<T>","net.corda.finance.AMOUNT"]},{"name":"fun <T : Any> AMOUNT(amount: Long, token: T): Amount<T>","description":"net.corda.finance.AMOUNT","location":"docs/net.corda.finance/-a-m-o-u-n-t.html","searchKeys":["AMOUNT","fun <T : Any> AMOUNT(amount: Long, token: T): Amount<T>","net.corda.finance.AMOUNT"]},{"name":"fun <T : Any> Amount<Issued<T>>.withoutIssuer(): Amount<T>","description":"net.corda.core.contracts.withoutIssuer","location":"docs/net.corda.core.contracts/without-issuer.html","searchKeys":["withoutIssuer","fun <T : Any> Amount<Issued<T>>.withoutIssuer(): Amount<T>","net.corda.core.contracts.withoutIssuer"]},{"name":"fun <T : Any> Iterable<Amount<T>>.sumOrNull(): Nothing?","description":"net.corda.core.contracts.Amount.Companion.sumOrNull","location":"docs/net.corda.core.contracts/-amount/-companion/sum-or-null.html","searchKeys":["sumOrNull","fun <T : Any> Iterable<Amount<T>>.sumOrNull(): Nothing?","net.corda.core.contracts.Amount.Companion.sumOrNull"]},{"name":"fun <T : Any> Iterable<Amount<T>>.sumOrThrow(): <Error class: unknown class>","description":"net.corda.core.contracts.Amount.Companion.sumOrThrow","location":"docs/net.corda.core.contracts/-amount/-companion/sum-or-throw.html","searchKeys":["sumOrThrow","fun <T : Any> Iterable<Amount<T>>.sumOrThrow(): <Error class: unknown class>","net.corda.core.contracts.Amount.Companion.sumOrThrow"]},{"name":"fun <T : Any> Iterable<Amount<T>>.sumOrZero(token: T): Amount<T>","description":"net.corda.core.contracts.Amount.Companion.sumOrZero","location":"docs/net.corda.core.contracts/-amount/-companion/sum-or-zero.html","searchKeys":["sumOrZero","fun <T : Any> Iterable<Amount<T>>.sumOrZero(token: T): Amount<T>","net.corda.core.contracts.Amount.Companion.sumOrZero"]},{"name":"fun <T : Any> Iterable<ContractState>.sumFungibleOrNull(): Amount<Issued<T>>?","description":"net.corda.finance.contracts.utils.sumFungibleOrNull","location":"docs/net.corda.finance.contracts.utils/sum-fungible-or-null.html","searchKeys":["sumFungibleOrNull","fun <T : Any> Iterable<ContractState>.sumFungibleOrNull(): Amount<Issued<T>>?","net.corda.finance.contracts.utils.sumFungibleOrNull"]},{"name":"fun <T : Any> Iterable<ContractState>.sumFungibleOrZero(token: Issued<T>): Amount<Issued<T>>","description":"net.corda.finance.contracts.utils.sumFungibleOrZero","location":"docs/net.corda.finance.contracts.utils/sum-fungible-or-zero.html","searchKeys":["sumFungibleOrZero","fun <T : Any> Iterable<ContractState>.sumFungibleOrZero(token: Issued<T>): Amount<Issued<T>>","net.corda.finance.contracts.utils.sumFungibleOrZero"]},{"name":"fun <T : Any> KClass<T>.objectOrNewInstance(): T","description":"net.corda.core.internal.objectOrNewInstance","location":"docs/net.corda.core.internal/object-or-new-instance.html","searchKeys":["objectOrNewInstance","fun <T : Any> KClass<T>.objectOrNewInstance(): T","net.corda.core.internal.objectOrNewInstance"]},{"name":"fun <T : Any> Obligation.State<T>.issuedBy(party: AnonymousParty): Obligation.State<T>","description":"net.corda.finance.contracts.asset.issuedBy","location":"docs/net.corda.finance.contracts.asset/issued-by.html","searchKeys":["issuedBy","fun <T : Any> Obligation.State<T>.issuedBy(party: AnonymousParty): Obligation.State<T>","net.corda.finance.contracts.asset.issuedBy"]},{"name":"fun <T : Any> Obligation.State<T>.ownedBy(owner: AbstractParty): Obligation.State<T>","description":"net.corda.finance.contracts.asset.ownedBy","location":"docs/net.corda.finance.contracts.asset/owned-by.html","searchKeys":["ownedBy","fun <T : Any> Obligation.State<T>.ownedBy(owner: AbstractParty): Obligation.State<T>","net.corda.finance.contracts.asset.ownedBy"]},{"name":"fun <T : Any> SerializedBytes<Any>.checkPayloadIs(type: Class<T>): UntrustworthyData<T>","description":"net.corda.core.internal.checkPayloadIs","location":"docs/net.corda.core.internal/check-payload-is.html","searchKeys":["checkPayloadIs","fun <T : Any> SerializedBytes<Any>.checkPayloadIs(type: Class<T>): UntrustworthyData<T>","net.corda.core.internal.checkPayloadIs"]},{"name":"fun <T : Any> SerializedBytes<T>.sign(keyPair: KeyPair): SignedData<T>","description":"net.corda.core.internal.sign","location":"docs/net.corda.core.internal/sign.html","searchKeys":["sign","fun <T : Any> SerializedBytes<T>.sign(keyPair: KeyPair): SignedData<T>","net.corda.core.internal.sign"]},{"name":"fun <T : Any> T.checkpointSerialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): SerializedBytes<T>","description":"net.corda.core.serialization.internal.checkpointSerialize","location":"docs/net.corda.core.serialization.internal/checkpoint-serialize.html","searchKeys":["checkpointSerialize","fun <T : Any> T.checkpointSerialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): SerializedBytes<T>","net.corda.core.serialization.internal.checkpointSerialize"]},{"name":"fun <T : Any> T.serialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): SerializedBytes<T>","description":"net.corda.core.serialization.serialize","location":"docs/net.corda.core.serialization/serialize.html","searchKeys":["serialize","fun <T : Any> T.serialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): SerializedBytes<T>","net.corda.core.serialization.serialize"]},{"name":"fun <T : Any> T.signWithCert(privateKey: PrivateKey, certificate: X509Certificate): SignedDataWithCert<T>","description":"net.corda.core.internal.signWithCert","location":"docs/net.corda.core.internal/sign-with-cert.html","searchKeys":["signWithCert","fun <T : Any> T.signWithCert(privateKey: PrivateKey, certificate: X509Certificate): SignedDataWithCert<T>","net.corda.core.internal.signWithCert"]},{"name":"fun <T : Any> T.signWithCertPath(privateKey: PrivateKey, certPath: List<X509Certificate>): SignedDataWithCert<T>","description":"net.corda.core.internal.signWithCertPath","location":"docs/net.corda.core.internal/sign-with-cert-path.html","searchKeys":["signWithCertPath","fun <T : Any> T.signWithCertPath(privateKey: PrivateKey, certPath: List<X509Certificate>): SignedDataWithCert<T>","net.corda.core.internal.signWithCertPath"]},{"name":"fun <T : Any> createInstancesOfClassesImplementing(classloader: ClassLoader, clazz: Class<T>, classVersionRange: IntRange? = null): Set<T>","description":"net.corda.core.internal.createInstancesOfClassesImplementing","location":"docs/net.corda.core.internal/create-instances-of-classes-implementing.html","searchKeys":["createInstancesOfClassesImplementing","fun <T : Any> createInstancesOfClassesImplementing(classloader: ClassLoader, clazz: Class<T>, classVersionRange: IntRange? = null): Set<T>","net.corda.core.internal.createInstancesOfClassesImplementing"]},{"name":"fun <T : Any> deserialiseComponentGroup(componentGroups: List<ComponentGroup>, clazz: KClass<T>, groupEnum: ComponentGroupEnum, forceDeserialize: Boolean = false, factory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = factory.defaultContext): List<T>","description":"net.corda.core.internal.deserialiseComponentGroup","location":"docs/net.corda.core.internal/deserialise-component-group.html","searchKeys":["deserialiseComponentGroup","fun <T : Any> deserialiseComponentGroup(componentGroups: List<ComponentGroup>, clazz: KClass<T>, groupEnum: ComponentGroupEnum, forceDeserialize: Boolean = false, factory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = factory.defaultContext): List<T>","net.corda.core.internal.deserialiseComponentGroup"]},{"name":"fun <T : Any> from(obj: T, serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): SerializedBytes<T>","description":"net.corda.core.serialization.SerializedBytes.Companion.from","location":"docs/net.corda.core.serialization/-serialized-bytes/-companion/from.html","searchKeys":["from","fun <T : Any> from(obj: T, serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): SerializedBytes<T>","net.corda.core.serialization.SerializedBytes.Companion.from"]},{"name":"fun <T : Any> fromDecimal(displayQuantity: BigDecimal, token: T, rounding: RoundingMode = RoundingMode.FLOOR): Amount<T>","description":"net.corda.core.contracts.Amount.Companion.fromDecimal","location":"docs/net.corda.core.contracts/-amount/-companion/from-decimal.html","searchKeys":["fromDecimal","fun <T : Any> fromDecimal(displayQuantity: BigDecimal, token: T, rounding: RoundingMode = RoundingMode.FLOOR): Amount<T>","net.corda.core.contracts.Amount.Companion.fromDecimal"]},{"name":"fun <T : Any> getNamesOfClassesImplementing(classloader: ClassLoader, clazz: Class<T>, classVersionRange: IntRange? = null): Set<String>","description":"net.corda.core.internal.getNamesOfClassesImplementing","location":"docs/net.corda.core.internal/get-names-of-classes-implementing.html","searchKeys":["getNamesOfClassesImplementing","fun <T : Any> getNamesOfClassesImplementing(classloader: ClassLoader, clazz: Class<T>, classVersionRange: IntRange? = null): Set<String>","net.corda.core.internal.getNamesOfClassesImplementing"]},{"name":"fun <T : Any> serializedHash(x: T): SecureHash","description":"net.corda.core.crypto.DigestService.serializedHash","location":"docs/net.corda.core.crypto/-digest-service/serialized-hash.html","searchKeys":["serializedHash","fun <T : Any> serializedHash(x: T): SecureHash","net.corda.core.crypto.DigestService.serializedHash"]},{"name":"fun <T : Any> serializedHash(x: T): SecureHash","description":"net.corda.core.crypto.serializedHash","location":"docs/net.corda.core.crypto/serialized-hash.html","searchKeys":["serializedHash","fun <T : Any> serializedHash(x: T): SecureHash","net.corda.core.crypto.serializedHash"]},{"name":"fun <T : Any> zero(token: T): Amount<T>","description":"net.corda.core.contracts.Amount.Companion.zero","location":"docs/net.corda.core.contracts/-amount/-companion/zero.html","searchKeys":["zero","fun <T : Any> zero(token: T): Amount<T>","net.corda.core.contracts.Amount.Companion.zero"]},{"name":"fun <T : CommandData> commandsOfType(clazz: Class<T>): List<Command<T>>","description":"net.corda.core.transactions.LedgerTransaction.commandsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/commands-of-type.html","searchKeys":["commandsOfType","fun <T : CommandData> commandsOfType(clazz: Class<T>): List<Command<T>>","net.corda.core.transactions.LedgerTransaction.commandsOfType"]},{"name":"fun <T : CommandData> filterCommands(clazz: Class<T>, predicate: Predicate<T>): List<Command<T>>","description":"net.corda.core.transactions.LedgerTransaction.filterCommands","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-commands.html","searchKeys":["filterCommands","fun <T : CommandData> filterCommands(clazz: Class<T>, predicate: Predicate<T>): List<Command<T>>","net.corda.core.transactions.LedgerTransaction.filterCommands"]},{"name":"fun <T : CommandData> findCommand(clazz: Class<T>, predicate: Predicate<T>): Command<T>","description":"net.corda.core.transactions.LedgerTransaction.findCommand","location":"docs/net.corda.core.transactions/-ledger-transaction/find-command.html","searchKeys":["findCommand","fun <T : CommandData> findCommand(clazz: Class<T>, predicate: Predicate<T>): Command<T>","net.corda.core.transactions.LedgerTransaction.findCommand"]},{"name":"fun <T : CommandData> getCommand(index: Int): Command<T>","description":"net.corda.core.transactions.LedgerTransaction.getCommand","location":"docs/net.corda.core.transactions/-ledger-transaction/get-command.html","searchKeys":["getCommand","fun <T : CommandData> getCommand(index: Int): Command<T>","net.corda.core.transactions.LedgerTransaction.getCommand"]},{"name":"fun <T : ComponentGroup> List<T>.getGroup(type: ComponentGroupEnum): T?","description":"net.corda.core.internal.getGroup","location":"docs/net.corda.core.internal/get-group.html","searchKeys":["getGroup","fun <T : ComponentGroup> List<T>.getGroup(type: ComponentGroupEnum): T?","net.corda.core.internal.getGroup"]},{"name":"fun <T : ComponentGroup> List<T>.getRequiredGroup(type: ComponentGroupEnum): T","description":"net.corda.core.internal.getRequiredGroup","location":"docs/net.corda.core.internal/get-required-group.html","searchKeys":["getRequiredGroup","fun <T : ComponentGroup> List<T>.getRequiredGroup(type: ComponentGroupEnum): T","net.corda.core.internal.getRequiredGroup"]},{"name":"fun <T : ContractState, K : Any> groupStates(ofType: Class<T>, selector: (T) -> K): List<LedgerTransaction.InOutGroup<T, K>>","description":"net.corda.core.transactions.LedgerTransaction.groupStates","location":"docs/net.corda.core.transactions/-ledger-transaction/group-states.html","searchKeys":["groupStates","fun <T : ContractState, K : Any> groupStates(ofType: Class<T>, selector: (T) -> K): List<LedgerTransaction.InOutGroup<T, K>>","net.corda.core.transactions.LedgerTransaction.groupStates"]},{"name":"fun <T : ContractState> containsType(clazz: Class<T>, status: Vault.StateStatus): Boolean","description":"net.corda.core.node.services.Vault.Update.containsType","location":"docs/net.corda.core.node.services/-vault/-update/contains-type.html","searchKeys":["containsType","fun <T : ContractState> containsType(clazz: Class<T>, status: Vault.StateStatus): Boolean","net.corda.core.node.services.Vault.Update.containsType"]},{"name":"fun <T : ContractState> fillWithTestStates(txCount: Int = 1, statesPerTx: Int = 1, participants: List<AbstractParty> = emptyList(), constraint: AttachmentConstraint = AutomaticPlaceholderConstraint, includeMe: Boolean = true, services: ServiceHub = this.services, genOutputState: (participantsToUse: List<AbstractParty>, txIndex: Int, stateIndex: Int) -> T): Vault<T>","description":"net.corda.testing.internal.vault.VaultFiller.fillWithTestStates","location":"docs/net.corda.testing.internal.vault/-vault-filler/fill-with-test-states.html","searchKeys":["fillWithTestStates","fun <T : ContractState> fillWithTestStates(txCount: Int = 1, statesPerTx: Int = 1, participants: List<AbstractParty> = emptyList(), constraint: AttachmentConstraint = AutomaticPlaceholderConstraint, includeMe: Boolean = true, services: ServiceHub = this.services, genOutputState: (participantsToUse: List<AbstractParty>, txIndex: Int, stateIndex: Int) -> T): Vault<T>","net.corda.testing.internal.vault.VaultFiller.fillWithTestStates"]},{"name":"fun <T : ContractState> filterInRefs(clazz: Class<T>, predicate: Predicate<T>): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.filterInRefs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-in-refs.html","searchKeys":["filterInRefs","fun <T : ContractState> filterInRefs(clazz: Class<T>, predicate: Predicate<T>): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.filterInRefs"]},{"name":"fun <T : ContractState> filterInputs(clazz: Class<T>, predicate: Predicate<T>): List<T>","description":"net.corda.core.transactions.LedgerTransaction.filterInputs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-inputs.html","searchKeys":["filterInputs","fun <T : ContractState> filterInputs(clazz: Class<T>, predicate: Predicate<T>): List<T>","net.corda.core.transactions.LedgerTransaction.filterInputs"]},{"name":"fun <T : ContractState> filterOutRefs(clazz: Class<T>, predicate: Predicate<T>): List<StateAndRef<T>>","description":"net.corda.core.transactions.BaseTransaction.filterOutRefs","location":"docs/net.corda.core.transactions/-base-transaction/filter-out-refs.html","searchKeys":["filterOutRefs","fun <T : ContractState> filterOutRefs(clazz: Class<T>, predicate: Predicate<T>): List<StateAndRef<T>>","net.corda.core.transactions.BaseTransaction.filterOutRefs"]},{"name":"fun <T : ContractState> filterOutputs(clazz: Class<T>, predicate: Predicate<T>): List<T>","description":"net.corda.core.transactions.BaseTransaction.filterOutputs","location":"docs/net.corda.core.transactions/-base-transaction/filter-outputs.html","searchKeys":["filterOutputs","fun <T : ContractState> filterOutputs(clazz: Class<T>, predicate: Predicate<T>): List<T>","net.corda.core.transactions.BaseTransaction.filterOutputs"]},{"name":"fun <T : ContractState> filterReferenceInputRefs(clazz: Class<T>, predicate: Predicate<T>): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.filterReferenceInputRefs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-reference-input-refs.html","searchKeys":["filterReferenceInputRefs","fun <T : ContractState> filterReferenceInputRefs(clazz: Class<T>, predicate: Predicate<T>): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.filterReferenceInputRefs"]},{"name":"fun <T : ContractState> filterReferenceInputs(clazz: Class<T>, predicate: Predicate<T>): List<T>","description":"net.corda.core.transactions.LedgerTransaction.filterReferenceInputs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-reference-inputs.html","searchKeys":["filterReferenceInputs","fun <T : ContractState> filterReferenceInputs(clazz: Class<T>, predicate: Predicate<T>): List<T>","net.corda.core.transactions.LedgerTransaction.filterReferenceInputs"]},{"name":"fun <T : ContractState> findInRef(clazz: Class<T>, predicate: Predicate<T>): StateAndRef<T>","description":"net.corda.core.transactions.LedgerTransaction.findInRef","location":"docs/net.corda.core.transactions/-ledger-transaction/find-in-ref.html","searchKeys":["findInRef","fun <T : ContractState> findInRef(clazz: Class<T>, predicate: Predicate<T>): StateAndRef<T>","net.corda.core.transactions.LedgerTransaction.findInRef"]},{"name":"fun <T : ContractState> findInput(clazz: Class<T>, predicate: Predicate<T>): T","description":"net.corda.core.transactions.LedgerTransaction.findInput","location":"docs/net.corda.core.transactions/-ledger-transaction/find-input.html","searchKeys":["findInput","fun <T : ContractState> findInput(clazz: Class<T>, predicate: Predicate<T>): T","net.corda.core.transactions.LedgerTransaction.findInput"]},{"name":"fun <T : ContractState> findOutRef(clazz: Class<T>, predicate: Predicate<T>): StateAndRef<T>","description":"net.corda.core.transactions.BaseTransaction.findOutRef","location":"docs/net.corda.core.transactions/-base-transaction/find-out-ref.html","searchKeys":["findOutRef","fun <T : ContractState> findOutRef(clazz: Class<T>, predicate: Predicate<T>): StateAndRef<T>","net.corda.core.transactions.BaseTransaction.findOutRef"]},{"name":"fun <T : ContractState> findOutput(clazz: Class<T>, predicate: Predicate<T>): T","description":"net.corda.core.transactions.BaseTransaction.findOutput","location":"docs/net.corda.core.transactions/-base-transaction/find-output.html","searchKeys":["findOutput","fun <T : ContractState> findOutput(clazz: Class<T>, predicate: Predicate<T>): T","net.corda.core.transactions.BaseTransaction.findOutput"]},{"name":"fun <T : ContractState> findReference(clazz: Class<T>, predicate: Predicate<T>): T","description":"net.corda.core.transactions.LedgerTransaction.findReference","location":"docs/net.corda.core.transactions/-ledger-transaction/find-reference.html","searchKeys":["findReference","fun <T : ContractState> findReference(clazz: Class<T>, predicate: Predicate<T>): T","net.corda.core.transactions.LedgerTransaction.findReference"]},{"name":"fun <T : ContractState> findReferenceInputRef(clazz: Class<T>, predicate: Predicate<T>): StateAndRef<T>","description":"net.corda.core.transactions.LedgerTransaction.findReferenceInputRef","location":"docs/net.corda.core.transactions/-ledger-transaction/find-reference-input-ref.html","searchKeys":["findReferenceInputRef","fun <T : ContractState> findReferenceInputRef(clazz: Class<T>, predicate: Predicate<T>): StateAndRef<T>","net.corda.core.transactions.LedgerTransaction.findReferenceInputRef"]},{"name":"fun <T : ContractState> inRef(index: Int): StateAndRef<T>","description":"net.corda.core.transactions.LedgerTransaction.inRef","location":"docs/net.corda.core.transactions/-ledger-transaction/in-ref.html","searchKeys":["inRef","fun <T : ContractState> inRef(index: Int): StateAndRef<T>","net.corda.core.transactions.LedgerTransaction.inRef"]},{"name":"fun <T : ContractState> inRefsOfType(clazz: Class<T>): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.inRefsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/in-refs-of-type.html","searchKeys":["inRefsOfType","fun <T : ContractState> inRefsOfType(clazz: Class<T>): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.inRefsOfType"]},{"name":"fun <T : ContractState> inputsOfType(clazz: Class<T>): List<T>","description":"net.corda.core.transactions.LedgerTransaction.inputsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/inputs-of-type.html","searchKeys":["inputsOfType","fun <T : ContractState> inputsOfType(clazz: Class<T>): List<T>","net.corda.core.transactions.LedgerTransaction.inputsOfType"]},{"name":"fun <T : ContractState> outRef(index: Int): StateAndRef<T>","description":"net.corda.core.transactions.BaseTransaction.outRef","location":"docs/net.corda.core.transactions/-base-transaction/out-ref.html","searchKeys":["outRef","fun <T : ContractState> outRef(index: Int): StateAndRef<T>","net.corda.core.transactions.BaseTransaction.outRef"]},{"name":"fun <T : ContractState> outRef(state: ContractState): StateAndRef<T>","description":"net.corda.core.transactions.BaseTransaction.outRef","location":"docs/net.corda.core.transactions/-base-transaction/out-ref.html","searchKeys":["outRef","fun <T : ContractState> outRef(state: ContractState): StateAndRef<T>","net.corda.core.transactions.BaseTransaction.outRef"]},{"name":"fun <T : ContractState> outRefsOfType(clazz: Class<T>): List<StateAndRef<T>>","description":"net.corda.core.transactions.BaseTransaction.outRefsOfType","location":"docs/net.corda.core.transactions/-base-transaction/out-refs-of-type.html","searchKeys":["outRefsOfType","fun <T : ContractState> outRefsOfType(clazz: Class<T>): List<StateAndRef<T>>","net.corda.core.transactions.BaseTransaction.outRefsOfType"]},{"name":"fun <T : ContractState> outputsOfType(clazz: Class<T>): List<T>","description":"net.corda.core.transactions.BaseTransaction.outputsOfType","location":"docs/net.corda.core.transactions/-base-transaction/outputs-of-type.html","searchKeys":["outputsOfType","fun <T : ContractState> outputsOfType(clazz: Class<T>): List<T>","net.corda.core.transactions.BaseTransaction.outputsOfType"]},{"name":"fun <T : ContractState> referenceInputRefsOfType(clazz: Class<T>): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.referenceInputRefsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/reference-input-refs-of-type.html","searchKeys":["referenceInputRefsOfType","fun <T : ContractState> referenceInputRefsOfType(clazz: Class<T>): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.referenceInputRefsOfType"]},{"name":"fun <T : ContractState> referenceInputsOfType(clazz: Class<T>): List<T>","description":"net.corda.core.transactions.LedgerTransaction.referenceInputsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/reference-inputs-of-type.html","searchKeys":["referenceInputsOfType","fun <T : ContractState> referenceInputsOfType(clazz: Class<T>): List<T>","net.corda.core.transactions.LedgerTransaction.referenceInputsOfType"]},{"name":"fun <T : FlowLogic<*>> TestStartedNode.registerCoreFlowFactory(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<T>, flowFactory: (FlowSession) -> T, track: Boolean): <Error class: unknown class><T>","description":"net.corda.testing.flows.registerCoreFlowFactory","location":"docs/net.corda.testing.flows/register-core-flow-factory.html","searchKeys":["registerCoreFlowFactory","fun <T : FlowLogic<*>> TestStartedNode.registerCoreFlowFactory(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<T>, flowFactory: (FlowSession) -> T, track: Boolean): <Error class: unknown class><T>","net.corda.testing.flows.registerCoreFlowFactory"]},{"name":"fun <T : FlowLogic<*>> registerInitiatedFlowFactory(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<T>, factory: <Error class: unknown class><T>, track: Boolean): <Error class: unknown class><T>","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.registerInitiatedFlowFactory","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/register-initiated-flow-factory.html","searchKeys":["registerInitiatedFlowFactory","fun <T : FlowLogic<*>> registerInitiatedFlowFactory(initiatingFlowClass: Class<out FlowLogic<*>>, initiatedFlowClass: Class<T>, factory: <Error class: unknown class><T>, track: Boolean): <Error class: unknown class><T>","net.corda.testing.node.internal.InternalMockNetwork.MockNode.registerInitiatedFlowFactory"]},{"name":"fun <T : SerializeAsToken> createMockCordaService(serviceHub: MockServices, serviceConstructor: (AppServiceHub) -> T): T","description":"net.corda.testing.node.createMockCordaService","location":"docs/net.corda.testing.node/create-mock-corda-service.html","searchKeys":["createMockCordaService","fun <T : SerializeAsToken> createMockCordaService(serviceHub: MockServices, serviceConstructor: (AppServiceHub) -> T): T","net.corda.testing.node.createMockCordaService"]},{"name":"fun <T : SerializeAsToken> installCordaService(serviceClass: Class<T>): T","description":"net.corda.testing.node.UnstartedMockNode.installCordaService","location":"docs/net.corda.testing.node/-unstarted-mock-node/install-corda-service.html","searchKeys":["installCordaService","fun <T : SerializeAsToken> installCordaService(serviceClass: Class<T>): T","net.corda.testing.node.UnstartedMockNode.installCordaService"]},{"name":"fun <T : SerializeAsToken> singletonSerializationToken(toBeTokenized: Class<T>): SingletonSerializationToken","description":"net.corda.core.serialization.SingletonSerializationToken.Companion.singletonSerializationToken","location":"docs/net.corda.core.serialization/-singleton-serialization-token/-companion/singleton-serialization-token.html","searchKeys":["singletonSerializationToken","fun <T : SerializeAsToken> singletonSerializationToken(toBeTokenized: Class<T>): SingletonSerializationToken","net.corda.core.serialization.SingletonSerializationToken.Companion.singletonSerializationToken"]},{"name":"fun <T, R : Any> FlowLogic<T>.executeAsync(operation: FlowAsyncOperation<R>, maySkipCheckpoint: Boolean = false): R","description":"net.corda.core.internal.executeAsync","location":"docs/net.corda.core.internal/execute-async.html","searchKeys":["executeAsync","fun <T, R : Any> FlowLogic<T>.executeAsync(operation: FlowAsyncOperation<R>, maySkipCheckpoint: Boolean = false): R","net.corda.core.internal.executeAsync"]},{"name":"fun <T, U : T> uncheckedCast(obj: T): U","description":"net.corda.core.internal.uncheckedCast","location":"docs/net.corda.core.internal/unchecked-cast.html","searchKeys":["uncheckedCast","fun <T, U : T> uncheckedCast(obj: T): U","net.corda.core.internal.uncheckedCast"]},{"name":"fun <T, U> List<T>.lazyMapped(transform: (T, Int) -> U): List<U>","description":"net.corda.core.internal.lazyMapped","location":"docs/net.corda.core.internal/lazy-mapped.html","searchKeys":["lazyMapped","fun <T, U> List<T>.lazyMapped(transform: (T, Int) -> U): List<U>","net.corda.core.internal.lazyMapped"]},{"name":"fun <T> <Error class: unknown class>.logElapsedTime(label: String, body: () -> T): T","description":"net.corda.core.internal.logElapsedTime","location":"docs/net.corda.core.internal/log-elapsed-time.html","searchKeys":["logElapsedTime","fun <T> <Error class: unknown class>.logElapsedTime(label: String, body: () -> T): T","net.corda.core.internal.logElapsedTime"]},{"name":"fun <T> <Error class: unknown class>.startFlow(logic: FlowLogic<T>): FlowStateMachineHandle<T>","description":"net.corda.testing.node.internal.startFlow","location":"docs/net.corda.testing.node.internal/start-flow.html","searchKeys":["startFlow","fun <T> <Error class: unknown class>.startFlow(logic: FlowLogic<T>): FlowStateMachineHandle<T>","net.corda.testing.node.internal.startFlow"]},{"name":"fun <T> <Error class: unknown class>.startFlowWithClientId(clientId: String, logic: FlowLogic<T>): FlowStateMachineHandle<T>","description":"net.corda.testing.node.internal.startFlowWithClientId","location":"docs/net.corda.testing.node.internal/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","fun <T> <Error class: unknown class>.startFlowWithClientId(clientId: String, logic: FlowLogic<T>): FlowStateMachineHandle<T>","net.corda.testing.node.internal.startFlowWithClientId"]},{"name":"fun <T> <Error class: unknown class><T>.bufferUntilSubscribed(): <Error class: unknown class><T>","description":"net.corda.core.internal.bufferUntilSubscribed","location":"docs/net.corda.core.internal/buffer-until-subscribed.html","searchKeys":["bufferUntilSubscribed","fun <T> <Error class: unknown class><T>.bufferUntilSubscribed(): <Error class: unknown class><T>","net.corda.core.internal.bufferUntilSubscribed"]},{"name":"fun <T> <Error class: unknown class><T>.continueOnError(): <Error class: unknown class><T>","description":"net.corda.core.observable.continueOnError","location":"docs/net.corda.core.observable/continue-on-error.html","searchKeys":["continueOnError","fun <T> <Error class: unknown class><T>.continueOnError(): <Error class: unknown class><T>","net.corda.core.observable.continueOnError"]},{"name":"fun <T> <Error class: unknown class><T>.notUsed()","description":"net.corda.client.rpc.notUsed","location":"docs/net.corda.client.rpc/not-used.html","searchKeys":["notUsed","fun <T> <Error class: unknown class><T>.notUsed()","net.corda.client.rpc.notUsed"]},{"name":"fun <T> <Error class: unknown class><T>.tee(vararg teeTo: <Error class: unknown class><T>): <Error class: unknown class><T>","description":"net.corda.core.internal.tee","location":"docs/net.corda.core.internal/tee.html","searchKeys":["tee","fun <T> <Error class: unknown class><T>.tee(vararg teeTo: <Error class: unknown class><T>): <Error class: unknown class><T>","net.corda.core.internal.tee"]},{"name":"fun <T> <Error class: unknown class><T>.toFuture(): CordaFuture<T>","description":"net.corda.core.toFuture","location":"docs/net.corda.core/to-future.html","searchKeys":["toFuture","fun <T> <Error class: unknown class><T>.toFuture(): CordaFuture<T>","net.corda.core.toFuture"]},{"name":"fun <T> Any.declaredField(clazz: Class<*>, name: String): DeclaredField<T>","description":"net.corda.core.internal.declaredField","location":"docs/net.corda.core.internal/declared-field.html","searchKeys":["declaredField","fun <T> Any.declaredField(clazz: Class<*>, name: String): DeclaredField<T>","net.corda.core.internal.declaredField"]},{"name":"fun <T> Any.declaredField(clazz: KClass<*>, name: String): DeclaredField<T>","description":"net.corda.core.internal.declaredField","location":"docs/net.corda.core.internal/declared-field.html","searchKeys":["declaredField","fun <T> Any.declaredField(clazz: KClass<*>, name: String): DeclaredField<T>","net.corda.core.internal.declaredField"]},{"name":"fun <T> Any.declaredField(name: String): DeclaredField<T>","description":"net.corda.core.internal.declaredField","location":"docs/net.corda.core.internal/declared-field.html","searchKeys":["declaredField","fun <T> Any.declaredField(name: String): DeclaredField<T>","net.corda.core.internal.declaredField"]},{"name":"fun <T> Class<*>.staticField(name: String): DeclaredField<T>","description":"net.corda.core.internal.staticField","location":"docs/net.corda.core.internal/static-field.html","searchKeys":["staticField","fun <T> Class<*>.staticField(name: String): DeclaredField<T>","net.corda.core.internal.staticField"]},{"name":"fun <T> Class<T>.castIfPossible(obj: Any): T?","description":"net.corda.core.internal.castIfPossible","location":"docs/net.corda.core.internal/cast-if-possible.html","searchKeys":["castIfPossible","fun <T> Class<T>.castIfPossible(obj: Any): T?","net.corda.core.internal.castIfPossible"]},{"name":"fun <T> Collection<T>.toNonEmptySet(): NonEmptySet<T>","description":"net.corda.core.utilities.toNonEmptySet","location":"docs/net.corda.core.utilities/to-non-empty-set.html","searchKeys":["toNonEmptySet","fun <T> Collection<T>.toNonEmptySet(): NonEmptySet<T>","net.corda.core.utilities.toNonEmptySet"]},{"name":"fun <T> KClass<*>.staticField(name: String): DeclaredField<T>","description":"net.corda.core.internal.staticField","location":"docs/net.corda.core.internal/static-field.html","searchKeys":["staticField","fun <T> KClass<*>.staticField(name: String): DeclaredField<T>","net.corda.core.internal.staticField"]},{"name":"fun <T> List<T>.eagerDeserialise(onError: (TransactionDeserialisationException, Int) -> T? = { ex, _ -> throw ex })","description":"net.corda.core.internal.eagerDeserialise","location":"docs/net.corda.core.internal/eager-deserialise.html","searchKeys":["eagerDeserialise","fun <T> List<T>.eagerDeserialise(onError: (TransactionDeserialisationException, Int) -> T? = { ex, _ -> throw ex })","net.corda.core.internal.eagerDeserialise"]},{"name":"fun <T> List<T>.indexOfOrThrow(item: T): Int","description":"net.corda.core.internal.indexOfOrThrow","location":"docs/net.corda.core.internal/index-of-or-throw.html","searchKeys":["indexOfOrThrow","fun <T> List<T>.indexOfOrThrow(item: T): Int","net.corda.core.internal.indexOfOrThrow"]},{"name":"fun <T> List<T>.noneOrSingle(): T?","description":"net.corda.core.internal.noneOrSingle","location":"docs/net.corda.core.internal/none-or-single.html","searchKeys":["noneOrSingle","fun <T> List<T>.noneOrSingle(): T?","net.corda.core.internal.noneOrSingle"]},{"name":"fun <T> Stream<T>.toSet(): Set<T>","description":"net.corda.core.internal.toSet","location":"docs/net.corda.core.internal/to-set.html","searchKeys":["toSet","fun <T> Stream<T>.toSet(): Set<T>","net.corda.core.internal.toSet"]},{"name":"fun <T> asCurrent(block: SerializationFactory.() -> T): T","description":"net.corda.core.serialization.SerializationFactory.asCurrent","location":"docs/net.corda.core.serialization/-serialization-factory/as-current.html","searchKeys":["asCurrent","fun <T> asCurrent(block: SerializationFactory.() -> T): T","net.corda.core.serialization.SerializationFactory.asCurrent"]},{"name":"fun <T> copyOf(elements: Collection<T>): NonEmptySet<T>","description":"net.corda.core.utilities.NonEmptySet.Companion.copyOf","location":"docs/net.corda.core.utilities/-non-empty-set/-companion/copy-of.html","searchKeys":["copyOf","fun <T> copyOf(elements: Collection<T>): NonEmptySet<T>","net.corda.core.utilities.NonEmptySet.Companion.copyOf"]},{"name":"fun <T> excludeHostNode(serviceHub: ServiceHub, map: Map<Party, T>): Map<Party, T>","description":"net.corda.core.identity.excludeHostNode","location":"docs/net.corda.core.identity/exclude-host-node.html","searchKeys":["excludeHostNode","fun <T> excludeHostNode(serviceHub: ServiceHub, map: Map<Party, T>): Map<Party, T>","net.corda.core.identity.excludeHostNode"]},{"name":"fun <T> excludeNotary(map: Map<Party, T>, stx: SignedTransaction): Map<Party, T>","description":"net.corda.core.identity.excludeNotary","location":"docs/net.corda.core.identity/exclude-notary.html","searchKeys":["excludeNotary","fun <T> excludeNotary(map: Map<Party, T>, stx: SignedTransaction): Map<Party, T>","net.corda.core.identity.excludeNotary"]},{"name":"fun <T> executeWithThreadContextClassLoader(classloader: ClassLoader, fn: () -> T): T","description":"net.corda.core.internal.executeWithThreadContextClassLoader","location":"docs/net.corda.core.internal/execute-with-thread-context-class-loader.html","searchKeys":["executeWithThreadContextClassLoader","fun <T> executeWithThreadContextClassLoader(classloader: ClassLoader, fn: () -> T): T","net.corda.core.internal.executeWithThreadContextClassLoader"]},{"name":"fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","description":"net.corda.client.rpc.internal.RPCClientTelemetry.getTelemetryHandle","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/get-telemetry-handle.html","searchKeys":["getTelemetryHandle","fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","net.corda.client.rpc.internal.RPCClientTelemetry.getTelemetryHandle"]},{"name":"fun <T> loadClassOfType(type: Class<T>, className: String, initialize: Boolean = true, classLoader: ClassLoader? = null): Class<out T>","description":"net.corda.core.internal.loadClassOfType","location":"docs/net.corda.core.internal/load-class-of-type.html","searchKeys":["loadClassOfType","fun <T> loadClassOfType(type: Class<T>, className: String, initialize: Boolean = true, classLoader: ClassLoader? = null): Class<out T>","net.corda.core.internal.loadClassOfType"]},{"name":"fun <T> logElapsedTime(label: String, logger: <Error class: unknown class>? = null, body: () -> T): T","description":"net.corda.core.internal.logElapsedTime","location":"docs/net.corda.core.internal/log-elapsed-time.html","searchKeys":["logElapsedTime","fun <T> logElapsedTime(label: String, logger: <Error class: unknown class>? = null, body: () -> T): T","net.corda.core.internal.logElapsedTime"]},{"name":"fun <T> of(element: T): NonEmptySet<T>","description":"net.corda.core.utilities.NonEmptySet.Companion.of","location":"docs/net.corda.core.utilities/-non-empty-set/-companion/of.html","searchKeys":["of","fun <T> of(element: T): NonEmptySet<T>","net.corda.core.utilities.NonEmptySet.Companion.of"]},{"name":"fun <T> of(first: T, second: T, vararg rest: T): NonEmptySet<T>","description":"net.corda.core.utilities.NonEmptySet.Companion.of","location":"docs/net.corda.core.utilities/-non-empty-set/-companion/of.html","searchKeys":["of","fun <T> of(first: T, second: T, vararg rest: T): NonEmptySet<T>","net.corda.core.utilities.NonEmptySet.Companion.of"]},{"name":"fun <T> startFlow(logic: FlowLogic<T>): CordaFuture<T>","description":"net.corda.testing.node.StartedMockNode.startFlow","location":"docs/net.corda.testing.node/-started-mock-node/start-flow.html","searchKeys":["startFlow","fun <T> startFlow(logic: FlowLogic<T>): CordaFuture<T>","net.corda.testing.node.StartedMockNode.startFlow"]},{"name":"fun <T> transaction(statement: () -> T): T","description":"net.corda.testing.node.StartedMockNode.transaction","location":"docs/net.corda.testing.node/-started-mock-node/transaction.html","searchKeys":["transaction","fun <T> transaction(statement: () -> T): T","net.corda.testing.node.StartedMockNode.transaction"]},{"name":"fun <T> transform(transformer: (List<ComponentGroup>, List<SerializedStateAndRef>, List<SerializedStateAndRef>) -> T): T","description":"net.corda.core.transactions.LedgerTransaction.transform","location":"docs/net.corda.core.transactions/-ledger-transaction/transform.html","searchKeys":["transform","fun <T> transform(transformer: (List<ComponentGroup>, List<SerializedStateAndRef>, List<SerializedStateAndRef>) -> T): T","net.corda.core.transactions.LedgerTransaction.transform"]},{"name":"fun <T> transient(initializer: () -> T): PropertyDelegate<T>","description":"net.corda.core.utilities.transient","location":"docs/net.corda.core.utilities/transient.html","searchKeys":["transient","fun <T> transient(initializer: () -> T): PropertyDelegate<T>","net.corda.core.utilities.transient"]},{"name":"fun <T> withAttachmentsClassLoaderContext(attachments: List<Attachment>, params: NetworkParameters, txId: SecureHash, isAttachmentTrusted: (Attachment) -> Boolean, parent: ClassLoader = ClassLoader.getSystemClassLoader(), attachmentsClassLoaderCache: AttachmentsClassLoaderCache?, block: (SerializationContext) -> T): T","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderBuilder.withAttachmentsClassLoaderContext","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-builder/with-attachments-class-loader-context.html","searchKeys":["withAttachmentsClassLoaderContext","fun <T> withAttachmentsClassLoaderContext(attachments: List<Attachment>, params: NetworkParameters, txId: SecureHash, isAttachmentTrusted: (Attachment) -> Boolean, parent: ClassLoader = ClassLoader.getSystemClassLoader(), attachmentsClassLoaderCache: AttachmentsClassLoaderCache?, block: (SerializationContext) -> T): T","net.corda.core.serialization.internal.AttachmentsClassLoaderBuilder.withAttachmentsClassLoaderContext"]},{"name":"fun <T> withCurrentContext(context: SerializationContext?, block: () -> T): T","description":"net.corda.core.serialization.SerializationFactory.withCurrentContext","location":"docs/net.corda.core.serialization/-serialization-factory/with-current-context.html","searchKeys":["withCurrentContext","fun <T> withCurrentContext(context: SerializationContext?, block: () -> T): T","net.corda.core.serialization.SerializationFactory.withCurrentContext"]},{"name":"fun <V : Any> newInstance(value: V, entityType: String? = null, timestamp: Instant = now()): Id<V>","description":"net.corda.core.utilities.Id.Companion.newInstance","location":"docs/net.corda.core.utilities/-id/-companion/new-instance.html","searchKeys":["newInstance","fun <V : Any> newInstance(value: V, entityType: String? = null, timestamp: Instant = now()): Id<V>","net.corda.core.utilities.Id.Companion.newInstance"]},{"name":"fun <V, W, X> CordaFuture<out V>.thenMatch(success: (V) -> W, failure: (Throwable) -> X)","description":"net.corda.core.internal.concurrent.thenMatch","location":"docs/net.corda.core.internal.concurrent/then-match.html","searchKeys":["thenMatch","fun <V, W, X> CordaFuture<out V>.thenMatch(success: (V) -> W, failure: (Throwable) -> X)","net.corda.core.internal.concurrent.thenMatch"]},{"name":"fun <V, W> CordaFuture<out V>.flatMap(transform: (V) -> CordaFuture<out W>): CordaFuture<W>","description":"net.corda.core.internal.concurrent.flatMap","location":"docs/net.corda.core.internal.concurrent/flat-map.html","searchKeys":["flatMap","fun <V, W> CordaFuture<out V>.flatMap(transform: (V) -> CordaFuture<out W>): CordaFuture<W>","net.corda.core.internal.concurrent.flatMap"]},{"name":"fun <V, W> CordaFuture<out V>.map(transform: (V) -> W): CordaFuture<W>","description":"net.corda.core.internal.concurrent.map","location":"docs/net.corda.core.internal.concurrent/map.html","searchKeys":["map","fun <V, W> CordaFuture<out V>.map(transform: (V) -> W): CordaFuture<W>","net.corda.core.internal.concurrent.map"]},{"name":"fun <V, W> Future<V>.match(success: (V) -> W, failure: (Throwable) -> W): W","description":"net.corda.core.concurrent.match","location":"docs/net.corda.core.concurrent/match.html","searchKeys":["match","fun <V, W> Future<V>.match(success: (V) -> W, failure: (Throwable) -> W): W","net.corda.core.concurrent.match"]},{"name":"fun <V, W> firstOf(vararg futures: CordaFuture<out V>, handler: (CordaFuture<out V>) -> W): CordaFuture<W>","description":"net.corda.core.concurrent.firstOf","location":"docs/net.corda.core.concurrent/first-of.html","searchKeys":["firstOf","fun <V, W> firstOf(vararg futures: CordaFuture<out V>, handler: (CordaFuture<out V>) -> W): CordaFuture<W>","net.corda.core.concurrent.firstOf"]},{"name":"fun <V> Collection<CordaFuture<out V>>.transpose(): CordaFuture<List<V>>","description":"net.corda.core.internal.concurrent.transpose","location":"docs/net.corda.core.internal.concurrent/transpose.html","searchKeys":["transpose","fun <V> Collection<CordaFuture<out V>>.transpose(): CordaFuture<List<V>>","net.corda.core.internal.concurrent.transpose"]},{"name":"fun <V> CompletableFuture<V>.asCordaFuture(): CordaFuture<V>","description":"net.corda.core.internal.concurrent.asCordaFuture","location":"docs/net.corda.core.internal.concurrent/as-corda-future.html","searchKeys":["asCordaFuture","fun <V> CompletableFuture<V>.asCordaFuture(): CordaFuture<V>","net.corda.core.internal.concurrent.asCordaFuture"]},{"name":"fun <V> Executor.fork(block: () -> V): CordaFuture<V>","description":"net.corda.core.internal.concurrent.fork","location":"docs/net.corda.core.internal.concurrent/fork.html","searchKeys":["fork","fun <V> Executor.fork(block: () -> V): CordaFuture<V>","net.corda.core.internal.concurrent.fork"]},{"name":"fun <V> Future<V>.get(timeout: Duration? = null): V","description":"net.corda.core.internal.concurrent.get","location":"docs/net.corda.core.internal.concurrent/get.html","searchKeys":["get","fun <V> Future<V>.get(timeout: Duration? = null): V","net.corda.core.internal.concurrent.get"]},{"name":"fun <V> Future<V>.getOrThrow(timeout: Duration? = null): V","description":"net.corda.core.utilities.getOrThrow","location":"docs/net.corda.core.utilities/get-or-throw.html","searchKeys":["getOrThrow","fun <V> Future<V>.getOrThrow(timeout: Duration? = null): V","net.corda.core.utilities.getOrThrow"]},{"name":"fun <V> doneFuture(value: V): CordaFuture<V>","description":"net.corda.core.internal.concurrent.doneFuture","location":"docs/net.corda.core.internal.concurrent/done-future.html","searchKeys":["doneFuture","fun <V> doneFuture(value: V): CordaFuture<V>","net.corda.core.internal.concurrent.doneFuture"]},{"name":"fun <V> openFuture(): OpenFuture<V>","description":"net.corda.core.internal.concurrent.openFuture","location":"docs/net.corda.core.internal.concurrent/open-future.html","searchKeys":["openFuture","fun <V> openFuture(): OpenFuture<V>","net.corda.core.internal.concurrent.openFuture"]},{"name":"fun <W> thenImpl(log: <Error class: unknown class>, callback: (CordaFuture<V>) -> W)","description":"net.corda.core.internal.concurrent.CordaFutureImpl.thenImpl","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/then-impl.html","searchKeys":["thenImpl","fun <W> thenImpl(log: <Error class: unknown class>, callback: (CordaFuture<V>) -> W)","net.corda.core.internal.concurrent.CordaFutureImpl.thenImpl"]},{"name":"fun Any.contextLogger(): <Error class: unknown class>","description":"net.corda.core.utilities.contextLogger","location":"docs/net.corda.core.utilities/context-logger.html","searchKeys":["contextLogger","fun Any.contextLogger(): <Error class: unknown class>","net.corda.core.utilities.contextLogger"]},{"name":"fun Any.enclosedCordapp(): CustomCordapp","description":"net.corda.testing.node.internal.enclosedCordapp","location":"docs/net.corda.testing.node.internal/enclosed-cordapp.html","searchKeys":["enclosedCordapp","fun Any.enclosedCordapp(): CustomCordapp","net.corda.testing.node.internal.enclosedCordapp"]},{"name":"fun Attachment.isUploaderTrusted(): Boolean","description":"net.corda.core.internal.isUploaderTrusted","location":"docs/net.corda.core.internal/is-uploader-trusted.html","searchKeys":["isUploaderTrusted","fun Attachment.isUploaderTrusted(): Boolean","net.corda.core.internal.isUploaderTrusted"]},{"name":"fun AttachmentConstraint.canBeTransitionedFrom(input: AttachmentConstraint, attachment: ContractAttachment): Boolean","description":"net.corda.core.internal.canBeTransitionedFrom","location":"docs/net.corda.core.internal/can-be-transitioned-from.html","searchKeys":["canBeTransitionedFrom","fun AttachmentConstraint.canBeTransitionedFrom(input: AttachmentConstraint, attachment: ContractAttachment): Boolean","net.corda.core.internal.canBeTransitionedFrom"]},{"name":"fun BigInteger.modP(): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.modP","location":"docs/net.corda.core.crypto.internal/-curve25519/mod-p.html","searchKeys":["modP","fun BigInteger.modP(): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.modP"]},{"name":"fun ByteArray.hashAs(algorithm: String): SecureHash","description":"net.corda.core.crypto.hashAs","location":"docs/net.corda.core.crypto/hash-as.html","searchKeys":["hashAs","fun ByteArray.hashAs(algorithm: String): SecureHash","net.corda.core.crypto.hashAs"]},{"name":"fun ByteArray.sequence(offset: Int = 0, size: Int = this.size): ByteSequence","description":"net.corda.core.utilities.sequence","location":"docs/net.corda.core.utilities/sequence.html","searchKeys":["sequence","fun ByteArray.sequence(offset: Int = 0, size: Int = this.size): ByteSequence","net.corda.core.utilities.sequence"]},{"name":"fun ByteArray.sha256(): SecureHash.SHA256","description":"net.corda.core.crypto.sha256","location":"docs/net.corda.core.crypto/sha256.html","searchKeys":["sha256","fun ByteArray.sha256(): SecureHash.SHA256","net.corda.core.crypto.sha256"]},{"name":"fun ByteArray.toBase58(): String","description":"net.corda.core.utilities.toBase58","location":"docs/net.corda.core.utilities/to-base58.html","searchKeys":["toBase58","fun ByteArray.toBase58(): String","net.corda.core.utilities.toBase58"]},{"name":"fun ByteArray.toBase64(): String","description":"net.corda.core.utilities.toBase64","location":"docs/net.corda.core.utilities/to-base64.html","searchKeys":["toBase64","fun ByteArray.toBase64(): String","net.corda.core.utilities.toBase64"]},{"name":"fun ByteArray.toHex(): String","description":"net.corda.core.utilities.toHex","location":"docs/net.corda.core.utilities/to-hex.html","searchKeys":["toHex","fun ByteArray.toHex(): String","net.corda.core.utilities.toHex"]},{"name":"fun ByteArray.toHexString(): String","description":"net.corda.core.utilities.toHexString","location":"docs/net.corda.core.utilities/to-hex-string.html","searchKeys":["toHexString","fun ByteArray.toHexString(): String","net.corda.core.utilities.toHexString"]},{"name":"fun ByteArrayOutputStream.toInputStreamAndHash(): InputStreamAndHash","description":"net.corda.core.internal.toInputStreamAndHash","location":"docs/net.corda.core.internal/to-input-stream-and-hash.html","searchKeys":["toInputStreamAndHash","fun ByteArrayOutputStream.toInputStreamAndHash(): InputStreamAndHash","net.corda.core.internal.toInputStreamAndHash"]},{"name":"fun ByteBuffer.copyBytes(): ByteArray","description":"net.corda.core.internal.copyBytes","location":"docs/net.corda.core.internal/copy-bytes.html","searchKeys":["copyBytes","fun ByteBuffer.copyBytes(): ByteArray","net.corda.core.internal.copyBytes"]},{"name":"fun CertPath.validate(trustAnchors: Set<TrustAnchor>, checkRevocation: Boolean = false): PKIXCertPathValidatorResult","description":"net.corda.core.internal.validate","location":"docs/net.corda.core.internal/validate.html","searchKeys":["validate","fun CertPath.validate(trustAnchors: Set<TrustAnchor>, checkRevocation: Boolean = false): PKIXCertPathValidatorResult","net.corda.core.internal.validate"]},{"name":"fun Class<out FlowLogic<*>>.isIdempotentFlow(): Boolean","description":"net.corda.core.internal.isIdempotentFlow","location":"docs/net.corda.core.internal/is-idempotent-flow.html","searchKeys":["isIdempotentFlow","fun Class<out FlowLogic<*>>.isIdempotentFlow(): Boolean","net.corda.core.internal.isIdempotentFlow"]},{"name":"fun Collection<*>.equivalent(other: Collection<*>): Boolean","description":"net.corda.core.internal.equivalent","location":"docs/net.corda.core.internal/equivalent.html","searchKeys":["equivalent","fun Collection<*>.equivalent(other: Collection<*>): Boolean","net.corda.core.internal.equivalent"]},{"name":"fun ContractClassName.warnContractWithoutConstraintPropagation(classLoader: ClassLoader? = null)","description":"net.corda.core.internal.warnContractWithoutConstraintPropagation","location":"docs/net.corda.core.internal/warn-contract-without-constraint-propagation.html","searchKeys":["warnContractWithoutConstraintPropagation","fun ContractClassName.warnContractWithoutConstraintPropagation(classLoader: ClassLoader? = null)","net.corda.core.internal.warnContractWithoutConstraintPropagation"]},{"name":"fun ContractState.hash(): SecureHash","description":"net.corda.core.contracts.hash","location":"docs/net.corda.core.contracts/hash.html","searchKeys":["hash","fun ContractState.hash(): SecureHash","net.corda.core.contracts.hash"]},{"name":"fun ContractState.hash(algorithm: String): SecureHash","description":"net.corda.core.contracts.hash","location":"docs/net.corda.core.contracts/hash.html","searchKeys":["hash","fun ContractState.hash(algorithm: String): SecureHash","net.corda.core.contracts.hash"]},{"name":"fun CordaFuture<*>.andForget(log: <Error class: unknown class>)","description":"net.corda.core.internal.concurrent.andForget","location":"docs/net.corda.core.internal.concurrent/and-forget.html","searchKeys":["andForget","fun CordaFuture<*>.andForget(log: <Error class: unknown class>)","net.corda.core.internal.concurrent.andForget"]},{"name":"fun CordaRPCClient.start(user: User): CordaRPCConnection","description":"net.corda.testing.node.internal.start","location":"docs/net.corda.testing.node.internal/start.html","searchKeys":["start","fun CordaRPCClient.start(user: User): CordaRPCConnection","net.corda.testing.node.internal.start"]},{"name":"fun CordaRPCOps.getCashBalance(currency: Currency): Amount<Currency>","description":"net.corda.finance.workflows.getCashBalance","location":"docs/net.corda.finance.workflows/get-cash-balance.html","searchKeys":["getCashBalance","fun CordaRPCOps.getCashBalance(currency: Currency): Amount<Currency>","net.corda.finance.workflows.getCashBalance"]},{"name":"fun CordaRPCOps.getCashBalances(): Map<Currency, Amount<Currency>>","description":"net.corda.finance.workflows.getCashBalances","location":"docs/net.corda.finance.workflows/get-cash-balances.html","searchKeys":["getCashBalances","fun CordaRPCOps.getCashBalances(): Map<Currency, Amount<Currency>>","net.corda.finance.workflows.getCashBalances"]},{"name":"fun CordaRPCOps.pendingFlowsCount(): DataFeed<Int, <Error class: unknown class><Int, Int>>","description":"net.corda.core.messaging.pendingFlowsCount","location":"docs/net.corda.core.messaging/pending-flows-count.html","searchKeys":["pendingFlowsCount","fun CordaRPCOps.pendingFlowsCount(): DataFeed<Int, <Error class: unknown class><Int, Int>>","net.corda.core.messaging.pendingFlowsCount"]},{"name":"fun CordaRPCOps.waitForShutdown(): <Error class: unknown class><Unit>","description":"net.corda.testing.node.internal.waitForShutdown","location":"docs/net.corda.testing.node.internal/wait-for-shutdown.html","searchKeys":["waitForShutdown","fun CordaRPCOps.waitForShutdown(): <Error class: unknown class><Unit>","net.corda.testing.node.internal.waitForShutdown"]},{"name":"fun CordaX500Name.toX500Name(): <Error class: unknown class>","description":"net.corda.core.internal.toX500Name","location":"docs/net.corda.core.internal/to-x500-name.html","searchKeys":["toX500Name","fun CordaX500Name.toX500Name(): <Error class: unknown class>","net.corda.core.internal.toX500Name"]},{"name":"fun DOLLARS(amount: Double): Amount<Currency>","description":"net.corda.finance.DOLLARS","location":"docs/net.corda.finance/-d-o-l-l-a-r-s.html","searchKeys":["DOLLARS","fun DOLLARS(amount: Double): Amount<Currency>","net.corda.finance.DOLLARS"]},{"name":"fun DOLLARS(amount: Int): Amount<Currency>","description":"net.corda.finance.DOLLARS","location":"docs/net.corda.finance/-d-o-l-l-a-r-s.html","searchKeys":["DOLLARS","fun DOLLARS(amount: Int): Amount<Currency>","net.corda.finance.DOLLARS"]},{"name":"fun DOLLARS(amount: Long): Amount<Currency>","description":"net.corda.finance.DOLLARS","location":"docs/net.corda.finance/-d-o-l-l-a-r-s.html","searchKeys":["DOLLARS","fun DOLLARS(amount: Long): Amount<Currency>","net.corda.finance.DOLLARS"]},{"name":"fun DigestService.randomHash(): SecureHash","description":"net.corda.core.crypto.randomHash","location":"docs/net.corda.core.crypto/random-hash.html","searchKeys":["randomHash","fun DigestService.randomHash(): SecureHash","net.corda.core.crypto.randomHash"]},{"name":"fun DriverDSL.assertUncompletedCheckpoints(name: CordaX500Name, expected: Long)","description":"net.corda.testing.node.internal.assertUncompletedCheckpoints","location":"docs/net.corda.testing.node.internal/assert-uncompleted-checkpoints.html","searchKeys":["assertUncompletedCheckpoints","fun DriverDSL.assertUncompletedCheckpoints(name: CordaX500Name, expected: Long)","net.corda.testing.node.internal.assertUncompletedCheckpoints"]},{"name":"fun DriverDSL.startNode(providedName: CordaX500Name, devMode: Boolean, parameters: NodeParameters = NodeParameters()): CordaFuture<NodeHandle>","description":"net.corda.testing.node.internal.startNode","location":"docs/net.corda.testing.node.internal/start-node.html","searchKeys":["startNode","fun DriverDSL.startNode(providedName: CordaX500Name, devMode: Boolean, parameters: NodeParameters = NodeParameters()): CordaFuture<NodeHandle>","net.corda.testing.node.internal.startNode"]},{"name":"fun ExecutorService.join()","description":"net.corda.core.internal.join","location":"docs/net.corda.core.internal/join.html","searchKeys":["join","fun ExecutorService.join()","net.corda.core.internal.join"]},{"name":"fun Field.count(): CriteriaExpression.AggregateFunctionExpression<Any, Any>","description":"net.corda.core.node.services.vault.Builder.count","location":"docs/net.corda.core.node.services.vault/-builder/count.html","searchKeys":["count","fun Field.count(): CriteriaExpression.AggregateFunctionExpression<Any, Any>","net.corda.core.node.services.vault.Builder.count"]},{"name":"fun Field.isNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","description":"net.corda.core.node.services.vault.Builder.isNull","location":"docs/net.corda.core.node.services.vault/-builder/is-null.html","searchKeys":["isNull","fun Field.isNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","net.corda.core.node.services.vault.Builder.isNull"]},{"name":"fun Field.like(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","description":"net.corda.core.node.services.vault.Builder.like","location":"docs/net.corda.core.node.services.vault/-builder/like.html","searchKeys":["like","fun Field.like(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","net.corda.core.node.services.vault.Builder.like"]},{"name":"fun Field.notLike(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","description":"net.corda.core.node.services.vault.Builder.notLike","location":"docs/net.corda.core.node.services.vault/-builder/not-like.html","searchKeys":["notLike","fun Field.notLike(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","net.corda.core.node.services.vault.Builder.notLike"]},{"name":"fun Field.notNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","description":"net.corda.core.node.services.vault.Builder.notNull","location":"docs/net.corda.core.node.services.vault/-builder/not-null.html","searchKeys":["notNull","fun Field.notNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","net.corda.core.node.services.vault.Builder.notNull"]},{"name":"fun FieldInfo.count(): CriteriaExpression.AggregateFunctionExpression<Any, Any>","description":"net.corda.core.node.services.vault.Builder.count","location":"docs/net.corda.core.node.services.vault/-builder/count.html","searchKeys":["count","fun FieldInfo.count(): CriteriaExpression.AggregateFunctionExpression<Any, Any>","net.corda.core.node.services.vault.Builder.count"]},{"name":"fun FieldInfo.isNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","description":"net.corda.core.node.services.vault.Builder.isNull","location":"docs/net.corda.core.node.services.vault/-builder/is-null.html","searchKeys":["isNull","fun FieldInfo.isNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","net.corda.core.node.services.vault.Builder.isNull"]},{"name":"fun FieldInfo.like(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","description":"net.corda.core.node.services.vault.Builder.like","location":"docs/net.corda.core.node.services.vault/-builder/like.html","searchKeys":["like","fun FieldInfo.like(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","net.corda.core.node.services.vault.Builder.like"]},{"name":"fun FieldInfo.notLike(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","description":"net.corda.core.node.services.vault.Builder.notLike","location":"docs/net.corda.core.node.services.vault/-builder/not-like.html","searchKeys":["notLike","fun FieldInfo.notLike(string: String, exactMatch: Boolean = true): CriteriaExpression.ColumnPredicateExpression<Any, String>","net.corda.core.node.services.vault.Builder.notLike"]},{"name":"fun FieldInfo.notNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","description":"net.corda.core.node.services.vault.Builder.notNull","location":"docs/net.corda.core.node.services.vault/-builder/not-null.html","searchKeys":["notNull","fun FieldInfo.notNull(): CriteriaExpression.ColumnPredicateExpression<Any, Any>","net.corda.core.node.services.vault.Builder.notNull"]},{"name":"fun FlowLogic<*>.checkParameterHash(networkParametersHash: SecureHash?)","description":"net.corda.core.internal.checkParameterHash","location":"docs/net.corda.core.internal/check-parameter-hash.html","searchKeys":["checkParameterHash","fun FlowLogic<*>.checkParameterHash(networkParametersHash: SecureHash?)","net.corda.core.internal.checkParameterHash"]},{"name":"fun FlowLogic<*>.receiveAll(session: <Error class: unknown class><FlowSession, Class<out Any>>, vararg sessions: <Error class: unknown class><FlowSession, Class<out Any>>): Map<FlowSession, UntrustworthyData<Any>>","description":"net.corda.testing.flows.receiveAll","location":"docs/net.corda.testing.flows/receive-all.html","searchKeys":["receiveAll","fun FlowLogic<*>.receiveAll(session: <Error class: unknown class><FlowSession, Class<out Any>>, vararg sessions: <Error class: unknown class><FlowSession, Class<out Any>>): Map<FlowSession, UntrustworthyData<Any>>","net.corda.testing.flows.receiveAll"]},{"name":"fun HttpURLConnection.checkOkResponse()","description":"net.corda.core.internal.checkOkResponse","location":"docs/net.corda.core.internal/check-ok-response.html","searchKeys":["checkOkResponse","fun HttpURLConnection.checkOkResponse()","net.corda.core.internal.checkOkResponse"]},{"name":"fun InMemoryMessagingNetwork.MessageTransfer.getMessage(): <Error class: unknown class>","description":"net.corda.testing.node.internal.getMessage","location":"docs/net.corda.testing.node.internal/get-message.html","searchKeys":["getMessage","fun InMemoryMessagingNetwork.MessageTransfer.getMessage(): <Error class: unknown class>","net.corda.testing.node.internal.getMessage"]},{"name":"fun InputStream.copyTo(target: Path, vararg options: CopyOption): Long","description":"net.corda.core.internal.copyTo","location":"docs/net.corda.core.internal/copy-to.html","searchKeys":["copyTo","fun InputStream.copyTo(target: Path, vararg options: CopyOption): Long","net.corda.core.internal.copyTo"]},{"name":"fun InputStream.hash(): SecureHash.SHA256","description":"net.corda.core.internal.hash","location":"docs/net.corda.core.internal/hash.html","searchKeys":["hash","fun InputStream.hash(): SecureHash.SHA256","net.corda.core.internal.hash"]},{"name":"fun InputStream.readFully(): ByteArray","description":"net.corda.core.internal.readFully","location":"docs/net.corda.core.internal/read-fully.html","searchKeys":["readFully","fun InputStream.readFully(): ByteArray","net.corda.core.internal.readFully"]},{"name":"fun IntIterator.toJavaIterator(): PrimitiveIterator.OfInt","description":"net.corda.core.internal.toJavaIterator","location":"docs/net.corda.core.internal/to-java-iterator.html","searchKeys":["toJavaIterator","fun IntIterator.toJavaIterator(): PrimitiveIterator.OfInt","net.corda.core.internal.toJavaIterator"]},{"name":"fun IntProgression.stream(parallel: Boolean = false): IntStream","description":"net.corda.core.internal.stream","location":"docs/net.corda.core.internal/stream.html","searchKeys":["stream","fun IntProgression.stream(parallel: Boolean = false): IntStream","net.corda.core.internal.stream"]},{"name":"fun Iterable<ContractState>.sumCash(): Amount<Issued<Currency>>","description":"net.corda.finance.contracts.utils.sumCash","location":"docs/net.corda.finance.contracts.utils/sum-cash.html","searchKeys":["sumCash","fun Iterable<ContractState>.sumCash(): Amount<Issued<Currency>>","net.corda.finance.contracts.utils.sumCash"]},{"name":"fun Iterable<ContractState>.sumCashBy(owner: AbstractParty): Amount<Issued<Currency>>","description":"net.corda.finance.contracts.utils.sumCashBy","location":"docs/net.corda.finance.contracts.utils/sum-cash-by.html","searchKeys":["sumCashBy","fun Iterable<ContractState>.sumCashBy(owner: AbstractParty): Amount<Issued<Currency>>","net.corda.finance.contracts.utils.sumCashBy"]},{"name":"fun Iterable<ContractState>.sumCashOrNull(): Amount<Issued<Currency>>?","description":"net.corda.finance.contracts.utils.sumCashOrNull","location":"docs/net.corda.finance.contracts.utils/sum-cash-or-null.html","searchKeys":["sumCashOrNull","fun Iterable<ContractState>.sumCashOrNull(): Amount<Issued<Currency>>?","net.corda.finance.contracts.utils.sumCashOrNull"]},{"name":"fun Iterable<ContractState>.sumCashOrZero(currency: Issued<Currency>): Amount<Issued<Currency>>","description":"net.corda.finance.contracts.utils.sumCashOrZero","location":"docs/net.corda.finance.contracts.utils/sum-cash-or-zero.html","searchKeys":["sumCashOrZero","fun Iterable<ContractState>.sumCashOrZero(currency: Issued<Currency>): Amount<Issued<Currency>>","net.corda.finance.contracts.utils.sumCashOrZero"]},{"name":"fun Iterable<TransactionSignature>.byKeys(): <Error class: unknown class>","description":"net.corda.core.crypto.byKeys","location":"docs/net.corda.core.crypto/by-keys.html","searchKeys":["byKeys","fun Iterable<TransactionSignature>.byKeys(): <Error class: unknown class>","net.corda.core.crypto.byKeys"]},{"name":"fun JarInputStream.entries(): <Error class: unknown class><JarEntry>","description":"net.corda.core.internal.entries","location":"docs/net.corda.core.internal/entries.html","searchKeys":["entries","fun JarInputStream.entries(): <Error class: unknown class><JarEntry>","net.corda.core.internal.entries"]},{"name":"fun JarInputStream.extractFile(path: String, outputTo: OutputStream)","description":"net.corda.core.internal.extractFile","location":"docs/net.corda.core.internal/extract-file.html","searchKeys":["extractFile","fun JarInputStream.extractFile(path: String, outputTo: OutputStream)","net.corda.core.internal.extractFile"]},{"name":"fun JarOutputStream.addEntry(entry: ZipEntry)","description":"net.corda.testing.node.internal.addEntry","location":"docs/net.corda.testing.node.internal/add-entry.html","searchKeys":["addEntry","fun JarOutputStream.addEntry(entry: ZipEntry)","net.corda.testing.node.internal.addEntry"]},{"name":"fun JarOutputStream.addEntry(entry: ZipEntry, input: InputStream)","description":"net.corda.testing.node.internal.addEntry","location":"docs/net.corda.testing.node.internal/add-entry.html","searchKeys":["addEntry","fun JarOutputStream.addEntry(entry: ZipEntry, input: InputStream)","net.corda.testing.node.internal.addEntry"]},{"name":"fun KeyPair.sign(bytesToSign: ByteArray): DigitalSignature.WithKey","description":"net.corda.core.crypto.sign","location":"docs/net.corda.core.crypto/sign.html","searchKeys":["sign","fun KeyPair.sign(bytesToSign: ByteArray): DigitalSignature.WithKey","net.corda.core.crypto.sign"]},{"name":"fun KeyPair.sign(bytesToSign: OpaqueBytes): DigitalSignature.WithKey","description":"net.corda.core.crypto.sign","location":"docs/net.corda.core.crypto/sign.html","searchKeys":["sign","fun KeyPair.sign(bytesToSign: OpaqueBytes): DigitalSignature.WithKey","net.corda.core.crypto.sign"]},{"name":"fun KeyPair.sign(signableData: SignableData): TransactionSignature","description":"net.corda.core.crypto.sign","location":"docs/net.corda.core.crypto/sign.html","searchKeys":["sign","fun KeyPair.sign(signableData: SignableData): TransactionSignature","net.corda.core.crypto.sign"]},{"name":"fun KeyPair.verify(signatureData: ByteArray, clearData: ByteArray): Boolean","description":"net.corda.core.crypto.verify","location":"docs/net.corda.core.crypto/verify.html","searchKeys":["verify","fun KeyPair.verify(signatureData: ByteArray, clearData: ByteArray): Boolean","net.corda.core.crypto.verify"]},{"name":"fun Method.isShutdown(): Boolean","description":"net.corda.client.rpc.internal.RPCUtils.isShutdown","location":"docs/net.corda.client.rpc.internal/-r-p-c-utils/is-shutdown.html","searchKeys":["isShutdown","fun Method.isShutdown(): Boolean","net.corda.client.rpc.internal.RPCUtils.isShutdown"]},{"name":"fun Method.isStartFlow(): Boolean","description":"net.corda.client.rpc.internal.RPCUtils.isStartFlow","location":"docs/net.corda.client.rpc.internal/-r-p-c-utils/is-start-flow.html","searchKeys":["isStartFlow","fun Method.isStartFlow(): Boolean","net.corda.client.rpc.internal.RPCUtils.isStartFlow"]},{"name":"fun Method.isStartFlowWithClientId(): Boolean","description":"net.corda.client.rpc.internal.RPCUtils.isStartFlowWithClientId","location":"docs/net.corda.client.rpc.internal/-r-p-c-utils/is-start-flow-with-client-id.html","searchKeys":["isStartFlowWithClientId","fun Method.isStartFlowWithClientId(): Boolean","net.corda.client.rpc.internal.RPCUtils.isStartFlowWithClientId"]},{"name":"fun MockNetNotaryConfig.toNotaryConfig(): <Error class: unknown class>","description":"net.corda.testing.node.internal.toNotaryConfig","location":"docs/net.corda.testing.node.internal/to-notary-config.html","searchKeys":["toNotaryConfig","fun MockNetNotaryConfig.toNotaryConfig(): <Error class: unknown class>","net.corda.testing.node.internal.toNotaryConfig"]},{"name":"fun MockNodeConfigOverrides.applyMockNodeOverrides(config: <Error class: unknown class>)","description":"net.corda.testing.node.internal.applyMockNodeOverrides","location":"docs/net.corda.testing.node.internal/apply-mock-node-overrides.html","searchKeys":["applyMockNodeOverrides","fun MockNodeConfigOverrides.applyMockNodeOverrides(config: <Error class: unknown class>)","net.corda.testing.node.internal.applyMockNodeOverrides"]},{"name":"fun NamedByHash.toSimpleString(): String","description":"net.corda.core.internal.toSimpleString","location":"docs/net.corda.core.internal/to-simple-string.html","searchKeys":["toSimpleString","fun NamedByHash.toSimpleString(): String","net.corda.core.internal.toSimpleString"]},{"name":"fun NetworkParameters.getPackageOwnerOf(contractClassName: ContractClassName): PublicKey?","description":"net.corda.core.internal.getPackageOwnerOf","location":"docs/net.corda.core.internal/get-package-owner-of.html","searchKeys":["getPackageOwnerOf","fun NetworkParameters.getPackageOwnerOf(contractClassName: ContractClassName): PublicKey?","net.corda.core.internal.getPackageOwnerOf"]},{"name":"fun NodeHandle.logFile(): File","description":"net.corda.testing.driver.logFile","location":"docs/net.corda.testing.driver/log-file.html","searchKeys":["logFile","fun NodeHandle.logFile(): File","net.corda.testing.driver.logFile"]},{"name":"fun NodeHandle.waitForShutdown(): <Error class: unknown class><Unit>","description":"net.corda.testing.node.internal.waitForShutdown","location":"docs/net.corda.testing.node.internal/wait-for-shutdown.html","searchKeys":["waitForShutdown","fun NodeHandle.waitForShutdown(): <Error class: unknown class><Unit>","net.corda.testing.node.internal.waitForShutdown"]},{"name":"fun NodeInfo.chooseIdentity(): Party","description":"net.corda.testing.internal.chooseIdentity","location":"docs/net.corda.testing.internal/choose-identity.html","searchKeys":["chooseIdentity","fun NodeInfo.chooseIdentity(): Party","net.corda.testing.internal.chooseIdentity"]},{"name":"fun NodeInfo.chooseIdentityAndCert(): PartyAndCertificate","description":"net.corda.testing.internal.chooseIdentityAndCert","location":"docs/net.corda.testing.internal/choose-identity-and-cert.html","searchKeys":["chooseIdentityAndCert","fun NodeInfo.chooseIdentityAndCert(): PartyAndCertificate","net.corda.testing.internal.chooseIdentityAndCert"]},{"name":"fun NotarisationRequest.generateSignature(serviceHub: ServiceHub): NotarisationRequestSignature","description":"net.corda.core.internal.notary.generateSignature","location":"docs/net.corda.core.internal.notary/generate-signature.html","searchKeys":["generateSignature","fun NotarisationRequest.generateSignature(serviceHub: ServiceHub): NotarisationRequestSignature","net.corda.core.internal.notary.generateSignature"]},{"name":"fun NotarisationRequest.verifySignature(requestSignature: NotarisationRequestSignature, intendedSigner: Party)","description":"net.corda.core.internal.notary.verifySignature","location":"docs/net.corda.core.internal.notary/verify-signature.html","searchKeys":["verifySignature","fun NotarisationRequest.verifySignature(requestSignature: NotarisationRequestSignature, intendedSigner: Party)","net.corda.core.internal.notary.verifySignature"]},{"name":"fun NotarisationResponse.validateSignatures(txId: SecureHash, notary: Party)","description":"net.corda.core.internal.notary.validateSignatures","location":"docs/net.corda.core.internal.notary/validate-signatures.html","searchKeys":["validateSignatures","fun NotarisationResponse.validateSignatures(txId: SecureHash, notary: Party)","net.corda.core.internal.notary.validateSignatures"]},{"name":"fun OpaqueBytes.hashAs(algorithm: String): SecureHash","description":"net.corda.core.crypto.hashAs","location":"docs/net.corda.core.crypto/hash-as.html","searchKeys":["hashAs","fun OpaqueBytes.hashAs(algorithm: String): SecureHash","net.corda.core.crypto.hashAs"]},{"name":"fun OpaqueBytes.sha256(): SecureHash.SHA256","description":"net.corda.core.crypto.sha256","location":"docs/net.corda.core.crypto/sha256.html","searchKeys":["sha256","fun OpaqueBytes.sha256(): SecureHash.SHA256","net.corda.core.crypto.sha256"]},{"name":"fun POUNDS(amount: Double): Amount<Currency>","description":"net.corda.finance.POUNDS","location":"docs/net.corda.finance/-p-o-u-n-d-s.html","searchKeys":["POUNDS","fun POUNDS(amount: Double): Amount<Currency>","net.corda.finance.POUNDS"]},{"name":"fun POUNDS(amount: Int): Amount<Currency>","description":"net.corda.finance.POUNDS","location":"docs/net.corda.finance/-p-o-u-n-d-s.html","searchKeys":["POUNDS","fun POUNDS(amount: Int): Amount<Currency>","net.corda.finance.POUNDS"]},{"name":"fun POUNDS(amount: Long): Amount<Currency>","description":"net.corda.finance.POUNDS","location":"docs/net.corda.finance/-p-o-u-n-d-s.html","searchKeys":["POUNDS","fun POUNDS(amount: Long): Amount<Currency>","net.corda.finance.POUNDS"]},{"name":"fun Path.attributes(vararg options: LinkOption): BasicFileAttributes","description":"net.corda.core.internal.attributes","location":"docs/net.corda.core.internal/attributes.html","searchKeys":["attributes","fun Path.attributes(vararg options: LinkOption): BasicFileAttributes","net.corda.core.internal.attributes"]},{"name":"fun Path.copyTo(out: OutputStream): Long","description":"net.corda.core.internal.copyTo","location":"docs/net.corda.core.internal/copy-to.html","searchKeys":["copyTo","fun Path.copyTo(out: OutputStream): Long","net.corda.core.internal.copyTo"]},{"name":"fun Path.copyToDirectory(targetDir: Path, vararg options: CopyOption): Path","description":"net.corda.core.internal.copyToDirectory","location":"docs/net.corda.core.internal/copy-to-directory.html","searchKeys":["copyToDirectory","fun Path.copyToDirectory(targetDir: Path, vararg options: CopyOption): Path","net.corda.core.internal.copyToDirectory"]},{"name":"fun Path.deleteRecursively()","description":"net.corda.core.internal.deleteRecursively","location":"docs/net.corda.core.internal/delete-recursively.html","searchKeys":["deleteRecursively","fun Path.deleteRecursively()","net.corda.core.internal.deleteRecursively"]},{"name":"fun Path.safeSymbolicRead(): Path","description":"net.corda.core.internal.safeSymbolicRead","location":"docs/net.corda.core.internal/safe-symbolic-read.html","searchKeys":["safeSymbolicRead","fun Path.safeSymbolicRead(): Path","net.corda.core.internal.safeSymbolicRead"]},{"name":"fun PrivateKey.sign(bytesToSign: ByteArray): DigitalSignature","description":"net.corda.core.crypto.sign","location":"docs/net.corda.core.crypto/sign.html","searchKeys":["sign","fun PrivateKey.sign(bytesToSign: ByteArray): DigitalSignature","net.corda.core.crypto.sign"]},{"name":"fun PrivateKey.sign(bytesToSign: ByteArray, publicKey: PublicKey): DigitalSignature.WithKey","description":"net.corda.core.crypto.sign","location":"docs/net.corda.core.crypto/sign.html","searchKeys":["sign","fun PrivateKey.sign(bytesToSign: ByteArray, publicKey: PublicKey): DigitalSignature.WithKey","net.corda.core.crypto.sign"]},{"name":"fun PublicKey.containsAny(otherKeys: Iterable<PublicKey>): Boolean","description":"net.corda.core.crypto.containsAny","location":"docs/net.corda.core.crypto/contains-any.html","searchKeys":["containsAny","fun PublicKey.containsAny(otherKeys: Iterable<PublicKey>): Boolean","net.corda.core.crypto.containsAny"]},{"name":"fun PublicKey.isFulfilledBy(otherKey: PublicKey): Boolean","description":"net.corda.core.crypto.isFulfilledBy","location":"docs/net.corda.core.crypto/is-fulfilled-by.html","searchKeys":["isFulfilledBy","fun PublicKey.isFulfilledBy(otherKey: PublicKey): Boolean","net.corda.core.crypto.isFulfilledBy"]},{"name":"fun PublicKey.isFulfilledBy(otherKeys: Iterable<PublicKey>): Boolean","description":"net.corda.core.crypto.isFulfilledBy","location":"docs/net.corda.core.crypto/is-fulfilled-by.html","searchKeys":["isFulfilledBy","fun PublicKey.isFulfilledBy(otherKeys: Iterable<PublicKey>): Boolean","net.corda.core.crypto.isFulfilledBy"]},{"name":"fun PublicKey.isValid(content: ByteArray, signature: DigitalSignature): Boolean","description":"net.corda.core.crypto.isValid","location":"docs/net.corda.core.crypto/is-valid.html","searchKeys":["isValid","fun PublicKey.isValid(content: ByteArray, signature: DigitalSignature): Boolean","net.corda.core.crypto.isValid"]},{"name":"fun PublicKey.toBase58String(): String","description":"net.corda.core.utilities.toBase58String","location":"docs/net.corda.core.utilities/to-base58-string.html","searchKeys":["toBase58String","fun PublicKey.toBase58String(): String","net.corda.core.utilities.toBase58String"]},{"name":"fun PublicKey.toSHA256Bytes(): ByteArray","description":"net.corda.core.utilities.toSHA256Bytes","location":"docs/net.corda.core.utilities/to-s-h-a256-bytes.html","searchKeys":["toSHA256Bytes","fun PublicKey.toSHA256Bytes(): ByteArray","net.corda.core.utilities.toSHA256Bytes"]},{"name":"fun PublicKey.toStringShort(): String","description":"net.corda.core.crypto.toStringShort","location":"docs/net.corda.core.crypto/to-string-short.html","searchKeys":["toStringShort","fun PublicKey.toStringShort(): String","net.corda.core.crypto.toStringShort"]},{"name":"fun PublicKey.verify(content: ByteArray, signature: DigitalSignature): Boolean","description":"net.corda.core.crypto.verify","location":"docs/net.corda.core.crypto/verify.html","searchKeys":["verify","fun PublicKey.verify(content: ByteArray, signature: DigitalSignature): Boolean","net.corda.core.crypto.verify"]},{"name":"fun PublicKey.verify(signatureData: ByteArray, clearData: ByteArray): Boolean","description":"net.corda.core.crypto.verify","location":"docs/net.corda.core.crypto/verify.html","searchKeys":["verify","fun PublicKey.verify(signatureData: ByteArray, clearData: ByteArray): Boolean","net.corda.core.crypto.verify"]},{"name":"fun SWISS_FRANCS(amount: Double): Amount<Currency>","description":"net.corda.finance.SWISS_FRANCS","location":"docs/net.corda.finance/-s-w-i-s-s_-f-r-a-n-c-s.html","searchKeys":["SWISS_FRANCS","fun SWISS_FRANCS(amount: Double): Amount<Currency>","net.corda.finance.SWISS_FRANCS"]},{"name":"fun SWISS_FRANCS(amount: Int): Amount<Currency>","description":"net.corda.finance.SWISS_FRANCS","location":"docs/net.corda.finance/-s-w-i-s-s_-f-r-a-n-c-s.html","searchKeys":["SWISS_FRANCS","fun SWISS_FRANCS(amount: Int): Amount<Currency>","net.corda.finance.SWISS_FRANCS"]},{"name":"fun SWISS_FRANCS(amount: Long): Amount<Currency>","description":"net.corda.finance.SWISS_FRANCS","location":"docs/net.corda.finance/-s-w-i-s-s_-f-r-a-n-c-s.html","searchKeys":["SWISS_FRANCS","fun SWISS_FRANCS(amount: Long): Amount<Currency>","net.corda.finance.SWISS_FRANCS"]},{"name":"fun SerializationContext.withWhitelist(classes: List<Class<*>>): SerializationContext","description":"net.corda.core.serialization.withWhitelist","location":"docs/net.corda.core.serialization/with-whitelist.html","searchKeys":["withWhitelist","fun SerializationContext.withWhitelist(classes: List<Class<*>>): SerializationContext","net.corda.core.serialization.withWhitelist"]},{"name":"fun SerializeAsTokenContext.attachmentDataLoader(id: SecureHash): () -> ByteArray","description":"net.corda.core.internal.AbstractAttachment.Companion.attachmentDataLoader","location":"docs/net.corda.core.internal/-abstract-attachment/-companion/attachment-data-loader.html","searchKeys":["attachmentDataLoader","fun SerializeAsTokenContext.attachmentDataLoader(id: SecureHash): () -> ByteArray","net.corda.core.internal.AbstractAttachment.Companion.attachmentDataLoader"]},{"name":"fun ServiceHub.getCashBalance(currency: Currency): Amount<Currency>","description":"net.corda.finance.workflows.getCashBalance","location":"docs/net.corda.finance.workflows/get-cash-balance.html","searchKeys":["getCashBalance","fun ServiceHub.getCashBalance(currency: Currency): Amount<Currency>","net.corda.finance.workflows.getCashBalance"]},{"name":"fun ServiceHub.getCashBalances(): Map<Currency, Amount<Currency>>","description":"net.corda.finance.workflows.getCashBalances","location":"docs/net.corda.finance.workflows/get-cash-balances.html","searchKeys":["getCashBalances","fun ServiceHub.getCashBalances(): Map<Currency, Amount<Currency>>","net.corda.finance.workflows.getCashBalances"]},{"name":"fun ServiceHub.getRequiredTransaction(txhash: SecureHash): SignedTransaction","description":"net.corda.core.internal.getRequiredTransaction","location":"docs/net.corda.core.internal/get-required-transaction.html","searchKeys":["getRequiredTransaction","fun ServiceHub.getRequiredTransaction(txhash: SecureHash): SignedTransaction","net.corda.core.internal.getRequiredTransaction"]},{"name":"fun ServiceHub.ledger(notary: Party = TestIdentity.fresh(\"ledger notary\").party, script: LedgerDSL<TestTransactionDSLInterpreter, TestLedgerDSLInterpreter>.() -> Unit): LedgerDSL<TestTransactionDSLInterpreter, TestLedgerDSLInterpreter>","description":"net.corda.testing.node.ledger","location":"docs/net.corda.testing.node/ledger.html","searchKeys":["ledger","fun ServiceHub.ledger(notary: Party = TestIdentity.fresh(\"ledger notary\").party, script: LedgerDSL<TestTransactionDSLInterpreter, TestLedgerDSLInterpreter>.() -> Unit): LedgerDSL<TestTransactionDSLInterpreter, TestLedgerDSLInterpreter>","net.corda.testing.node.ledger"]},{"name":"fun ServiceHub.transaction(notary: Party = TestIdentity.fresh(\"transaction notary\").party, script: TransactionDSL<TransactionDSLInterpreter>.() -> EnforceVerifyOrFail): LedgerDSL<TestTransactionDSLInterpreter, TestLedgerDSLInterpreter>","description":"net.corda.testing.node.transaction","location":"docs/net.corda.testing.node/transaction.html","searchKeys":["transaction","fun ServiceHub.transaction(notary: Party = TestIdentity.fresh(\"transaction notary\").party, script: TransactionDSL<TransactionDSLInterpreter>.() -> EnforceVerifyOrFail): LedgerDSL<TestTransactionDSLInterpreter, TestLedgerDSLInterpreter>","net.corda.testing.node.transaction"]},{"name":"fun ServicesForResolution.ensureMinimumPlatformVersion(requiredMinPlatformVersion: Int, feature: String)","description":"net.corda.core.internal.ensureMinimumPlatformVersion","location":"docs/net.corda.core.internal/ensure-minimum-platform-version.html","searchKeys":["ensureMinimumPlatformVersion","fun ServicesForResolution.ensureMinimumPlatformVersion(requiredMinPlatformVersion: Int, feature: String)","net.corda.core.internal.ensureMinimumPlatformVersion"]},{"name":"fun ServicesForResolution.requireSupportedHashType(hash: NamedByHash)","description":"net.corda.core.internal.requireSupportedHashType","location":"docs/net.corda.core.internal/require-supported-hash-type.html","searchKeys":["requireSupportedHashType","fun ServicesForResolution.requireSupportedHashType(hash: NamedByHash)","net.corda.core.internal.requireSupportedHashType"]},{"name":"fun ServicesForResolution.toVerifyingServiceHub(): VerifyingServiceHub","description":"net.corda.core.internal.verification.toVerifyingServiceHub","location":"docs/net.corda.core.internal.verification/to-verifying-service-hub.html","searchKeys":["toVerifyingServiceHub","fun ServicesForResolution.toVerifyingServiceHub(): VerifyingServiceHub","net.corda.core.internal.verification.toVerifyingServiceHub"]},{"name":"fun String.abbreviate(maxWidth: Int): String","description":"net.corda.core.internal.abbreviate","location":"docs/net.corda.core.internal/abbreviate.html","searchKeys":["abbreviate","fun String.abbreviate(maxWidth: Int): String","net.corda.core.internal.abbreviate"]},{"name":"fun String.base58ToByteArray(): ByteArray","description":"net.corda.core.utilities.base58ToByteArray","location":"docs/net.corda.core.utilities/base58-to-byte-array.html","searchKeys":["base58ToByteArray","fun String.base58ToByteArray(): ByteArray","net.corda.core.utilities.base58ToByteArray"]},{"name":"fun String.base58ToRealString(): String","description":"net.corda.core.utilities.base58ToRealString","location":"docs/net.corda.core.utilities/base58-to-real-string.html","searchKeys":["base58ToRealString","fun String.base58ToRealString(): String","net.corda.core.utilities.base58ToRealString"]},{"name":"fun String.base58toBase64(): String","description":"net.corda.core.utilities.base58toBase64","location":"docs/net.corda.core.utilities/base58to-base64.html","searchKeys":["base58toBase64","fun String.base58toBase64(): String","net.corda.core.utilities.base58toBase64"]},{"name":"fun String.base58toHex(): String","description":"net.corda.core.utilities.base58toHex","location":"docs/net.corda.core.utilities/base58to-hex.html","searchKeys":["base58toHex","fun String.base58toHex(): String","net.corda.core.utilities.base58toHex"]},{"name":"fun String.base64ToByteArray(): ByteArray","description":"net.corda.core.utilities.base64ToByteArray","location":"docs/net.corda.core.utilities/base64-to-byte-array.html","searchKeys":["base64ToByteArray","fun String.base64ToByteArray(): ByteArray","net.corda.core.utilities.base64ToByteArray"]},{"name":"fun String.base64ToRealString(): String","description":"net.corda.core.utilities.base64ToRealString","location":"docs/net.corda.core.utilities/base64-to-real-string.html","searchKeys":["base64ToRealString","fun String.base64ToRealString(): String","net.corda.core.utilities.base64ToRealString"]},{"name":"fun String.base64toBase58(): String","description":"net.corda.core.utilities.base64toBase58","location":"docs/net.corda.core.utilities/base64to-base58.html","searchKeys":["base64toBase58","fun String.base64toBase58(): String","net.corda.core.utilities.base64toBase58"]},{"name":"fun String.base64toHex(): String","description":"net.corda.core.utilities.base64toHex","location":"docs/net.corda.core.utilities/base64to-hex.html","searchKeys":["base64toHex","fun String.base64toHex(): String","net.corda.core.utilities.base64toHex"]},{"name":"fun String.capitalize(): String","description":"net.corda.core.internal.capitalize","location":"docs/net.corda.core.internal/capitalize.html","searchKeys":["capitalize","fun String.capitalize(): String","net.corda.core.internal.capitalize"]},{"name":"fun String.decapitalize(): String","description":"net.corda.core.internal.decapitalize","location":"docs/net.corda.core.internal/decapitalize.html","searchKeys":["decapitalize","fun String.decapitalize(): String","net.corda.core.internal.decapitalize"]},{"name":"fun String.hexToBase58(): String","description":"net.corda.core.utilities.hexToBase58","location":"docs/net.corda.core.utilities/hex-to-base58.html","searchKeys":["hexToBase58","fun String.hexToBase58(): String","net.corda.core.utilities.hexToBase58"]},{"name":"fun String.hexToBase64(): String","description":"net.corda.core.utilities.hexToBase64","location":"docs/net.corda.core.utilities/hex-to-base64.html","searchKeys":["hexToBase64","fun String.hexToBase64(): String","net.corda.core.utilities.hexToBase64"]},{"name":"fun String.hexToByteArray(): ByteArray","description":"net.corda.core.utilities.hexToByteArray","location":"docs/net.corda.core.utilities/hex-to-byte-array.html","searchKeys":["hexToByteArray","fun String.hexToByteArray(): ByteArray","net.corda.core.utilities.hexToByteArray"]},{"name":"fun String.hexToRealString(): String","description":"net.corda.core.utilities.hexToRealString","location":"docs/net.corda.core.utilities/hex-to-real-string.html","searchKeys":["hexToRealString","fun String.hexToRealString(): String","net.corda.core.utilities.hexToRealString"]},{"name":"fun String.parseAsHex(): ByteArray","description":"net.corda.core.utilities.parseAsHex","location":"docs/net.corda.core.utilities/parse-as-hex.html","searchKeys":["parseAsHex","fun String.parseAsHex(): ByteArray","net.corda.core.utilities.parseAsHex"]},{"name":"fun ThreadInfo.asString(maxFrames: Int = 256): String","description":"net.corda.core.utilities.asString","location":"docs/net.corda.core.utilities/as-string.html","searchKeys":["asString","fun ThreadInfo.asString(maxFrames: Int = 256): String","net.corda.core.utilities.asString"]},{"name":"fun TransactionStorage.getRequiredTransaction(txhash: SecureHash): SignedTransaction","description":"net.corda.core.internal.getRequiredTransaction","location":"docs/net.corda.core.internal/get-required-transaction.html","searchKeys":["getRequiredTransaction","fun TransactionStorage.getRequiredTransaction(txhash: SecureHash): SignedTransaction","net.corda.core.internal.getRequiredTransaction"]},{"name":"fun URL.openHttpConnection(proxy: Proxy? = null): HttpURLConnection","description":"net.corda.core.internal.openHttpConnection","location":"docs/net.corda.core.internal/open-http-connection.html","searchKeys":["openHttpConnection","fun URL.openHttpConnection(proxy: Proxy? = null): HttpURLConnection","net.corda.core.internal.openHttpConnection"]},{"name":"fun URL.post(serializedData: OpaqueBytes, vararg properties: <Error class: unknown class><String, String>, proxy: Proxy? = null): ByteArray","description":"net.corda.core.internal.post","location":"docs/net.corda.core.internal/post.html","searchKeys":["post","fun URL.post(serializedData: OpaqueBytes, vararg properties: <Error class: unknown class><String, String>, proxy: Proxy? = null): ByteArray","net.corda.core.internal.post"]},{"name":"fun URL.toPath(): Path","description":"net.corda.core.internal.toPath","location":"docs/net.corda.core.internal/to-path.html","searchKeys":["toPath","fun URL.toPath(): Path","net.corda.core.internal.toPath"]},{"name":"fun X500Principal.isEquivalentTo(other: X500Principal): Boolean","description":"net.corda.core.internal.isEquivalentTo","location":"docs/net.corda.core.internal/is-equivalent-to.html","searchKeys":["isEquivalentTo","fun X500Principal.isEquivalentTo(other: X500Principal): Boolean","net.corda.core.internal.isEquivalentTo"]},{"name":"fun X500Principal.toAttributesMap(supportedAttributes: Set<<Error class: unknown class>> = emptySet()): Map<<Error class: unknown class>, String>","description":"net.corda.core.internal.toAttributesMap","location":"docs/net.corda.core.internal/to-attributes-map.html","searchKeys":["toAttributesMap","fun X500Principal.toAttributesMap(supportedAttributes: Set<<Error class: unknown class>> = emptySet()): Map<<Error class: unknown class>, String>","net.corda.core.internal.toAttributesMap"]},{"name":"fun X500Principal.toX500Name(): <Error class: unknown class>","description":"net.corda.core.internal.toX500Name","location":"docs/net.corda.core.internal/to-x500-name.html","searchKeys":["toX500Name","fun X500Principal.toX500Name(): <Error class: unknown class>","net.corda.core.internal.toX500Name"]},{"name":"fun X509Certificate.withCrlDistPoint(issuerKeyPair: KeyPair, crlDistPoint: String?, crlIssuer: X500Principal? = null): X509Certificate","description":"net.corda.testing.node.internal.network.CrlServer.Companion.withCrlDistPoint","location":"docs/net.corda.testing.node.internal.network/-crl-server/-companion/with-crl-dist-point.html","searchKeys":["withCrlDistPoint","fun X509Certificate.withCrlDistPoint(issuerKeyPair: KeyPair, crlDistPoint: String?, crlIssuer: X500Principal? = null): X509Certificate","net.corda.testing.node.internal.network.CrlServer.Companion.withCrlDistPoint"]},{"name":"fun ackNetworkParameters(input: InputStream): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.ackNetworkParameters","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/ack-network-parameters.html","searchKeys":["ackNetworkParameters","fun ackNetworkParameters(input: InputStream): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.ackNetworkParameters"]},{"name":"fun addAttachment(attachmentId: AttachmentId): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.addAttachment","location":"docs/net.corda.core.transactions/-transaction-builder/add-attachment.html","searchKeys":["addAttachment","fun addAttachment(attachmentId: AttachmentId): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.addAttachment"]},{"name":"fun addCommand(arg: Command<*>): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.addCommand","location":"docs/net.corda.core.transactions/-transaction-builder/add-command.html","searchKeys":["addCommand","fun addCommand(arg: Command<*>): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.addCommand"]},{"name":"fun addCommand(data: CommandData, keys: List<PublicKey>): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.addCommand","location":"docs/net.corda.core.transactions/-transaction-builder/add-command.html","searchKeys":["addCommand","fun addCommand(data: CommandData, keys: List<PublicKey>): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.addCommand"]},{"name":"fun addCommand(data: CommandData, vararg keys: PublicKey): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.addCommand","location":"docs/net.corda.core.transactions/-transaction-builder/add-command.html","searchKeys":["addCommand","fun addCommand(data: CommandData, vararg keys: PublicKey): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.addCommand"]},{"name":"fun addConnectionListener(listener: RPCConnectionListener<I>): Boolean","description":"net.corda.client.rpc.ext.MultiRPCClient.addConnectionListener","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/add-connection-listener.html","searchKeys":["addConnectionListener","fun addConnectionListener(listener: RPCConnectionListener<I>): Boolean","net.corda.client.rpc.ext.MultiRPCClient.addConnectionListener"]},{"name":"fun addConnectionListener(listener: RPCConnectionListener<I>): Boolean","description":"net.corda.client.rpc.internal.RPCClient.addConnectionListener","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/add-connection-listener.html","searchKeys":["addConnectionListener","fun addConnectionListener(listener: RPCConnectionListener<I>): Boolean","net.corda.client.rpc.internal.RPCClient.addConnectionListener"]},{"name":"fun addKey(key: PublicKey, weight: Int = 1): CompositeKey.Builder","description":"net.corda.core.crypto.CompositeKey.Builder.addKey","location":"docs/net.corda.core.crypto/-composite-key/-builder/add-key.html","searchKeys":["addKey","fun addKey(key: PublicKey, weight: Int = 1): CompositeKey.Builder","net.corda.core.crypto.CompositeKey.Builder.addKey"]},{"name":"fun addKeys(keys: List<PublicKey>): CompositeKey.Builder","description":"net.corda.core.crypto.CompositeKey.Builder.addKeys","location":"docs/net.corda.core.crypto/-composite-key/-builder/add-keys.html","searchKeys":["addKeys","fun addKeys(keys: List<PublicKey>): CompositeKey.Builder","net.corda.core.crypto.CompositeKey.Builder.addKeys"]},{"name":"fun addKeys(vararg keys: PublicKey): CompositeKey.Builder","description":"net.corda.core.crypto.CompositeKey.Builder.addKeys","location":"docs/net.corda.core.crypto/-composite-key/-builder/add-keys.html","searchKeys":["addKeys","fun addKeys(vararg keys: PublicKey): CompositeKey.Builder","net.corda.core.crypto.CompositeKey.Builder.addKeys"]},{"name":"fun addMockCordapp(contractClassName: ContractClassName)","description":"net.corda.testing.node.MockServices.addMockCordapp","location":"docs/net.corda.testing.node/-mock-services/add-mock-cordapp.html","searchKeys":["addMockCordapp","fun addMockCordapp(contractClassName: ContractClassName)","net.corda.testing.node.MockServices.addMockCordapp"]},{"name":"fun addMockCordapp(contractClassName: ContractClassName, attachments: MockAttachmentStorage, contractHash: AttachmentId? = null, signers: List<PublicKey> = emptyList(), jarManifestAttributes: Map<String, String> = emptyMap()): AttachmentId","description":"net.corda.testing.internal.MockCordappProvider.addMockCordapp","location":"docs/net.corda.testing.internal/-mock-cordapp-provider/add-mock-cordapp.html","searchKeys":["addMockCordapp","fun addMockCordapp(contractClassName: ContractClassName, attachments: MockAttachmentStorage, contractHash: AttachmentId? = null, signers: List<PublicKey> = emptyList(), jarManifestAttributes: Map<String, String> = emptyMap()): AttachmentId","net.corda.testing.internal.MockCordappProvider.addMockCordapp"]},{"name":"fun addNodesToPrivateNetwork(networkUUID: UUID, nodeNames: List<CordaX500Name>)","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.addNodesToPrivateNetwork","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/add-nodes-to-private-network.html","searchKeys":["addNodesToPrivateNetwork","fun addNodesToPrivateNetwork(networkUUID: UUID, nodeNames: List<CordaX500Name>)","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.addNodesToPrivateNetwork"]},{"name":"fun addNodesToPrivateNetwork(networkUUID: UUID, nodesNames: List<CordaX500Name>)","description":"net.corda.testing.node.internal.network.NetworkMapServer.addNodesToPrivateNetwork","location":"docs/net.corda.testing.node.internal.network/-network-map-server/add-nodes-to-private-network.html","searchKeys":["addNodesToPrivateNetwork","fun addNodesToPrivateNetwork(networkUUID: UUID, nodesNames: List<CordaX500Name>)","net.corda.testing.node.internal.network.NetworkMapServer.addNodesToPrivateNetwork"]},{"name":"fun addOutputState(state: ContractState, constraint: AttachmentConstraint): TransactionBuilder","description":"net.corda.core.transactions.TransactionBuilder.addOutputState","location":"docs/net.corda.core.transactions/-transaction-builder/add-output-state.html","searchKeys":["addOutputState","fun addOutputState(state: ContractState, constraint: AttachmentConstraint): TransactionBuilder","net.corda.core.transactions.TransactionBuilder.addOutputState"]},{"name":"fun addOutputState(state: ContractState, contract: ContractClassName = requireNotNullContractClassName(state), constraint: AttachmentConstraint = AutomaticPlaceholderConstraint): TransactionBuilder","description":"net.corda.core.transactions.TransactionBuilder.addOutputState","location":"docs/net.corda.core.transactions/-transaction-builder/add-output-state.html","searchKeys":["addOutputState","fun addOutputState(state: ContractState, contract: ContractClassName = requireNotNullContractClassName(state), constraint: AttachmentConstraint = AutomaticPlaceholderConstraint): TransactionBuilder","net.corda.core.transactions.TransactionBuilder.addOutputState"]},{"name":"fun addOutputState(state: ContractState, contract: ContractClassName = requireNotNullContractClassName(state), notary: Party, encumbrance: Int? = null, constraint: AttachmentConstraint = AutomaticPlaceholderConstraint): TransactionBuilder","description":"net.corda.core.transactions.TransactionBuilder.addOutputState","location":"docs/net.corda.core.transactions/-transaction-builder/add-output-state.html","searchKeys":["addOutputState","fun addOutputState(state: ContractState, contract: ContractClassName = requireNotNullContractClassName(state), notary: Party, encumbrance: Int? = null, constraint: AttachmentConstraint = AutomaticPlaceholderConstraint): TransactionBuilder","net.corda.core.transactions.TransactionBuilder.addOutputState"]},{"name":"fun addOutputState(state: TransactionState<*>): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.addOutputState","location":"docs/net.corda.core.transactions/-transaction-builder/add-output-state.html","searchKeys":["addOutputState","fun addOutputState(state: TransactionState<*>): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.addOutputState"]},{"name":"fun addTelemetryComponent(telemetryComponent: TelemetryComponent)","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.addTelemetryComponent","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/add-telemetry-component.html","searchKeys":["addTelemetryComponent","fun addTelemetryComponent(telemetryComponent: TelemetryComponent)","net.corda.core.internal.telemetry.TelemetryServiceImpl.addTelemetryComponent"]},{"name":"fun addressMustBeBound(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort, listenProcess: Process? = null)","description":"net.corda.testing.node.internal.addressMustBeBound","location":"docs/net.corda.testing.node.internal/address-must-be-bound.html","searchKeys":["addressMustBeBound","fun addressMustBeBound(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort, listenProcess: Process? = null)","net.corda.testing.node.internal.addressMustBeBound"]},{"name":"fun addressMustBeBoundFuture(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort, listenProcess: Process? = null): CordaFuture<Unit>","description":"net.corda.testing.node.internal.addressMustBeBoundFuture","location":"docs/net.corda.testing.node.internal/address-must-be-bound-future.html","searchKeys":["addressMustBeBoundFuture","fun addressMustBeBoundFuture(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort, listenProcess: Process? = null): CordaFuture<Unit>","net.corda.testing.node.internal.addressMustBeBoundFuture"]},{"name":"fun addressMustNotBeBound(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort, timeout: Duration = 40.seconds)","description":"net.corda.testing.node.internal.addressMustNotBeBound","location":"docs/net.corda.testing.node.internal/address-must-not-be-bound.html","searchKeys":["addressMustNotBeBound","fun addressMustNotBeBound(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort, timeout: Duration = 40.seconds)","net.corda.testing.node.internal.addressMustNotBeBound"]},{"name":"fun addressMustNotBeBoundFuture(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort): CordaFuture<Unit>","description":"net.corda.testing.node.internal.addressMustNotBeBoundFuture","location":"docs/net.corda.testing.node.internal/address-must-not-be-bound-future.html","searchKeys":["addressMustNotBeBoundFuture","fun addressMustNotBeBoundFuture(executorService: ScheduledExecutorService, hostAndPort: NetworkHostAndPort): CordaFuture<Unit>","net.corda.testing.node.internal.addressMustNotBeBoundFuture"]},{"name":"fun addressToNode(msgRecipient: MessageRecipients): InternalMockNetwork.MockNode","description":"net.corda.testing.node.internal.InternalMockNetwork.addressToNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/address-to-node.html","searchKeys":["addressToNode","fun addressToNode(msgRecipient: MessageRecipients): InternalMockNetwork.MockNode","net.corda.testing.node.internal.InternalMockNetwork.addressToNode"]},{"name":"fun advanceBy(duration: Duration)","description":"net.corda.testing.node.TestClock.advanceBy","location":"docs/net.corda.testing.node/-test-clock/advance-by.html","searchKeys":["advanceBy","fun advanceBy(duration: Duration)","net.corda.testing.node.TestClock.advanceBy"]},{"name":"fun advertiseNewParameters()","description":"net.corda.testing.node.internal.network.NetworkMapServer.advertiseNewParameters","location":"docs/net.corda.testing.node.internal.network/-network-map-server/advertise-new-parameters.html","searchKeys":["advertiseNewParameters","fun advertiseNewParameters()","net.corda.testing.node.internal.network.NetworkMapServer.advertiseNewParameters"]},{"name":"fun allOnesHashFor(algorithm: String): SecureHash","description":"net.corda.core.crypto.SecureHash.Companion.allOnesHashFor","location":"docs/net.corda.core.crypto/-secure-hash/-companion/all-ones-hash-for.html","searchKeys":["allOnesHashFor","fun allOnesHashFor(algorithm: String): SecureHash","net.corda.core.crypto.SecureHash.Companion.allOnesHashFor"]},{"name":"fun anonymise(): AnonymousParty","description":"net.corda.core.identity.Party.anonymise","location":"docs/net.corda.core.identity/-party/anonymise.html","searchKeys":["anonymise","fun anonymise(): AnonymousParty","net.corda.core.identity.Party.anonymise"]},{"name":"fun apply(balances: List<SourceAndAmount<T, P>>, newRef: Any? = null): List<SourceAndAmount<T, P>>","description":"net.corda.core.contracts.AmountTransfer.apply","location":"docs/net.corda.core.contracts/-amount-transfer/apply.html","searchKeys":["apply","fun apply(balances: List<SourceAndAmount<T, P>>, newRef: Any? = null): List<SourceAndAmount<T, P>>","net.corda.core.contracts.AmountTransfer.apply"]},{"name":"fun attachment(contractClassName: ContractClassName)","description":"net.corda.testing.dsl.TransactionDSL.attachment","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/attachment.html","searchKeys":["attachment","fun attachment(contractClassName: ContractClassName)","net.corda.testing.dsl.TransactionDSL.attachment"]},{"name":"fun attachment(contractClassName: ContractClassName, attachmentId: AttachmentId)","description":"net.corda.testing.dsl.TransactionDSL.attachment","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/attachment.html","searchKeys":["attachment","fun attachment(contractClassName: ContractClassName, attachmentId: AttachmentId)","net.corda.testing.dsl.TransactionDSL.attachment"]},{"name":"fun attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>, jarManifestAttributes: Map<String, String> = emptyMap())","description":"net.corda.testing.dsl.TransactionDSL.attachment","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/attachment.html","searchKeys":["attachment","fun attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>, jarManifestAttributes: Map<String, String> = emptyMap())","net.corda.testing.dsl.TransactionDSL.attachment"]},{"name":"fun attachments(): List<AttachmentId>","description":"net.corda.core.transactions.TransactionBuilder.attachments","location":"docs/net.corda.core.transactions/-transaction-builder/attachments.html","searchKeys":["attachments","fun attachments(): List<AttachmentId>","net.corda.core.transactions.TransactionBuilder.attachments"]},{"name":"fun attachments(vararg contractClassNames: ContractClassName): <Error class: unknown class>","description":"net.corda.testing.dsl.TransactionDSL.attachments","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/attachments.html","searchKeys":["attachments","fun attachments(vararg contractClassNames: ContractClassName): <Error class: unknown class>","net.corda.testing.dsl.TransactionDSL.attachments"]},{"name":"fun baseDirectory(node: TestStartedNode): Path","description":"net.corda.testing.node.internal.InternalMockNetwork.baseDirectory","location":"docs/net.corda.testing.node.internal/-internal-mock-network/base-directory.html","searchKeys":["baseDirectory","fun baseDirectory(node: TestStartedNode): Path","net.corda.testing.node.internal.InternalMockNetwork.baseDirectory"]},{"name":"fun baseDirectory(nodeId: Int): Path","description":"net.corda.testing.node.MockNetwork.baseDirectory","location":"docs/net.corda.testing.node/-mock-network/base-directory.html","searchKeys":["baseDirectory","fun baseDirectory(nodeId: Int): Path","net.corda.testing.node.MockNetwork.baseDirectory"]},{"name":"fun baseDirectory(nodeId: Int): Path","description":"net.corda.testing.node.internal.InternalMockNetwork.baseDirectory","location":"docs/net.corda.testing.node.internal/-internal-mock-network/base-directory.html","searchKeys":["baseDirectory","fun baseDirectory(nodeId: Int): Path","net.corda.testing.node.internal.InternalMockNetwork.baseDirectory"]},{"name":"fun between(fromTime: Instant, untilTime: Instant): FlowTimeWindow","description":"net.corda.core.flows.FlowTimeWindow.Companion.between","location":"docs/net.corda.core.flows/-flow-time-window/-companion/between.html","searchKeys":["between","fun between(fromTime: Instant, untilTime: Instant): FlowTimeWindow","net.corda.core.flows.FlowTimeWindow.Companion.between"]},{"name":"fun between(fromTime: Instant, untilTime: Instant): RecoveryTimeWindow","description":"net.corda.core.flows.RecoveryTimeWindow.Companion.between","location":"docs/net.corda.core.flows/-recovery-time-window/-companion/between.html","searchKeys":["between","fun between(fromTime: Instant, untilTime: Instant): RecoveryTimeWindow","net.corda.core.flows.RecoveryTimeWindow.Companion.between"]},{"name":"fun between(fromTime: Instant, untilTime: Instant): TimeWindow","description":"net.corda.core.contracts.TimeWindow.Companion.between","location":"docs/net.corda.core.contracts/-time-window/-companion/between.html","searchKeys":["between","fun between(fromTime: Instant, untilTime: Instant): TimeWindow","net.corda.core.contracts.TimeWindow.Companion.between"]},{"name":"fun borrow(): <Error class: unknown class><Any, A>","description":"net.corda.core.internal.LazyStickyPool.borrow","location":"docs/net.corda.core.internal/-lazy-sticky-pool/borrow.html","searchKeys":["borrow","fun borrow(): <Error class: unknown class><Any, A>","net.corda.core.internal.LazyStickyPool.borrow"]},{"name":"fun borrow(): A","description":"net.corda.core.internal.LazyPool.borrow","location":"docs/net.corda.core.internal/-lazy-pool/borrow.html","searchKeys":["borrow","fun borrow(): A","net.corda.core.internal.LazyPool.borrow"]},{"name":"fun borrow(stickTo: Any): A","description":"net.corda.core.internal.LazyStickyPool.borrow","location":"docs/net.corda.core.internal/-lazy-sticky-pool/borrow.html","searchKeys":["borrow","fun borrow(stickTo: Any): A","net.corda.core.internal.LazyStickyPool.borrow"]},{"name":"fun build(): ContractUpgradeWireTransaction","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.build","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/build.html","searchKeys":["build","fun build(): ContractUpgradeWireTransaction","net.corda.core.internal.ContractUpgradeTransactionBuilder.build"]},{"name":"fun build(): NotaryChangeWireTransaction","description":"net.corda.core.internal.NotaryChangeTransactionBuilder.build","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/build.html","searchKeys":["build","fun build(): NotaryChangeWireTransaction","net.corda.core.internal.NotaryChangeTransactionBuilder.build"]},{"name":"fun build(merkleRoot: MerkleTree, includeHashes: List<SecureHash>): PartialMerkleTree","description":"net.corda.core.crypto.PartialMerkleTree.Companion.build","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-companion/build.html","searchKeys":["build","fun build(merkleRoot: MerkleTree, includeHashes: List<SecureHash>): PartialMerkleTree","net.corda.core.crypto.PartialMerkleTree.Companion.build"]},{"name":"fun build(principal: X500Principal): CordaX500Name","description":"net.corda.core.identity.CordaX500Name.Companion.build","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/build.html","searchKeys":["build","fun build(principal: X500Principal): CordaX500Name","net.corda.core.identity.CordaX500Name.Companion.build"]},{"name":"fun build(threshold: Int? = null): PublicKey","description":"net.corda.core.crypto.CompositeKey.Builder.build","location":"docs/net.corda.core.crypto/-composite-key/-builder/build.html","searchKeys":["build","fun build(threshold: Int? = null): PublicKey","net.corda.core.crypto.CompositeKey.Builder.build"]},{"name":"fun buildFilteredTransaction(): ContractUpgradeFilteredTransaction","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.buildFilteredTransaction","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/build-filtered-transaction.html","searchKeys":["buildFilteredTransaction","fun buildFilteredTransaction(): ContractUpgradeFilteredTransaction","net.corda.core.transactions.ContractUpgradeWireTransaction.buildFilteredTransaction"]},{"name":"fun buildFilteredTransaction(filtering: Predicate<Any>): FilteredTransaction","description":"net.corda.core.transactions.SignedTransaction.buildFilteredTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/build-filtered-transaction.html","searchKeys":["buildFilteredTransaction","fun buildFilteredTransaction(filtering: Predicate<Any>): FilteredTransaction","net.corda.core.transactions.SignedTransaction.buildFilteredTransaction"]},{"name":"fun buildFilteredTransaction(filtering: Predicate<Any>): FilteredTransaction","description":"net.corda.core.transactions.WireTransaction.buildFilteredTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/build-filtered-transaction.html","searchKeys":["buildFilteredTransaction","fun buildFilteredTransaction(filtering: Predicate<Any>): FilteredTransaction","net.corda.core.transactions.WireTransaction.buildFilteredTransaction"]},{"name":"fun buildFilteredTransaction(wtx: WireTransaction, filtering: Predicate<Any>): FilteredTransaction","description":"net.corda.core.transactions.FilteredTransaction.Companion.buildFilteredTransaction","location":"docs/net.corda.core.transactions/-filtered-transaction/-companion/build-filtered-transaction.html","searchKeys":["buildFilteredTransaction","fun buildFilteredTransaction(wtx: WireTransaction, filtering: Predicate<Any>): FilteredTransaction","net.corda.core.transactions.FilteredTransaction.Companion.buildFilteredTransaction"]},{"name":"fun bytesForCachedPublicKey(key: PublicKey): ByteSequence?","description":"net.corda.core.crypto.internal.PublicKeyCache.bytesForCachedPublicKey","location":"docs/net.corda.core.crypto.internal/-public-key-cache/bytes-for-cached-public-key.html","searchKeys":["bytesForCachedPublicKey","fun bytesForCachedPublicKey(key: PublicKey): ByteSequence?","net.corda.core.crypto.internal.PublicKeyCache.bytesForCachedPublicKey"]},{"name":"fun cacheContractClassName(key: Class<ContractState>, contractClassName: String?): String?","description":"net.corda.core.internal.ContractStateClassCache.cacheContractClassName","location":"docs/net.corda.core.internal/-contract-state-class-cache/cache-contract-class-name.html","searchKeys":["cacheContractClassName","fun cacheContractClassName(key: Class<ContractState>, contractClassName: String?): String?","net.corda.core.internal.ContractStateClassCache.cacheContractClassName"]},{"name":"fun cachePublicKey(key: PublicKey): PublicKey","description":"net.corda.core.crypto.internal.PublicKeyCache.cachePublicKey","location":"docs/net.corda.core.crypto.internal/-public-key-cache/cache-public-key.html","searchKeys":["cachePublicKey","fun cachePublicKey(key: PublicKey): PublicKey","net.corda.core.crypto.internal.PublicKeyCache.cachePublicKey"]},{"name":"fun calculateDaysBetween(startDate: LocalDate, endDate: LocalDate, dcbYear: DayCountBasisYear, dcbDay: DayCountBasisDay): Int","description":"net.corda.finance.contracts.BusinessCalendar.Companion.calculateDaysBetween","location":"docs/net.corda.finance.contracts/-business-calendar/-companion/calculate-days-between.html","searchKeys":["calculateDaysBetween","fun calculateDaysBetween(startDate: LocalDate, endDate: LocalDate, dcbYear: DayCountBasisYear, dcbDay: DayCountBasisDay): Int","net.corda.finance.contracts.BusinessCalendar.Companion.calculateDaysBetween"]},{"name":"fun calculateRandomlySizedAmounts(howMuch: Amount<Currency>, min: Int, max: Int, rng: Random): LongArray","description":"net.corda.testing.internal.vault.VaultFiller.Companion.calculateRandomlySizedAmounts","location":"docs/net.corda.testing.internal.vault/-vault-filler/-companion/calculate-randomly-sized-amounts.html","searchKeys":["calculateRandomlySizedAmounts","fun calculateRandomlySizedAmounts(howMuch: Amount<Currency>, min: Int, max: Int, rng: Random): LongArray","net.corda.testing.internal.vault.VaultFiller.Companion.calculateRandomlySizedAmounts"]},{"name":"fun checkAllComponentsVisible(componentGroupEnum: ComponentGroupEnum)","description":"net.corda.core.transactions.FilteredTransaction.checkAllComponentsVisible","location":"docs/net.corda.core.transactions/-filtered-transaction/check-all-components-visible.html","searchKeys":["checkAllComponentsVisible","fun checkAllComponentsVisible(componentGroupEnum: ComponentGroupEnum)","net.corda.core.transactions.FilteredTransaction.checkAllComponentsVisible"]},{"name":"fun checkCommandVisibility(publicKey: PublicKey)","description":"net.corda.core.transactions.FilteredTransaction.checkCommandVisibility","location":"docs/net.corda.core.transactions/-filtered-transaction/check-command-visibility.html","searchKeys":["checkCommandVisibility","fun checkCommandVisibility(publicKey: PublicKey)","net.corda.core.transactions.FilteredTransaction.checkCommandVisibility"]},{"name":"fun checkFlowIsNotKilled()","description":"net.corda.core.flows.FlowLogic.checkFlowIsNotKilled","location":"docs/net.corda.core.flows/-flow-logic/check-flow-is-not-killed.html","searchKeys":["checkFlowIsNotKilled","fun checkFlowIsNotKilled()","net.corda.core.flows.FlowLogic.checkFlowIsNotKilled"]},{"name":"fun checkFlowIsNotKilled(lazyMessage: () -> Any)","description":"net.corda.core.flows.FlowLogic.checkFlowIsNotKilled","location":"docs/net.corda.core.flows/-flow-logic/check-flow-is-not-killed.html","searchKeys":["checkFlowIsNotKilled","fun checkFlowIsNotKilled(lazyMessage: () -> Any)","net.corda.core.flows.FlowLogic.checkFlowIsNotKilled"]},{"name":"fun checkFlowPermission(permissionName: String, extraAuditData: Map<String, String>)","description":"net.corda.core.flows.FlowLogic.checkFlowPermission","location":"docs/net.corda.core.flows/-flow-logic/check-flow-permission.html","searchKeys":["checkFlowPermission","fun checkFlowPermission(permissionName: String, extraAuditData: Map<String, String>)","net.corda.core.flows.FlowLogic.checkFlowPermission"]},{"name":"fun checkMinimumPlatformVersion(minimumPlatformVersion: Int, requiredMinPlatformVersion: Int, feature: String)","description":"net.corda.core.internal.checkMinimumPlatformVersion","location":"docs/net.corda.core.internal/check-minimum-platform-version.html","searchKeys":["checkMinimumPlatformVersion","fun checkMinimumPlatformVersion(minimumPlatformVersion: Int, requiredMinPlatformVersion: Int, feature: String)","net.corda.core.internal.checkMinimumPlatformVersion"]},{"name":"fun checkNotLocked()","description":"net.corda.core.internal.ThreadBox.checkNotLocked","location":"docs/net.corda.core.internal/-thread-box/check-not-locked.html","searchKeys":["checkNotLocked","fun checkNotLocked()","net.corda.core.internal.ThreadBox.checkNotLocked"]},{"name":"fun checkSignature(sig: TransactionSignature)","description":"net.corda.core.transactions.WireTransaction.checkSignature","location":"docs/net.corda.core.transactions/-wire-transaction/check-signature.html","searchKeys":["checkSignature","fun checkSignature(sig: TransactionSignature)","net.corda.core.transactions.WireTransaction.checkSignature"]},{"name":"fun checkValidity()","description":"net.corda.core.crypto.CompositeKey.checkValidity","location":"docs/net.corda.core.crypto/-composite-key/check-validity.html","searchKeys":["checkValidity","fun checkValidity()","net.corda.core.crypto.CompositeKey.checkValidity"]},{"name":"fun checkWithFun(checkingFun: (Any) -> Boolean): Boolean","description":"net.corda.core.transactions.FilteredTransaction.checkWithFun","location":"docs/net.corda.core.transactions/-filtered-transaction/check-with-fun.html","searchKeys":["checkWithFun","fun checkWithFun(checkingFun: (Any) -> Boolean): Boolean","net.corda.core.transactions.FilteredTransaction.checkWithFun"]},{"name":"fun close()","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.close","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/close.html","searchKeys":["close","fun close()","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.close"]},{"name":"fun close()","description":"net.corda.core.internal.telemetry.TelemetryId.close","location":"docs/net.corda.core.internal.telemetry/-telemetry-id/close.html","searchKeys":["close","fun close()","net.corda.core.internal.telemetry.TelemetryId.close"]},{"name":"fun close(): Iterable<A>","description":"net.corda.core.internal.LazyPool.close","location":"docs/net.corda.core.internal/-lazy-pool/close.html","searchKeys":["close","fun close(): Iterable<A>","net.corda.core.internal.LazyPool.close"]},{"name":"fun close(): Iterable<A>","description":"net.corda.core.internal.LazyStickyPool.close","location":"docs/net.corda.core.internal/-lazy-sticky-pool/close.html","searchKeys":["close","fun close(): Iterable<A>","net.corda.core.internal.LazyStickyPool.close"]},{"name":"fun close(sessions: NonEmptySet<FlowSession>)","description":"net.corda.core.flows.FlowLogic.close","location":"docs/net.corda.core.flows/-flow-logic/close.html","searchKeys":["close","fun close(sessions: NonEmptySet<FlowSession>)","net.corda.core.flows.FlowLogic.close"]},{"name":"fun collectCertificates(jar: JarInputStream): List<X509Certificate>","description":"net.corda.core.internal.JarSignatureCollector.collectCertificates","location":"docs/net.corda.core.internal/-jar-signature-collector/collect-certificates.html","searchKeys":["collectCertificates","fun collectCertificates(jar: JarInputStream): List<X509Certificate>","net.corda.core.internal.JarSignatureCollector.collectCertificates"]},{"name":"fun collectSigners(jar: JarInputStream): List<PublicKey>","description":"net.corda.core.internal.JarSignatureCollector.collectSigners","location":"docs/net.corda.core.internal/-jar-signature-collector/collect-signers.html","searchKeys":["collectSigners","fun collectSigners(jar: JarInputStream): List<PublicKey>","net.corda.core.internal.JarSignatureCollector.collectSigners"]},{"name":"fun collectSigningParties(jar: JarInputStream): List<Party>","description":"net.corda.core.internal.JarSignatureCollector.collectSigningParties","location":"docs/net.corda.core.internal/-jar-signature-collector/collect-signing-parties.html","searchKeys":["collectSigningParties","fun collectSigningParties(jar: JarInputStream): List<Party>","net.corda.core.internal.JarSignatureCollector.collectSigningParties"]},{"name":"fun combinedHash(components: Iterable<SecureHash>, digestService: DigestService): SecureHash","description":"net.corda.core.internal.combinedHash","location":"docs/net.corda.core.internal/combined-hash.html","searchKeys":["combinedHash","fun combinedHash(components: Iterable<SecureHash>, digestService: DigestService): SecureHash","net.corda.core.internal.combinedHash"]},{"name":"fun command(signer: PublicKey, commandData: CommandData): <Error class: unknown class>","description":"net.corda.testing.dsl.TransactionDSL.command","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/command.html","searchKeys":["command","fun command(signer: PublicKey, commandData: CommandData): <Error class: unknown class>","net.corda.testing.dsl.TransactionDSL.command"]},{"name":"fun commands(): List<Command<*>>","description":"net.corda.core.transactions.TransactionBuilder.commands","location":"docs/net.corda.core.transactions/-transaction-builder/commands.html","searchKeys":["commands","fun commands(): List<Command<*>>","net.corda.core.transactions.TransactionBuilder.commands"]},{"name":"fun componentHash(nonce: SecureHash, opaqueBytes: OpaqueBytes): SecureHash","description":"net.corda.core.crypto.DigestService.componentHash","location":"docs/net.corda.core.crypto/-digest-service/component-hash.html","searchKeys":["componentHash","fun componentHash(nonce: SecureHash, opaqueBytes: OpaqueBytes): SecureHash","net.corda.core.crypto.DigestService.componentHash"]},{"name":"fun componentHash(nonce: SecureHash, opaqueBytes: OpaqueBytes): SecureHash","description":"net.corda.core.crypto.componentHash","location":"docs/net.corda.core.crypto/component-hash.html","searchKeys":["componentHash","fun componentHash(nonce: SecureHash, opaqueBytes: OpaqueBytes): SecureHash","net.corda.core.crypto.componentHash"]},{"name":"fun componentHash(opaqueBytes: OpaqueBytes, privacySalt: PrivacySalt, componentGroupIndex: Int, internalIndex: Int): SecureHash","description":"net.corda.core.crypto.DigestService.componentHash","location":"docs/net.corda.core.crypto/-digest-service/component-hash.html","searchKeys":["componentHash","fun componentHash(opaqueBytes: OpaqueBytes, privacySalt: PrivacySalt, componentGroupIndex: Int, internalIndex: Int): SecureHash","net.corda.core.crypto.DigestService.componentHash"]},{"name":"fun componentHash(opaqueBytes: OpaqueBytes, privacySalt: PrivacySalt, componentGroupIndex: Int, internalIndex: Int): SecureHash","description":"net.corda.core.crypto.componentHash","location":"docs/net.corda.core.crypto/component-hash.html","searchKeys":["componentHash","fun componentHash(opaqueBytes: OpaqueBytes, privacySalt: PrivacySalt, componentGroupIndex: Int, internalIndex: Int): SecureHash","net.corda.core.crypto.componentHash"]},{"name":"fun componentHashAs(algorithm: String, bytes: ByteArray): SecureHash","description":"net.corda.core.crypto.SecureHash.Companion.componentHashAs","location":"docs/net.corda.core.crypto/-secure-hash/-companion/component-hash-as.html","searchKeys":["componentHashAs","fun componentHashAs(algorithm: String, bytes: ByteArray): SecureHash","net.corda.core.crypto.SecureHash.Companion.componentHashAs"]},{"name":"fun computeNonce(privacySalt: PrivacySalt, groupIndex: Int, internalIndex: Int): SecureHash","description":"net.corda.core.crypto.DigestService.computeNonce","location":"docs/net.corda.core.crypto/-digest-service/compute-nonce.html","searchKeys":["computeNonce","fun computeNonce(privacySalt: PrivacySalt, groupIndex: Int, internalIndex: Int): SecureHash","net.corda.core.crypto.DigestService.computeNonce"]},{"name":"fun computeNonce(privacySalt: PrivacySalt, groupIndex: Int, internalIndex: Int): SecureHash.SHA256","description":"net.corda.core.crypto.computeNonce","location":"docs/net.corda.core.crypto/compute-nonce.html","searchKeys":["computeNonce","fun computeNonce(privacySalt: PrivacySalt, groupIndex: Int, internalIndex: Int): SecureHash.SHA256","net.corda.core.crypto.computeNonce"]},{"name":"fun concatenate(other: SecureHash): SecureHash","description":"net.corda.core.crypto.SecureHash.concatenate","location":"docs/net.corda.core.crypto/-secure-hash/concatenate.html","searchKeys":["concatenate","fun concatenate(other: SecureHash): SecureHash","net.corda.core.crypto.SecureHash.concatenate"]},{"name":"fun concatenateAs(concatAlgorithm: String, other: SecureHash): SecureHash","description":"net.corda.core.crypto.SecureHash.concatenateAs","location":"docs/net.corda.core.crypto/-secure-hash/concatenate-as.html","searchKeys":["concatenateAs","fun concatenateAs(concatAlgorithm: String, other: SecureHash): SecureHash","net.corda.core.crypto.SecureHash.concatenateAs"]},{"name":"fun configureDatabase(hikariProperties: Properties, databaseConfig: <Error class: unknown class>, wellKnownPartyFromX500Name: (CordaX500Name) -> Party?, wellKnownPartyFromAnonymous: (AbstractParty) -> Party?, schemaService: <Error class: unknown class> = NodeSchemaService(), internalSchemas: Set<MappedSchema> = NodeSchemaService().internalSchemas, cacheFactory: NamedCacheFactory = TestingNamedCacheFactory(), ourName: CordaX500Name = TestIdentity(ALICE_NAME, 70).name, runMigrationScripts: Boolean = true, allowHibernateToManageAppSchema: Boolean = true): <Error class: unknown class>","description":"net.corda.testing.internal.configureDatabase","location":"docs/net.corda.testing.internal/configure-database.html","searchKeys":["configureDatabase","fun configureDatabase(hikariProperties: Properties, databaseConfig: <Error class: unknown class>, wellKnownPartyFromX500Name: (CordaX500Name) -> Party?, wellKnownPartyFromAnonymous: (AbstractParty) -> Party?, schemaService: <Error class: unknown class> = NodeSchemaService(), internalSchemas: Set<MappedSchema> = NodeSchemaService().internalSchemas, cacheFactory: NamedCacheFactory = TestingNamedCacheFactory(), ourName: CordaX500Name = TestIdentity(ALICE_NAME, 70).name, runMigrationScripts: Boolean = true, allowHibernateToManageAppSchema: Boolean = true): <Error class: unknown class>","net.corda.testing.internal.configureDatabase"]},{"name":"fun constraintInfo(type: Vault.ConstraintInfo.Type, data: ByteArray?): Vault.ConstraintInfo","description":"net.corda.core.node.services.Vault.ConstraintInfo.Companion.constraintInfo","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-companion/constraint-info.html","searchKeys":["constraintInfo","fun constraintInfo(type: Vault.ConstraintInfo.Type, data: ByteArray?): Vault.ConstraintInfo","net.corda.core.node.services.Vault.ConstraintInfo.Companion.constraintInfo"]},{"name":"fun consumeCash(amount: Amount<Currency>, to: AbstractParty): Vault.Update<ContractState>","description":"net.corda.testing.internal.vault.VaultFiller.consumeCash","location":"docs/net.corda.testing.internal.vault/-vault-filler/consume-cash.html","searchKeys":["consumeCash","fun consumeCash(amount: Amount<Currency>, to: AbstractParty): Vault.Update<ContractState>","net.corda.testing.internal.vault.VaultFiller.consumeCash"]},{"name":"fun consumeDeals(dealStates: List<StateAndRef<DealState>>)","description":"net.corda.testing.internal.vault.VaultFiller.consumeDeals","location":"docs/net.corda.testing.internal.vault/-vault-filler/consume-deals.html","searchKeys":["consumeDeals","fun consumeDeals(dealStates: List<StateAndRef<DealState>>)","net.corda.testing.internal.vault.VaultFiller.consumeDeals"]},{"name":"fun consumeLinearStates(linearStates: List<StateAndRef<LinearState>>)","description":"net.corda.testing.internal.vault.VaultFiller.consumeLinearStates","location":"docs/net.corda.testing.internal.vault/-vault-filler/consume-linear-states.html","searchKeys":["consumeLinearStates","fun consumeLinearStates(linearStates: List<StateAndRef<LinearState>>)","net.corda.testing.internal.vault.VaultFiller.consumeLinearStates"]},{"name":"fun consumeStates(states: Iterable<StateAndRef<*>>)","description":"net.corda.testing.internal.vault.VaultFiller.consumeStates","location":"docs/net.corda.testing.internal.vault/-vault-filler/consume-states.html","searchKeys":["consumeStates","fun consumeStates(states: Iterable<StateAndRef<*>>)","net.corda.testing.internal.vault.VaultFiller.consumeStates"]},{"name":"fun contractClassName(key: Class<ContractState>): String?","description":"net.corda.core.internal.ContractStateClassCache.contractClassName","location":"docs/net.corda.core.internal/-contract-state-class-cache/contract-class-name.html","searchKeys":["contractClassName","fun contractClassName(key: Class<ContractState>): String?","net.corda.core.internal.ContractStateClassCache.contractClassName"]},{"name":"fun copy(): ByteSequence","description":"net.corda.core.utilities.ByteSequence.copy","location":"docs/net.corda.core.utilities/-byte-sequence/copy.html","searchKeys":["copy","fun copy(): ByteSequence","net.corda.core.utilities.ByteSequence.copy"]},{"name":"fun copy(): TransactionBuilder","description":"net.corda.core.transactions.TransactionBuilder.copy","location":"docs/net.corda.core.transactions/-transaction-builder/copy.html","searchKeys":["copy","fun copy(): TransactionBuilder","net.corda.core.transactions.TransactionBuilder.copy"]},{"name":"fun copy(connectionMaxRetryInterval: Duration = this.connectionMaxRetryInterval, minimumServerProtocolVersion: Int = this.minimumServerProtocolVersion, trackRpcCallSites: Boolean = this.trackRpcCallSites, reapInterval: Duration = this.reapInterval, observationExecutorPoolSize: Int = this.observationExecutorPoolSize, cacheConcurrencyLevel: Int = this.cacheConcurrencyLevel, connectionRetryInterval: Duration = this.connectionRetryInterval, connectionRetryIntervalMultiplier: Double = this.connectionRetryIntervalMultiplier, maxReconnectAttempts: Int = this.maxReconnectAttempts, maxFileSize: Int = this.maxFileSize, deduplicationCacheExpiry: Duration = this.deduplicationCacheExpiry, openTelemetryEnabled: Boolean = this.openTelemetryEnabled, simpleLogTelemetryEnabled: Boolean = this.simpleLogTelemetryEnabled, spanStartEndEventsEnabled: Boolean = this.spanStartEndEventsEnabled, copyBaggageToTags: Boolean = this.copyBaggageToTags): CordaRPCClientConfiguration","description":"net.corda.client.rpc.CordaRPCClientConfiguration.copy","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/copy.html","searchKeys":["copy","fun copy(connectionMaxRetryInterval: Duration = this.connectionMaxRetryInterval, minimumServerProtocolVersion: Int = this.minimumServerProtocolVersion, trackRpcCallSites: Boolean = this.trackRpcCallSites, reapInterval: Duration = this.reapInterval, observationExecutorPoolSize: Int = this.observationExecutorPoolSize, cacheConcurrencyLevel: Int = this.cacheConcurrencyLevel, connectionRetryInterval: Duration = this.connectionRetryInterval, connectionRetryIntervalMultiplier: Double = this.connectionRetryIntervalMultiplier, maxReconnectAttempts: Int = this.maxReconnectAttempts, maxFileSize: Int = this.maxFileSize, deduplicationCacheExpiry: Duration = this.deduplicationCacheExpiry, openTelemetryEnabled: Boolean = this.openTelemetryEnabled, simpleLogTelemetryEnabled: Boolean = this.simpleLogTelemetryEnabled, spanStartEndEventsEnabled: Boolean = this.spanStartEndEventsEnabled, copyBaggageToTags: Boolean = this.copyBaggageToTags): CordaRPCClientConfiguration","net.corda.client.rpc.CordaRPCClientConfiguration.copy"]},{"name":"fun copy(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL): Vault.Update<U>","description":"net.corda.core.node.services.Vault.Update.copy","location":"docs/net.corda.core.node.services/-vault/-update/copy.html","searchKeys":["copy","fun copy(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL): Vault.Update<U>","net.corda.core.node.services.Vault.Update.copy"]},{"name":"fun copy(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL, references: Set<StateAndRef<U>> = emptySet()): Vault.Update<U>","description":"net.corda.core.node.services.Vault.Update.copy","location":"docs/net.corda.core.node.services/-vault/-update/copy.html","searchKeys":["copy","fun copy(consumed: Set<StateAndRef<U>>, produced: Set<StateAndRef<U>>, flowId: UUID? = null, type: Vault.UpdateType = UpdateType.GENERAL, references: Set<StateAndRef<U>> = emptySet()): Vault.Update<U>","net.corda.core.node.services.Vault.Update.copy"]},{"name":"fun copy(expression: CriteriaExpression<L, Boolean> = this.expression, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes): QueryCriteria.VaultCustomQueryCriteria<L>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/copy.html","searchKeys":["copy","fun copy(expression: CriteriaExpression<L, Boolean> = this.expression, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes): QueryCriteria.VaultCustomQueryCriteria<L>","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.copy"]},{"name":"fun copy(forcedID: Int?, legalName: CordaX500Name?, entropyRoot: BigInteger, configOverrides: MockNodeConfigOverrides): MockNodeParameters","description":"net.corda.testing.node.MockNodeParameters.copy","location":"docs/net.corda.testing.node/-mock-node-parameters/copy.html","searchKeys":["copy","fun copy(forcedID: Int?, legalName: CordaX500Name?, entropyRoot: BigInteger, configOverrides: MockNodeConfigOverrides): MockNodeParameters","net.corda.testing.node.MockNodeParameters.copy"]},{"name":"fun copy(hashOfTransactionId: SecureHash): StateConsumptionDetails","description":"net.corda.core.flows.StateConsumptionDetails.copy","location":"docs/net.corda.core.flows/-state-consumption-details/copy.html","searchKeys":["copy","fun copy(hashOfTransactionId: SecureHash): StateConsumptionDetails","net.corda.core.flows.StateConsumptionDetails.copy"]},{"name":"fun copy(id: StateMachineRunId = this.id, flowLogicClassName: String = this.flowLogicClassName, initiator: FlowInitiator = this.initiator, progressTrackerStepAndUpdates: DataFeed<String, String>? = this.progressTrackerStepAndUpdates): StateMachineInfo","description":"net.corda.core.messaging.StateMachineInfo.copy","location":"docs/net.corda.core.messaging/-state-machine-info/copy.html","searchKeys":["copy","fun copy(id: StateMachineRunId = this.id, flowLogicClassName: String = this.flowLogicClassName, initiator: FlowInitiator = this.initiator, progressTrackerStepAndUpdates: DataFeed<String, String>? = this.progressTrackerStepAndUpdates): StateMachineInfo","net.corda.core.messaging.StateMachineInfo.copy"]},{"name":"fun copy(id: StateMachineRunId, returnValue: CordaFuture<A>, progress: <Error class: unknown class><String>): FlowProgressHandleImpl<A>","description":"net.corda.core.messaging.FlowProgressHandleImpl.copy","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/copy.html","searchKeys":["copy","fun copy(id: StateMachineRunId, returnValue: CordaFuture<A>, progress: <Error class: unknown class><String>): FlowProgressHandleImpl<A>","net.corda.core.messaging.FlowProgressHandleImpl.copy"]},{"name":"fun copy(inputs: List<StateAndRef<ContractState>> = this.inputs, notary: Party = this.notary, legacyContractAttachment: Attachment = this.legacyContractAttachment, upgradedContractClassName: ContractClassName = this.upgradedContract::class.java.name, upgradedContractAttachment: Attachment = this.upgradedContractAttachment, id: SecureHash = this.id, privacySalt: PrivacySalt = this.privacySalt, sigs: List<TransactionSignature> = this.sigs, networkParameters: NetworkParameters = this.networkParameters): ContractUpgradeLedgerTransaction","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.copy","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/copy.html","searchKeys":["copy","fun copy(inputs: List<StateAndRef<ContractState>> = this.inputs, notary: Party = this.notary, legacyContractAttachment: Attachment = this.legacyContractAttachment, upgradedContractClassName: ContractClassName = this.upgradedContract::class.java.name, upgradedContractAttachment: Attachment = this.upgradedContractAttachment, id: SecureHash = this.id, privacySalt: PrivacySalt = this.privacySalt, sigs: List<TransactionSignature> = this.sigs, networkParameters: NetworkParameters = this.networkParameters): ContractUpgradeLedgerTransaction","net.corda.core.transactions.ContractUpgradeLedgerTransaction.copy"]},{"name":"fun copy(inputs: List<StateAndRef<ContractState>> = this.inputs, notary: Party = this.notary, newNotary: Party = this.newNotary, id: SecureHash = this.id, sigs: List<TransactionSignature> = this.sigs): NotaryChangeLedgerTransaction","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.copy","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/copy.html","searchKeys":["copy","fun copy(inputs: List<StateAndRef<ContractState>> = this.inputs, notary: Party = this.notary, newNotary: Party = this.newNotary, id: SecureHash = this.id, sigs: List<TransactionSignature> = this.sigs): NotaryChangeLedgerTransaction","net.corda.core.transactions.NotaryChangeLedgerTransaction.copy"]},{"name":"fun copy(inputs: List<StateAndRef<ContractState>> = this.inputs, outputs: List<TransactionState<ContractState>> = this.outputs, commands: List<CommandWithParties<CommandData>> = this.commands, attachments: List<Attachment> = this.attachments, id: SecureHash = this.id, notary: Party? = this.notary, timeWindow: TimeWindow? = this.timeWindow, privacySalt: PrivacySalt = this.privacySalt, networkParameters: NetworkParameters? = this.networkParameters): LedgerTransaction","description":"net.corda.core.transactions.LedgerTransaction.copy","location":"docs/net.corda.core.transactions/-ledger-transaction/copy.html","searchKeys":["copy","fun copy(inputs: List<StateAndRef<ContractState>> = this.inputs, outputs: List<TransactionState<ContractState>> = this.outputs, commands: List<CommandWithParties<CommandData>> = this.commands, attachments: List<Attachment> = this.attachments, id: SecureHash = this.id, notary: Party? = this.notary, timeWindow: TimeWindow? = this.timeWindow, privacySalt: PrivacySalt = this.privacySalt, networkParameters: NetworkParameters? = this.networkParameters): LedgerTransaction","net.corda.core.transactions.LedgerTransaction.copy"]},{"name":"fun copy(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt): LedgerTransaction","description":"net.corda.core.transactions.LedgerTransaction.copy","location":"docs/net.corda.core.transactions/-ledger-transaction/copy.html","searchKeys":["copy","fun copy(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt): LedgerTransaction","net.corda.core.transactions.LedgerTransaction.copy"]},{"name":"fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters): DriverParameters","description":"net.corda.testing.driver.DriverParameters.copy","location":"docs/net.corda.testing.driver/-driver-parameters/copy.html","searchKeys":["copy","fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters): DriverParameters","net.corda.testing.driver.DriverParameters.copy"]},{"name":"fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, cordappsForAllNodes: Set<TestCordapp>?): DriverParameters","description":"net.corda.testing.driver.DriverParameters.copy","location":"docs/net.corda.testing.driver/-driver-parameters/copy.html","searchKeys":["copy","fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, cordappsForAllNodes: Set<TestCordapp>?): DriverParameters","net.corda.testing.driver.DriverParameters.copy"]},{"name":"fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?): DriverParameters","description":"net.corda.testing.driver.DriverParameters.copy","location":"docs/net.corda.testing.driver/-driver-parameters/copy.html","searchKeys":["copy","fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?): DriverParameters","net.corda.testing.driver.DriverParameters.copy"]},{"name":"fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.copy","location":"docs/net.corda.testing.driver/-driver-parameters/copy.html","searchKeys":["copy","fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.copy"]},{"name":"fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean, premigrateH2Database: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.copy","location":"docs/net.corda.testing.driver/-driver-parameters/copy.html","searchKeys":["copy","fun copy(isDebug: Boolean, driverDirectory: Path, portAllocation: PortAllocation, debugPortAllocation: PortAllocation, systemProperties: Map<String, String>, useTestClock: Boolean, startNodesInProcess: Boolean, waitForAllNodesToFinish: Boolean, notarySpecs: List<NotarySpec>, extraCordappPackagesToScan: List<String>, jmxPolicy: JmxPolicy, networkParameters: NetworkParameters, notaryCustomOverrides: Map<String, Any?>, inMemoryDB: Boolean, cordappsForAllNodes: Collection<TestCordapp>?, environmentVariables: Map<String, String>, allowHibernateToManageAppSchema: Boolean, premigrateH2Database: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.copy"]},{"name":"fun copy(left: PartialMerkleTree.PartialTree, right: PartialMerkleTree.PartialTree): PartialMerkleTree.PartialTree.Node","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.copy","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-node/copy.html","searchKeys":["copy","fun copy(left: PartialMerkleTree.PartialTree, right: PartialMerkleTree.PartialTree): PartialMerkleTree.PartialTree.Node","net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.copy"]},{"name":"fun copy(minimumPlatformVersion: Int = this.minimumPlatformVersion, notaries: List<NotaryInfo> = this.notaries, maxMessageSize: Int = this.maxMessageSize, maxTransactionSize: Int = this.maxTransactionSize, modifiedTime: Instant = this.modifiedTime, epoch: Int = this.epoch, whitelistedContractImplementations: Map<String, List<AttachmentId>> = this.whitelistedContractImplementations): NetworkParameters","description":"net.corda.core.node.NetworkParameters.copy","location":"docs/net.corda.core.node/-network-parameters/copy.html","searchKeys":["copy","fun copy(minimumPlatformVersion: Int = this.minimumPlatformVersion, notaries: List<NotaryInfo> = this.notaries, maxMessageSize: Int = this.maxMessageSize, maxTransactionSize: Int = this.maxTransactionSize, modifiedTime: Instant = this.modifiedTime, epoch: Int = this.epoch, whitelistedContractImplementations: Map<String, List<AttachmentId>> = this.whitelistedContractImplementations): NetworkParameters","net.corda.core.node.NetworkParameters.copy"]},{"name":"fun copy(minimumPlatformVersion: Int = this.minimumPlatformVersion, notaries: List<NotaryInfo> = this.notaries, maxMessageSize: Int = this.maxMessageSize, maxTransactionSize: Int = this.maxTransactionSize, modifiedTime: Instant = this.modifiedTime, epoch: Int = this.epoch, whitelistedContractImplementations: Map<String, List<AttachmentId>> = this.whitelistedContractImplementations, eventHorizon: Duration = this.eventHorizon): NetworkParameters","description":"net.corda.core.node.NetworkParameters.copy","location":"docs/net.corda.core.node/-network-parameters/copy.html","searchKeys":["copy","fun copy(minimumPlatformVersion: Int = this.minimumPlatformVersion, notaries: List<NotaryInfo> = this.notaries, maxMessageSize: Int = this.maxMessageSize, maxTransactionSize: Int = this.maxTransactionSize, modifiedTime: Instant = this.modifiedTime, epoch: Int = this.epoch, whitelistedContractImplementations: Map<String, List<AttachmentId>> = this.whitelistedContractImplementations, eventHorizon: Duration = this.eventHorizon): NetworkParameters","net.corda.core.node.NetworkParameters.copy"]},{"name":"fun copy(minimumPlatformVersion: Int = this.minimumPlatformVersion, notaries: List<NotaryInfo> = this.notaries, maxMessageSize: Int = this.maxMessageSize, maxTransactionSize: Int = this.maxTransactionSize, modifiedTime: Instant = this.modifiedTime, epoch: Int = this.epoch, whitelistedContractImplementations: Map<String, List<AttachmentId>> = this.whitelistedContractImplementations, eventHorizon: Duration = this.eventHorizon, packageOwnership: Map<String, PublicKey> = this.packageOwnership): NetworkParameters","description":"net.corda.core.node.NetworkParameters.copy","location":"docs/net.corda.core.node/-network-parameters/copy.html","searchKeys":["copy","fun copy(minimumPlatformVersion: Int = this.minimumPlatformVersion, notaries: List<NotaryInfo> = this.notaries, maxMessageSize: Int = this.maxMessageSize, maxTransactionSize: Int = this.maxTransactionSize, modifiedTime: Instant = this.modifiedTime, epoch: Int = this.epoch, whitelistedContractImplementations: Map<String, List<AttachmentId>> = this.whitelistedContractImplementations, eventHorizon: Duration = this.eventHorizon, packageOwnership: Map<String, PublicKey> = this.packageOwnership): NetworkParameters","net.corda.core.node.NetworkParameters.copy"]},{"name":"fun copy(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null): NotarySpec","description":"net.corda.testing.node.NotarySpec.copy","location":"docs/net.corda.testing.node/-notary-spec/copy.html","searchKeys":["copy","fun copy(name: CordaX500Name, validating: Boolean = true, rpcUsers: List<User> = emptyList(), verifierType: VerifierType = VerifierType.InMemory, cluster: ClusterSpec? = null): NotarySpec","net.corda.testing.node.NotarySpec.copy"]},{"name":"fun copy(networkSendManuallyPumped: Boolean, threadPerNode: Boolean, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec>, networkParameters: NetworkParameters): MockNetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.copy","location":"docs/net.corda.testing.node/-mock-network-parameters/copy.html","searchKeys":["copy","fun copy(networkSendManuallyPumped: Boolean, threadPerNode: Boolean, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy, notarySpecs: List<MockNetworkNotarySpec>, networkParameters: NetworkParameters): MockNetworkParameters","net.corda.testing.node.MockNetworkParameters.copy"]},{"name":"fun copy(origin: InvocationOrigin = this.origin, trace: Trace = this.trace, actor: Actor? = this.actor, externalTrace: Trace? = this.externalTrace, impersonatedActor: Actor? = this.impersonatedActor): InvocationContext","description":"net.corda.core.context.InvocationContext.copy","location":"docs/net.corda.core.context/-invocation-context/copy.html","searchKeys":["copy","fun copy(origin: InvocationOrigin = this.origin, trace: Trace = this.trace, actor: Actor? = this.actor, externalTrace: Trace? = this.externalTrace, impersonatedActor: Actor? = this.impersonatedActor): InvocationContext","net.corda.core.context.InvocationContext.copy"]},{"name":"fun copy(origin: InvocationOrigin = this.origin, trace: Trace = this.trace, actor: Actor? = this.actor, externalTrace: Trace? = this.externalTrace, impersonatedActor: Actor? = this.impersonatedActor, arguments: List<Any?>? = this.arguments, clientId: String? = this.clientId): InvocationContext","description":"net.corda.core.context.InvocationContext.copy","location":"docs/net.corda.core.context/-invocation-context/copy.html","searchKeys":["copy","fun copy(origin: InvocationOrigin = this.origin, trace: Trace = this.trace, actor: Actor? = this.actor, externalTrace: Trace? = this.externalTrace, impersonatedActor: Actor? = this.impersonatedActor, arguments: List<Any?>? = this.arguments, clientId: String? = this.clientId): InvocationContext","net.corda.core.context.InvocationContext.copy"]},{"name":"fun copy(participants: List<AbstractParty>? = this.participants, owner: List<AbstractParty>? = this.owner, quantity: ColumnPredicate<Long>? = this.quantity, issuer: List<AbstractParty>? = this.issuer, issuerRef: List<OpaqueBytes>? = this.issuerRef, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/copy.html","searchKeys":["copy","fun copy(participants: List<AbstractParty>? = this.participants, owner: List<AbstractParty>? = this.owner, quantity: ColumnPredicate<Long>? = this.quantity, issuer: List<AbstractParty>? = this.issuer, issuerRef: List<OpaqueBytes>? = this.issuerRef, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.copy"]},{"name":"fun copy(participants: List<AbstractParty>? = this.participants, owner: List<AbstractParty>? = this.owner, quantity: ColumnPredicate<Long>? = this.quantity, issuer: List<AbstractParty>? = this.issuer, issuerRef: List<OpaqueBytes>? = this.issuerRef, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes, relevancyStatus: Vault.RelevancyStatus = this.relevancyStatus): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/copy.html","searchKeys":["copy","fun copy(participants: List<AbstractParty>? = this.participants, owner: List<AbstractParty>? = this.owner, quantity: ColumnPredicate<Long>? = this.quantity, issuer: List<AbstractParty>? = this.issuer, issuerRef: List<OpaqueBytes>? = this.issuerRef, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes, relevancyStatus: Vault.RelevancyStatus = this.relevancyStatus): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.copy"]},{"name":"fun copy(participants: List<AbstractParty>? = this.participants, uuid: List<UUID>? = this.uuid, externalId: List<String>? = this.externalId, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/copy.html","searchKeys":["copy","fun copy(participants: List<AbstractParty>? = this.participants, uuid: List<UUID>? = this.uuid, externalId: List<String>? = this.externalId, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.copy"]},{"name":"fun copy(participants: List<AbstractParty>? = this.participants, uuid: List<UUID>? = this.uuid, externalId: List<String>? = this.externalId, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes, relevancyStatus: Vault.RelevancyStatus = this.relevancyStatus): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/copy.html","searchKeys":["copy","fun copy(participants: List<AbstractParty>? = this.participants, uuid: List<UUID>? = this.uuid, externalId: List<String>? = this.externalId, status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes, relevancyStatus: Vault.RelevancyStatus = this.relevancyStatus): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.copy"]},{"name":"fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String): NodeParameters","description":"net.corda.testing.driver.NodeParameters.copy","location":"docs/net.corda.testing.driver/-node-parameters/copy.html","searchKeys":["copy","fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String): NodeParameters","net.corda.testing.driver.NodeParameters.copy"]},{"name":"fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>): NodeParameters","description":"net.corda.testing.driver.NodeParameters.copy","location":"docs/net.corda.testing.driver/-node-parameters/copy.html","searchKeys":["copy","fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>): NodeParameters","net.corda.testing.driver.NodeParameters.copy"]},{"name":"fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null): NodeParameters","description":"net.corda.testing.driver.NodeParameters.copy","location":"docs/net.corda.testing.driver/-node-parameters/copy.html","searchKeys":["copy","fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null): NodeParameters","net.corda.testing.driver.NodeParameters.copy"]},{"name":"fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null): NodeParameters","description":"net.corda.testing.driver.NodeParameters.copy","location":"docs/net.corda.testing.driver/-node-parameters/copy.html","searchKeys":["copy","fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null): NodeParameters","net.corda.testing.driver.NodeParameters.copy"]},{"name":"fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null, systemProperties: Map<String, String> = emptyMap()): NodeParameters","description":"net.corda.testing.driver.NodeParameters.copy","location":"docs/net.corda.testing.driver/-node-parameters/copy.html","searchKeys":["copy","fun copy(providedName: CordaX500Name?, rpcUsers: List<User>, verifierType: VerifierType, customOverrides: Map<String, Any?>, startInSameProcess: Boolean?, maximumHeapSize: String, additionalCordapps: Collection<TestCordapp> = emptySet(), flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>, logLevelOverride: String? = null, rpcAddress: NetworkHostAndPort? = null, systemProperties: Map<String, String> = emptyMap()): NodeParameters","net.corda.testing.driver.NodeParameters.copy"]},{"name":"fun copy(ref: StateRef = this.ref, contractStateClassName: String = this.contractStateClassName, recordedTime: Instant = this.recordedTime, consumedTime: Instant? = this.consumedTime, status: Vault.StateStatus = this.status, notary: AbstractParty? = this.notary, lockId: String? = this.lockId, lockUpdateTime: Instant? = this.lockUpdateTime): Vault.StateMetadata","description":"net.corda.core.node.services.Vault.StateMetadata.copy","location":"docs/net.corda.core.node.services/-vault/-state-metadata/copy.html","searchKeys":["copy","fun copy(ref: StateRef = this.ref, contractStateClassName: String = this.contractStateClassName, recordedTime: Instant = this.recordedTime, consumedTime: Instant? = this.consumedTime, status: Vault.StateStatus = this.status, notary: AbstractParty? = this.notary, lockId: String? = this.lockId, lockUpdateTime: Instant? = this.lockUpdateTime): Vault.StateMetadata","net.corda.core.node.services.Vault.StateMetadata.copy"]},{"name":"fun copy(ref: StateRef = this.ref, contractStateClassName: String = this.contractStateClassName, recordedTime: Instant = this.recordedTime, consumedTime: Instant? = this.consumedTime, status: Vault.StateStatus = this.status, notary: AbstractParty? = this.notary, lockId: String? = this.lockId, lockUpdateTime: Instant? = this.lockUpdateTime, relevancyStatus: Vault.RelevancyStatus?): Vault.StateMetadata","description":"net.corda.core.node.services.Vault.StateMetadata.copy","location":"docs/net.corda.core.node.services/-vault/-state-metadata/copy.html","searchKeys":["copy","fun copy(ref: StateRef = this.ref, contractStateClassName: String = this.contractStateClassName, recordedTime: Instant = this.recordedTime, consumedTime: Instant? = this.consumedTime, status: Vault.StateStatus = this.status, notary: AbstractParty? = this.notary, lockId: String? = this.lockId, lockUpdateTime: Instant? = this.lockUpdateTime, relevancyStatus: Vault.RelevancyStatus?): Vault.StateMetadata","net.corda.core.node.services.Vault.StateMetadata.copy"]},{"name":"fun copy(serializedComponents: List<OpaqueBytes>): NotaryChangeWireTransaction","description":"net.corda.core.transactions.NotaryChangeWireTransaction.copy","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/copy.html","searchKeys":["copy","fun copy(serializedComponents: List<OpaqueBytes>): NotaryChangeWireTransaction","net.corda.core.transactions.NotaryChangeWireTransaction.copy"]},{"name":"fun copy(serializedComponents: List<OpaqueBytes>, privacySalt: PrivacySalt): ContractUpgradeWireTransaction","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.copy","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/copy.html","searchKeys":["copy","fun copy(serializedComponents: List<OpaqueBytes>, privacySalt: PrivacySalt): ContractUpgradeWireTransaction","net.corda.core.transactions.ContractUpgradeWireTransaction.copy"]},{"name":"fun copy(states: List<StateAndRef<T>> = this.states, statesMetadata: List<Vault.StateMetadata> = this.statesMetadata, totalStatesAvailable: Long = this.totalStatesAvailable, stateTypes: Vault.StateStatus = this.stateTypes, otherResults: List<Any> = this.otherResults): Vault.Page<T>","description":"net.corda.core.node.services.Vault.Page.copy","location":"docs/net.corda.core.node.services/-vault/-page/copy.html","searchKeys":["copy","fun copy(states: List<StateAndRef<T>> = this.states, statesMetadata: List<Vault.StateMetadata> = this.statesMetadata, totalStatesAvailable: Long = this.totalStatesAvailable, stateTypes: Vault.StateStatus = this.stateTypes, otherResults: List<Any> = this.otherResults): Vault.Page<T>","net.corda.core.node.services.Vault.Page.copy"]},{"name":"fun copy(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/copy.html","searchKeys":["copy","fun copy(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.copy"]},{"name":"fun copy(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null, externalIds: List<UUID> = emptyList()): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/copy.html","searchKeys":["copy","fun copy(status: Vault.StateStatus = Vault.StateStatus.UNCONSUMED, contractStateTypes: Set<Class<out ContractState>>? = null, stateRefs: List<StateRef>? = null, notary: List<AbstractParty>? = null, softLockingCondition: QueryCriteria.SoftLockingCondition? = null, timeCondition: QueryCriteria.TimeCondition? = null, relevancyStatus: Vault.RelevancyStatus = Vault.RelevancyStatus.ALL, constraintTypes: Set<Vault.ConstraintInfo.Type> = emptySet(), constraints: Set<Vault.ConstraintInfo> = emptySet(), participants: List<AbstractParty>? = null, externalIds: List<UUID> = emptyList()): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.copy"]},{"name":"fun copy(status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes, stateRefs: List<StateRef>? = this.stateRefs, notary: List<AbstractParty>? = this.notary, softLockingCondition: QueryCriteria.SoftLockingCondition? = this.softLockingCondition, timeCondition: QueryCriteria.TimeCondition? = this.timeCondition): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/copy.html","searchKeys":["copy","fun copy(status: Vault.StateStatus = this.status, contractStateTypes: Set<Class<out ContractState>>? = this.contractStateTypes, stateRefs: List<StateRef>? = this.stateRefs, notary: List<AbstractParty>? = this.notary, softLockingCondition: QueryCriteria.SoftLockingCondition? = this.softLockingCondition, timeCondition: QueryCriteria.TimeCondition? = this.timeCondition): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.copy"]},{"name":"fun copy(uploaderCondition: ColumnPredicate<String>? = this.uploaderCondition, filenameCondition: ColumnPredicate<String>? = this.filenameCondition, uploadDateCondition: ColumnPredicate<Instant>? = this.uploadDateCondition): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.copy","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/copy.html","searchKeys":["copy","fun copy(uploaderCondition: ColumnPredicate<String>? = this.uploaderCondition, filenameCondition: ColumnPredicate<String>? = this.filenameCondition, uploadDateCondition: ColumnPredicate<Instant>? = this.uploadDateCondition): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.copy"]},{"name":"fun copy(visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, hiddenComponents: Map<Int, SecureHash>): ContractUpgradeFilteredTransaction","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.copy","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/copy.html","searchKeys":["copy","fun copy(visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>, hiddenComponents: Map<Int, SecureHash>): ContractUpgradeFilteredTransaction","net.corda.core.transactions.ContractUpgradeFilteredTransaction.copy"]},{"name":"fun copyBytes(): ByteArray","description":"net.corda.core.utilities.ByteSequence.copyBytes","location":"docs/net.corda.core.utilities/-byte-sequence/copy-bytes.html","searchKeys":["copyBytes","fun copyBytes(): ByteArray","net.corda.core.utilities.ByteSequence.copyBytes"]},{"name":"fun copyDatabaseSnapshot(baseDirectory: Path)","description":"net.corda.testing.node.DatabaseSnapshot.copyDatabaseSnapshot","location":"docs/net.corda.testing.node/-database-snapshot/copy-database-snapshot.html","searchKeys":["copyDatabaseSnapshot","fun copyDatabaseSnapshot(baseDirectory: Path)","net.corda.testing.node.DatabaseSnapshot.copyDatabaseSnapshot"]},{"name":"fun cordappForClasses(vararg classes: Class<*>): CustomCordapp","description":"net.corda.testing.node.internal.cordappForClasses","location":"docs/net.corda.testing.node.internal/cordapp-for-classes.html","searchKeys":["cordappForClasses","fun cordappForClasses(vararg classes: Class<*>): CustomCordapp","net.corda.testing.node.internal.cordappForClasses"]},{"name":"fun cordappWithFixups(fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>>): CustomCordapp","description":"net.corda.testing.node.internal.cordappWithFixups","location":"docs/net.corda.testing.node.internal/cordapp-with-fixups.html","searchKeys":["cordappWithFixups","fun cordappWithFixups(fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>>): CustomCordapp","net.corda.testing.node.internal.cordappWithFixups"]},{"name":"fun cordappWithPackages(vararg packageNames: String): CustomCordapp","description":"net.corda.testing.node.internal.cordappWithPackages","location":"docs/net.corda.testing.node.internal/cordapp-with-packages.html","searchKeys":["cordappWithPackages","fun cordappWithPackages(vararg packageNames: String): CustomCordapp","net.corda.testing.node.internal.cordappWithPackages"]},{"name":"fun cordappsForPackages(packageNames: Iterable<String>): Set<CustomCordapp>","description":"net.corda.testing.node.internal.cordappsForPackages","location":"docs/net.corda.testing.node.internal/cordapps-for-packages.html","searchKeys":["cordappsForPackages","fun cordappsForPackages(packageNames: Iterable<String>): Set<CustomCordapp>","net.corda.testing.node.internal.cordappsForPackages"]},{"name":"fun cordappsForPackages(vararg packageNames: String): Set<CustomCordapp>","description":"net.corda.testing.node.internal.cordappsForPackages","location":"docs/net.corda.testing.node.internal/cordapps-for-packages.html","searchKeys":["cordappsForPackages","fun cordappsForPackages(vararg packageNames: String): Set<CustomCordapp>","net.corda.testing.node.internal.cordappsForPackages"]},{"name":"fun create(algorithm: String): DigestAlgorithm","description":"net.corda.core.crypto.internal.DigestAlgorithmFactory.Companion.create","location":"docs/net.corda.core.crypto.internal/-digest-algorithm-factory/-companion/create.html","searchKeys":["create","fun create(algorithm: String): DigestAlgorithm","net.corda.core.crypto.internal.DigestAlgorithmFactory.Companion.create"]},{"name":"fun create(attachment: Attachment, contract: ContractClassName, additionalContracts: Set<ContractClassName> = emptySet(), uploader: String? = null, signerKeys: List<PublicKey> = emptyList(), version: Int = DEFAULT_CORDAPP_VERSION): ContractAttachment","description":"net.corda.core.contracts.ContractAttachment.Companion.create","location":"docs/net.corda.core.contracts/-contract-attachment/-companion/create.html","searchKeys":["create","fun create(attachment: Attachment, contract: ContractClassName, additionalContracts: Set<ContractClassName> = emptySet(), uploader: String? = null, signerKeys: List<PublicKey> = emptyList(), version: Int = DEFAULT_CORDAPP_VERSION): ContractAttachment","net.corda.core.contracts.ContractAttachment.Companion.create"]},{"name":"fun create(certificate: X509Certificate): Party","description":"net.corda.core.identity.Party.Companion.create","location":"docs/net.corda.core.identity/-party/-companion/create.html","searchKeys":["create","fun create(certificate: X509Certificate): Party","net.corda.core.identity.Party.Companion.create"]},{"name":"fun create(cordapp: Cordapp, attachmentId: SecureHash?, classLoader: ClassLoader, config: CordappConfig): CordappContext","description":"net.corda.core.cordapp.CordappContext.Companion.create","location":"docs/net.corda.core.cordapp/-cordapp-context/-companion/create.html","searchKeys":["create","fun create(cordapp: Cordapp, attachmentId: SecureHash?, classLoader: ClassLoader, config: CordappConfig): CordappContext","net.corda.core.cordapp.CordappContext.Companion.create"]},{"name":"fun create(key: PublicKey): SignatureAttachmentConstraint","description":"net.corda.core.contracts.SignatureAttachmentConstraint.Companion.create","location":"docs/net.corda.core.contracts/-signature-attachment-constraint/-companion/create.html","searchKeys":["create","fun create(key: PublicKey): SignatureAttachmentConstraint","net.corda.core.contracts.SignatureAttachmentConstraint.Companion.create"]},{"name":"fun create(name: CordaX500Name, owningKey: PublicKey): Party","description":"net.corda.core.identity.Party.Companion.create","location":"docs/net.corda.core.identity/-party/-companion/create.html","searchKeys":["create","fun create(name: CordaX500Name, owningKey: PublicKey): Party","net.corda.core.identity.Party.Companion.create"]},{"name":"fun create(owningKey: PublicKey): AnonymousParty","description":"net.corda.core.identity.AnonymousParty.Companion.create","location":"docs/net.corda.core.identity/-anonymous-party/-companion/create.html","searchKeys":["create","fun create(owningKey: PublicKey): AnonymousParty","net.corda.core.identity.AnonymousParty.Companion.create"]},{"name":"fun create(str: String?): SecureHash","description":"net.corda.core.crypto.SecureHash.Companion.create","location":"docs/net.corda.core.crypto/-secure-hash/-companion/create.html","searchKeys":["create","fun create(str: String?): SecureHash","net.corda.core.crypto.SecureHash.Companion.create"]},{"name":"fun createComponentGroups(inputs: List<StateRef>, outputs: List<TransactionState<ContractState>>, commands: List<Command<*>>, attachments: List<SecureHash>, notary: Party?, timeWindow: TimeWindow?, references: List<StateRef>, networkParametersHash: SecureHash?, legacyAttachments: List<SecureHash> = emptyList()): List<ComponentGroup>","description":"net.corda.core.internal.createComponentGroups","location":"docs/net.corda.core.internal/create-component-groups.html","searchKeys":["createComponentGroups","fun createComponentGroups(inputs: List<StateRef>, outputs: List<TransactionState<ContractState>>, commands: List<Command<*>>, attachments: List<SecureHash>, notary: Party?, timeWindow: TimeWindow?, references: List<StateRef>, networkParametersHash: SecureHash?, legacyAttachments: List<SecureHash> = emptyList()): List<ComponentGroup>","net.corda.core.internal.createComponentGroups"]},{"name":"fun createCordappClassLoader(cordapps: Collection<TestCordappInternal>?): URLClassLoader?","description":"net.corda.testing.node.internal.InternalMockNetwork.Companion.createCordappClassLoader","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-companion/create-cordapp-class-loader.html","searchKeys":["createCordappClassLoader","fun createCordappClassLoader(cordapps: Collection<TestCordappInternal>?): URLClassLoader?","net.corda.testing.node.internal.InternalMockNetwork.Companion.createCordappClassLoader"]},{"name":"fun createDefaultMapper(rpc: CordaRPCOps, factory: <Error class: unknown class> = JsonFactory(), fuzzyIdentityMatch: Boolean = false, fullParties: Boolean = false): <Error class: unknown class>","description":"net.corda.client.jackson.JacksonSupport.createDefaultMapper","location":"docs/net.corda.client.jackson/-jackson-support/create-default-mapper.html","searchKeys":["createDefaultMapper","fun createDefaultMapper(rpc: CordaRPCOps, factory: <Error class: unknown class> = JsonFactory(), fuzzyIdentityMatch: Boolean = false, fullParties: Boolean = false): <Error class: unknown class>","net.corda.client.jackson.JacksonSupport.createDefaultMapper"]},{"name":"fun createDevIntermediateCaCertPath(rootCaName: X500Principal = defaultRootCaName, intermediateCaName: X500Principal = defaultIntermediateCaName): <Error class: unknown class><<Error class: unknown class>, <Error class: unknown class>>","description":"net.corda.testing.internal.createDevIntermediateCaCertPath","location":"docs/net.corda.testing.internal/create-dev-intermediate-ca-cert-path.html","searchKeys":["createDevIntermediateCaCertPath","fun createDevIntermediateCaCertPath(rootCaName: X500Principal = defaultRootCaName, intermediateCaName: X500Principal = defaultIntermediateCaName): <Error class: unknown class><<Error class: unknown class>, <Error class: unknown class>>","net.corda.testing.internal.createDevIntermediateCaCertPath"]},{"name":"fun createDevNodeCaCertPath(legalName: CordaX500Name, nodeKeyPair: KeyPair = Crypto.generateKeyPair(X509Utilities.DEFAULT_TLS_SIGNATURE_SCHEME), rootCaName: X500Principal = defaultRootCaName, intermediateCaName: X500Principal = defaultIntermediateCaName): <Error class: unknown class><<Error class: unknown class>, <Error class: unknown class>, <Error class: unknown class>>","description":"net.corda.testing.internal.createDevNodeCaCertPath","location":"docs/net.corda.testing.internal/create-dev-node-ca-cert-path.html","searchKeys":["createDevNodeCaCertPath","fun createDevNodeCaCertPath(legalName: CordaX500Name, nodeKeyPair: KeyPair = Crypto.generateKeyPair(X509Utilities.DEFAULT_TLS_SIGNATURE_SCHEME), rootCaName: X500Principal = defaultRootCaName, intermediateCaName: X500Principal = defaultIntermediateCaName): <Error class: unknown class><<Error class: unknown class>, <Error class: unknown class>, <Error class: unknown class>>","net.corda.testing.internal.createDevNodeCaCertPath"]},{"name":"fun createFor(algorithm: String): PrivacySalt","description":"net.corda.core.contracts.PrivacySalt.Companion.createFor","location":"docs/net.corda.core.contracts/-privacy-salt/-companion/create-for.html","searchKeys":["createFor","fun createFor(algorithm: String): PrivacySalt","net.corda.core.contracts.PrivacySalt.Companion.createFor"]},{"name":"fun createForContractVerify(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt, networkParameters: NetworkParameters?, references: List<StateAndRef<ContractState>>, digestService: DigestService): LedgerTransaction","description":"net.corda.core.transactions.LedgerTransaction.Companion.createForContractVerify","location":"docs/net.corda.core.transactions/-ledger-transaction/-companion/create-for-contract-verify.html","searchKeys":["createForContractVerify","fun createForContractVerify(inputs: List<StateAndRef<ContractState>>, outputs: List<TransactionState<ContractState>>, commands: List<CommandWithParties<CommandData>>, attachments: List<Attachment>, id: SecureHash, notary: Party?, timeWindow: TimeWindow?, privacySalt: PrivacySalt, networkParameters: NetworkParameters?, references: List<StateAndRef<ContractState>>, digestService: DigestService): LedgerTransaction","net.corda.core.transactions.LedgerTransaction.Companion.createForContractVerify"]},{"name":"fun createGenericSchedule(startDate: LocalDate, period: Frequency, calendar: BusinessCalendar = EMPTY, dateRollConvention: DateRollConvention = DateRollConvention.Following, noOfAdditionalPeriods: Int = Integer.MAX_VALUE, endDate: LocalDate? = null, periodOffset: Int? = null): List<LocalDate>","description":"net.corda.finance.contracts.BusinessCalendar.Companion.createGenericSchedule","location":"docs/net.corda.finance.contracts/-business-calendar/-companion/create-generic-schedule.html","searchKeys":["createGenericSchedule","fun createGenericSchedule(startDate: LocalDate, period: Frequency, calendar: BusinessCalendar = EMPTY, dateRollConvention: DateRollConvention = DateRollConvention.Following, noOfAdditionalPeriods: Int = Integer.MAX_VALUE, endDate: LocalDate? = null, periodOffset: Int? = null): List<LocalDate>","net.corda.finance.contracts.BusinessCalendar.Companion.createGenericSchedule"]},{"name":"fun createInMemoryMapper(identityService: IdentityService, factory: <Error class: unknown class> = JsonFactory(), fuzzyIdentityMatch: Boolean = false, fullParties: Boolean = false): <Error class: unknown class>","description":"net.corda.client.jackson.JacksonSupport.createInMemoryMapper","location":"docs/net.corda.client.jackson/-jackson-support/create-in-memory-mapper.html","searchKeys":["createInMemoryMapper","fun createInMemoryMapper(identityService: IdentityService, factory: <Error class: unknown class> = JsonFactory(), fuzzyIdentityMatch: Boolean = false, fullParties: Boolean = false): <Error class: unknown class>","net.corda.client.jackson.JacksonSupport.createInMemoryMapper"]},{"name":"fun createInMemoryTestZip(numOfExpectedBytes: Int, content: Byte, entryName: String = \"z\"): InputStreamAndHash","description":"net.corda.core.internal.InputStreamAndHash.Companion.createInMemoryTestZip","location":"docs/net.corda.core.internal/-input-stream-and-hash/-companion/create-in-memory-test-zip.html","searchKeys":["createInMemoryTestZip","fun createInMemoryTestZip(numOfExpectedBytes: Int, content: Byte, entryName: String = \"z\"): InputStreamAndHash","net.corda.core.internal.InputStreamAndHash.Companion.createInMemoryTestZip"]},{"name":"fun createNode(legalName: CordaX500Name? = null, forcedID: Int? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides? = null): StartedMockNode","description":"net.corda.testing.node.MockNetwork.createNode","location":"docs/net.corda.testing.node/-mock-network/create-node.html","searchKeys":["createNode","fun createNode(legalName: CordaX500Name? = null, forcedID: Int? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides? = null): StartedMockNode","net.corda.testing.node.MockNetwork.createNode"]},{"name":"fun createNode(parameters: InternalMockNodeParameters = InternalMockNodeParameters()): TestStartedNode","description":"net.corda.testing.node.internal.InternalMockNetwork.createNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/create-node.html","searchKeys":["createNode","fun createNode(parameters: InternalMockNodeParameters = InternalMockNodeParameters()): TestStartedNode","net.corda.testing.node.internal.InternalMockNetwork.createNode"]},{"name":"fun createNode(parameters: InternalMockNodeParameters = InternalMockNodeParameters(), nodeFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode): TestStartedNode","description":"net.corda.testing.node.internal.InternalMockNetwork.createNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/create-node.html","searchKeys":["createNode","fun createNode(parameters: InternalMockNodeParameters = InternalMockNodeParameters(), nodeFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode): TestStartedNode","net.corda.testing.node.internal.InternalMockNetwork.createNode"]},{"name":"fun createNode(parameters: MockNodeParameters): StartedMockNode","description":"net.corda.testing.node.MockNetwork.createNode","location":"docs/net.corda.testing.node/-mock-network/create-node.html","searchKeys":["createNode","fun createNode(parameters: MockNodeParameters): StartedMockNode","net.corda.testing.node.MockNetwork.createNode"]},{"name":"fun createNonRpcMapper(factory: <Error class: unknown class> = JsonFactory(), fullParties: Boolean = false): <Error class: unknown class>","description":"net.corda.client.jackson.JacksonSupport.createNonRpcMapper","location":"docs/net.corda.client.jackson/-jackson-support/create-non-rpc-mapper.html","searchKeys":["createNonRpcMapper","fun createNonRpcMapper(factory: <Error class: unknown class> = JsonFactory(), fullParties: Boolean = false): <Error class: unknown class>","net.corda.client.jackson.JacksonSupport.createNonRpcMapper"]},{"name":"fun createPartyNode(legalName: CordaX500Name? = null): StartedMockNode","description":"net.corda.testing.node.MockNetwork.createPartyNode","location":"docs/net.corda.testing.node/-mock-network/create-party-node.html","searchKeys":["createPartyNode","fun createPartyNode(legalName: CordaX500Name? = null): StartedMockNode","net.corda.testing.node.MockNetwork.createPartyNode"]},{"name":"fun createPartyNode(legalName: CordaX500Name? = null): TestStartedNode","description":"net.corda.testing.node.internal.InternalMockNetwork.createPartyNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/create-party-node.html","searchKeys":["createPartyNode","fun createPartyNode(legalName: CordaX500Name? = null): TestStartedNode","net.corda.testing.node.internal.InternalMockNetwork.createPartyNode"]},{"name":"fun createRandom(): StateMachineRunId","description":"net.corda.core.flows.StateMachineRunId.Companion.createRandom","location":"docs/net.corda.core.flows/-state-machine-run-id/-companion/create-random.html","searchKeys":["createRandom","fun createRandom(): StateMachineRunId","net.corda.core.flows.StateMachineRunId.Companion.createRandom"]},{"name":"fun createSHA256(bytes: ByteArray): SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.createSHA256","location":"docs/net.corda.core.crypto/-secure-hash/-companion/create-s-h-a256.html","searchKeys":["createSHA256","fun createSHA256(bytes: ByteArray): SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.createSHA256"]},{"name":"fun createUnstartedNode(legalName: CordaX500Name? = null, forcedID: Int? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides? = null): UnstartedMockNode","description":"net.corda.testing.node.MockNetwork.createUnstartedNode","location":"docs/net.corda.testing.node/-mock-network/create-unstarted-node.html","searchKeys":["createUnstartedNode","fun createUnstartedNode(legalName: CordaX500Name? = null, forcedID: Int? = null, entropyRoot: BigInteger = BigInteger.valueOf(random63BitValue()), configOverrides: MockNodeConfigOverrides? = null): UnstartedMockNode","net.corda.testing.node.MockNetwork.createUnstartedNode"]},{"name":"fun createUnstartedNode(parameters: InternalMockNodeParameters = InternalMockNodeParameters(), nodeFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = defaultFactory): InternalMockNetwork.MockNode","description":"net.corda.testing.node.internal.InternalMockNetwork.createUnstartedNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/create-unstarted-node.html","searchKeys":["createUnstartedNode","fun createUnstartedNode(parameters: InternalMockNodeParameters = InternalMockNodeParameters(), nodeFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = defaultFactory): InternalMockNetwork.MockNode","net.corda.testing.node.internal.InternalMockNetwork.createUnstartedNode"]},{"name":"fun createUnstartedNode(parameters: MockNodeParameters = MockNodeParameters()): UnstartedMockNode","description":"net.corda.testing.node.MockNetwork.createUnstartedNode","location":"docs/net.corda.testing.node/-mock-network/create-unstarted-node.html","searchKeys":["createUnstartedNode","fun createUnstartedNode(parameters: MockNodeParameters = MockNodeParameters()): UnstartedMockNode","net.corda.testing.node.MockNetwork.createUnstartedNode"]},{"name":"fun createWireTransaction(inputs: List<StateRef>, attachments: List<SecureHash>, outputs: List<TransactionState<*>>, commands: List<Command<*>>, notary: Party?, timeWindow: TimeWindow?, legacyAttachments: List<SecureHash> = emptyList(), privacySalt: PrivacySalt = PrivacySalt(), digestService: DigestService = DigestService.default): WireTransaction","description":"net.corda.testing.internal.createWireTransaction","location":"docs/net.corda.testing.internal/create-wire-transaction.html","searchKeys":["createWireTransaction","fun createWireTransaction(inputs: List<StateRef>, attachments: List<SecureHash>, outputs: List<TransactionState<*>>, commands: List<Command<*>>, notary: Party?, timeWindow: TimeWindow?, legacyAttachments: List<SecureHash> = emptyList(), privacySalt: PrivacySalt = PrivacySalt(), digestService: DigestService = DigestService.default): WireTransaction","net.corda.testing.internal.createWireTransaction"]},{"name":"fun crossReferencesToOtherMappedSchema(schema: MappedSchema): List<MappedSchemaValidator.SchemaCrossReferenceReport>","description":"net.corda.core.schemas.MappedSchemaValidator.crossReferencesToOtherMappedSchema","location":"docs/net.corda.core.schemas/-mapped-schema-validator/cross-references-to-other-mapped-schema.html","searchKeys":["crossReferencesToOtherMappedSchema","fun crossReferencesToOtherMappedSchema(schema: MappedSchema): List<MappedSchemaValidator.SchemaCrossReferenceReport>","net.corda.core.schemas.MappedSchemaValidator.crossReferencesToOtherMappedSchema"]},{"name":"fun data(): ByteArray?","description":"net.corda.core.node.services.Vault.ConstraintInfo.data","location":"docs/net.corda.core.node.services/-vault/-constraint-info/data.html","searchKeys":["data","fun data(): ByteArray?","net.corda.core.node.services.Vault.ConstraintInfo.data"]},{"name":"fun databaseFilename(baseDirectory: Path): Path","description":"net.corda.testing.node.DatabaseSnapshot.databaseFilename","location":"docs/net.corda.testing.node/-database-snapshot/database-filename.html","searchKeys":["databaseFilename","fun databaseFilename(baseDirectory: Path): Path","net.corda.testing.node.DatabaseSnapshot.databaseFilename"]},{"name":"fun daysToMaturity(startDate: LocalDate, calendar: BusinessCalendar): Int","description":"net.corda.finance.contracts.Tenor.daysToMaturity","location":"docs/net.corda.finance.contracts/-tenor/days-to-maturity.html","searchKeys":["daysToMaturity","fun daysToMaturity(startDate: LocalDate, calendar: BusinessCalendar): Int","net.corda.finance.contracts.Tenor.daysToMaturity"]},{"name":"fun decodePrivateKey(encodedKey: ByteArray): PrivateKey","description":"net.corda.core.crypto.Crypto.decodePrivateKey","location":"docs/net.corda.core.crypto/-crypto/decode-private-key.html","searchKeys":["decodePrivateKey","fun decodePrivateKey(encodedKey: ByteArray): PrivateKey","net.corda.core.crypto.Crypto.decodePrivateKey"]},{"name":"fun decodePrivateKey(schemeCodeName: String, encodedKey: ByteArray): PrivateKey","description":"net.corda.core.crypto.Crypto.decodePrivateKey","location":"docs/net.corda.core.crypto/-crypto/decode-private-key.html","searchKeys":["decodePrivateKey","fun decodePrivateKey(schemeCodeName: String, encodedKey: ByteArray): PrivateKey","net.corda.core.crypto.Crypto.decodePrivateKey"]},{"name":"fun decodePrivateKey(signatureScheme: SignatureScheme, encodedKey: ByteArray): PrivateKey","description":"net.corda.core.crypto.Crypto.decodePrivateKey","location":"docs/net.corda.core.crypto/-crypto/decode-private-key.html","searchKeys":["decodePrivateKey","fun decodePrivateKey(signatureScheme: SignatureScheme, encodedKey: ByteArray): PrivateKey","net.corda.core.crypto.Crypto.decodePrivateKey"]},{"name":"fun decodePublicKey(encodedKey: ByteArray): PublicKey","description":"net.corda.core.crypto.Crypto.decodePublicKey","location":"docs/net.corda.core.crypto/-crypto/decode-public-key.html","searchKeys":["decodePublicKey","fun decodePublicKey(encodedKey: ByteArray): PublicKey","net.corda.core.crypto.Crypto.decodePublicKey"]},{"name":"fun decodePublicKey(schemeCodeName: String, encodedKey: ByteArray): PublicKey","description":"net.corda.core.crypto.Crypto.decodePublicKey","location":"docs/net.corda.core.crypto/-crypto/decode-public-key.html","searchKeys":["decodePublicKey","fun decodePublicKey(schemeCodeName: String, encodedKey: ByteArray): PublicKey","net.corda.core.crypto.Crypto.decodePublicKey"]},{"name":"fun decodePublicKey(signatureScheme: SignatureScheme, encodedKey: ByteArray): PublicKey","description":"net.corda.core.crypto.Crypto.decodePublicKey","location":"docs/net.corda.core.crypto/-crypto/decode-public-key.html","searchKeys":["decodePublicKey","fun decodePublicKey(signatureScheme: SignatureScheme, encodedKey: ByteArray): PublicKey","net.corda.core.crypto.Crypto.decodePublicKey"]},{"name":"fun defaultEnabled(): JmxPolicy","description":"net.corda.testing.driver.JmxPolicy.Companion.defaultEnabled","location":"docs/net.corda.testing.driver/-jmx-policy/-companion/default-enabled.html","searchKeys":["defaultEnabled","fun defaultEnabled(): JmxPolicy","net.corda.testing.driver.JmxPolicy.Companion.defaultEnabled"]},{"name":"fun defaultVerifier(ltx: LedgerTransaction, serializationContext: SerializationContext): Verifier","description":"net.corda.core.transactions.defaultVerifier","location":"docs/net.corda.core.transactions/default-verifier.html","searchKeys":["defaultVerifier","fun defaultVerifier(ltx: LedgerTransaction, serializationContext: SerializationContext): Verifier","net.corda.core.transactions.defaultVerifier"]},{"name":"fun deriveKeyPair(privateKey: PrivateKey, seed: ByteArray): KeyPair","description":"net.corda.core.crypto.Crypto.deriveKeyPair","location":"docs/net.corda.core.crypto/-crypto/derive-key-pair.html","searchKeys":["deriveKeyPair","fun deriveKeyPair(privateKey: PrivateKey, seed: ByteArray): KeyPair","net.corda.core.crypto.Crypto.deriveKeyPair"]},{"name":"fun deriveKeyPair(signatureScheme: SignatureScheme, privateKey: PrivateKey, seed: ByteArray): KeyPair","description":"net.corda.core.crypto.Crypto.deriveKeyPair","location":"docs/net.corda.core.crypto/-crypto/derive-key-pair.html","searchKeys":["deriveKeyPair","fun deriveKeyPair(signatureScheme: SignatureScheme, privateKey: PrivateKey, seed: ByteArray): KeyPair","net.corda.core.crypto.Crypto.deriveKeyPair"]},{"name":"fun deriveKeyPairFromEntropy(entropy: BigInteger): KeyPair","description":"net.corda.core.crypto.Crypto.deriveKeyPairFromEntropy","location":"docs/net.corda.core.crypto/-crypto/derive-key-pair-from-entropy.html","searchKeys":["deriveKeyPairFromEntropy","fun deriveKeyPairFromEntropy(entropy: BigInteger): KeyPair","net.corda.core.crypto.Crypto.deriveKeyPairFromEntropy"]},{"name":"fun deriveKeyPairFromEntropy(signatureScheme: SignatureScheme, entropy: BigInteger): KeyPair","description":"net.corda.core.crypto.Crypto.deriveKeyPairFromEntropy","location":"docs/net.corda.core.crypto/-crypto/derive-key-pair-from-entropy.html","searchKeys":["deriveKeyPairFromEntropy","fun deriveKeyPairFromEntropy(signatureScheme: SignatureScheme, entropy: BigInteger): KeyPair","net.corda.core.crypto.Crypto.deriveKeyPairFromEntropy"]},{"name":"fun description(): String","description":"net.corda.core.identity.Party.description","location":"docs/net.corda.core.identity/-party/description.html","searchKeys":["description","fun description(): String","net.corda.core.identity.Party.description"]},{"name":"fun deserialiseCommands(componentGroups: List<ComponentGroup>, forceDeserialize: Boolean = false, factory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = factory.defaultContext, digestService: DigestService = DigestService.sha2_256): List<Command<*>>","description":"net.corda.core.internal.deserialiseCommands","location":"docs/net.corda.core.internal/deserialise-commands.html","searchKeys":["deserialiseCommands","fun deserialiseCommands(componentGroups: List<ComponentGroup>, forceDeserialize: Boolean = false, factory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = factory.defaultContext, digestService: DigestService = DigestService.sha2_256): List<Command<*>>","net.corda.core.internal.deserialiseCommands"]},{"name":"fun deserialize(data: OpaqueBytes): TelemetryDataItem","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.deserialize","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/deserialize.html","searchKeys":["deserialize","fun deserialize(data: OpaqueBytes): TelemetryDataItem","net.corda.core.internal.telemetry.TelemetryServiceImpl.deserialize"]},{"name":"fun detailedLogger(): <Error class: unknown class>","description":"net.corda.core.utilities.detailedLogger","location":"docs/net.corda.core.utilities/detailed-logger.html","searchKeys":["detailedLogger","fun detailedLogger(): <Error class: unknown class>","net.corda.core.utilities.detailedLogger"]},{"name":"fun digestLengthFor(algorithm: String): Int","description":"net.corda.core.crypto.SecureHash.Companion.digestLengthFor","location":"docs/net.corda.core.crypto/-secure-hash/-companion/digest-length-for.html","searchKeys":["digestLengthFor","fun digestLengthFor(algorithm: String): Int","net.corda.core.crypto.SecureHash.Companion.digestLengthFor"]},{"name":"fun disableDBCloseOnStop()","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.disableDBCloseOnStop","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/disable-d-b-close-on-stop.html","searchKeys":["disableDBCloseOnStop","fun disableDBCloseOnStop()","net.corda.testing.node.internal.InternalMockNetwork.MockNode.disableDBCloseOnStop"]},{"name":"fun doOnFailure(action: Consumer<Throwable>): Try<A>","description":"net.corda.core.utilities.Try.doOnFailure","location":"docs/net.corda.core.utilities/-try/do-on-failure.html","searchKeys":["doOnFailure","fun doOnFailure(action: Consumer<Throwable>): Try<A>","net.corda.core.utilities.Try.doOnFailure"]},{"name":"fun doOnSuccess(action: Consumer<in A>): Try<A>","description":"net.corda.core.utilities.Try.doOnSuccess","location":"docs/net.corda.core.utilities/-try/do-on-success.html","searchKeys":["doOnSuccess","fun doOnSuccess(action: Consumer<in A>): Try<A>","net.corda.core.utilities.Try.doOnSuccess"]},{"name":"fun doSign(keyPair: KeyPair, signableData: SignableData): TransactionSignature","description":"net.corda.core.crypto.Crypto.doSign","location":"docs/net.corda.core.crypto/-crypto/do-sign.html","searchKeys":["doSign","fun doSign(keyPair: KeyPair, signableData: SignableData): TransactionSignature","net.corda.core.crypto.Crypto.doSign"]},{"name":"fun doSign(privateKey: PrivateKey, clearData: ByteArray): ByteArray","description":"net.corda.core.crypto.Crypto.doSign","location":"docs/net.corda.core.crypto/-crypto/do-sign.html","searchKeys":["doSign","fun doSign(privateKey: PrivateKey, clearData: ByteArray): ByteArray","net.corda.core.crypto.Crypto.doSign"]},{"name":"fun doSign(schemeCodeName: String, privateKey: PrivateKey, clearData: ByteArray): ByteArray","description":"net.corda.core.crypto.Crypto.doSign","location":"docs/net.corda.core.crypto/-crypto/do-sign.html","searchKeys":["doSign","fun doSign(schemeCodeName: String, privateKey: PrivateKey, clearData: ByteArray): ByteArray","net.corda.core.crypto.Crypto.doSign"]},{"name":"fun doSign(signatureScheme: SignatureScheme, privateKey: PrivateKey, clearData: ByteArray): ByteArray","description":"net.corda.core.crypto.Crypto.doSign","location":"docs/net.corda.core.crypto/-crypto/do-sign.html","searchKeys":["doSign","fun doSign(signatureScheme: SignatureScheme, privateKey: PrivateKey, clearData: ByteArray): ByteArray","net.corda.core.crypto.Crypto.doSign"]},{"name":"fun doVerify(publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","description":"net.corda.core.crypto.Crypto.doVerify","location":"docs/net.corda.core.crypto/-crypto/do-verify.html","searchKeys":["doVerify","fun doVerify(publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","net.corda.core.crypto.Crypto.doVerify"]},{"name":"fun doVerify(schemeCodeName: String, publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","description":"net.corda.core.crypto.Crypto.doVerify","location":"docs/net.corda.core.crypto/-crypto/do-verify.html","searchKeys":["doVerify","fun doVerify(schemeCodeName: String, publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","net.corda.core.crypto.Crypto.doVerify"]},{"name":"fun doVerify(signatureScheme: SignatureScheme, publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","description":"net.corda.core.crypto.Crypto.doVerify","location":"docs/net.corda.core.crypto/-crypto/do-verify.html","searchKeys":["doVerify","fun doVerify(signatureScheme: SignatureScheme, publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","net.corda.core.crypto.Crypto.doVerify"]},{"name":"fun doVerify(txId: SecureHash, transactionSignature: TransactionSignature): Boolean","description":"net.corda.core.crypto.Crypto.doVerify","location":"docs/net.corda.core.crypto/-crypto/do-verify.html","searchKeys":["doVerify","fun doVerify(txId: SecureHash, transactionSignature: TransactionSignature): Boolean","net.corda.core.crypto.Crypto.doVerify"]},{"name":"fun encodePublicKey(key: PublicKey): ByteArray","description":"net.corda.core.crypto.Crypto.encodePublicKey","location":"docs/net.corda.core.crypto/-crypto/encode-public-key.html","searchKeys":["encodePublicKey","fun encodePublicKey(key: PublicKey): ByteArray","net.corda.core.crypto.Crypto.encodePublicKey"]},{"name":"fun endSpan(telemetryId: TelemetryId)","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.endSpan","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/end-span.html","searchKeys":["endSpan","fun endSpan(telemetryId: TelemetryId)","net.corda.core.internal.telemetry.TelemetryServiceImpl.endSpan"]},{"name":"fun endSpanForFlow(telemetryId: TelemetryId)","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.endSpanForFlow","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/end-span-for-flow.html","searchKeys":["endSpanForFlow","fun endSpanForFlow(telemetryId: TelemetryId)","net.corda.core.internal.telemetry.TelemetryServiceImpl.endSpanForFlow"]},{"name":"fun endWithError(error: Throwable)","description":"net.corda.core.utilities.ProgressTracker.endWithError","location":"docs/net.corda.core.utilities/-progress-tracker/end-with-error.html","searchKeys":["endWithError","fun endWithError(error: Throwable)","net.corda.core.utilities.ProgressTracker.endWithError"]},{"name":"fun engineVerify(sigBytes: ByteArray): Boolean","description":"net.corda.core.crypto.CompositeSignature.State.engineVerify","location":"docs/net.corda.core.crypto/-composite-signature/-state/engine-verify.html","searchKeys":["engineVerify","fun engineVerify(sigBytes: ByteArray): Boolean","net.corda.core.crypto.CompositeSignature.State.engineVerify"]},{"name":"fun entropyToKeyPair(entropy: BigInteger): KeyPair","description":"net.corda.core.crypto.entropyToKeyPair","location":"docs/net.corda.core.crypto/entropy-to-key-pair.html","searchKeys":["entropyToKeyPair","fun entropyToKeyPair(entropy: BigInteger): KeyPair","net.corda.core.crypto.entropyToKeyPair"]},{"name":"fun evolveLinearState(linearState: StateAndRef<LinearState>): StateAndRef<LinearState>","description":"net.corda.testing.internal.vault.VaultFiller.evolveLinearState","location":"docs/net.corda.testing.internal.vault/-vault-filler/evolve-linear-state.html","searchKeys":["evolveLinearState","fun evolveLinearState(linearState: StateAndRef<LinearState>): StateAndRef<LinearState>","net.corda.testing.internal.vault.VaultFiller.evolveLinearState"]},{"name":"fun evolveLinearStates(linearStates: List<StateAndRef<LinearState>>)","description":"net.corda.testing.internal.vault.VaultFiller.evolveLinearStates","location":"docs/net.corda.testing.internal.vault/-vault-filler/evolve-linear-states.html","searchKeys":["evolveLinearStates","fun evolveLinearStates(linearStates: List<StateAndRef<LinearState>>)","net.corda.testing.internal.vault.VaultFiller.evolveLinearStates"]},{"name":"fun extract(cert: X509Certificate): CertRole?","description":"net.corda.core.internal.CertRole.Companion.extract","location":"docs/net.corda.core.internal/-cert-role/-companion/extract.html","searchKeys":["extract","fun extract(cert: X509Certificate): CertRole?","net.corda.core.internal.CertRole.Companion.extract"]},{"name":"fun fakeAttachment(filePath1: String, content1: String, filePath2: String, content2: String, manifestAttributes: Map<String, String> = emptyMap()): ByteArray","description":"net.corda.testing.internal.fakeAttachment","location":"docs/net.corda.testing.internal/fake-attachment.html","searchKeys":["fakeAttachment","fun fakeAttachment(filePath1: String, content1: String, filePath2: String, content2: String, manifestAttributes: Map<String, String> = emptyMap()): ByteArray","net.corda.testing.internal.fakeAttachment"]},{"name":"fun fakeAttachment(filePath: String, content: String, manifestAttributes: Map<String, String> = emptyMap()): ByteArray","description":"net.corda.testing.internal.fakeAttachment","location":"docs/net.corda.testing.internal/fake-attachment.html","searchKeys":["fakeAttachment","fun fakeAttachment(filePath: String, content: String, manifestAttributes: Map<String, String> = emptyMap()): ByteArray","net.corda.testing.internal.fakeAttachment"]},{"name":"fun fetchMissingAttachments(transaction: SignedTransaction): Boolean","description":"net.corda.core.internal.ResolveTransactionsFlow.fetchMissingAttachments","location":"docs/net.corda.core.internal/-resolve-transactions-flow/fetch-missing-attachments.html","searchKeys":["fetchMissingAttachments","fun fetchMissingAttachments(transaction: SignedTransaction): Boolean","net.corda.core.internal.ResolveTransactionsFlow.fetchMissingAttachments"]},{"name":"fun fetchMissingNetworkParameters(transaction: SignedTransaction): Boolean","description":"net.corda.core.internal.ResolveTransactionsFlow.fetchMissingNetworkParameters","location":"docs/net.corda.core.internal/-resolve-transactions-flow/fetch-missing-network-parameters.html","searchKeys":["fetchMissingNetworkParameters","fun fetchMissingNetworkParameters(transaction: SignedTransaction): Boolean","net.corda.core.internal.ResolveTransactionsFlow.fetchMissingNetworkParameters"]},{"name":"fun fieldsFromOtherMappedSchema(schema: MappedSchema): List<MappedSchemaValidator.SchemaCrossReferenceReport>","description":"net.corda.core.schemas.MappedSchemaValidator.fieldsFromOtherMappedSchema","location":"docs/net.corda.core.schemas/-mapped-schema-validator/fields-from-other-mapped-schema.html","searchKeys":["fieldsFromOtherMappedSchema","fun fieldsFromOtherMappedSchema(schema: MappedSchema): List<MappedSchemaValidator.SchemaCrossReferenceReport>","net.corda.core.schemas.MappedSchemaValidator.fieldsFromOtherMappedSchema"]},{"name":"fun fillWithDummyState(participants: List<AbstractParty> = listOf(services.myInfo.singleIdentity())): Vault<<Error class: unknown class>>","description":"net.corda.testing.internal.vault.VaultFiller.fillWithDummyState","location":"docs/net.corda.testing.internal.vault/-vault-filler/fill-with-dummy-state.html","searchKeys":["fillWithDummyState","fun fillWithDummyState(participants: List<AbstractParty> = listOf(services.myInfo.singleIdentity())): Vault<<Error class: unknown class>>","net.corda.testing.internal.vault.VaultFiller.fillWithDummyState"]},{"name":"fun fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub, atLeastThisManyStates: Int, issuedBy: PartyAndReference, owner: AbstractParty? = null, rng: Random? = null, statesToRecord: StatesToRecord = StatesToRecord.ONLY_RELEVANT, atMostThisManyStates: Int = atLeastThisManyStates): Vault<Cash.State>","description":"net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestCash","location":"docs/net.corda.testing.internal.vault/-vault-filler/fill-with-some-test-cash.html","searchKeys":["fillWithSomeTestCash","fun fillWithSomeTestCash(howMuch: Amount<Currency>, issuerServices: ServiceHub, atLeastThisManyStates: Int, issuedBy: PartyAndReference, owner: AbstractParty? = null, rng: Random? = null, statesToRecord: StatesToRecord = StatesToRecord.ONLY_RELEVANT, atMostThisManyStates: Int = atLeastThisManyStates): Vault<Cash.State>","net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestCash"]},{"name":"fun fillWithSomeTestCommodity(amount: Amount<Commodity>, issuerServices: ServiceHub, issuedBy: PartyAndReference): Vault<CommodityState>","description":"net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestCommodity","location":"docs/net.corda.testing.internal.vault/-vault-filler/fill-with-some-test-commodity.html","searchKeys":["fillWithSomeTestCommodity","fun fillWithSomeTestCommodity(amount: Amount<Commodity>, issuerServices: ServiceHub, issuedBy: PartyAndReference): Vault<CommodityState>","net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestCommodity"]},{"name":"fun fillWithSomeTestDeals(dealIds: List<String>, issuerServices: ServiceHub = services, participants: List<AbstractParty> = emptyList(), includeMe: Boolean = true): Vault<DealState>","description":"net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestDeals","location":"docs/net.corda.testing.internal.vault/-vault-filler/fill-with-some-test-deals.html","searchKeys":["fillWithSomeTestDeals","fun fillWithSomeTestDeals(dealIds: List<String>, issuerServices: ServiceHub = services, participants: List<AbstractParty> = emptyList(), includeMe: Boolean = true): Vault<DealState>","net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestDeals"]},{"name":"fun fillWithSomeTestLinearAndDealStates(txCount: Int, externalId: String? = null, participants: List<AbstractParty> = emptyList(), linearString: String = \"\", linearNumber: Long = 0, linearBoolean: Boolean = false, linearTimestamp: Instant = now()): Vault<ContractState>","description":"net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestLinearAndDealStates","location":"docs/net.corda.testing.internal.vault/-vault-filler/fill-with-some-test-linear-and-deal-states.html","searchKeys":["fillWithSomeTestLinearAndDealStates","fun fillWithSomeTestLinearAndDealStates(txCount: Int, externalId: String? = null, participants: List<AbstractParty> = emptyList(), linearString: String = \"\", linearNumber: Long = 0, linearBoolean: Boolean = false, linearTimestamp: Instant = now()): Vault<ContractState>","net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestLinearAndDealStates"]},{"name":"fun fillWithSomeTestLinearStates(txCount: Int, externalId: String? = null, participants: List<AbstractParty> = emptyList(), uniqueIdentifier: UniqueIdentifier? = null, linearString: String = \"\", linearNumber: Long = 0, linearBoolean: Boolean = false, linearTimestamp: Instant = now(), constraint: AttachmentConstraint = AutomaticPlaceholderConstraint, includeMe: Boolean = true): Vault<LinearState>","description":"net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestLinearStates","location":"docs/net.corda.testing.internal.vault/-vault-filler/fill-with-some-test-linear-states.html","searchKeys":["fillWithSomeTestLinearStates","fun fillWithSomeTestLinearStates(txCount: Int, externalId: String? = null, participants: List<AbstractParty> = emptyList(), uniqueIdentifier: UniqueIdentifier? = null, linearString: String = \"\", linearNumber: Long = 0, linearBoolean: Boolean = false, linearTimestamp: Instant = now(), constraint: AttachmentConstraint = AutomaticPlaceholderConstraint, includeMe: Boolean = true): Vault<LinearState>","net.corda.testing.internal.vault.VaultFiller.fillWithSomeTestLinearStates"]},{"name":"fun findCordapp(scanPackage: String): ScanPackageTestCordapp","description":"net.corda.testing.node.internal.findCordapp","location":"docs/net.corda.testing.node.internal/find-cordapp.html","searchKeys":["findCordapp","fun findCordapp(scanPackage: String): ScanPackageTestCordapp","net.corda.testing.node.internal.findCordapp"]},{"name":"fun findCordapp(scanPackage: String): TestCordapp","description":"net.corda.testing.node.TestCordapp.Companion.findCordapp","location":"docs/net.corda.testing.node/-test-cordapp/-companion/find-cordapp.html","searchKeys":["findCordapp","fun findCordapp(scanPackage: String): TestCordapp","net.corda.testing.node.TestCordapp.Companion.findCordapp"]},{"name":"fun findFor(clazz: Class<*>?): PrivateInterner<Any>?","description":"net.corda.core.internal.utilities.PrivateInterner.Companion.findFor","location":"docs/net.corda.core.internal.utilities/-private-interner/-companion/find-for.html","searchKeys":["findFor","fun findFor(clazz: Class<*>?): PrivateInterner<Any>?","net.corda.core.internal.utilities.PrivateInterner.Companion.findFor"]},{"name":"fun findProvider(name: String): Provider","description":"net.corda.core.crypto.Crypto.findProvider","location":"docs/net.corda.core.crypto/-crypto/find-provider.html","searchKeys":["findProvider","fun findProvider(name: String): Provider","net.corda.core.crypto.Crypto.findProvider"]},{"name":"fun findSignatureScheme(algorithm: <Error class: unknown class>): SignatureScheme","description":"net.corda.core.crypto.Crypto.findSignatureScheme","location":"docs/net.corda.core.crypto/-crypto/find-signature-scheme.html","searchKeys":["findSignatureScheme","fun findSignatureScheme(algorithm: <Error class: unknown class>): SignatureScheme","net.corda.core.crypto.Crypto.findSignatureScheme"]},{"name":"fun findSignatureScheme(key: PrivateKey): SignatureScheme","description":"net.corda.core.crypto.Crypto.findSignatureScheme","location":"docs/net.corda.core.crypto/-crypto/find-signature-scheme.html","searchKeys":["findSignatureScheme","fun findSignatureScheme(key: PrivateKey): SignatureScheme","net.corda.core.crypto.Crypto.findSignatureScheme"]},{"name":"fun findSignatureScheme(key: PublicKey): SignatureScheme","description":"net.corda.core.crypto.Crypto.findSignatureScheme","location":"docs/net.corda.core.crypto/-crypto/find-signature-scheme.html","searchKeys":["findSignatureScheme","fun findSignatureScheme(key: PublicKey): SignatureScheme","net.corda.core.crypto.Crypto.findSignatureScheme"]},{"name":"fun findSignatureScheme(schemeCodeName: String): SignatureScheme","description":"net.corda.core.crypto.Crypto.findSignatureScheme","location":"docs/net.corda.core.crypto/-crypto/find-signature-scheme.html","searchKeys":["findSignatureScheme","fun findSignatureScheme(schemeCodeName: String): SignatureScheme","net.corda.core.crypto.Crypto.findSignatureScheme"]},{"name":"fun findSignatureScheme(schemeNumberID: Int): SignatureScheme","description":"net.corda.core.crypto.Crypto.findSignatureScheme","location":"docs/net.corda.core.crypto/-crypto/find-signature-scheme.html","searchKeys":["findSignatureScheme","fun findSignatureScheme(schemeNumberID: Int): SignatureScheme","net.corda.core.crypto.Crypto.findSignatureScheme"]},{"name":"fun fixedCrlSource(crls: Set<X509CRL>): <Error class: unknown class>","description":"net.corda.testing.internal.fixedCrlSource","location":"docs/net.corda.testing.internal/fixed-crl-source.html","searchKeys":["fixedCrlSource","fun fixedCrlSource(crls: Set<X509CRL>): <Error class: unknown class>","net.corda.testing.internal.fixedCrlSource"]},{"name":"fun fixupAttachmentIds(attachmentIds: Collection<AttachmentId>): Set<AttachmentId>","description":"net.corda.core.internal.verification.AttachmentFixups.fixupAttachmentIds","location":"docs/net.corda.core.internal.verification/-attachment-fixups/fixup-attachment-ids.html","searchKeys":["fixupAttachmentIds","fun fixupAttachmentIds(attachmentIds: Collection<AttachmentId>): Set<AttachmentId>","net.corda.core.internal.verification.AttachmentFixups.fixupAttachmentIds"]},{"name":"fun flowStackSnapshot(): FlowStackSnapshot?","description":"net.corda.core.flows.FlowLogic.flowStackSnapshot","location":"docs/net.corda.core.flows/-flow-logic/flow-stack-snapshot.html","searchKeys":["flowStackSnapshot","fun flowStackSnapshot(): FlowStackSnapshot?","net.corda.core.flows.FlowLogic.flowStackSnapshot"]},{"name":"fun follower(): ShutdownManager.Follower","description":"net.corda.testing.node.internal.ShutdownManager.follower","location":"docs/net.corda.testing.node.internal/-shutdown-manager/follower.html","searchKeys":["follower","fun follower(): ShutdownManager.Follower","net.corda.testing.node.internal.ShutdownManager.follower"]},{"name":"fun from(timeWindow: RecoveryTimeWindow): ComparableRecoveryTimeWindow","description":"net.corda.core.flows.ComparableRecoveryTimeWindow.Companion.from","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/-companion/from.html","searchKeys":["from","fun from(timeWindow: RecoveryTimeWindow): ComparableRecoveryTimeWindow","net.corda.core.flows.ComparableRecoveryTimeWindow.Companion.from"]},{"name":"fun from(versionArray: IntArray): KotlinMetadataVersion","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.Companion.from","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/-companion/from.html","searchKeys":["from","fun from(versionArray: IntArray): KotlinMetadataVersion","net.corda.core.internal.cordapp.KotlinMetadataVersion.Companion.from"]},{"name":"fun fromHostAndPort(hostAndPort: NetworkHostAndPort, base: String, protocol: String = \"http\", mapper: <Error class: unknown class> = defaultMapper): HttpApi","description":"net.corda.testing.http.HttpApi.Companion.fromHostAndPort","location":"docs/net.corda.testing.http/-http-api/-companion/from-host-and-port.html","searchKeys":["fromHostAndPort","fun fromHostAndPort(hostAndPort: NetworkHostAndPort, base: String, protocol: String = \"http\", mapper: <Error class: unknown class> = defaultMapper): HttpApi","net.corda.testing.http.HttpApi.Companion.fromHostAndPort"]},{"name":"fun fromOnly(fromTime: Instant): FlowTimeWindow","description":"net.corda.core.flows.FlowTimeWindow.Companion.fromOnly","location":"docs/net.corda.core.flows/-flow-time-window/-companion/from-only.html","searchKeys":["fromOnly","fun fromOnly(fromTime: Instant): FlowTimeWindow","net.corda.core.flows.FlowTimeWindow.Companion.fromOnly"]},{"name":"fun fromOnly(fromTime: Instant): RecoveryTimeWindow","description":"net.corda.core.flows.RecoveryTimeWindow.Companion.fromOnly","location":"docs/net.corda.core.flows/-recovery-time-window/-companion/from-only.html","searchKeys":["fromOnly","fun fromOnly(fromTime: Instant): RecoveryTimeWindow","net.corda.core.flows.RecoveryTimeWindow.Companion.fromOnly"]},{"name":"fun fromOnly(fromTime: Instant): TimeWindow","description":"net.corda.core.contracts.TimeWindow.Companion.fromOnly","location":"docs/net.corda.core.contracts/-time-window/-companion/from-only.html","searchKeys":["fromOnly","fun fromOnly(fromTime: Instant): TimeWindow","net.corda.core.contracts.TimeWindow.Companion.fromOnly"]},{"name":"fun fromStartAndDuration(fromTime: Instant, duration: Duration): TimeWindow","description":"net.corda.core.contracts.TimeWindow.Companion.fromStartAndDuration","location":"docs/net.corda.core.contracts/-time-window/-companion/from-start-and-duration.html","searchKeys":["fromStartAndDuration","fun fromStartAndDuration(fromTime: Instant, duration: Duration): TimeWindow","net.corda.core.contracts.TimeWindow.Companion.fromStartAndDuration"]},{"name":"fun fromString(name: String): UniqueIdentifier","description":"net.corda.core.contracts.UniqueIdentifier.Companion.fromString","location":"docs/net.corda.core.contracts/-unique-identifier/-companion/from-string.html","searchKeys":["fromString","fun fromString(name: String): UniqueIdentifier","net.corda.core.contracts.UniqueIdentifier.Companion.fromString"]},{"name":"fun generateCashIssue(tx: TransactionBuilder, obligor: AbstractParty, acceptableContract: SecureHash, amount: Amount<Issued<Currency>>, dueBefore: Instant, beneficiary: AbstractParty, notary: Party)","description":"net.corda.finance.workflows.asset.ObligationUtils.generateCashIssue","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/generate-cash-issue.html","searchKeys":["generateCashIssue","fun generateCashIssue(tx: TransactionBuilder, obligor: AbstractParty, acceptableContract: SecureHash, amount: Amount<Issued<Currency>>, dueBefore: Instant, beneficiary: AbstractParty, notary: Party)","net.corda.finance.workflows.asset.ObligationUtils.generateCashIssue"]},{"name":"fun generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>): Set<PublicKey>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.generateExit","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/generate-exit.html","searchKeys":["generateExit","fun generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>): Set<PublicKey>","net.corda.finance.contracts.asset.OnLedgerAsset.generateExit"]},{"name":"fun generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>, payChangeTo: AbstractParty): Set<PublicKey>","description":"net.corda.finance.contracts.asset.OnLedgerAsset.generateExit","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/generate-exit.html","searchKeys":["generateExit","fun generateExit(tx: TransactionBuilder, amountIssued: Amount<Issued<T>>, assetStates: List<StateAndRef<S>>, payChangeTo: AbstractParty): Set<PublicKey>","net.corda.finance.contracts.asset.OnLedgerAsset.generateExit"]},{"name":"fun generateIssue(issuance: PartyAndReference, faceValue: Amount<Issued<Currency>>, maturityDate: Instant, notary: Party): TransactionBuilder","description":"net.corda.finance.workflows.CommercialPaperUtils.generateIssue","location":"docs/net.corda.finance.workflows/-commercial-paper-utils/generate-issue.html","searchKeys":["generateIssue","fun generateIssue(issuance: PartyAndReference, faceValue: Amount<Issued<Currency>>, maturityDate: Instant, notary: Party): TransactionBuilder","net.corda.finance.workflows.CommercialPaperUtils.generateIssue"]},{"name":"fun generateIssue(tx: TransactionBuilder, amount: Amount<Issued<Currency>>, owner: AbstractParty, notary: Party): Set<PublicKey>","description":"net.corda.finance.contracts.asset.Cash.generateIssue","location":"docs/net.corda.finance.contracts.asset/-cash/generate-issue.html","searchKeys":["generateIssue","fun generateIssue(tx: TransactionBuilder, amount: Amount<Issued<Currency>>, owner: AbstractParty, notary: Party): Set<PublicKey>","net.corda.finance.contracts.asset.Cash.generateIssue"]},{"name":"fun generateIssue(tx: TransactionBuilder, tokenDef: Issued<Currency>, pennies: Long, owner: AbstractParty, notary: Party): Set<PublicKey>","description":"net.corda.finance.contracts.asset.Cash.generateIssue","location":"docs/net.corda.finance.contracts.asset/-cash/generate-issue.html","searchKeys":["generateIssue","fun generateIssue(tx: TransactionBuilder, tokenDef: Issued<Currency>, pennies: Long, owner: AbstractParty, notary: Party): Set<PublicKey>","net.corda.finance.contracts.asset.Cash.generateIssue"]},{"name":"fun generateKeyPair(): KeyPair","description":"net.corda.core.crypto.generateKeyPair","location":"docs/net.corda.core.crypto/generate-key-pair.html","searchKeys":["generateKeyPair","fun generateKeyPair(): KeyPair","net.corda.core.crypto.generateKeyPair"]},{"name":"fun generateKeyPair(schemeCodeName: String): KeyPair","description":"net.corda.core.crypto.Crypto.generateKeyPair","location":"docs/net.corda.core.crypto/-crypto/generate-key-pair.html","searchKeys":["generateKeyPair","fun generateKeyPair(schemeCodeName: String): KeyPair","net.corda.core.crypto.Crypto.generateKeyPair"]},{"name":"fun generateKeyPair(signatureScheme: SignatureScheme = DEFAULT_SIGNATURE_SCHEME): KeyPair","description":"net.corda.core.crypto.Crypto.generateKeyPair","location":"docs/net.corda.core.crypto/-crypto/generate-key-pair.html","searchKeys":["generateKeyPair","fun generateKeyPair(signatureScheme: SignatureScheme = DEFAULT_SIGNATURE_SCHEME): KeyPair","net.corda.core.crypto.Crypto.generateKeyPair"]},{"name":"fun generateMove(tx: TransactionBuilder, paper: StateAndRef<CommercialPaper.State>, newOwner: AbstractParty)","description":"net.corda.finance.workflows.CommercialPaperUtils.generateMove","location":"docs/net.corda.finance.workflows/-commercial-paper-utils/generate-move.html","searchKeys":["generateMove","fun generateMove(tx: TransactionBuilder, paper: StateAndRef<CommercialPaper.State>, newOwner: AbstractParty)","net.corda.finance.workflows.CommercialPaperUtils.generateMove"]},{"name":"fun generateRedeem(tx: TransactionBuilder, paper: StateAndRef<CommercialPaper.State>, services: ServiceHub, ourIdentity: PartyAndCertificate)","description":"net.corda.finance.workflows.CommercialPaperUtils.generateRedeem","location":"docs/net.corda.finance.workflows/-commercial-paper-utils/generate-redeem.html","searchKeys":["generateRedeem","fun generateRedeem(tx: TransactionBuilder, paper: StateAndRef<CommercialPaper.State>, services: ServiceHub, ourIdentity: PartyAndCertificate)","net.corda.finance.workflows.CommercialPaperUtils.generateRedeem"]},{"name":"fun generateSpend(services: ServiceHub, tx: TransactionBuilder, amount: Amount<Currency>, ourIdentity: PartyAndCertificate, to: AbstractParty, onlyFromParties: Set<AbstractParty> = emptySet(), anonymous: Boolean = true): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","description":"net.corda.finance.workflows.asset.CashUtils.generateSpend","location":"docs/net.corda.finance.workflows.asset/-cash-utils/generate-spend.html","searchKeys":["generateSpend","fun generateSpend(services: ServiceHub, tx: TransactionBuilder, amount: Amount<Currency>, ourIdentity: PartyAndCertificate, to: AbstractParty, onlyFromParties: Set<AbstractParty> = emptySet(), anonymous: Boolean = true): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","net.corda.finance.workflows.asset.CashUtils.generateSpend"]},{"name":"fun generateSpend(services: ServiceHub, tx: TransactionBuilder, amount: Amount<Currency>, to: AbstractParty, onlyFromParties: Set<AbstractParty> = emptySet()): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","description":"net.corda.finance.workflows.asset.CashUtils.generateSpend","location":"docs/net.corda.finance.workflows.asset/-cash-utils/generate-spend.html","searchKeys":["generateSpend","fun generateSpend(services: ServiceHub, tx: TransactionBuilder, amount: Amount<Currency>, to: AbstractParty, onlyFromParties: Set<AbstractParty> = emptySet()): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","net.corda.finance.workflows.asset.CashUtils.generateSpend"]},{"name":"fun generateSpend(services: ServiceHub, tx: TransactionBuilder, payments: List<PartyAndAmount<Currency>>, onlyFromParties: Set<AbstractParty> = emptySet()): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","description":"net.corda.finance.workflows.asset.CashUtils.generateSpend","location":"docs/net.corda.finance.workflows.asset/-cash-utils/generate-spend.html","searchKeys":["generateSpend","fun generateSpend(services: ServiceHub, tx: TransactionBuilder, payments: List<PartyAndAmount<Currency>>, onlyFromParties: Set<AbstractParty> = emptySet()): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","net.corda.finance.workflows.asset.CashUtils.generateSpend"]},{"name":"fun generateSpend(services: ServiceHub, tx: TransactionBuilder, payments: List<PartyAndAmount<Currency>>, ourIdentity: PartyAndCertificate, onlyFromParties: Set<AbstractParty> = emptySet(), anonymous: Boolean = true): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","description":"net.corda.finance.workflows.asset.CashUtils.generateSpend","location":"docs/net.corda.finance.workflows.asset/-cash-utils/generate-spend.html","searchKeys":["generateSpend","fun generateSpend(services: ServiceHub, tx: TransactionBuilder, payments: List<PartyAndAmount<Currency>>, ourIdentity: PartyAndCertificate, onlyFromParties: Set<AbstractParty> = emptySet(), anonymous: Boolean = true): <Error class: unknown class><TransactionBuilder, List<PublicKey>>","net.corda.finance.workflows.asset.CashUtils.generateSpend"]},{"name":"fun get(): SignedTransaction?","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.get","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/get.html","searchKeys":["get","fun get(): SignedTransaction?","net.corda.core.flows.MaybeSerializedSignedTransaction.get"]},{"name":"fun getAllOnesHash(): SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.getAllOnesHash","location":"docs/net.corda.core.crypto/-secure-hash/-companion/get-all-ones-hash.html","searchKeys":["getAllOnesHash","fun getAllOnesHash(): SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.getAllOnesHash"]},{"name":"fun getAttachment(id: SecureHash): Attachment","description":"net.corda.core.transactions.LedgerTransaction.getAttachment","location":"docs/net.corda.core.transactions/-ledger-transaction/get-attachment.html","searchKeys":["getAttachment","fun getAttachment(id: SecureHash): Attachment","net.corda.core.transactions.LedgerTransaction.getAttachment"]},{"name":"fun getAttachment(index: Int): Attachment","description":"net.corda.core.transactions.LedgerTransaction.getAttachment","location":"docs/net.corda.core.transactions/-ledger-transaction/get-attachment.html","searchKeys":["getAttachment","fun getAttachment(index: Int): Attachment","net.corda.core.transactions.LedgerTransaction.getAttachment"]},{"name":"fun getAttachmentIdAndBytes(jar: InputStream): <Error class: unknown class><AttachmentId, ByteArray>","description":"net.corda.testing.services.MockAttachmentStorage.getAttachmentIdAndBytes","location":"docs/net.corda.testing.services/-mock-attachment-storage/get-attachment-id-and-bytes.html","searchKeys":["getAttachmentIdAndBytes","fun getAttachmentIdAndBytes(jar: InputStream): <Error class: unknown class><AttachmentId, ByteArray>","net.corda.testing.services.MockAttachmentStorage.getAttachmentIdAndBytes"]},{"name":"fun getCallerPackage(directCallerClass: KClass<*>): String?","description":"net.corda.testing.node.internal.getCallerPackage","location":"docs/net.corda.testing.node.internal/get-caller-package.html","searchKeys":["getCallerPackage","fun getCallerPackage(directCallerClass: KClass<*>): String?","net.corda.testing.node.internal.getCallerPackage"]},{"name":"fun getChildProgressTracker(step: ProgressTracker.Step): ProgressTracker?","description":"net.corda.core.utilities.ProgressTracker.getChildProgressTracker","location":"docs/net.corda.core.utilities/-progress-tracker/get-child-progress-tracker.html","searchKeys":["getChildProgressTracker","fun getChildProgressTracker(step: ProgressTracker.Step): ProgressTracker?","net.corda.core.utilities.ProgressTracker.getChildProgressTracker"]},{"name":"fun getCurrentBaggage(telemetryComponentName: String): Map<String, String>?","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentBaggage","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/get-current-baggage.html","searchKeys":["getCurrentBaggage","fun getCurrentBaggage(telemetryComponentName: String): Map<String, String>?","net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentBaggage"]},{"name":"fun getCurrentSpanId(telemetryComponentName: String): String?","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentSpanId","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/get-current-span-id.html","searchKeys":["getCurrentSpanId","fun getCurrentSpanId(telemetryComponentName: String): String?","net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentSpanId"]},{"name":"fun getCurrentTelemetryData(): SerializedTelemetry?","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentTelemetryData","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/get-current-telemetry-data.html","searchKeys":["getCurrentTelemetryData","fun getCurrentTelemetryData(): SerializedTelemetry?","net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentTelemetryData"]},{"name":"fun getCurrentTelemetryIds(): ComponentTelemetryIds?","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentTelemetryIds","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/get-current-telemetry-ids.html","searchKeys":["getCurrentTelemetryIds","fun getCurrentTelemetryIds(): ComponentTelemetryIds?","net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentTelemetryIds"]},{"name":"fun getCurrentTraceId(telemetryComponentName: String): String?","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentTraceId","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/get-current-trace-id.html","searchKeys":["getCurrentTraceId","fun getCurrentTraceId(telemetryComponentName: String): String?","net.corda.core.internal.telemetry.TelemetryServiceImpl.getCurrentTraceId"]},{"name":"fun getCustomSerializationMagicFromSchemeId(schemeId: Int): SerializationMagic","description":"net.corda.core.serialization.internal.CustomSerializationSchemeUtils.Companion.getCustomSerializationMagicFromSchemeId","location":"docs/net.corda.core.serialization.internal/-custom-serialization-scheme-utils/-companion/get-custom-serialization-magic-from-scheme-id.html","searchKeys":["getCustomSerializationMagicFromSchemeId","fun getCustomSerializationMagicFromSchemeId(schemeId: Int): SerializationMagic","net.corda.core.serialization.internal.CustomSerializationSchemeUtils.Companion.getCustomSerializationMagicFromSchemeId"]},{"name":"fun getDisplayTokenSize(token: Any): BigDecimal","description":"net.corda.core.contracts.Amount.Companion.getDisplayTokenSize","location":"docs/net.corda.core.contracts/-amount/-companion/get-display-token-size.html","searchKeys":["getDisplayTokenSize","fun getDisplayTokenSize(token: Any): BigDecimal","net.corda.core.contracts.Amount.Companion.getDisplayTokenSize"]},{"name":"fun getEmptyCRL(): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.CrlServer.CrlServlet.getEmptyCRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-crl-servlet/get-empty-c-r-l.html","searchKeys":["getEmptyCRL","fun getEmptyCRL(): <Error class: unknown class>","net.corda.testing.node.internal.network.CrlServer.CrlServlet.getEmptyCRL"]},{"name":"fun getEstimatedWaitTime(numStates: Int): Duration","description":"net.corda.core.internal.notary.SinglePartyNotaryService.getEstimatedWaitTime","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/get-estimated-wait-time.html","searchKeys":["getEstimatedWaitTime","fun getEstimatedWaitTime(numStates: Int): Duration","net.corda.core.internal.notary.SinglePartyNotaryService.getEstimatedWaitTime"]},{"name":"fun getExtraConstructorArgs(): FinalityFlow.ExtraConstructorArgs","description":"net.corda.core.flows.FinalityFlow.getExtraConstructorArgs","location":"docs/net.corda.core.flows/-finality-flow/get-extra-constructor-args.html","searchKeys":["getExtraConstructorArgs","fun getExtraConstructorArgs(): FinalityFlow.ExtraConstructorArgs","net.corda.core.flows.FinalityFlow.getExtraConstructorArgs"]},{"name":"fun getExtraConstructorArgs(): FinalityRecoveryFlow.ExtraConstructorArgs","description":"net.corda.core.flows.FinalityRecoveryFlow.getExtraConstructorArgs","location":"docs/net.corda.core.flows/-finality-recovery-flow/get-extra-constructor-args.html","searchKeys":["getExtraConstructorArgs","fun getExtraConstructorArgs(): FinalityRecoveryFlow.ExtraConstructorArgs","net.corda.core.flows.FinalityRecoveryFlow.getExtraConstructorArgs"]},{"name":"fun getExtraConstructorArgs(): LedgerRecoveryFlow.ExtraConstructorArgs","description":"net.corda.core.flows.LedgerRecoveryFlow.getExtraConstructorArgs","location":"docs/net.corda.core.flows/-ledger-recovery-flow/get-extra-constructor-args.html","searchKeys":["getExtraConstructorArgs","fun getExtraConstructorArgs(): LedgerRecoveryFlow.ExtraConstructorArgs","net.corda.core.flows.LedgerRecoveryFlow.getExtraConstructorArgs"]},{"name":"fun getField(fieldName: String, entityClass: Class<*>): FieldInfo","description":"net.corda.core.node.services.vault.getField","location":"docs/net.corda.core.node.services.vault/get-field.html","searchKeys":["getField","fun getField(fieldName: String, entityClass: Class<*>): FieldInfo","net.corda.core.node.services.vault.getField"]},{"name":"fun getFlowInfo(otherParty: Party): FlowInfo","description":"net.corda.core.flows.FlowLogic.getFlowInfo","location":"docs/net.corda.core.flows/-flow-logic/get-flow-info.html","searchKeys":["getFlowInfo","fun getFlowInfo(otherParty: Party): FlowInfo","net.corda.core.flows.FlowLogic.getFlowInfo"]},{"name":"fun getGlobalNetworkMap(): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getGlobalNetworkMap","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/get-global-network-map.html","searchKeys":["getGlobalNetworkMap","fun getGlobalNetworkMap(): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getGlobalNetworkMap"]},{"name":"fun getHostName(): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getHostName","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/get-host-name.html","searchKeys":["getHostName","fun getHostName(): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getHostName"]},{"name":"fun getInput(index: Int): ContractState","description":"net.corda.core.transactions.LedgerTransaction.getInput","location":"docs/net.corda.core.transactions/-ledger-transaction/get-input.html","searchKeys":["getInput","fun getInput(index: Int): ContractState","net.corda.core.transactions.LedgerTransaction.getInput"]},{"name":"fun getInstance(asn1: <Error class: unknown class>): PublicKey","description":"net.corda.core.crypto.CompositeKey.Companion.getInstance","location":"docs/net.corda.core.crypto/-composite-key/-companion/get-instance.html","searchKeys":["getInstance","fun getInstance(asn1: <Error class: unknown class>): PublicKey","net.corda.core.crypto.CompositeKey.Companion.getInstance"]},{"name":"fun getInstance(commodityCode: String): Commodity?","description":"net.corda.finance.contracts.Commodity.Companion.getInstance","location":"docs/net.corda.finance.contracts/-commodity/-companion/get-instance.html","searchKeys":["getInstance","fun getInstance(commodityCode: String): Commodity?","net.corda.finance.contracts.Commodity.Companion.getInstance"]},{"name":"fun getInstance(data: ByteArray): CertRole","description":"net.corda.core.internal.CertRole.Companion.getInstance","location":"docs/net.corda.core.internal/-cert-role/-companion/get-instance.html","searchKeys":["getInstance","fun getInstance(data: ByteArray): CertRole","net.corda.core.internal.CertRole.Companion.getInstance"]},{"name":"fun getInstance(encoded: ByteArray): <Error class: unknown class>","description":"net.corda.core.crypto.CompositeKey.Companion.getInstance","location":"docs/net.corda.core.crypto/-composite-key/-companion/get-instance.html","searchKeys":["getInstance","fun getInstance(encoded: ByteArray): <Error class: unknown class>","net.corda.core.crypto.CompositeKey.Companion.getInstance"]},{"name":"fun getInstance(id: <Error class: unknown class>): CertRole","description":"net.corda.core.internal.CertRole.Companion.getInstance","location":"docs/net.corda.core.internal/-cert-role/-companion/get-instance.html","searchKeys":["getInstance","fun getInstance(id: <Error class: unknown class>): CertRole","net.corda.core.internal.CertRole.Companion.getInstance"]},{"name":"fun getInstance(metadata: () -> DatabaseMetaData): AbstractCashSelection","description":"net.corda.finance.workflows.asset.selection.AbstractCashSelection.Companion.getInstance","location":"docs/net.corda.finance.workflows.asset.selection/-abstract-cash-selection/-companion/get-instance.html","searchKeys":["getInstance","fun getInstance(metadata: () -> DatabaseMetaData): AbstractCashSelection","net.corda.finance.workflows.asset.selection.AbstractCashSelection.Companion.getInstance"]},{"name":"fun getIntermediateCRL(): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.CrlServer.CrlServlet.getIntermediateCRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-crl-servlet/get-intermediate-c-r-l.html","searchKeys":["getIntermediateCRL","fun getIntermediateCRL(): <Error class: unknown class>","net.corda.testing.node.internal.network.CrlServer.CrlServlet.getIntermediateCRL"]},{"name":"fun getJarFile(cordapp: CustomCordapp): Path","description":"net.corda.testing.node.internal.CustomCordapp.Companion.getJarFile","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-companion/get-jar-file.html","searchKeys":["getJarFile","fun getJarFile(cordapp: CustomCordapp): Path","net.corda.testing.node.internal.CustomCordapp.Companion.getJarFile"]},{"name":"fun getMerkleTree(allLeavesHashes: List<SecureHash>): MerkleTree","description":"net.corda.core.crypto.MerkleTree.Companion.getMerkleTree","location":"docs/net.corda.core.crypto/-merkle-tree/-companion/get-merkle-tree.html","searchKeys":["getMerkleTree","fun getMerkleTree(allLeavesHashes: List<SecureHash>): MerkleTree","net.corda.core.crypto.MerkleTree.Companion.getMerkleTree"]},{"name":"fun getMerkleTree(allLeavesHashes: List<SecureHash>, nodeDigestService: DigestService): MerkleTree","description":"net.corda.core.crypto.MerkleTree.Companion.getMerkleTree","location":"docs/net.corda.core.crypto/-merkle-tree/-companion/get-merkle-tree.html","searchKeys":["getMerkleTree","fun getMerkleTree(allLeavesHashes: List<SecureHash>, nodeDigestService: DigestService): MerkleTree","net.corda.core.crypto.MerkleTree.Companion.getMerkleTree"]},{"name":"fun getNetworkParameter(hash: String): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getNetworkParameter","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/get-network-parameter.html","searchKeys":["getNetworkParameter","fun getNetworkParameter(hash: String): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getNetworkParameter"]},{"name":"fun getNodeCRL(): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.CrlServer.CrlServlet.getNodeCRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-crl-servlet/get-node-c-r-l.html","searchKeys":["getNodeCRL","fun getNodeCRL(): <Error class: unknown class>","net.corda.testing.node.internal.network.CrlServer.CrlServlet.getNodeCRL"]},{"name":"fun getNodeInfo(nodeInfoHash: String): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getNodeInfo","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/get-node-info.html","searchKeys":["getNodeInfo","fun getNodeInfo(nodeInfoHash: String): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getNodeInfo"]},{"name":"fun getNodeInfos(): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getNodeInfos","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/get-node-infos.html","searchKeys":["getNodeInfos","fun getNodeInfos(): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getNodeInfos"]},{"name":"fun getNodeSlowCRL(): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.CrlServer.CrlServlet.getNodeSlowCRL","location":"docs/net.corda.testing.node.internal.network/-crl-server/-crl-servlet/get-node-slow-c-r-l.html","searchKeys":["getNodeSlowCRL","fun getNodeSlowCRL(): <Error class: unknown class>","net.corda.testing.node.internal.network.CrlServer.CrlServlet.getNodeSlowCRL"]},{"name":"fun getOffsetDate(startDate: LocalDate, period: Frequency, steps: Int = 1): LocalDate","description":"net.corda.finance.contracts.BusinessCalendar.Companion.getOffsetDate","location":"docs/net.corda.finance.contracts/-business-calendar/-companion/get-offset-date.html","searchKeys":["getOffsetDate","fun getOffsetDate(startDate: LocalDate, period: Frequency, steps: Int = 1): LocalDate","net.corda.finance.contracts.BusinessCalendar.Companion.getOffsetDate"]},{"name":"fun getOutput(index: Int): ContractState","description":"net.corda.core.transactions.BaseTransaction.getOutput","location":"docs/net.corda.core.transactions/-base-transaction/get-output.html","searchKeys":["getOutput","fun getOutput(index: Int): ContractState","net.corda.core.transactions.BaseTransaction.getOutput"]},{"name":"fun getPrivateNetworkMap(extraUUID: String): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getPrivateNetworkMap","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/get-private-network-map.html","searchKeys":["getPrivateNetworkMap","fun getPrivateNetworkMap(extraUUID: String): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.getPrivateNetworkMap"]},{"name":"fun getReferenceInput(index: Int): ContractState","description":"net.corda.core.transactions.LedgerTransaction.getReferenceInput","location":"docs/net.corda.core.transactions/-ledger-transaction/get-reference-input.html","searchKeys":["getReferenceInput","fun getReferenceInput(index: Int): ContractState","net.corda.core.transactions.LedgerTransaction.getReferenceInput"]},{"name":"fun getRegisteredCustomSerializers(): List<SerializationCustomSerializer<*, *>>","description":"net.corda.client.rpc.CordaRPCClient.getRegisteredCustomSerializers","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/get-registered-custom-serializers.html","searchKeys":["getRegisteredCustomSerializers","fun getRegisteredCustomSerializers(): List<SerializationCustomSerializer<*, *>>","net.corda.client.rpc.CordaRPCClient.getRegisteredCustomSerializers"]},{"name":"fun getRequiredSigningKeysInternal(inputs: <Error class: unknown class><StateAndRef<*>>, notary: Party?): Set<PublicKey>","description":"net.corda.core.internal.getRequiredSigningKeysInternal","location":"docs/net.corda.core.internal/get-required-signing-keys-internal.html","searchKeys":["getRequiredSigningKeysInternal","fun getRequiredSigningKeysInternal(inputs: <Error class: unknown class><StateAndRef<*>>, notary: Party?): Set<PublicKey>","net.corda.core.internal.getRequiredSigningKeysInternal"]},{"name":"fun getSchemeIdIfCustomSerializationMagic(magic: SerializationMagic): Int?","description":"net.corda.core.serialization.internal.CustomSerializationSchemeUtils.Companion.getSchemeIdIfCustomSerializationMagic","location":"docs/net.corda.core.serialization.internal/-custom-serialization-scheme-utils/-companion/get-scheme-id-if-custom-serialization-magic.html","searchKeys":["getSchemeIdIfCustomSerializationMagic","fun getSchemeIdIfCustomSerializationMagic(magic: SerializationMagic): Int?","net.corda.core.serialization.internal.CustomSerializationSchemeUtils.Companion.getSchemeIdIfCustomSerializationMagic"]},{"name":"fun getService(provider: Provider): Provider.Service","description":"net.corda.core.crypto.CompositeSignature.Companion.getService","location":"docs/net.corda.core.crypto/-composite-signature/-companion/get-service.html","searchKeys":["getService","fun getService(provider: Provider): Provider.Service","net.corda.core.crypto.CompositeSignature.Companion.getService"]},{"name":"fun getSignatureInstance(algorithm: String, provider: Provider?): Signature","description":"net.corda.core.crypto.internal.Instances.getSignatureInstance","location":"docs/net.corda.core.crypto.internal/-instances/get-signature-instance.html","searchKeys":["getSignatureInstance","fun getSignatureInstance(algorithm: String, provider: Provider?): Signature","net.corda.core.crypto.internal.Instances.getSignatureInstance"]},{"name":"fun getTimestampAsDirectoryName(): String","description":"net.corda.testing.node.internal.getTimestampAsDirectoryName","location":"docs/net.corda.testing.node.internal/get-timestamp-as-directory-name.html","searchKeys":["getTimestampAsDirectoryName","fun getTimestampAsDirectoryName(): String","net.corda.testing.node.internal.getTimestampAsDirectoryName"]},{"name":"fun getZeroHash(): SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.getZeroHash","location":"docs/net.corda.core.crypto/-secure-hash/-companion/get-zero-hash.html","searchKeys":["getZeroHash","fun getZeroHash(): SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.getZeroHash"]},{"name":"fun groupAbstractPartyByWellKnownParty(serviceHub: ServiceHub, parties: Collection<AbstractParty>): Map<Party, List<AbstractParty>>","description":"net.corda.core.identity.groupAbstractPartyByWellKnownParty","location":"docs/net.corda.core.identity/group-abstract-party-by-well-known-party.html","searchKeys":["groupAbstractPartyByWellKnownParty","fun groupAbstractPartyByWellKnownParty(serviceHub: ServiceHub, parties: Collection<AbstractParty>): Map<Party, List<AbstractParty>>","net.corda.core.identity.groupAbstractPartyByWellKnownParty"]},{"name":"fun groupAbstractPartyByWellKnownParty(serviceHub: ServiceHub, parties: Collection<AbstractParty>, ignoreUnrecognisedParties: Boolean): Map<Party, List<AbstractParty>>","description":"net.corda.core.identity.groupAbstractPartyByWellKnownParty","location":"docs/net.corda.core.identity/group-abstract-party-by-well-known-party.html","searchKeys":["groupAbstractPartyByWellKnownParty","fun groupAbstractPartyByWellKnownParty(serviceHub: ServiceHub, parties: Collection<AbstractParty>, ignoreUnrecognisedParties: Boolean): Map<Party, List<AbstractParty>>","net.corda.core.identity.groupAbstractPartyByWellKnownParty"]},{"name":"fun groupPublicKeysByWellKnownParty(serviceHub: ServiceHub, publicKeys: Collection<PublicKey>): Map<Party, List<PublicKey>>","description":"net.corda.core.identity.groupPublicKeysByWellKnownParty","location":"docs/net.corda.core.identity/group-public-keys-by-well-known-party.html","searchKeys":["groupPublicKeysByWellKnownParty","fun groupPublicKeysByWellKnownParty(serviceHub: ServiceHub, publicKeys: Collection<PublicKey>): Map<Party, List<PublicKey>>","net.corda.core.identity.groupPublicKeysByWellKnownParty"]},{"name":"fun groupPublicKeysByWellKnownParty(serviceHub: ServiceHub, publicKeys: Collection<PublicKey>, ignoreUnrecognisedParties: Boolean): Map<Party, List<PublicKey>>","description":"net.corda.core.identity.groupPublicKeysByWellKnownParty","location":"docs/net.corda.core.identity/group-public-keys-by-well-known-party.html","searchKeys":["groupPublicKeysByWellKnownParty","fun groupPublicKeysByWellKnownParty(serviceHub: ServiceHub, publicKeys: Collection<PublicKey>, ignoreUnrecognisedParties: Boolean): Map<Party, List<PublicKey>>","net.corda.core.identity.groupPublicKeysByWellKnownParty"]},{"name":"fun hasPendingDeliveries(): Boolean","description":"net.corda.testing.node.internal.MockNodeMessagingService.hasPendingDeliveries","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/has-pending-deliveries.html","searchKeys":["hasPendingDeliveries","fun hasPendingDeliveries(): Boolean","net.corda.testing.node.internal.MockNodeMessagingService.hasPendingDeliveries"]},{"name":"fun hash(bytes: ByteArray): SecureHash","description":"net.corda.core.crypto.DigestService.hash","location":"docs/net.corda.core.crypto/-digest-service/hash.html","searchKeys":["hash","fun hash(bytes: ByteArray): SecureHash","net.corda.core.crypto.DigestService.hash"]},{"name":"fun hash(str: String): SecureHash","description":"net.corda.core.crypto.DigestService.hash","location":"docs/net.corda.core.crypto/-digest-service/hash.html","searchKeys":["hash","fun hash(str: String): SecureHash","net.corda.core.crypto.DigestService.hash"]},{"name":"fun hashAs(algorithm: String, bytes: ByteArray): SecureHash","description":"net.corda.core.crypto.SecureHash.Companion.hashAs","location":"docs/net.corda.core.crypto/-secure-hash/-companion/hash-as.html","searchKeys":["hashAs","fun hashAs(algorithm: String, bytes: ByteArray): SecureHash","net.corda.core.crypto.SecureHash.Companion.hashAs"]},{"name":"fun hashConcat(other: SecureHash): <Error class: unknown class>","description":"net.corda.core.crypto.SecureHash.hashConcat","location":"docs/net.corda.core.crypto/-secure-hash/hash-concat.html","searchKeys":["hashConcat","fun hashConcat(other: SecureHash): <Error class: unknown class>","net.corda.core.crypto.SecureHash.hashConcat"]},{"name":"fun head(): T","description":"net.corda.core.utilities.NonEmptySet.head","location":"docs/net.corda.core.utilities/-non-empty-set/head.html","searchKeys":["head","fun head(): T","net.corda.core.utilities.NonEmptySet.head"]},{"name":"fun identityAndCertFromX500Name(name: CordaX500Name): PartyAndCertificate","description":"net.corda.core.node.NodeInfo.identityAndCertFromX500Name","location":"docs/net.corda.core.node/-node-info/identity-and-cert-from-x500-name.html","searchKeys":["identityAndCertFromX500Name","fun identityAndCertFromX500Name(name: CordaX500Name): PartyAndCertificate","net.corda.core.node.NodeInfo.identityAndCertFromX500Name"]},{"name":"fun identityFromX500Name(name: CordaX500Name): Party","description":"net.corda.core.node.NodeInfo.identityFromX500Name","location":"docs/net.corda.core.node/-node-info/identity-from-x500-name.html","searchKeys":["identityFromX500Name","fun identityFromX500Name(name: CordaX500Name): Party","net.corda.core.node.NodeInfo.identityFromX500Name"]},{"name":"fun importContractAttachment(attachmentId: AttachmentId, contractAttachment: ContractAttachment)","description":"net.corda.testing.services.MockAttachmentStorage.importContractAttachment","location":"docs/net.corda.testing.services/-mock-attachment-storage/import-contract-attachment.html","searchKeys":["importContractAttachment","fun importContractAttachment(attachmentId: AttachmentId, contractAttachment: ContractAttachment)","net.corda.testing.services.MockAttachmentStorage.importContractAttachment"]},{"name":"fun importContractAttachment(contractClassNames: List<ContractClassName>, uploader: String, jar: InputStream, attachmentId: AttachmentId? = null, signers: List<PublicKey> = emptyList()): AttachmentId","description":"net.corda.testing.services.MockAttachmentStorage.importContractAttachment","location":"docs/net.corda.testing.services/-mock-attachment-storage/import-contract-attachment.html","searchKeys":["importContractAttachment","fun importContractAttachment(contractClassNames: List<ContractClassName>, uploader: String, jar: InputStream, attachmentId: AttachmentId? = null, signers: List<PublicKey> = emptyList()): AttachmentId","net.corda.testing.services.MockAttachmentStorage.importContractAttachment"]},{"name":"fun incrementalPortAllocation(): PortAllocation","description":"net.corda.testing.driver.internal.incrementalPortAllocation","location":"docs/net.corda.testing.driver.internal/incremental-port-allocation.html","searchKeys":["incrementalPortAllocation","fun incrementalPortAllocation(): PortAllocation","net.corda.testing.driver.internal.incrementalPortAllocation"]},{"name":"fun init(txHashAlgoName: String? = null, txHashAlgoClass: String? = null)","description":"net.corda.core.internal.HashAgility.Companion.init","location":"docs/net.corda.core.internal/-hash-agility/-companion/init.html","searchKeys":["init","fun init(txHashAlgoName: String? = null, txHashAlgoClass: String? = null)","net.corda.core.internal.HashAgility.Companion.init"]},{"name":"fun initialiseTelemetry()","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.initialiseTelemetry","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/initialise-telemetry.html","searchKeys":["initialiseTelemetry","fun initialiseTelemetry()","net.corda.core.internal.telemetry.TelemetryServiceImpl.initialiseTelemetry"]},{"name":"fun initiateFlow(destination: Destination): FlowSession","description":"net.corda.core.flows.FlowLogic.initiateFlow","location":"docs/net.corda.core.flows/-flow-logic/initiate-flow.html","searchKeys":["initiateFlow","fun initiateFlow(destination: Destination): FlowSession","net.corda.core.flows.FlowLogic.initiateFlow"]},{"name":"fun initiateFlow(party: Party): FlowSession","description":"net.corda.core.flows.FlowLogic.initiateFlow","location":"docs/net.corda.core.flows/-flow-logic/initiate-flow.html","searchKeys":["initiateFlow","fun initiateFlow(party: Party): FlowSession","net.corda.core.flows.FlowLogic.initiateFlow"]},{"name":"fun input(contractClassName: ContractClassName, state: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.input","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/input.html","searchKeys":["input","fun input(contractClassName: ContractClassName, state: ContractState)","net.corda.testing.dsl.TransactionDSL.input"]},{"name":"fun input(contractClassName: ContractClassName, stateLabel: String)","description":"net.corda.testing.dsl.TransactionDSL.input","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/input.html","searchKeys":["input","fun input(contractClassName: ContractClassName, stateLabel: String)","net.corda.testing.dsl.TransactionDSL.input"]},{"name":"fun input(stateLabel: String): <Error class: unknown class>","description":"net.corda.testing.dsl.TransactionDSL.input","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/input.html","searchKeys":["input","fun input(stateLabel: String): <Error class: unknown class>","net.corda.testing.dsl.TransactionDSL.input"]},{"name":"fun inputStates(): List<StateRef>","description":"net.corda.core.transactions.TransactionBuilder.inputStates","location":"docs/net.corda.core.transactions/-transaction-builder/input-states.html","searchKeys":["inputStates","fun inputStates(): List<StateRef>","net.corda.core.transactions.TransactionBuilder.inputStates"]},{"name":"fun installCordapps(baseDirectory: Path, nodeSpecificCordapps: Set<TestCordappInternal>, generalCordapps: Set<TestCordappInternal> = emptySet())","description":"net.corda.testing.node.internal.TestCordappInternal.Companion.installCordapps","location":"docs/net.corda.testing.node.internal/-test-cordapp-internal/-companion/install-cordapps.html","searchKeys":["installCordapps","fun installCordapps(baseDirectory: Path, nodeSpecificCordapps: Set<TestCordappInternal>, generalCordapps: Set<TestCordappInternal> = emptySet())","net.corda.testing.node.internal.TestCordappInternal.Companion.installCordapps"]},{"name":"fun isClosed(): Boolean","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.isClosed","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/is-closed.html","searchKeys":["isClosed","fun isClosed(): Boolean","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.isClosed"]},{"name":"fun isConsumedByTheSameTx(txIdHash: SecureHash, consumedStates: Map<StateRef, StateConsumptionDetails>): Boolean","description":"net.corda.core.internal.notary.isConsumedByTheSameTx","location":"docs/net.corda.core.internal.notary/is-consumed-by-the-same-tx.html","searchKeys":["isConsumedByTheSameTx","fun isConsumedByTheSameTx(txIdHash: SecureHash, consumedStates: Map<StateRef, StateConsumptionDetails>): Boolean","net.corda.core.internal.notary.isConsumedByTheSameTx"]},{"name":"fun isEmpty(): Boolean","description":"net.corda.core.node.services.Vault.Update.isEmpty","location":"docs/net.corda.core.node.services/-vault/-update/is-empty.html","searchKeys":["isEmpty","fun isEmpty(): Boolean","net.corda.core.node.services.Vault.Update.isEmpty"]},{"name":"fun isFulfilledBy(key: PublicKey): <Error class: unknown class>","description":"net.corda.core.crypto.CompositeKey.isFulfilledBy","location":"docs/net.corda.core.crypto/-composite-key/is-fulfilled-by.html","searchKeys":["isFulfilledBy","fun isFulfilledBy(key: PublicKey): <Error class: unknown class>","net.corda.core.crypto.CompositeKey.isFulfilledBy"]},{"name":"fun isFulfilledBy(keysToCheck: Iterable<PublicKey>): Boolean","description":"net.corda.core.crypto.CompositeKey.isFulfilledBy","location":"docs/net.corda.core.crypto/-composite-key/is-fulfilled-by.html","searchKeys":["isFulfilledBy","fun isFulfilledBy(keysToCheck: Iterable<PublicKey>): Boolean","net.corda.core.crypto.CompositeKey.isFulfilledBy"]},{"name":"fun isInitiator(myCordaX500Name: CordaX500Name): Boolean","description":"net.corda.core.flows.FlowTransactionInfo.isInitiator","location":"docs/net.corda.core.flows/-flow-transaction-info/is-initiator.html","searchKeys":["isInitiator","fun isInitiator(myCordaX500Name: CordaX500Name): Boolean","net.corda.core.flows.FlowTransactionInfo.isInitiator"]},{"name":"fun isLegalIdentity(name: CordaX500Name): Boolean","description":"net.corda.core.node.NodeInfo.isLegalIdentity","location":"docs/net.corda.core.node/-node-info/is-legal-identity.html","searchKeys":["isLegalIdentity","fun isLegalIdentity(name: CordaX500Name): Boolean","net.corda.core.node.NodeInfo.isLegalIdentity"]},{"name":"fun isLegalIdentity(party: Party): Boolean","description":"net.corda.core.node.NodeInfo.isLegalIdentity","location":"docs/net.corda.core.node/-node-info/is-legal-identity.html","searchKeys":["isLegalIdentity","fun isLegalIdentity(party: Party): Boolean","net.corda.core.node.NodeInfo.isLegalIdentity"]},{"name":"fun isNotSignable(entry: JarEntry): Boolean","description":"net.corda.core.internal.JarSignatureCollector.isNotSignable","location":"docs/net.corda.core.internal/-jar-signature-collector/is-not-signable.html","searchKeys":["isNotSignable","fun isNotSignable(entry: JarEntry): Boolean","net.corda.core.internal.JarSignatureCollector.isNotSignable"]},{"name":"fun isNotaryChangeTransaction(): Boolean","description":"net.corda.core.transactions.SignedTransaction.isNotaryChangeTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/is-notary-change-transaction.html","searchKeys":["isNotaryChangeTransaction","fun isNotaryChangeTransaction(): Boolean","net.corda.core.transactions.SignedTransaction.isNotaryChangeTransaction"]},{"name":"fun isNull(): Boolean","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.isNull","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/is-null.html","searchKeys":["isNull","fun isNull(): Boolean","net.corda.core.flows.MaybeSerializedSignedTransaction.isNull"]},{"name":"fun isShutdownMethodName(methodName: String): Boolean","description":"net.corda.client.rpc.internal.RPCUtils.isShutdownMethodName","location":"docs/net.corda.client.rpc.internal/-r-p-c-utils/is-shutdown-method-name.html","searchKeys":["isShutdownMethodName","fun isShutdownMethodName(methodName: String): Boolean","net.corda.client.rpc.internal.RPCUtils.isShutdownMethodName"]},{"name":"fun isShuttingDown(): Boolean","description":"net.corda.testing.node.internal.ShutdownManager.isShuttingDown","location":"docs/net.corda.testing.node.internal/-shutdown-manager/is-shutting-down.html","searchKeys":["isShuttingDown","fun isShuttingDown(): Boolean","net.corda.testing.node.internal.ShutdownManager.isShuttingDown"]},{"name":"fun isSigned(isSignedPredicate: ColumnPredicate<Boolean>): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.isSigned","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/is-signed.html","searchKeys":["isSigned","fun isSigned(isSignedPredicate: ColumnPredicate<Boolean>): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.isSigned"]},{"name":"fun isSupportedSignatureScheme(signatureScheme: SignatureScheme): Boolean","description":"net.corda.core.crypto.Crypto.isSupportedSignatureScheme","location":"docs/net.corda.core.crypto/-crypto/is-supported-signature-scheme.html","searchKeys":["isSupportedSignatureScheme","fun isSupportedSignatureScheme(signatureScheme: SignatureScheme): Boolean","net.corda.core.crypto.Crypto.isSupportedSignatureScheme"]},{"name":"fun isUploaderTrusted(uploader: String?): Boolean","description":"net.corda.core.internal.isUploaderTrusted","location":"docs/net.corda.core.internal/is-uploader-trusted.html","searchKeys":["isUploaderTrusted","fun isUploaderTrusted(uploader: String?): Boolean","net.corda.core.internal.isUploaderTrusted"]},{"name":"fun isValid(content: ByteArray): Boolean","description":"net.corda.core.crypto.DigitalSignature.WithKey.isValid","location":"docs/net.corda.core.crypto/-digital-signature/-with-key/is-valid.html","searchKeys":["isValid","fun isValid(content: ByteArray): Boolean","net.corda.core.crypto.DigitalSignature.WithKey.isValid"]},{"name":"fun isValid(publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","description":"net.corda.core.crypto.Crypto.isValid","location":"docs/net.corda.core.crypto/-crypto/is-valid.html","searchKeys":["isValid","fun isValid(publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","net.corda.core.crypto.Crypto.isValid"]},{"name":"fun isValid(signatureScheme: SignatureScheme, publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","description":"net.corda.core.crypto.Crypto.isValid","location":"docs/net.corda.core.crypto/-crypto/is-valid.html","searchKeys":["isValid","fun isValid(signatureScheme: SignatureScheme, publicKey: PublicKey, signatureData: ByteArray, clearData: ByteArray): Boolean","net.corda.core.crypto.Crypto.isValid"]},{"name":"fun isValid(timeWindow: TimeWindow): Boolean","description":"net.corda.core.node.services.TimeWindowChecker.isValid","location":"docs/net.corda.core.node.services/-time-window-checker/is-valid.html","searchKeys":["isValid","fun isValid(timeWindow: TimeWindow): Boolean","net.corda.core.node.services.TimeWindowChecker.isValid"]},{"name":"fun isValid(txId: SecureHash): Boolean","description":"net.corda.core.crypto.TransactionSignature.isValid","location":"docs/net.corda.core.crypto/-transaction-signature/is-valid.html","searchKeys":["isValid","fun isValid(txId: SecureHash): Boolean","net.corda.core.crypto.TransactionSignature.isValid"]},{"name":"fun isValid(txId: SecureHash, transactionSignature: TransactionSignature): Boolean","description":"net.corda.core.crypto.Crypto.isValid","location":"docs/net.corda.core.crypto/-crypto/is-valid.html","searchKeys":["isValid","fun isValid(txId: SecureHash, transactionSignature: TransactionSignature): Boolean","net.corda.core.crypto.Crypto.isValid"]},{"name":"fun isValidParent(parent: CertRole?): Boolean","description":"net.corda.core.internal.CertRole.isValidParent","location":"docs/net.corda.core.internal/-cert-role/is-valid-parent.html","searchKeys":["isValidParent","fun isValidParent(parent: CertRole?): Boolean","net.corda.core.internal.CertRole.isValidParent"]},{"name":"fun jarName(url: Path): String","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.jarName","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/jar-name.html","searchKeys":["jarName","fun jarName(url: Path): String","net.corda.core.internal.cordapp.CordappImpl.Companion.jarName"]},{"name":"fun justTransition(to: S)","description":"net.corda.core.internal.LifeCycle.justTransition","location":"docs/net.corda.core.internal/-life-cycle/just-transition.html","searchKeys":["justTransition","fun justTransition(to: S)","net.corda.core.internal.LifeCycle.justTransition"]},{"name":"fun latestParametersAccepted(publicKey: PublicKey): SecureHash?","description":"net.corda.testing.node.internal.network.NetworkMapServer.latestParametersAccepted","location":"docs/net.corda.testing.node.internal.network/-network-map-server/latest-parameters-accepted.html","searchKeys":["latestParametersAccepted","fun latestParametersAccepted(publicKey: PublicKey): SecureHash?","net.corda.testing.node.internal.network.NetworkMapServer.latestParametersAccepted"]},{"name":"fun leafIndex(leaf: SecureHash): Int","description":"net.corda.core.crypto.PartialMerkleTree.leafIndex","location":"docs/net.corda.core.crypto/-partial-merkle-tree/leaf-index.html","searchKeys":["leafIndex","fun leafIndex(leaf: SecureHash): Int","net.corda.core.crypto.PartialMerkleTree.leafIndex"]},{"name":"fun like(string: String, exactMatch: Boolean = true): ColumnPredicate.Likeness","description":"net.corda.core.node.services.vault.Builder.like","location":"docs/net.corda.core.node.services.vault/-builder/like.html","searchKeys":["like","fun like(string: String, exactMatch: Boolean = true): ColumnPredicate.Likeness","net.corda.core.node.services.vault.Builder.like"]},{"name":"fun load(appClassLoader: ClassLoader)","description":"net.corda.core.internal.verification.AttachmentFixups.load","location":"docs/net.corda.core.internal.verification/-attachment-fixups/load.html","searchKeys":["load","fun load(appClassLoader: ClassLoader)","net.corda.core.internal.verification.AttachmentFixups.load"]},{"name":"fun loadTestCalendar(name: String): BusinessCalendar","description":"net.corda.finance.workflows.utils.loadTestCalendar","location":"docs/net.corda.finance.workflows.utils/load-test-calendar.html","searchKeys":["loadTestCalendar","fun loadTestCalendar(name: String): BusinessCalendar","net.corda.finance.workflows.utils.loadTestCalendar"]},{"name":"fun loadedAttachmentsSize(): Int","description":"net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory.loadedAttachmentsSize","location":"docs/net.corda.core.serialization.internal/-attachment-u-r-l-stream-handler-factory/loaded-attachments-size.html","searchKeys":["loadedAttachmentsSize","fun loadedAttachmentsSize(): Int","net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory.loadedAttachmentsSize"]},{"name":"fun main(args: Array<String>)","description":"net.corda.testing.node.internal.RandomRpcUser.Companion.main","location":"docs/net.corda.testing.node.internal/-random-rpc-user/-companion/main.html","searchKeys":["main","fun main(args: Array<String>)","net.corda.testing.node.internal.RandomRpcUser.Companion.main"]},{"name":"fun makeMetaData(stx: SignedTransaction, recordMetaDataEvenIfNotFullySigned: Boolean, senderStatesToRecord: StatesToRecord, participantSessions: Set<FlowSession>, observerSessions: Set<FlowSession>): TransactionMetadata?","description":"net.corda.core.flows.SendTransactionFlow.Companion.makeMetaData","location":"docs/net.corda.core.flows/-send-transaction-flow/-companion/make-meta-data.html","searchKeys":["makeMetaData","fun makeMetaData(stx: SignedTransaction, recordMetaDataEvenIfNotFullySigned: Boolean, senderStatesToRecord: StatesToRecord, participantSessions: Set<FlowSession>, observerSessions: Set<FlowSession>): TransactionMetadata?","net.corda.core.flows.SendTransactionFlow.Companion.makeMetaData"]},{"name":"fun makeTestDataSourceProperties(nodeName: String = SecureHash.randomSHA256().toString()): Properties","description":"net.corda.testing.node.MockServices.Companion.makeTestDataSourceProperties","location":"docs/net.corda.testing.node/-mock-services/-companion/make-test-data-source-properties.html","searchKeys":["makeTestDataSourceProperties","fun makeTestDataSourceProperties(nodeName: String = SecureHash.randomSHA256().toString()): Properties","net.corda.testing.node.MockServices.Companion.makeTestDataSourceProperties"]},{"name":"fun makeTestDatabaseAndMockServices(cordappPackages: List<String>, identityService: IdentityService, initialIdentity: <Error class: unknown class>, networkParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN), vararg moreKeys: KeyPair): <Error class: unknown class><<Error class: unknown class>, MockServices>","description":"net.corda.testing.node.MockServices.Companion.makeTestDatabaseAndMockServices","location":"docs/net.corda.testing.node/-mock-services/-companion/make-test-database-and-mock-services.html","searchKeys":["makeTestDatabaseAndMockServices","fun makeTestDatabaseAndMockServices(cordappPackages: List<String>, identityService: IdentityService, initialIdentity: <Error class: unknown class>, networkParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN), vararg moreKeys: KeyPair): <Error class: unknown class><<Error class: unknown class>, MockServices>","net.corda.testing.node.MockServices.Companion.makeTestDatabaseAndMockServices"]},{"name":"fun makeTestDatabaseAndPersistentServices(cordappPackages: List<String>, initialIdentity: <Error class: unknown class>, networkParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN), moreKeys: Set<KeyPair>, moreIdentities: Set<PartyAndCertificate>, cacheFactory: TestingNamedCacheFactory = TestingNamedCacheFactory()): <Error class: unknown class><<Error class: unknown class>, MockServices>","description":"net.corda.testing.node.MockServices.Companion.makeTestDatabaseAndPersistentServices","location":"docs/net.corda.testing.node/-mock-services/-companion/make-test-database-and-persistent-services.html","searchKeys":["makeTestDatabaseAndPersistentServices","fun makeTestDatabaseAndPersistentServices(cordappPackages: List<String>, initialIdentity: <Error class: unknown class>, networkParameters: NetworkParameters = testNetworkParameters(modifiedTime = Instant.MIN), moreKeys: Set<KeyPair>, moreIdentities: Set<PartyAndCertificate>, cacheFactory: TestingNamedCacheFactory = TestingNamedCacheFactory()): <Error class: unknown class><<Error class: unknown class>, MockServices>","net.corda.testing.node.MockServices.Companion.makeTestDatabaseAndPersistentServices"]},{"name":"fun makeTestIdentityService(vararg identities: PartyAndCertificate): IdentityService","description":"net.corda.testing.node.makeTestIdentityService","location":"docs/net.corda.testing.node/make-test-identity-service.html","searchKeys":["makeTestIdentityService","fun makeTestIdentityService(vararg identities: PartyAndCertificate): IdentityService","net.corda.testing.node.makeTestIdentityService"]},{"name":"fun manuallyCloseDB()","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.manuallyCloseDB","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/manually-close-d-b.html","searchKeys":["manuallyCloseDB","fun manuallyCloseDB()","net.corda.testing.node.internal.InternalMockNetwork.MockNode.manuallyCloseDB"]},{"name":"fun measureMilliAndNanoTime(block: () -> Unit): Double","description":"net.corda.core.internal.utilities.measureMilliAndNanoTime","location":"docs/net.corda.core.internal.utilities/measure-milli-and-nano-time.html","searchKeys":["measureMilliAndNanoTime","fun measureMilliAndNanoTime(block: () -> Unit): Double","net.corda.core.internal.utilities.measureMilliAndNanoTime"]},{"name":"fun methodsFromOtherMappedSchema(schema: MappedSchema): List<MappedSchemaValidator.SchemaCrossReferenceReport>","description":"net.corda.core.schemas.MappedSchemaValidator.methodsFromOtherMappedSchema","location":"docs/net.corda.core.schemas/-mapped-schema-validator/methods-from-other-mapped-schema.html","searchKeys":["methodsFromOtherMappedSchema","fun methodsFromOtherMappedSchema(schema: MappedSchema): List<MappedSchemaValidator.SchemaCrossReferenceReport>","net.corda.core.schemas.MappedSchemaValidator.methodsFromOtherMappedSchema"]},{"name":"fun min(d1: Duration, d2: Duration): Duration","description":"net.corda.core.internal.min","location":"docs/net.corda.core.internal/min.html","searchKeys":["min","fun min(d1: Duration, d2: Duration): Duration","net.corda.core.internal.min"]},{"name":"fun moveBusinessDays(date: LocalDate, direction: DateRollDirection, i: Int): LocalDate","description":"net.corda.finance.contracts.BusinessCalendar.moveBusinessDays","location":"docs/net.corda.finance.contracts/-business-calendar/move-business-days.html","searchKeys":["moveBusinessDays","fun moveBusinessDays(date: LocalDate, direction: DateRollDirection, i: Int): LocalDate","net.corda.finance.contracts.BusinessCalendar.moveBusinessDays"]},{"name":"fun needsNotarySignature(stx: SignedTransaction): Boolean","description":"net.corda.core.flows.NotarySigCheck.needsNotarySignature","location":"docs/net.corda.core.flows/-notary-sig-check/needs-notary-signature.html","searchKeys":["needsNotarySignature","fun needsNotarySignature(stx: SignedTransaction): Boolean","net.corda.core.flows.NotarySigCheck.needsNotarySignature"]},{"name":"fun networkMapHashes(): List<SecureHash>","description":"net.corda.testing.node.internal.network.NetworkMapServer.networkMapHashes","location":"docs/net.corda.testing.node.internal.network/-network-map-server/network-map-hashes.html","searchKeys":["networkMapHashes","fun networkMapHashes(): List<SecureHash>","net.corda.testing.node.internal.network.NetworkMapServer.networkMapHashes"]},{"name":"fun newInstance(invocationId: Trace.InvocationId = InvocationId.newInstance(), sessionId: Trace.SessionId = SessionId(invocationId.value, invocationId.timestamp)): Trace","description":"net.corda.core.context.Trace.Companion.newInstance","location":"docs/net.corda.core.context/-trace/-companion/new-instance.html","searchKeys":["newInstance","fun newInstance(invocationId: Trace.InvocationId = InvocationId.newInstance(), sessionId: Trace.SessionId = SessionId(invocationId.value, invocationId.timestamp)): Trace","net.corda.core.context.Trace.Companion.newInstance"]},{"name":"fun newInstance(origin: InvocationOrigin, trace: Trace = Trace.newInstance(), actor: Actor? = null, externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?> = emptyList(), clientId: String? = null, serializedTelemetry: SerializedTelemetry? = null): InvocationContext","description":"net.corda.core.context.InvocationContext.Companion.newInstance","location":"docs/net.corda.core.context/-invocation-context/-companion/new-instance.html","searchKeys":["newInstance","fun newInstance(origin: InvocationOrigin, trace: Trace = Trace.newInstance(), actor: Actor? = null, externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?> = emptyList(), clientId: String? = null, serializedTelemetry: SerializedTelemetry? = null): InvocationContext","net.corda.core.context.InvocationContext.Companion.newInstance"]},{"name":"fun newInstance(value: String = UuidGenerator.next().toString(), timestamp: Instant = Instant.now()): Trace.InvocationId","description":"net.corda.core.context.Trace.InvocationId.Companion.newInstance","location":"docs/net.corda.core.context/-trace/-invocation-id/-companion/new-instance.html","searchKeys":["newInstance","fun newInstance(value: String = UuidGenerator.next().toString(), timestamp: Instant = Instant.now()): Trace.InvocationId","net.corda.core.context.Trace.InvocationId.Companion.newInstance"]},{"name":"fun newInstance(value: String = UuidGenerator.next().toString(), timestamp: Instant = Instant.now()): Trace.SessionId","description":"net.corda.core.context.Trace.SessionId.Companion.newInstance","location":"docs/net.corda.core.context/-trace/-session-id/-companion/new-instance.html","searchKeys":["newInstance","fun newInstance(value: String = UuidGenerator.next().toString(), timestamp: Instant = Instant.now()): Trace.SessionId","net.corda.core.context.Trace.SessionId.Companion.newInstance"]},{"name":"fun newSecureRandom(): SecureRandom","description":"net.corda.core.crypto.newSecureRandom","location":"docs/net.corda.core.crypto/new-secure-random.html","searchKeys":["newSecureRandom","fun newSecureRandom(): SecureRandom","net.corda.core.crypto.newSecureRandom"]},{"name":"fun next(): UUID","description":"net.corda.core.utilities.UuidGenerator.Companion.next","location":"docs/net.corda.core.utilities/-uuid-generator/-companion/next.html","searchKeys":["next","fun next(): UUID","net.corda.core.utilities.UuidGenerator.Companion.next"]},{"name":"fun nextHostAndPort(): NetworkHostAndPort","description":"net.corda.testing.driver.PortAllocation.nextHostAndPort","location":"docs/net.corda.testing.driver/-port-allocation/next-host-and-port.html","searchKeys":["nextHostAndPort","fun nextHostAndPort(): NetworkHostAndPort","net.corda.testing.driver.PortAllocation.nextHostAndPort"]},{"name":"fun nextStep(): ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.nextStep","location":"docs/net.corda.core.utilities/-progress-tracker/next-step.html","searchKeys":["nextStep","fun nextStep(): ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.nextStep"]},{"name":"fun noPackageOverlap(packages: Collection<String>): Boolean","description":"net.corda.core.internal.noPackageOverlap","location":"docs/net.corda.core.internal/no-package-overlap.html","searchKeys":["noPackageOverlap","fun noPackageOverlap(packages: Collection<String>): Boolean","net.corda.core.internal.noPackageOverlap"]},{"name":"fun nodeMustBeStartedFuture(executorService: ScheduledExecutorService, logFile: Path, listenProcess: Process, exception: () -> NodeListenProcessDeathException): CordaFuture<Unit>","description":"net.corda.testing.node.internal.nodeMustBeStartedFuture","location":"docs/net.corda.testing.node.internal/node-must-be-started-future.html","searchKeys":["nodeMustBeStartedFuture","fun nodeMustBeStartedFuture(executorService: ScheduledExecutorService, logFile: Path, listenProcess: Process, exception: () -> NodeListenProcessDeathException): CordaFuture<Unit>","net.corda.testing.node.internal.nodeMustBeStartedFuture"]},{"name":"fun nonceHashAs(algorithm: String, bytes: ByteArray): SecureHash","description":"net.corda.core.crypto.SecureHash.Companion.nonceHashAs","location":"docs/net.corda.core.crypto/-secure-hash/-companion/nonce-hash-as.html","searchKeys":["nonceHashAs","fun nonceHashAs(algorithm: String, bytes: ByteArray): SecureHash","net.corda.core.crypto.SecureHash.Companion.nonceHashAs"]},{"name":"fun normalize(nameAttribute: String): String","description":"net.corda.core.internal.LegalNameValidator.normalize","location":"docs/net.corda.core.internal/-legal-name-validator/normalize.html","searchKeys":["normalize","fun normalize(nameAttribute: String): String","net.corda.core.internal.LegalNameValidator.normalize"]},{"name":"fun normalizeLegalName(legalName: String): String","description":"net.corda.core.internal.LegalNameValidator.normalizeLegalName","location":"docs/net.corda.core.internal/-legal-name-validator/normalize-legal-name.html","searchKeys":["normalizeLegalName","fun normalizeLegalName(legalName: String): String","net.corda.core.internal.LegalNameValidator.normalizeLegalName"]},{"name":"fun notLike(string: String, exactMatch: Boolean = true): ColumnPredicate.Likeness","description":"net.corda.core.node.services.vault.Builder.notLike","location":"docs/net.corda.core.node.services.vault/-builder/not-like.html","searchKeys":["notLike","fun notLike(string: String, exactMatch: Boolean = true): ColumnPredicate.Likeness","net.corda.core.node.services.vault.Builder.notLike"]},{"name":"fun novate(centralParty: P): List<AmountTransfer<T, P>>","description":"net.corda.core.contracts.AmountTransfer.novate","location":"docs/net.corda.core.contracts/-amount-transfer/novate.html","searchKeys":["novate","fun novate(centralParty: P): List<AmountTransfer<T, P>>","net.corda.core.contracts.AmountTransfer.novate"]},{"name":"fun of(bytes: ByteArray, offset: Int = 0, size: Int = bytes.size): ByteSequence","description":"net.corda.core.utilities.ByteSequence.Companion.of","location":"docs/net.corda.core.utilities/-byte-sequence/-companion/of.html","searchKeys":["of","fun of(bytes: ByteArray, offset: Int = 0, size: Int = bytes.size): ByteSequence","net.corda.core.utilities.ByteSequence.Companion.of"]},{"name":"fun of(uri: URI): TestCordapp","description":"net.corda.testing.node.TestCordapp.Companion.of","location":"docs/net.corda.testing.node/-test-cordapp/-companion/of.html","searchKeys":["of","fun of(uri: URI): TestCordapp","net.corda.testing.node.TestCordapp.Companion.of"]},{"name":"fun of(vararg b: Byte): OpaqueBytes","description":"net.corda.core.utilities.OpaqueBytes.Companion.of","location":"docs/net.corda.core.utilities/-opaque-bytes/-companion/of.html","searchKeys":["of","fun of(vararg b: Byte): OpaqueBytes","net.corda.core.utilities.OpaqueBytes.Companion.of"]},{"name":"fun open(): ByteArrayInputStream","description":"net.corda.core.utilities.ByteSequence.open","location":"docs/net.corda.core.utilities/-byte-sequence/open.html","searchKeys":["open","fun open(): ByteArrayInputStream","net.corda.core.utilities.ByteSequence.open"]},{"name":"fun output(contractClassName: ContractClassName, contractState: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.output","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/output.html","searchKeys":["output","fun output(contractClassName: ContractClassName, contractState: ContractState)","net.corda.testing.dsl.TransactionDSL.output"]},{"name":"fun output(contractClassName: ContractClassName, encumbrance: Int, contractState: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.output","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/output.html","searchKeys":["output","fun output(contractClassName: ContractClassName, encumbrance: Int, contractState: ContractState)","net.corda.testing.dsl.TransactionDSL.output"]},{"name":"fun output(contractClassName: ContractClassName, label: String, contractState: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.output","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/output.html","searchKeys":["output","fun output(contractClassName: ContractClassName, label: String, contractState: ContractState)","net.corda.testing.dsl.TransactionDSL.output"]},{"name":"fun output(contractClassName: ContractClassName, label: String, encumbrance: Int, contractState: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.output","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/output.html","searchKeys":["output","fun output(contractClassName: ContractClassName, label: String, encumbrance: Int, contractState: ContractState)","net.corda.testing.dsl.TransactionDSL.output"]},{"name":"fun output(contractClassName: ContractClassName, label: String, notary: Party, contractState: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.output","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/output.html","searchKeys":["output","fun output(contractClassName: ContractClassName, label: String, notary: Party, contractState: ContractState)","net.corda.testing.dsl.TransactionDSL.output"]},{"name":"fun output(contractClassName: ContractClassName, notary: Party, contractState: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.output","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/output.html","searchKeys":["output","fun output(contractClassName: ContractClassName, notary: Party, contractState: ContractState)","net.corda.testing.dsl.TransactionDSL.output"]},{"name":"fun outputStates(): List<TransactionState<*>>","description":"net.corda.core.transactions.TransactionBuilder.outputStates","location":"docs/net.corda.core.transactions/-transaction-builder/output-states.html","searchKeys":["outputStates","fun outputStates(): List<TransactionState<*>>","net.corda.core.transactions.TransactionBuilder.outputStates"]},{"name":"fun outputToLabel(state: ContractState): String?","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.outputToLabel","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/output-to-label.html","searchKeys":["outputToLabel","fun outputToLabel(state: ContractState): String?","net.corda.testing.dsl.TestLedgerDSLInterpreter.outputToLabel"]},{"name":"fun p2pSslOptions(path: Path, name: CordaX500Name = CordaX500Name(\"MegaCorp\", \"London\", \"GB\")): <Error class: unknown class>","description":"net.corda.testing.internal.p2pSslOptions","location":"docs/net.corda.testing.internal/p2p-ssl-options.html","searchKeys":["p2pSslOptions","fun p2pSslOptions(path: Path, name: CordaX500Name = CordaX500Name(\"MegaCorp\", \"London\", \"GB\")): <Error class: unknown class>","net.corda.testing.internal.p2pSslOptions"]},{"name":"fun parse(name: String): CordaX500Name","description":"net.corda.core.identity.CordaX500Name.Companion.parse","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/parse.html","searchKeys":["parse","fun parse(name: String): CordaX500Name","net.corda.core.identity.CordaX500Name.Companion.parse"]},{"name":"fun parse(str: String): NetworkHostAndPort","description":"net.corda.core.utilities.NetworkHostAndPort.Companion.parse","location":"docs/net.corda.core.utilities/-network-host-and-port/-companion/parse.html","searchKeys":["parse","fun parse(str: String): NetworkHostAndPort","net.corda.core.utilities.NetworkHostAndPort.Companion.parse"]},{"name":"fun parse(str: String?): SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.parse","location":"docs/net.corda.core.crypto/-secure-hash/-companion/parse.html","searchKeys":["parse","fun parse(str: String?): SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.parse"]},{"name":"fun parse(target: T?, command: String): StringToMethodCallParser.ParsedMethodCall<T>","description":"net.corda.client.jackson.StringToMethodCallParser.parse","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/parse.html","searchKeys":["parse","fun parse(target: T?, command: String): StringToMethodCallParser.ParsedMethodCall<T>","net.corda.client.jackson.StringToMethodCallParser.parse"]},{"name":"fun parseArguments(methodNameHint: String, parameters: List<<Error class: unknown class><String, Type>>, args: String): Array<Any?>","description":"net.corda.client.jackson.StringToMethodCallParser.parseArguments","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/parse-arguments.html","searchKeys":["parseArguments","fun parseArguments(methodNameHint: String, parameters: List<<Error class: unknown class><String, Type>>, args: String): Array<Any?>","net.corda.client.jackson.StringToMethodCallParser.parseArguments"]},{"name":"fun parseCurrency(input: String): Amount<Currency>","description":"net.corda.core.contracts.Amount.Companion.parseCurrency","location":"docs/net.corda.core.contracts/-amount/-companion/parse-currency.html","searchKeys":["parseCurrency","fun parseCurrency(input: String): Amount<Currency>","net.corda.core.contracts.Amount.Companion.parseCurrency"]},{"name":"fun parseDateFromString(it: String): LocalDate","description":"net.corda.finance.contracts.BusinessCalendar.Companion.parseDateFromString","location":"docs/net.corda.finance.contracts/-business-calendar/-companion/parse-date-from-string.html","searchKeys":["parseDateFromString","fun parseDateFromString(it: String): LocalDate","net.corda.finance.contracts.BusinessCalendar.Companion.parseDateFromString"]},{"name":"fun parsePublicKeyBase58(base58String: String): PublicKey","description":"net.corda.core.utilities.parsePublicKeyBase58","location":"docs/net.corda.core.utilities/parse-public-key-base58.html","searchKeys":["parsePublicKeyBase58","fun parsePublicKeyBase58(base58String: String): PublicKey","net.corda.core.utilities.parsePublicKeyBase58"]},{"name":"fun payloadContentDescription(): String","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.payloadContentDescription","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/payload-content-description.html","searchKeys":["payloadContentDescription","fun payloadContentDescription(): String","net.corda.core.flows.MaybeSerializedSignedTransaction.payloadContentDescription"]},{"name":"fun peer(party: CordaX500Name, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null, impersonatedActor: Actor? = null): InvocationContext","description":"net.corda.core.context.InvocationContext.Companion.peer","location":"docs/net.corda.core.context/-invocation-context/-companion/peer.html","searchKeys":["peer","fun peer(party: CordaX500Name, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null, impersonatedActor: Actor? = null): InvocationContext","net.corda.core.context.InvocationContext.Companion.peer"]},{"name":"fun persistFlowStackSnapshot()","description":"net.corda.core.flows.FlowLogic.persistFlowStackSnapshot","location":"docs/net.corda.core.flows/-flow-logic/persist-flow-stack-snapshot.html","searchKeys":["persistFlowStackSnapshot","fun persistFlowStackSnapshot()","net.corda.core.flows.FlowLogic.persistFlowStackSnapshot"]},{"name":"fun postJson(path: String, data: Any = Unit)","description":"net.corda.testing.http.HttpApi.postJson","location":"docs/net.corda.testing.http/-http-api/post-json.html","searchKeys":["postJson","fun postJson(path: String, data: Any = Unit)","net.corda.testing.http.HttpApi.postJson"]},{"name":"fun postJson(url: URL, data: String)","description":"net.corda.testing.http.HttpUtils.postJson","location":"docs/net.corda.testing.http/-http-utils/post-json.html","searchKeys":["postJson","fun postJson(url: URL, data: String)","net.corda.testing.http.HttpUtils.postJson"]},{"name":"fun postPlain(path: String, data: String = \"\")","description":"net.corda.testing.http.HttpApi.postPlain","location":"docs/net.corda.testing.http/-http-api/post-plain.html","searchKeys":["postPlain","fun postPlain(path: String, data: String = \"\")","net.corda.testing.http.HttpApi.postPlain"]},{"name":"fun postPlain(url: URL, data: String)","description":"net.corda.testing.http.HttpUtils.postPlain","location":"docs/net.corda.testing.http/-http-utils/post-plain.html","searchKeys":["postPlain","fun postPlain(url: URL, data: String)","net.corda.testing.http.HttpUtils.postPlain"]},{"name":"fun pow(exponent: BigInteger): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.pow","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/pow.html","searchKeys":["pow","fun pow(exponent: BigInteger): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.pow"]},{"name":"fun prefixChars(prefixLen: Int = 6): <Error class: unknown class>","description":"net.corda.core.crypto.SecureHash.prefixChars","location":"docs/net.corda.core.crypto/-secure-hash/prefix-chars.html","searchKeys":["prefixChars","fun prefixChars(prefixLen: Int = 6): <Error class: unknown class>","net.corda.core.crypto.SecureHash.prefixChars"]},{"name":"fun principal(): Principal","description":"net.corda.core.context.InvocationContext.principal","location":"docs/net.corda.core.context/-invocation-context/principal.html","searchKeys":["principal","fun principal(): Principal","net.corda.core.context.InvocationContext.principal"]},{"name":"fun publicKeyForCachedBytes(bytes: ByteSequence): PublicKey?","description":"net.corda.core.crypto.internal.PublicKeyCache.publicKeyForCachedBytes","location":"docs/net.corda.core.crypto.internal/-public-key-cache/public-key-for-cached-bytes.html","searchKeys":["publicKeyForCachedBytes","fun publicKeyForCachedBytes(bytes: ByteSequence): PublicKey?","net.corda.core.crypto.internal.PublicKeyCache.publicKeyForCachedBytes"]},{"name":"fun publicKeyOnCurve(signatureScheme: SignatureScheme, publicKey: PublicKey): Boolean","description":"net.corda.core.crypto.Crypto.publicKeyOnCurve","location":"docs/net.corda.core.crypto/-crypto/public-key-on-curve.html","searchKeys":["publicKeyOnCurve","fun publicKeyOnCurve(signatureScheme: SignatureScheme, publicKey: PublicKey): Boolean","net.corda.core.crypto.Crypto.publicKeyOnCurve"]},{"name":"fun publishNodeInfo(input: InputStream): <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.publishNodeInfo","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/publish-node-info.html","searchKeys":["publishNodeInfo","fun publishNodeInfo(input: InputStream): <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.publishNodeInfo"]},{"name":"fun pumpReceive(block: Boolean = false): InMemoryMessagingNetwork.MessageTransfer?","description":"net.corda.testing.node.StartedMockNode.pumpReceive","location":"docs/net.corda.testing.node/-started-mock-node/pump-receive.html","searchKeys":["pumpReceive","fun pumpReceive(block: Boolean = false): InMemoryMessagingNetwork.MessageTransfer?","net.corda.testing.node.StartedMockNode.pumpReceive"]},{"name":"fun pumpReceive(block: Boolean): InMemoryMessagingNetwork.MessageTransfer?","description":"net.corda.testing.node.InMemoryMessagingNetwork.MockMessagingService.pumpReceive","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-mock-messaging-service/pump-receive.html","searchKeys":["pumpReceive","fun pumpReceive(block: Boolean): InMemoryMessagingNetwork.MessageTransfer?","net.corda.testing.node.InMemoryMessagingNetwork.MockMessagingService.pumpReceive"]},{"name":"fun pumpReceive(block: Boolean): InMemoryMessagingNetwork.MessageTransfer?","description":"net.corda.testing.node.internal.MockNodeMessagingService.pumpReceive","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/pump-receive.html","searchKeys":["pumpReceive","fun pumpReceive(block: Boolean): InMemoryMessagingNetwork.MessageTransfer?","net.corda.testing.node.internal.MockNodeMessagingService.pumpReceive"]},{"name":"fun pumpSend(block: Boolean): InMemoryMessagingNetwork.MessageTransfer?","description":"net.corda.testing.node.InMemoryMessagingNetwork.pumpSend","location":"docs/net.corda.testing.node/-in-memory-messaging-network/pump-send.html","searchKeys":["pumpSend","fun pumpSend(block: Boolean): InMemoryMessagingNetwork.MessageTransfer?","net.corda.testing.node.InMemoryMessagingNetwork.pumpSend"]},{"name":"fun putJson(path: String, data: Any = Unit)","description":"net.corda.testing.http.HttpApi.putJson","location":"docs/net.corda.testing.http/-http-api/put-json.html","searchKeys":["putJson","fun putJson(path: String, data: Any = Unit)","net.corda.testing.http.HttpApi.putJson"]},{"name":"fun putJson(url: URL, data: String)","description":"net.corda.testing.http.HttpUtils.putJson","location":"docs/net.corda.testing.http/-http-utils/put-json.html","searchKeys":["putJson","fun putJson(url: URL, data: String)","net.corda.testing.http.HttpUtils.putJson"]},{"name":"fun putTo(buffer: ByteBuffer): ByteBuffer","description":"net.corda.core.utilities.ByteSequence.putTo","location":"docs/net.corda.core.utilities/-byte-sequence/put-to.html","searchKeys":["putTo","fun putTo(buffer: ByteBuffer): ByteBuffer","net.corda.core.utilities.ByteSequence.putTo"]},{"name":"fun random(algorithm: String): SecureHash","description":"net.corda.core.crypto.SecureHash.Companion.random","location":"docs/net.corda.core.crypto/-secure-hash/-companion/random.html","searchKeys":["random","fun random(algorithm: String): SecureHash","net.corda.core.crypto.SecureHash.Companion.random"]},{"name":"fun random63BitValue(): Long","description":"net.corda.core.crypto.random63BitValue","location":"docs/net.corda.core.crypto/random63-bit-value.html","searchKeys":["random63BitValue","fun random63BitValue(): Long","net.corda.core.crypto.random63BitValue"]},{"name":"fun randomSHA256(): SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.randomSHA256","location":"docs/net.corda.core.crypto/-secure-hash/-companion/random-s-h-a256.html","searchKeys":["randomSHA256","fun randomSHA256(): SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.randomSHA256"]},{"name":"fun reHash(): SecureHash","description":"net.corda.core.crypto.SecureHash.reHash","location":"docs/net.corda.core.crypto/-secure-hash/re-hash.html","searchKeys":["reHash","fun reHash(): SecureHash","net.corda.core.crypto.SecureHash.reHash"]},{"name":"fun reconnectOnError(e: Throwable)","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.reconnectOnError","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/reconnect-on-error.html","searchKeys":["reconnectOnError","fun reconnectOnError(e: Throwable)","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.reconnectOnError"]},{"name":"fun recordAuditEvent(eventType: String, comment: String, extraAuditData: Map<String, String>)","description":"net.corda.core.flows.FlowLogic.recordAuditEvent","location":"docs/net.corda.core.flows/-flow-logic/record-audit-event.html","searchKeys":["recordAuditEvent","fun recordAuditEvent(eventType: String, comment: String, extraAuditData: Map<String, String>)","net.corda.core.flows.FlowLogic.recordAuditEvent"]},{"name":"fun recordException(telemetryId: TelemetryId, throwable: Throwable)","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.recordException","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/record-exception.html","searchKeys":["recordException","fun recordException(telemetryId: TelemetryId, throwable: Throwable)","net.corda.core.internal.telemetry.TelemetryServiceImpl.recordException"]},{"name":"fun recordException(throwable: Throwable)","description":"net.corda.core.internal.telemetry.TelemetryId.recordException","location":"docs/net.corda.core.internal.telemetry/-telemetry-id/record-exception.html","searchKeys":["recordException","fun recordException(throwable: Throwable)","net.corda.core.internal.telemetry.TelemetryId.recordException"]},{"name":"fun recordTransactions(txn: SignedTransaction, disableSignatureVerification: Boolean): <Error class: unknown class>","description":"net.corda.testing.node.MockServices.recordTransactions","location":"docs/net.corda.testing.node/-mock-services/record-transactions.html","searchKeys":["recordTransactions","fun recordTransactions(txn: SignedTransaction, disableSignatureVerification: Boolean): <Error class: unknown class>","net.corda.testing.node.MockServices.recordTransactions"]},{"name":"fun recordTransactions(txs: Iterable<SignedTransaction>, disableSignatureVerification: Boolean)","description":"net.corda.testing.node.MockServices.recordTransactions","location":"docs/net.corda.testing.node/-mock-services/record-transactions.html","searchKeys":["recordTransactions","fun recordTransactions(txs: Iterable<SignedTransaction>, disableSignatureVerification: Boolean)","net.corda.testing.node.MockServices.recordTransactions"]},{"name":"fun ref(vararg bytes: Byte): PartyAndReference","description":"net.corda.core.identity.AbstractParty.ref","location":"docs/net.corda.core.identity/-abstract-party/ref.html","searchKeys":["ref","fun ref(vararg bytes: Byte): PartyAndReference","net.corda.core.identity.AbstractParty.ref"]},{"name":"fun reference(contractClassName: ContractClassName, state: ContractState)","description":"net.corda.testing.dsl.TransactionDSL.reference","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/reference.html","searchKeys":["reference","fun reference(contractClassName: ContractClassName, state: ContractState)","net.corda.testing.dsl.TransactionDSL.reference"]},{"name":"fun reference(stateLabel: String): <Error class: unknown class>","description":"net.corda.testing.dsl.TransactionDSL.reference","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/reference.html","searchKeys":["reference","fun reference(stateLabel: String): <Error class: unknown class>","net.corda.testing.dsl.TransactionDSL.reference"]},{"name":"fun referenceStates(): List<StateRef>","description":"net.corda.core.transactions.TransactionBuilder.referenceStates","location":"docs/net.corda.core.transactions/-transaction-builder/reference-states.html","searchKeys":["referenceStates","fun referenceStates(): List<StateRef>","net.corda.core.transactions.TransactionBuilder.referenceStates"]},{"name":"fun referenced(): ReferencedStateAndRef<T>","description":"net.corda.core.contracts.StateAndRef.referenced","location":"docs/net.corda.core.contracts/-state-and-ref/referenced.html","searchKeys":["referenced","fun referenced(): ReferencedStateAndRef<T>","net.corda.core.contracts.StateAndRef.referenced"]},{"name":"fun registerClass(className: String): String","description":"net.corda.core.crypto.internal.DigestAlgorithmFactory.Companion.registerClass","location":"docs/net.corda.core.crypto.internal/-digest-algorithm-factory/-companion/register-class.html","searchKeys":["registerClass","fun registerClass(className: String): String","net.corda.core.crypto.internal.DigestAlgorithmFactory.Companion.registerClass"]},{"name":"fun registerProcessShutdown(process: Process)","description":"net.corda.testing.node.internal.ShutdownManager.registerProcessShutdown","location":"docs/net.corda.testing.node.internal/-shutdown-manager/register-process-shutdown.html","searchKeys":["registerProcessShutdown","fun registerProcessShutdown(process: Process)","net.corda.testing.node.internal.ShutdownManager.registerProcessShutdown"]},{"name":"fun registerProviders()","description":"net.corda.core.crypto.Crypto.registerProviders","location":"docs/net.corda.core.crypto/-crypto/register-providers.html","searchKeys":["registerProviders","fun registerProviders()","net.corda.core.crypto.Crypto.registerProviders"]},{"name":"fun registerShutdown(shutdown: () -> Unit)","description":"net.corda.testing.node.internal.ShutdownManager.registerShutdown","location":"docs/net.corda.testing.node.internal/-shutdown-manager/register-shutdown.html","searchKeys":["registerShutdown","fun registerShutdown(shutdown: () -> Unit)","net.corda.testing.node.internal.ShutdownManager.registerShutdown"]},{"name":"fun registerShutdown(shutdown: CordaFuture<() -> Unit>)","description":"net.corda.testing.node.internal.ShutdownManager.registerShutdown","location":"docs/net.corda.testing.node.internal/-shutdown-manager/register-shutdown.html","searchKeys":["registerShutdown","fun registerShutdown(shutdown: CordaFuture<() -> Unit>)","net.corda.testing.node.internal.ShutdownManager.registerShutdown"]},{"name":"fun registerTestingFactory(initiator: Class<out FlowLogic<*>>, factory: <Error class: unknown class><out <Error class: unknown class>>)","description":"net.corda.testing.node.internal.MockNodeFlowManager.registerTestingFactory","location":"docs/net.corda.testing.node.internal/-mock-node-flow-manager/register-testing-factory.html","searchKeys":["registerTestingFactory","fun registerTestingFactory(initiator: Class<out FlowLogic<*>>, factory: <Error class: unknown class><out <Error class: unknown class>>)","net.corda.testing.node.internal.MockNodeFlowManager.registerTestingFactory"]},{"name":"fun registerWithContext(context: SerializeAsTokenContext, toBeTokenized: SerializeAsToken): <Error class: unknown class>","description":"net.corda.core.serialization.SingletonSerializationToken.registerWithContext","location":"docs/net.corda.core.serialization/-singleton-serialization-token/register-with-context.html","searchKeys":["registerWithContext","fun registerWithContext(context: SerializeAsTokenContext, toBeTokenized: SerializeAsToken): <Error class: unknown class>","net.corda.core.serialization.SingletonSerializationToken.registerWithContext"]},{"name":"fun release(instance: A)","description":"net.corda.core.internal.LazyPool.release","location":"docs/net.corda.core.internal/-lazy-pool/release.html","searchKeys":["release","fun release(instance: A)","net.corda.core.internal.LazyPool.release"]},{"name":"fun release(stickTo: Any, instance: A)","description":"net.corda.core.internal.LazyStickyPool.release","location":"docs/net.corda.core.internal/-lazy-sticky-pool/release.html","searchKeys":["release","fun release(stickTo: Any, instance: A)","net.corda.core.internal.LazyStickyPool.release"]},{"name":"fun releaseSignatureInstance(sig: Signature)","description":"net.corda.core.crypto.internal.Instances.releaseSignatureInstance","location":"docs/net.corda.core.crypto.internal/-instances/release-signature-instance.html","searchKeys":["releaseSignatureInstance","fun releaseSignatureInstance(sig: Signature)","net.corda.core.crypto.internal.Instances.releaseSignatureInstance"]},{"name":"fun removeConnectionListener(listener: RPCConnectionListener<I>): Boolean","description":"net.corda.client.rpc.ext.MultiRPCClient.removeConnectionListener","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/remove-connection-listener.html","searchKeys":["removeConnectionListener","fun removeConnectionListener(listener: RPCConnectionListener<I>): Boolean","net.corda.client.rpc.ext.MultiRPCClient.removeConnectionListener"]},{"name":"fun removeConnectionListener(listener: RPCConnectionListener<I>): Boolean","description":"net.corda.client.rpc.internal.RPCClient.removeConnectionListener","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/remove-connection-listener.html","searchKeys":["removeConnectionListener","fun removeConnectionListener(listener: RPCConnectionListener<I>): Boolean","net.corda.client.rpc.internal.RPCClient.removeConnectionListener"]},{"name":"fun removeNodeInfo(nodeInfo: NodeInfo)","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.removeNodeInfo","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/remove-node-info.html","searchKeys":["removeNodeInfo","fun removeNodeInfo(nodeInfo: NodeInfo)","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.removeNodeInfo"]},{"name":"fun removeNodeInfo(nodeInfo: NodeInfo)","description":"net.corda.testing.node.internal.network.NetworkMapServer.removeNodeInfo","location":"docs/net.corda.testing.node.internal.network/-network-map-server/remove-node-info.html","searchKeys":["removeNodeInfo","fun removeNodeInfo(nodeInfo: NodeInfo)","net.corda.testing.node.internal.network.NetworkMapServer.removeNodeInfo"]},{"name":"fun renderIfSupported(obj: Any): String","description":"net.corda.core.internal.Emoji.renderIfSupported","location":"docs/net.corda.core.internal/-emoji/render-if-supported.html","searchKeys":["renderIfSupported","fun renderIfSupported(obj: Any): String","net.corda.core.internal.Emoji.renderIfSupported"]},{"name":"fun replaceNodeCertDistPoint(nodeCaCert: X509Certificate, nodeCaCrlDistPoint: String? = \"http://\", crlIssuer: X500Principal? = null): X509Certificate","description":"net.corda.testing.node.internal.network.CrlServer.replaceNodeCertDistPoint","location":"docs/net.corda.testing.node.internal.network/-crl-server/replace-node-cert-dist-point.html","searchKeys":["replaceNodeCertDistPoint","fun replaceNodeCertDistPoint(nodeCaCert: X509Certificate, nodeCaCrlDistPoint: String? = \"http://\", crlIssuer: X500Principal? = null): X509Certificate","net.corda.testing.node.internal.network.CrlServer.replaceNodeCertDistPoint"]},{"name":"fun requirePackageValid(name: String)","description":"net.corda.core.internal.requirePackageValid","location":"docs/net.corda.core.internal/require-package-valid.html","searchKeys":["requirePackageValid","fun requirePackageValid(name: String)","net.corda.core.internal.requirePackageValid"]},{"name":"fun requireState(errorMessage: (S) -> String = { \"Predicate failed on state $it\" }, predicate: (S) -> Boolean)","description":"net.corda.core.internal.LifeCycle.requireState","location":"docs/net.corda.core.internal/-life-cycle/require-state.html","searchKeys":["requireState","fun requireState(errorMessage: (S) -> String = { \"Predicate failed on state $it\" }, predicate: (S) -> Boolean)","net.corda.core.internal.LifeCycle.requireState"]},{"name":"fun requireState(requiredState: S)","description":"net.corda.core.internal.LifeCycle.requireState","location":"docs/net.corda.core.internal/-life-cycle/require-state.html","searchKeys":["requireState","fun requireState(requiredState: S)","net.corda.core.internal.LifeCycle.requireState"]},{"name":"fun reset(vararg classes: KClass<*>): <Error class: unknown class>","description":"net.corda.testing.internal.LogHelper.reset","location":"docs/net.corda.testing.internal/-log-helper/reset.html","searchKeys":["reset","fun reset(vararg classes: KClass<*>): <Error class: unknown class>","net.corda.testing.internal.LogHelper.reset"]},{"name":"fun reset(vararg names: String)","description":"net.corda.testing.internal.LogHelper.reset","location":"docs/net.corda.testing.internal/-log-helper/reset.html","searchKeys":["reset","fun reset(vararg names: String)","net.corda.testing.internal.LogHelper.reset"]},{"name":"fun resolve(services: ServiceHub, sigs: List<TransactionSignature>): NotaryChangeLedgerTransaction","description":"net.corda.core.transactions.NotaryChangeWireTransaction.resolve","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/resolve.html","searchKeys":["resolve","fun resolve(services: ServiceHub, sigs: List<TransactionSignature>): NotaryChangeLedgerTransaction","net.corda.core.transactions.NotaryChangeWireTransaction.resolve"]},{"name":"fun resolve(services: ServicesForResolution, sigs: List<TransactionSignature>): ContractUpgradeLedgerTransaction","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.resolve","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/resolve.html","searchKeys":["resolve","fun resolve(services: ServicesForResolution, sigs: List<TransactionSignature>): ContractUpgradeLedgerTransaction","net.corda.core.transactions.ContractUpgradeWireTransaction.resolve"]},{"name":"fun resolve(services: ServicesForResolution, sigs: List<TransactionSignature>): NotaryChangeLedgerTransaction","description":"net.corda.core.transactions.NotaryChangeWireTransaction.resolve","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/resolve.html","searchKeys":["resolve","fun resolve(services: ServicesForResolution, sigs: List<TransactionSignature>): NotaryChangeLedgerTransaction","net.corda.core.transactions.NotaryChangeWireTransaction.resolve"]},{"name":"fun resolve(verificationSupport: VerificationSupport, wireTx: NotaryChangeWireTransaction, sigs: List<TransactionSignature>): NotaryChangeLedgerTransaction","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.Companion.resolve","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/-companion/resolve.html","searchKeys":["resolve","fun resolve(verificationSupport: VerificationSupport, wireTx: NotaryChangeWireTransaction, sigs: List<TransactionSignature>): NotaryChangeLedgerTransaction","net.corda.core.transactions.NotaryChangeLedgerTransaction.Companion.resolve"]},{"name":"fun resolve(verificationSupport: VerificationSupport, wtx: ContractUpgradeWireTransaction, sigs: List<TransactionSignature>): ContractUpgradeLedgerTransaction","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.Companion.resolve","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/-companion/resolve.html","searchKeys":["resolve","fun resolve(verificationSupport: VerificationSupport, wtx: ContractUpgradeWireTransaction, sigs: List<TransactionSignature>): ContractUpgradeLedgerTransaction","net.corda.core.transactions.ContractUpgradeLedgerTransaction.Companion.resolve"]},{"name":"fun resolveBaseTransaction(servicesForResolution: ServicesForResolution): BaseTransaction","description":"net.corda.core.transactions.SignedTransaction.resolveBaseTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/resolve-base-transaction.html","searchKeys":["resolveBaseTransaction","fun resolveBaseTransaction(servicesForResolution: ServicesForResolution): BaseTransaction","net.corda.core.transactions.SignedTransaction.resolveBaseTransaction"]},{"name":"fun resolveContractUpgradeTransaction(services: ServicesForResolution): ContractUpgradeLedgerTransaction","description":"net.corda.core.transactions.SignedTransaction.resolveContractUpgradeTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/resolve-contract-upgrade-transaction.html","searchKeys":["resolveContractUpgradeTransaction","fun resolveContractUpgradeTransaction(services: ServicesForResolution): ContractUpgradeLedgerTransaction","net.corda.core.transactions.SignedTransaction.resolveContractUpgradeTransaction"]},{"name":"fun resolveNotaryChangeTransaction(services: ServiceHub): NotaryChangeLedgerTransaction","description":"net.corda.core.transactions.SignedTransaction.resolveNotaryChangeTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/resolve-notary-change-transaction.html","searchKeys":["resolveNotaryChangeTransaction","fun resolveNotaryChangeTransaction(services: ServiceHub): NotaryChangeLedgerTransaction","net.corda.core.transactions.SignedTransaction.resolveNotaryChangeTransaction"]},{"name":"fun resolveNotaryChangeTransaction(services: ServicesForResolution): NotaryChangeLedgerTransaction","description":"net.corda.core.transactions.SignedTransaction.resolveNotaryChangeTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/resolve-notary-change-transaction.html","searchKeys":["resolveNotaryChangeTransaction","fun resolveNotaryChangeTransaction(services: ServicesForResolution): NotaryChangeLedgerTransaction","net.corda.core.transactions.SignedTransaction.resolveNotaryChangeTransaction"]},{"name":"fun resolveTransactionWithSignatures(services: ServicesForResolution): TransactionWithSignatures","description":"net.corda.core.transactions.SignedTransaction.resolveTransactionWithSignatures","location":"docs/net.corda.core.transactions/-signed-transaction/resolve-transaction-with-signatures.html","searchKeys":["resolveTransactionWithSignatures","fun resolveTransactionWithSignatures(services: ServicesForResolution): TransactionWithSignatures","net.corda.core.transactions.SignedTransaction.resolveTransactionWithSignatures"]},{"name":"fun restartNode(node: TestStartedNode, parameters: InternalMockNodeParameters = InternalMockNodeParameters(), nodeFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = defaultFactory): TestStartedNode","description":"net.corda.testing.node.internal.InternalMockNetwork.restartNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/restart-node.html","searchKeys":["restartNode","fun restartNode(node: TestStartedNode, parameters: InternalMockNodeParameters = InternalMockNodeParameters(), nodeFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = defaultFactory): TestStartedNode","net.corda.testing.node.internal.InternalMockNetwork.restartNode"]},{"name":"fun rootAndUsedHashes(node: PartialMerkleTree.PartialTree, usedHashes: MutableList<SecureHash>): SecureHash","description":"net.corda.core.crypto.PartialMerkleTree.Companion.rootAndUsedHashes","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-companion/root-and-used-hashes.html","searchKeys":["rootAndUsedHashes","fun rootAndUsedHashes(node: PartialMerkleTree.PartialTree, usedHashes: MutableList<SecureHash>): SecureHash","net.corda.core.crypto.PartialMerkleTree.Companion.rootAndUsedHashes"]},{"name":"fun rpc(actor: Actor, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?> = emptyList(), serializedTelemetry: SerializedTelemetry? = null): InvocationContext","description":"net.corda.core.context.InvocationContext.Companion.rpc","location":"docs/net.corda.core.context/-invocation-context/-companion/rpc.html","searchKeys":["rpc","fun rpc(actor: Actor, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null, impersonatedActor: Actor? = null, arguments: List<Any?> = emptyList(), serializedTelemetry: SerializedTelemetry? = null): InvocationContext","net.corda.core.context.InvocationContext.Companion.rpc"]},{"name":"fun runFlowWithLogicalRetry(runFlow: (CordaRPCOps) -> StateMachineRunId, hasFlowStarted: (CordaRPCOps) -> Boolean, onFlowConfirmed: () -> Unit = {}, timeout: Duration = 4.seconds)","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.runFlowWithLogicalRetry","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/run-flow-with-logical-retry.html","searchKeys":["runFlowWithLogicalRetry","fun runFlowWithLogicalRetry(runFlow: (CordaRPCOps) -> StateMachineRunId, hasFlowStarted: (CordaRPCOps) -> Boolean, onFlowConfirmed: () -> Unit = {}, timeout: Duration = 4.seconds)","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.runFlowWithLogicalRetry"]},{"name":"fun runNetwork(rounds: Int = -1)","description":"net.corda.testing.node.MockNetwork.runNetwork","location":"docs/net.corda.testing.node/-mock-network/run-network.html","searchKeys":["runNetwork","fun runNetwork(rounds: Int = -1)","net.corda.testing.node.MockNetwork.runNetwork"]},{"name":"fun runNetwork(rounds: Int = -1)","description":"net.corda.testing.node.internal.InternalMockNetwork.runNetwork","location":"docs/net.corda.testing.node.internal/-internal-mock-network/run-network.html","searchKeys":["runNetwork","fun runNetwork(rounds: Int = -1)","net.corda.testing.node.internal.InternalMockNetwork.runNetwork"]},{"name":"fun scanZip(source: InputStream, maxUncompressedSize: Long, maxCompressionRatio: Float = 10.0f): Boolean","description":"net.corda.core.internal.utilities.ZipBombDetector.scanZip","location":"docs/net.corda.core.internal.utilities/-zip-bomb-detector/scan-zip.html","searchKeys":["scanZip","fun scanZip(source: InputStream, maxUncompressedSize: Long, maxCompressionRatio: Float = 10.0f): Boolean","net.corda.core.internal.utilities.ZipBombDetector.scanZip"]},{"name":"fun scheduleParametersUpdate(nextParameters: NetworkParameters, description: String, updateDeadline: Instant)","description":"net.corda.testing.node.internal.network.NetworkMapServer.scheduleParametersUpdate","location":"docs/net.corda.testing.node.internal.network/-network-map-server/schedule-parameters-update.html","searchKeys":["scheduleParametersUpdate","fun scheduleParametersUpdate(nextParameters: NetworkParameters, description: String, updateDeadline: Instant)","net.corda.testing.node.internal.network.NetworkMapServer.scheduleParametersUpdate"]},{"name":"fun scheduled(scheduledState: ScheduledStateRef, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null): InvocationContext","description":"net.corda.core.context.InvocationContext.Companion.scheduled","location":"docs/net.corda.core.context/-invocation-context/-companion/scheduled.html","searchKeys":["scheduled","fun scheduled(scheduledState: ScheduledStateRef, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null): InvocationContext","net.corda.core.context.InvocationContext.Companion.scheduled"]},{"name":"fun search(): Set<StatePointer<*>>","description":"net.corda.core.internal.StatePointerSearch.search","location":"docs/net.corda.core.internal/-state-pointer-search/search.html","searchKeys":["search","fun search(): Set<StatePointer<*>>","net.corda.core.internal.StatePointerSearch.search"]},{"name":"fun secureRandomBytes(numOfBytes: Int): ByteArray","description":"net.corda.core.crypto.secureRandomBytes","location":"docs/net.corda.core.crypto/secure-random-bytes.html","searchKeys":["secureRandomBytes","fun secureRandomBytes(numOfBytes: Int): ByteArray","net.corda.core.crypto.secureRandomBytes"]},{"name":"fun sendAll(payload: Any, sessions: Set<FlowSession>, maySkipCheckpoint: Boolean = false)","description":"net.corda.core.flows.FlowLogic.sendAll","location":"docs/net.corda.core.flows/-flow-logic/send-all.html","searchKeys":["sendAll","fun sendAll(payload: Any, sessions: Set<FlowSession>, maySkipCheckpoint: Boolean = false)","net.corda.core.flows.FlowLogic.sendAll"]},{"name":"fun sendAllMap(payloadsPerSession: Map<FlowSession, Any>, maySkipCheckpoint: Boolean = false)","description":"net.corda.core.flows.FlowLogic.sendAllMap","location":"docs/net.corda.core.flows/-flow-logic/send-all-map.html","searchKeys":["sendAllMap","fun sendAllMap(payloadsPerSession: Map<FlowSession, Any>, maySkipCheckpoint: Boolean = false)","net.corda.core.flows.FlowLogic.sendAllMap"]},{"name":"fun serializedByteCount(): Int","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.serializedByteCount","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/serialized-byte-count.html","searchKeys":["serializedByteCount","fun serializedByteCount(): Int","net.corda.core.flows.MaybeSerializedSignedTransaction.serializedByteCount"]},{"name":"fun service(serviceClassName: String, owningLegalIdentity: CordaX500Name): Actor","description":"net.corda.core.context.Actor.Companion.service","location":"docs/net.corda.core.context/-actor/-companion/service.html","searchKeys":["service","fun service(serviceClassName: String, owningLegalIdentity: CordaX500Name): Actor","net.corda.core.context.Actor.Companion.service"]},{"name":"fun service(serviceClassName: String, owningLegalIdentity: CordaX500Name, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null): InvocationContext","description":"net.corda.core.context.InvocationContext.Companion.service","location":"docs/net.corda.core.context/-invocation-context/-companion/service.html","searchKeys":["service","fun service(serviceClassName: String, owningLegalIdentity: CordaX500Name, trace: Trace = Trace.newInstance(), externalTrace: Trace? = null): InvocationContext","net.corda.core.context.InvocationContext.Companion.service"]},{"name":"fun set(value: T?): <Error class: unknown class>","description":"net.corda.core.internal.ToggleField.set","location":"docs/net.corda.core.internal/-toggle-field/set.html","searchKeys":["set","fun set(value: T?): <Error class: unknown class>","net.corda.core.internal.ToggleField.set"]},{"name":"fun setChildProgressTracker(step: ProgressTracker.Step, childProgressTracker: ProgressTracker)","description":"net.corda.core.utilities.ProgressTracker.setChildProgressTracker","location":"docs/net.corda.core.utilities/-progress-tracker/set-child-progress-tracker.html","searchKeys":["setChildProgressTracker","fun setChildProgressTracker(step: ProgressTracker.Step, childProgressTracker: ProgressTracker)","net.corda.core.utilities.ProgressTracker.setChildProgressTracker"]},{"name":"fun setCurrentParametersUnverified(networkParameters: NetworkParameters)","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.setCurrentParametersUnverified","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/set-current-parameters-unverified.html","searchKeys":["setCurrentParametersUnverified","fun setCurrentParametersUnverified(networkParameters: NetworkParameters)","net.corda.testing.node.internal.MockNetworkParametersStorage.setCurrentParametersUnverified"]},{"name":"fun setCurrentTelemetryId(telemetryIds: ComponentTelemetryIds)","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.setCurrentTelemetryId","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/set-current-telemetry-id.html","searchKeys":["setCurrentTelemetryId","fun setCurrentTelemetryId(telemetryIds: ComponentTelemetryIds)","net.corda.core.internal.telemetry.TelemetryServiceImpl.setCurrentTelemetryId"]},{"name":"fun setDriverSerialization(): AutoCloseable?","description":"net.corda.testing.node.internal.setDriverSerialization","location":"docs/net.corda.testing.node.internal/set-driver-serialization.html","searchKeys":["setDriverSerialization","fun setDriverSerialization(): AutoCloseable?","net.corda.testing.node.internal.setDriverSerialization"]},{"name":"fun setDriverSerialization(classLoader: ClassLoader?): AutoCloseable?","description":"net.corda.testing.node.internal.setDriverSerialization","location":"docs/net.corda.testing.node.internal/set-driver-serialization.html","searchKeys":["setDriverSerialization","fun setDriverSerialization(classLoader: ClassLoader?): AutoCloseable?","net.corda.testing.node.internal.setDriverSerialization"]},{"name":"fun setLevel(vararg classes: KClass<*>): <Error class: unknown class>","description":"net.corda.testing.internal.LogHelper.setLevel","location":"docs/net.corda.testing.internal/-log-helper/set-level.html","searchKeys":["setLevel","fun setLevel(vararg classes: KClass<*>): <Error class: unknown class>","net.corda.testing.internal.LogHelper.setLevel"]},{"name":"fun setLevel(vararg loggerNames: String)","description":"net.corda.testing.internal.LogHelper.setLevel","location":"docs/net.corda.testing.internal/-log-helper/set-level.html","searchKeys":["setLevel","fun setLevel(vararg loggerNames: String)","net.corda.testing.internal.LogHelper.setLevel"]},{"name":"fun setMessagingServiceSpy(spy: MessagingServiceSpy)","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.setMessagingServiceSpy","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/set-messaging-service-spy.html","searchKeys":["setMessagingServiceSpy","fun setMessagingServiceSpy(spy: MessagingServiceSpy)","net.corda.testing.node.internal.InternalMockNetwork.MockNode.setMessagingServiceSpy"]},{"name":"fun setPrivacySalt(privacySalt: PrivacySalt): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.setPrivacySalt","location":"docs/net.corda.core.transactions/-transaction-builder/set-privacy-salt.html","searchKeys":["setPrivacySalt","fun setPrivacySalt(privacySalt: PrivacySalt): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.setPrivacySalt"]},{"name":"fun setStatus(telemetryId: TelemetryId, telemetryStatusCode: TelemetryStatusCode, message: String)","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.setStatus","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/set-status.html","searchKeys":["setStatus","fun setStatus(telemetryId: TelemetryId, telemetryStatusCode: TelemetryStatusCode, message: String)","net.corda.core.internal.telemetry.TelemetryServiceImpl.setStatus"]},{"name":"fun setStatus(telemetryStatusCode: TelemetryStatusCode, message: String)","description":"net.corda.core.internal.telemetry.TelemetryId.setStatus","location":"docs/net.corda.core.internal.telemetry/-telemetry-id/set-status.html","searchKeys":["setStatus","fun setStatus(telemetryStatusCode: TelemetryStatusCode, message: String)","net.corda.core.internal.telemetry.TelemetryId.setStatus"]},{"name":"fun setTimeWindow(time: Instant, timeTolerance: Duration): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.setTimeWindow","location":"docs/net.corda.core.transactions/-transaction-builder/set-time-window.html","searchKeys":["setTimeWindow","fun setTimeWindow(time: Instant, timeTolerance: Duration): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.setTimeWindow"]},{"name":"fun setTimeWindow(timeWindow: TimeWindow): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.setTimeWindow","location":"docs/net.corda.core.transactions/-transaction-builder/set-time-window.html","searchKeys":["setTimeWindow","fun setTimeWindow(timeWindow: TimeWindow): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.setTimeWindow"]},{"name":"fun setTo(newInstant: Instant)","description":"net.corda.testing.node.TestClock.setTo","location":"docs/net.corda.testing.node/-test-clock/set-to.html","searchKeys":["setTo","fun setTo(newInstant: Instant)","net.corda.testing.node.TestClock.setTo"]},{"name":"fun sha256(bytes: ByteArray): SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.sha256","location":"docs/net.corda.core.crypto/-secure-hash/-companion/sha256.html","searchKeys":["sha256","fun sha256(bytes: ByteArray): SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.sha256"]},{"name":"fun sha256(str: String): <Error class: unknown class>","description":"net.corda.core.crypto.SecureHash.Companion.sha256","location":"docs/net.corda.core.crypto/-secure-hash/-companion/sha256.html","searchKeys":["sha256","fun sha256(str: String): <Error class: unknown class>","net.corda.core.crypto.SecureHash.Companion.sha256"]},{"name":"fun sha256Twice(bytes: ByteArray): SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.sha256Twice","location":"docs/net.corda.core.crypto/-secure-hash/-companion/sha256-twice.html","searchKeys":["sha256Twice","fun sha256Twice(bytes: ByteArray): SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.sha256Twice"]},{"name":"fun shell(trace: Trace = Trace.newInstance(), externalTrace: Trace? = null): InvocationContext","description":"net.corda.core.context.InvocationContext.Companion.shell","location":"docs/net.corda.core.context/-invocation-context/-companion/shell.html","searchKeys":["shell","fun shell(trace: Trace = Trace.newInstance(), externalTrace: Trace? = null): InvocationContext","net.corda.core.context.InvocationContext.Companion.shell"]},{"name":"fun shouldEnforce(state: ContractState): Boolean","description":"net.corda.core.internal.rules.StateContractValidationEnforcementRule.shouldEnforce","location":"docs/net.corda.core.internal.rules/-state-contract-validation-enforcement-rule/should-enforce.html","searchKeys":["shouldEnforce","fun shouldEnforce(state: ContractState): Boolean","net.corda.core.internal.rules.StateContractValidationEnforcementRule.shouldEnforce"]},{"name":"fun shutdown()","description":"net.corda.testing.node.internal.RpcServerHandle.shutdown","location":"docs/net.corda.testing.node.internal/-rpc-server-handle/shutdown.html","searchKeys":["shutdown","fun shutdown()","net.corda.testing.node.internal.RpcServerHandle.shutdown"]},{"name":"fun shutdown()","description":"net.corda.testing.node.internal.ShutdownManager.shutdown","location":"docs/net.corda.testing.node.internal/-shutdown-manager/shutdown.html","searchKeys":["shutdown","fun shutdown()","net.corda.testing.node.internal.ShutdownManager.shutdown"]},{"name":"fun shutdownTelemetry()","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.shutdownTelemetry","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/shutdown-telemetry.html","searchKeys":["shutdownTelemetry","fun shutdownTelemetry()","net.corda.core.internal.telemetry.TelemetryServiceImpl.shutdownTelemetry"]},{"name":"fun signJar(jar: Path, signerDir: Path? = null, signatureCount: Int = 1, algorithm: String = \"RSA\")","description":"net.corda.testing.node.internal.TestCordappSigner.signJar","location":"docs/net.corda.testing.node.internal/-test-cordapp-signer/sign-jar.html","searchKeys":["signJar","fun signJar(jar: Path, signerDir: Path? = null, signatureCount: Int = 1, algorithm: String = \"RSA\")","net.corda.testing.node.internal.TestCordappSigner.signJar"]},{"name":"fun signJarCopy(jar: Path, signerDir: Path? = null, signatureCount: Int = 1, algorithm: String = \"RSA\"): Path","description":"net.corda.testing.node.internal.TestCordappSigner.signJarCopy","location":"docs/net.corda.testing.node.internal/-test-cordapp-signer/sign-jar-copy.html","searchKeys":["signJarCopy","fun signJarCopy(jar: Path, signerDir: Path? = null, signatureCount: Int = 1, algorithm: String = \"RSA\"): Path","net.corda.testing.node.internal.TestCordappSigner.signJarCopy"]},{"name":"fun signTransaction(txId: SecureHash): TransactionSignature","description":"net.corda.core.internal.notary.SinglePartyNotaryService.signTransaction","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/sign-transaction.html","searchKeys":["signTransaction","fun signTransaction(txId: SecureHash): TransactionSignature","net.corda.core.internal.notary.SinglePartyNotaryService.signTransaction"]},{"name":"fun signed(keyStorePath: Path? = null, numberOfSignatures: Int = 1, keyAlgorithm: String = \"RSA\"): CustomCordapp","description":"net.corda.testing.node.internal.CustomCordapp.signed","location":"docs/net.corda.testing.node.internal/-custom-cordapp/signed.html","searchKeys":["signed","fun signed(keyStorePath: Path? = null, numberOfSignatures: Int = 1, keyAlgorithm: String = \"RSA\"): CustomCordapp","net.corda.testing.node.internal.CustomCordapp.signed"]},{"name":"fun sleep(duration: Duration, maySkipCheckpoint: Boolean = false)","description":"net.corda.core.flows.FlowLogic.Companion.sleep","location":"docs/net.corda.core.flows/-flow-logic/-companion/sleep.html","searchKeys":["sleep","fun sleep(duration: Duration, maySkipCheckpoint: Boolean = false)","net.corda.core.flows.FlowLogic.Companion.sleep"]},{"name":"fun slice(start: Int = 0, end: Int = size): ByteBuffer","description":"net.corda.core.utilities.ByteSequence.slice","location":"docs/net.corda.core.utilities/-byte-sequence/slice.html","searchKeys":["slice","fun slice(start: Int = 0, end: Int = size): ByteBuffer","net.corda.core.utilities.ByteSequence.slice"]},{"name":"fun specialise(alternateVerifier: (LedgerTransaction, SerializationContext) -> Verifier): LedgerTransaction","description":"net.corda.core.transactions.LedgerTransaction.specialise","location":"docs/net.corda.core.transactions/-ledger-transaction/specialise.html","searchKeys":["specialise","fun specialise(alternateVerifier: (LedgerTransaction, SerializationContext) -> Verifier): LedgerTransaction","net.corda.core.transactions.LedgerTransaction.specialise"]},{"name":"fun splitEvenly(partitions: Int): List<Amount<T>>","description":"net.corda.core.contracts.Amount.splitEvenly","location":"docs/net.corda.core.contracts/-amount/split-evenly.html","searchKeys":["splitEvenly","fun splitEvenly(partitions: Int): List<Amount<T>>","net.corda.core.contracts.Amount.splitEvenly"]},{"name":"fun start()","description":"net.corda.testing.node.internal.network.CrlServer.start","location":"docs/net.corda.testing.node.internal.network/-crl-server/start.html","searchKeys":["start","fun start()","net.corda.testing.node.internal.network.CrlServer.start"]},{"name":"fun start(): CompletableFuture<RPCConnection<I>>","description":"net.corda.client.rpc.ext.MultiRPCClient.start","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/start.html","searchKeys":["start","fun start(): CompletableFuture<RPCConnection<I>>","net.corda.client.rpc.ext.MultiRPCClient.start"]},{"name":"fun start(): NetworkHostAndPort","description":"net.corda.testing.node.internal.network.NetworkMapServer.start","location":"docs/net.corda.testing.node.internal.network/-network-map-server/start.html","searchKeys":["start","fun start(): NetworkHostAndPort","net.corda.testing.node.internal.network.NetworkMapServer.start"]},{"name":"fun start(): StartedMockNode","description":"net.corda.testing.node.UnstartedMockNode.start","location":"docs/net.corda.testing.node/-unstarted-mock-node/start.html","searchKeys":["start","fun start(): StartedMockNode","net.corda.testing.node.UnstartedMockNode.start"]},{"name":"fun start(network: InMemoryMessagingNetwork, manuallyPumped: Boolean, id: Int, notaryService: PartyAndCertificate?)","description":"net.corda.testing.node.internal.MockNodeMessagingService.start","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/start.html","searchKeys":["start","fun start(network: InMemoryMessagingNetwork, manuallyPumped: Boolean, id: Int, notaryService: PartyAndCertificate?)","net.corda.testing.node.internal.MockNodeMessagingService.start"]},{"name":"fun start(rpcOpsClass: Class<I>, username: String, password: String, externalTrace: Trace? = null, impersonatedActor: Actor? = null, targetLegalIdentity: CordaX500Name? = null): RPCConnection<I>","description":"net.corda.client.rpc.internal.RPCClient.start","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/start.html","searchKeys":["start","fun start(rpcOpsClass: Class<I>, username: String, password: String, externalTrace: Trace? = null, impersonatedActor: Actor? = null, targetLegalIdentity: CordaX500Name? = null): RPCConnection<I>","net.corda.client.rpc.internal.RPCClient.start"]},{"name":"fun start(username: String, password: String, externalTrace: Trace?, impersonatedActor: Actor?, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","description":"net.corda.client.rpc.CordaRPCClient.start","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/start.html","searchKeys":["start","fun start(username: String, password: String, externalTrace: Trace?, impersonatedActor: Actor?, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","net.corda.client.rpc.CordaRPCClient.start"]},{"name":"fun start(username: String, password: String, externalTrace: Trace?, impersonatedActor: Actor?, targetLegalIdentity: CordaX500Name?, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","description":"net.corda.client.rpc.CordaRPCClient.start","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/start.html","searchKeys":["start","fun start(username: String, password: String, externalTrace: Trace?, impersonatedActor: Actor?, targetLegalIdentity: CordaX500Name?, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","net.corda.client.rpc.CordaRPCClient.start"]},{"name":"fun start(username: String, password: String, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","description":"net.corda.client.rpc.CordaRPCClient.start","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/start.html","searchKeys":["start","fun start(username: String, password: String, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","net.corda.client.rpc.CordaRPCClient.start"]},{"name":"fun start(username: String, password: String, targetLegalIdentity: CordaX500Name, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","description":"net.corda.client.rpc.CordaRPCClient.start","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/start.html","searchKeys":["start","fun start(username: String, password: String, targetLegalIdentity: CordaX500Name, gracefulReconnect: GracefulReconnect? = null): CordaRPCConnection","net.corda.client.rpc.CordaRPCClient.start"]},{"name":"fun startArtemisSession(rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password): <Error class: unknown class>","description":"net.corda.testing.node.internal.RPCDriverDSL.startArtemisSession","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-artemis-session.html","searchKeys":["startArtemisSession","fun startArtemisSession(rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password): <Error class: unknown class>","net.corda.testing.node.internal.RPCDriverDSL.startArtemisSession"]},{"name":"fun startInVmArtemisSession(username: String = rpcTestUser.username, password: String = rpcTestUser.password): <Error class: unknown class>","description":"net.corda.testing.node.internal.RPCDriverDSL.startInVmArtemisSession","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-in-vm-artemis-session.html","searchKeys":["startInVmArtemisSession","fun startInVmArtemisSession(username: String = rpcTestUser.username, password: String = rpcTestUser.password): <Error class: unknown class>","net.corda.testing.node.internal.RPCDriverDSL.startInVmArtemisSession"]},{"name":"fun startJavaProcess(className: String, arguments: List<String>, classPath: List<String> = defaultClassPath, workingDirectory: Path? = null, jdwpPort: Int? = null, extraJvmArguments: List<String> = emptyList(), maximumHeapSize: String? = null, identifier: String = \"\", environmentVariables: Map<String, String> = emptyMap()): Process","description":"net.corda.testing.node.internal.ProcessUtilities.startJavaProcess","location":"docs/net.corda.testing.node.internal/-process-utilities/start-java-process.html","searchKeys":["startJavaProcess","fun startJavaProcess(className: String, arguments: List<String>, classPath: List<String> = defaultClassPath, workingDirectory: Path? = null, jdwpPort: Int? = null, extraJvmArguments: List<String> = emptyList(), maximumHeapSize: String? = null, identifier: String = \"\", environmentVariables: Map<String, String> = emptyMap()): Process","net.corda.testing.node.internal.ProcessUtilities.startJavaProcess"]},{"name":"fun startNode(legalName: CordaX500Name, platformVersion: Int = PLATFORM_VERSION, rpcUsers: List<User> = emptyList(), configOverrides: Map<String, Any> = emptyMap(), flowManager: <Error class: unknown class> = NodeFlowManager(FlowOverrideConfig())): <Error class: unknown class>","description":"net.corda.testing.node.internal.NodeBasedTest.startNode","location":"docs/net.corda.testing.node.internal/-node-based-test/start-node.html","searchKeys":["startNode","fun startNode(legalName: CordaX500Name, platformVersion: Int = PLATFORM_VERSION, rpcUsers: List<User> = emptyList(), configOverrides: Map<String, Any> = emptyMap(), flowManager: <Error class: unknown class> = NodeFlowManager(FlowOverrideConfig())): <Error class: unknown class>","net.corda.testing.node.internal.NodeBasedTest.startNode"]},{"name":"fun startNodes()","description":"net.corda.testing.node.MockNetwork.startNodes","location":"docs/net.corda.testing.node/-mock-network/start-nodes.html","searchKeys":["startNodes","fun startNodes()","net.corda.testing.node.MockNetwork.startNodes"]},{"name":"fun startNodes()","description":"net.corda.testing.node.internal.InternalMockNetwork.startNodes","location":"docs/net.corda.testing.node.internal/-internal-mock-network/start-nodes.html","searchKeys":["startNodes","fun startNodes()","net.corda.testing.node.internal.InternalMockNetwork.startNodes"]},{"name":"fun startPublishingFixedRateInjector(metricRegistry: <Error class: unknown class>, parallelism: Int, overallDuration: Duration, injectionRate: <Error class: unknown class>, queueSizeMetricName: String = \"QueueSize\", workDurationMetricName: String = \"WorkDuration\", work: () -> Unit)","description":"net.corda.testing.node.internal.performance.startPublishingFixedRateInjector","location":"docs/net.corda.testing.node.internal.performance/start-publishing-fixed-rate-injector.html","searchKeys":["startPublishingFixedRateInjector","fun startPublishingFixedRateInjector(metricRegistry: <Error class: unknown class>, parallelism: Int, overallDuration: Duration, injectionRate: <Error class: unknown class>, queueSizeMetricName: String = \"QueueSize\", workDurationMetricName: String = \"WorkDuration\", work: () -> Unit)","net.corda.testing.node.internal.performance.startPublishingFixedRateInjector"]},{"name":"fun startReporter(shutdownManager: ShutdownManager, metricRegistry: <Error class: unknown class> = MetricRegistry()): <Error class: unknown class>","description":"net.corda.testing.node.internal.performance.startReporter","location":"docs/net.corda.testing.node.internal.performance/start-reporter.html","searchKeys":["startReporter","fun startReporter(shutdownManager: ShutdownManager, metricRegistry: <Error class: unknown class> = MetricRegistry()): <Error class: unknown class>","net.corda.testing.node.internal.performance.startReporter"]},{"name":"fun startRpcBroker(serverName: String = \"driver-rpc-server-\", rpcUser: User = rpcTestUser, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 10L * MAX_MESSAGE_SIZE, customPort: NetworkHostAndPort? = null): CordaFuture<RpcBrokerHandle>","description":"net.corda.testing.node.internal.RPCDriverDSL.startRpcBroker","location":"docs/net.corda.testing.node.internal/-r-p-c-driver-d-s-l/start-rpc-broker.html","searchKeys":["startRpcBroker","fun startRpcBroker(serverName: String = \"driver-rpc-server-\", rpcUser: User = rpcTestUser, maxFileSize: Int = MAX_MESSAGE_SIZE, maxBufferedBytesPerClient: Long = 10L * MAX_MESSAGE_SIZE, customPort: NetworkHostAndPort? = null): CordaFuture<RpcBrokerHandle>","net.corda.testing.node.internal.RPCDriverDSL.startRpcBroker"]},{"name":"fun startSpan(name: String, attributes: Map<String, String> = emptyMap(), flowLogic: FlowLogic<*>? = null): TelemetryId","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.startSpan","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/start-span.html","searchKeys":["startSpan","fun startSpan(name: String, attributes: Map<String, String> = emptyMap(), flowLogic: FlowLogic<*>? = null): TelemetryId","net.corda.core.internal.telemetry.TelemetryServiceImpl.startSpan"]},{"name":"fun startSpanForFlow(name: String, attributes: Map<String, String>, flowLogic: FlowLogic<*>? = null, remoteSerializedTelemetry: SerializedTelemetry? = null): TelemetryId","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.startSpanForFlow","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/start-span-for-flow.html","searchKeys":["startSpanForFlow","fun startSpanForFlow(name: String, attributes: Map<String, String>, flowLogic: FlowLogic<*>? = null, remoteSerializedTelemetry: SerializedTelemetry? = null): TelemetryId","net.corda.core.internal.telemetry.TelemetryServiceImpl.startSpanForFlow"]},{"name":"fun startTightLoopInjector(parallelism: Int, numberOfInjections: Int, queueBound: Int, work: () -> Unit)","description":"net.corda.testing.node.internal.performance.startTightLoopInjector","location":"docs/net.corda.testing.node.internal.performance/start-tight-loop-injector.html","searchKeys":["startTightLoopInjector","fun startTightLoopInjector(parallelism: Int, numberOfInjections: Int, queueBound: Int, work: () -> Unit)","net.corda.testing.node.internal.performance.startTightLoopInjector"]},{"name":"fun stop()","description":"net.corda.client.rpc.ext.MultiRPCClient.stop","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/stop.html","searchKeys":["stop","fun stop()","net.corda.client.rpc.ext.MultiRPCClient.stop"]},{"name":"fun stop()","description":"net.corda.testing.node.InMemoryMessagingNetwork.stop","location":"docs/net.corda.testing.node/-in-memory-messaging-network/stop.html","searchKeys":["stop","fun stop()","net.corda.testing.node.InMemoryMessagingNetwork.stop"]},{"name":"fun stop(): <Error class: unknown class>","description":"net.corda.testing.node.StartedMockNode.stop","location":"docs/net.corda.testing.node/-started-mock-node/stop.html","searchKeys":["stop","fun stop(): <Error class: unknown class>","net.corda.testing.node.StartedMockNode.stop"]},{"name":"fun stopAllNodes()","description":"net.corda.testing.node.internal.NodeBasedTest.stopAllNodes","location":"docs/net.corda.testing.node.internal/-node-based-test/stop-all-nodes.html","searchKeys":["stopAllNodes","fun stopAllNodes()","net.corda.testing.node.internal.NodeBasedTest.stopAllNodes"]},{"name":"fun stopNodes()","description":"net.corda.testing.node.MockNetwork.stopNodes","location":"docs/net.corda.testing.node/-mock-network/stop-nodes.html","searchKeys":["stopNodes","fun stopNodes()","net.corda.testing.node.MockNetwork.stopNodes"]},{"name":"fun stopNodes()","description":"net.corda.testing.node.internal.InternalMockNetwork.stopNodes","location":"docs/net.corda.testing.node.internal/-internal-mock-network/stop-nodes.html","searchKeys":["stopNodes","fun stopNodes()","net.corda.testing.node.internal.InternalMockNetwork.stopNodes"]},{"name":"fun subSequence(offset: Int, size: Int): ByteSequence","description":"net.corda.core.utilities.ByteSequence.subSequence","location":"docs/net.corda.core.utilities/-byte-sequence/sub-sequence.html","searchKeys":["subSequence","fun subSequence(offset: Int, size: Int): ByteSequence","net.corda.core.utilities.ByteSequence.subSequence"]},{"name":"fun supportedSignatureSchemes(): List<SignatureScheme>","description":"net.corda.core.crypto.Crypto.supportedSignatureSchemes","location":"docs/net.corda.core.crypto/-crypto/supported-signature-schemes.html","searchKeys":["supportedSignatureSchemes","fun supportedSignatureSchemes(): List<SignatureScheme>","net.corda.core.crypto.Crypto.supportedSignatureSchemes"]},{"name":"fun take(n: Int): ByteSequence","description":"net.corda.core.utilities.ByteSequence.take","location":"docs/net.corda.core.utilities/-byte-sequence/take.html","searchKeys":["take","fun take(n: Int): ByteSequence","net.corda.core.utilities.ByteSequence.take"]},{"name":"fun testActor(owningLegalIdentity: CordaX500Name = CordaX500Name(\"Test Company Inc.\", \"London\", \"GB\")): Actor","description":"net.corda.testing.node.testActor","location":"docs/net.corda.testing.node/test-actor.html","searchKeys":["testActor","fun testActor(owningLegalIdentity: CordaX500Name = CordaX500Name(\"Test Company Inc.\", \"London\", \"GB\")): Actor","net.corda.testing.node.testActor"]},{"name":"fun testContext(owningLegalIdentity: CordaX500Name = CordaX500Name(\"Test Company Inc.\", \"London\", \"GB\")): InvocationContext","description":"net.corda.testing.node.testContext","location":"docs/net.corda.testing.node/test-context.html","searchKeys":["testContext","fun testContext(owningLegalIdentity: CordaX500Name = CordaX500Name(\"Test Company Inc.\", \"London\", \"GB\")): InvocationContext","net.corda.testing.node.testContext"]},{"name":"fun threadDumpAsString(): String","description":"net.corda.core.utilities.threadDumpAsString","location":"docs/net.corda.core.utilities/thread-dump-as-string.html","searchKeys":["threadDumpAsString","fun threadDumpAsString(): String","net.corda.core.utilities.threadDumpAsString"]},{"name":"fun throwError(): Try<A>","description":"net.corda.core.utilities.Try.throwError","location":"docs/net.corda.core.utilities/-try/throw-error.html","searchKeys":["throwError","fun throwError(): Try<A>","net.corda.core.utilities.Try.throwError"]},{"name":"fun timeWindow(time: Instant, tolerance: Duration = 30.seconds)","description":"net.corda.testing.dsl.TransactionDSL.timeWindow","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/time-window.html","searchKeys":["timeWindow","fun timeWindow(time: Instant, tolerance: Duration = 30.seconds)","net.corda.testing.dsl.TransactionDSL.timeWindow"]},{"name":"fun toDecimal(): BigDecimal","description":"net.corda.core.contracts.Amount.toDecimal","location":"docs/net.corda.core.contracts/-amount/to-decimal.html","searchKeys":["toDecimal","fun toDecimal(): BigDecimal","net.corda.core.contracts.Amount.toDecimal"]},{"name":"fun toDecimal(): BigDecimal","description":"net.corda.core.contracts.AmountTransfer.toDecimal","location":"docs/net.corda.core.contracts/-amount-transfer/to-decimal.html","searchKeys":["toDecimal","fun toDecimal(): BigDecimal","net.corda.core.contracts.AmountTransfer.toDecimal"]},{"name":"fun toHexString(): String","description":"net.corda.core.crypto.SecureHash.toHexString","location":"docs/net.corda.core.crypto/-secure-hash/to-hex-string.html","searchKeys":["toHexString","fun toHexString(): String","net.corda.core.crypto.SecureHash.toHexString"]},{"name":"fun toImmutable(): NetworkParameters","description":"net.corda.core.node.NetworkParameters.toImmutable","location":"docs/net.corda.core.node/-network-parameters/to-immutable.html","searchKeys":["toImmutable","fun toImmutable(): NetworkParameters","net.corda.core.node.NetworkParameters.toImmutable"]},{"name":"fun toLedgerTransaction(resolveIdentity: (PublicKey) -> Party?, resolveAttachment: (SecureHash) -> Attachment?, resolveStateRef: (StateRef) -> TransactionState<*>?, resolveContractAttachment: (TransactionState<ContractState>) -> AttachmentId?): LedgerTransaction","description":"net.corda.core.transactions.WireTransaction.toLedgerTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/to-ledger-transaction.html","searchKeys":["toLedgerTransaction","fun toLedgerTransaction(resolveIdentity: (PublicKey) -> Party?, resolveAttachment: (SecureHash) -> Attachment?, resolveStateRef: (StateRef) -> TransactionState<*>?, resolveContractAttachment: (TransactionState<ContractState>) -> AttachmentId?): LedgerTransaction","net.corda.core.transactions.WireTransaction.toLedgerTransaction"]},{"name":"fun toLedgerTransaction(services: ServiceHub): LedgerTransaction","description":"net.corda.core.transactions.TransactionBuilder.toLedgerTransaction","location":"docs/net.corda.core.transactions/-transaction-builder/to-ledger-transaction.html","searchKeys":["toLedgerTransaction","fun toLedgerTransaction(services: ServiceHub): LedgerTransaction","net.corda.core.transactions.TransactionBuilder.toLedgerTransaction"]},{"name":"fun toLedgerTransaction(services: ServiceHub, checkSufficientSignatures: Boolean = true): LedgerTransaction","description":"net.corda.core.transactions.SignedTransaction.toLedgerTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/to-ledger-transaction.html","searchKeys":["toLedgerTransaction","fun toLedgerTransaction(services: ServiceHub, checkSufficientSignatures: Boolean = true): LedgerTransaction","net.corda.core.transactions.SignedTransaction.toLedgerTransaction"]},{"name":"fun toLedgerTransaction(services: ServicesForResolution): LedgerTransaction","description":"net.corda.core.transactions.WireTransaction.toLedgerTransaction","location":"docs/net.corda.core.transactions/-wire-transaction/to-ledger-transaction.html","searchKeys":["toLedgerTransaction","fun toLedgerTransaction(services: ServicesForResolution): LedgerTransaction","net.corda.core.transactions.WireTransaction.toLedgerTransaction"]},{"name":"fun toSignedTransaction(keyManagementService: KeyManagementService, publicKey: PublicKey, signatureMetadata: SignatureMetadata, services: ServicesForResolution): SignedTransaction","description":"net.corda.core.transactions.TransactionBuilder.toSignedTransaction","location":"docs/net.corda.core.transactions/-transaction-builder/to-signed-transaction.html","searchKeys":["toSignedTransaction","fun toSignedTransaction(keyManagementService: KeyManagementService, publicKey: PublicKey, signatureMetadata: SignatureMetadata, services: ServicesForResolution): SignedTransaction","net.corda.core.transactions.TransactionBuilder.toSignedTransaction"]},{"name":"fun toStateAndRef(): StateAndRef<ContractState>","description":"net.corda.core.internal.SerializedStateAndRef.toStateAndRef","location":"docs/net.corda.core.internal/-serialized-state-and-ref/to-state-and-ref.html","searchKeys":["toStateAndRef","fun toStateAndRef(): StateAndRef<ContractState>","net.corda.core.internal.SerializedStateAndRef.toStateAndRef"]},{"name":"fun toStateAndRef(factory: SerializationFactory, context: SerializationContext): StateAndRef<ContractState>","description":"net.corda.core.internal.SerializedStateAndRef.toStateAndRef","location":"docs/net.corda.core.internal/-serialized-state-and-ref/to-state-and-ref.html","searchKeys":["toStateAndRef","fun toStateAndRef(factory: SerializationFactory, context: SerializationContext): StateAndRef<ContractState>","net.corda.core.internal.SerializedStateAndRef.toStateAndRef"]},{"name":"fun toSupportedPrivateKey(key: PrivateKey): PrivateKey","description":"net.corda.core.crypto.Crypto.toSupportedPrivateKey","location":"docs/net.corda.core.crypto/-crypto/to-supported-private-key.html","searchKeys":["toSupportedPrivateKey","fun toSupportedPrivateKey(key: PrivateKey): PrivateKey","net.corda.core.crypto.Crypto.toSupportedPrivateKey"]},{"name":"fun toSupportedPublicKey(key: <Error class: unknown class>): PublicKey","description":"net.corda.core.crypto.Crypto.toSupportedPublicKey","location":"docs/net.corda.core.crypto/-crypto/to-supported-public-key.html","searchKeys":["toSupportedPublicKey","fun toSupportedPublicKey(key: <Error class: unknown class>): PublicKey","net.corda.core.crypto.Crypto.toSupportedPublicKey"]},{"name":"fun toSupportedPublicKey(key: PublicKey): PublicKey","description":"net.corda.core.crypto.Crypto.toSupportedPublicKey","location":"docs/net.corda.core.crypto/-crypto/to-supported-public-key.html","searchKeys":["toSupportedPublicKey","fun toSupportedPublicKey(key: PublicKey): PublicKey","net.corda.core.crypto.Crypto.toSupportedPublicKey"]},{"name":"fun toUrl(attachment: Attachment): URL","description":"net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory.toUrl","location":"docs/net.corda.core.serialization.internal/-attachment-u-r-l-stream-handler-factory/to-url.html","searchKeys":["toUrl","fun toUrl(attachment: Attachment): URL","net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory.toUrl"]},{"name":"fun toWarning(): String","description":"net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport.toWarning","location":"docs/net.corda.core.schemas/-mapped-schema-validator/-schema-cross-reference-report/to-warning.html","searchKeys":["toWarning","fun toWarning(): String","net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport.toWarning"]},{"name":"fun toWireTransaction(services: ServicesForResolution): WireTransaction","description":"net.corda.core.transactions.TransactionBuilder.toWireTransaction","location":"docs/net.corda.core.transactions/-transaction-builder/to-wire-transaction.html","searchKeys":["toWireTransaction","fun toWireTransaction(services: ServicesForResolution): WireTransaction","net.corda.core.transactions.TransactionBuilder.toWireTransaction"]},{"name":"fun toWireTransaction(services: ServicesForResolution, schemeId: Int): WireTransaction","description":"net.corda.core.transactions.TransactionBuilder.toWireTransaction","location":"docs/net.corda.core.transactions/-transaction-builder/to-wire-transaction.html","searchKeys":["toWireTransaction","fun toWireTransaction(services: ServicesForResolution, schemeId: Int): WireTransaction","net.corda.core.transactions.TransactionBuilder.toWireTransaction"]},{"name":"fun toWireTransaction(services: ServicesForResolution, schemeId: Int, properties: Map<Any, Any>): WireTransaction","description":"net.corda.core.transactions.TransactionBuilder.toWireTransaction","location":"docs/net.corda.core.transactions/-transaction-builder/to-wire-transaction.html","searchKeys":["toWireTransaction","fun toWireTransaction(services: ServicesForResolution, schemeId: Int, properties: Map<Any, Any>): WireTransaction","net.corda.core.transactions.TransactionBuilder.toWireTransaction"]},{"name":"fun track(): DataFeed<String, String>?","description":"net.corda.core.flows.FlowLogic.track","location":"docs/net.corda.core.flows/-flow-logic/track.html","searchKeys":["track","fun track(): DataFeed<String, String>?","net.corda.core.flows.FlowLogic.track"]},{"name":"fun trackStepsTree(): DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>?","description":"net.corda.core.flows.FlowLogic.trackStepsTree","location":"docs/net.corda.core.flows/-flow-logic/track-steps-tree.html","searchKeys":["trackStepsTree","fun trackStepsTree(): DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>?","net.corda.core.flows.FlowLogic.trackStepsTree"]},{"name":"fun trackStepsTreeIndex(): DataFeed<Int, Int>?","description":"net.corda.core.flows.FlowLogic.trackStepsTreeIndex","location":"docs/net.corda.core.flows/-flow-logic/track-steps-tree-index.html","searchKeys":["trackStepsTreeIndex","fun trackStepsTreeIndex(): DataFeed<Int, Int>?","net.corda.core.flows.FlowLogic.trackStepsTreeIndex"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion.tracker","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion.tracker","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.core.flows.CollectSignaturesFlow.Companion.tracker","location":"docs/net.corda.core.flows/-collect-signatures-flow/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.core.flows.CollectSignaturesFlow.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.core.flows.FinalityFlow.Companion.tracker","location":"docs/net.corda.core.flows/-finality-flow/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.core.flows.FinalityFlow.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.core.flows.NotaryFlow.Client.Companion.tracker","location":"docs/net.corda.core.flows/-notary-flow/-client/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.core.flows.NotaryFlow.Client.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.core.flows.SignTransactionFlow.Companion.tracker","location":"docs/net.corda.core.flows/-sign-transaction-flow/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.core.flows.SignTransactionFlow.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.core.flows.WithReferencedStatesFlow.Companion.tracker","location":"docs/net.corda.core.flows/-with-referenced-states-flow/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.core.flows.WithReferencedStatesFlow.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.finance.flows.AbstractCashFlow.Companion.tracker","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.finance.flows.AbstractCashFlow.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.finance.flows.CashExitFlow.Companion.tracker","location":"docs/net.corda.finance.flows/-cash-exit-flow/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.finance.flows.CashExitFlow.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.Companion.tracker","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.finance.flows.CashIssueAndPaymentFlow.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion.tracker","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.tracker","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.tracker"]},{"name":"fun tracker(): ProgressTracker","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.tracker","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/-companion/tracker.html","searchKeys":["tracker","fun tracker(): ProgressTracker","net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.tracker"]},{"name":"fun transaction(label: String? = null, transactionBuilder: TransactionBuilder = TransactionBuilder(notary = notary), dsl: TransactionDSL<TransactionDSLInterpreter>.() -> EnforceVerifyOrFail): WireTransaction","description":"net.corda.testing.dsl.LedgerDSL.transaction","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/transaction.html","searchKeys":["transaction","fun transaction(label: String? = null, transactionBuilder: TransactionBuilder = TransactionBuilder(notary = notary), dsl: TransactionDSL<TransactionDSLInterpreter>.() -> EnforceVerifyOrFail): WireTransaction","net.corda.testing.dsl.LedgerDSL.transaction"]},{"name":"fun transactionName(transactionHash: SecureHash): String?","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.transactionName","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/transaction-name.html","searchKeys":["transactionName","fun transactionName(transactionHash: SecureHash): String?","net.corda.testing.dsl.TestLedgerDSLInterpreter.transactionName"]},{"name":"fun transition(from: S, to: S)","description":"net.corda.core.internal.LifeCycle.transition","location":"docs/net.corda.core.internal/-life-cycle/transition.html","searchKeys":["transition","fun transition(from: S, to: S)","net.corda.core.internal.LifeCycle.transition"]},{"name":"fun tweak(dsl: LedgerDSL<T, L>.() -> Unit)","description":"net.corda.testing.dsl.LedgerDSL.tweak","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/tweak.html","searchKeys":["tweak","fun tweak(dsl: LedgerDSL<T, L>.() -> Unit)","net.corda.testing.dsl.LedgerDSL.tweak"]},{"name":"fun tweak(dsl: TransactionDSL<TransactionDSLInterpreter>.() -> EnforceVerifyOrFail): EnforceVerifyOrFail","description":"net.corda.testing.dsl.TransactionDSL.tweak","location":"docs/net.corda.testing.dsl/-transaction-d-s-l/tweak.html","searchKeys":["tweak","fun tweak(dsl: TransactionDSL<TransactionDSLInterpreter>.() -> EnforceVerifyOrFail): EnforceVerifyOrFail","net.corda.testing.dsl.TransactionDSL.tweak"]},{"name":"fun type(): Vault.ConstraintInfo.Type","description":"net.corda.core.node.services.Vault.ConstraintInfo.type","location":"docs/net.corda.core.node.services/-vault/-constraint-info/type.html","searchKeys":["type","fun type(): Vault.ConstraintInfo.Type","net.corda.core.node.services.Vault.ConstraintInfo.type"]},{"name":"fun unconsumedCashStatesForSpending(services: ServiceHub, amount: Amount<Currency>, onlyFromIssuerParties: Set<AbstractParty> = emptySet(), notary: Party? = null, lockId: UUID, withIssuerRefs: Set<OpaqueBytes> = emptySet()): List<StateAndRef<Cash.State>>","description":"net.corda.finance.workflows.asset.selection.AbstractCashSelection.unconsumedCashStatesForSpending","location":"docs/net.corda.finance.workflows.asset.selection/-abstract-cash-selection/unconsumed-cash-states-for-spending.html","searchKeys":["unconsumedCashStatesForSpending","fun unconsumedCashStatesForSpending(services: ServiceHub, amount: Amount<Currency>, onlyFromIssuerParties: Set<AbstractParty> = emptySet(), notary: Party? = null, lockId: UUID, withIssuerRefs: Set<OpaqueBytes> = emptySet()): List<StateAndRef<Cash.State>>","net.corda.finance.workflows.asset.selection.AbstractCashSelection.unconsumedCashStatesForSpending"]},{"name":"fun untilOnly(untilTime: Instant): FlowTimeWindow","description":"net.corda.core.flows.FlowTimeWindow.Companion.untilOnly","location":"docs/net.corda.core.flows/-flow-time-window/-companion/until-only.html","searchKeys":["untilOnly","fun untilOnly(untilTime: Instant): FlowTimeWindow","net.corda.core.flows.FlowTimeWindow.Companion.untilOnly"]},{"name":"fun untilOnly(untilTime: Instant): RecoveryTimeWindow","description":"net.corda.core.flows.RecoveryTimeWindow.Companion.untilOnly","location":"docs/net.corda.core.flows/-recovery-time-window/-companion/until-only.html","searchKeys":["untilOnly","fun untilOnly(untilTime: Instant): RecoveryTimeWindow","net.corda.core.flows.RecoveryTimeWindow.Companion.untilOnly"]},{"name":"fun untilOnly(untilTime: Instant): TimeWindow","description":"net.corda.core.contracts.TimeWindow.Companion.untilOnly","location":"docs/net.corda.core.contracts/-time-window/-companion/until-only.html","searchKeys":["untilOnly","fun untilOnly(untilTime: Instant): TimeWindow","net.corda.core.contracts.TimeWindow.Companion.untilOnly"]},{"name":"fun unverifiedTransaction(label: String? = null, transactionBuilder: TransactionBuilder = TransactionBuilder(notary = notary), dsl: TransactionDSL<TransactionDSLInterpreter>.() -> Unit): WireTransaction","description":"net.corda.testing.dsl.LedgerDSL.unverifiedTransaction","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/unverified-transaction.html","searchKeys":["unverifiedTransaction","fun unverifiedTransaction(label: String? = null, transactionBuilder: TransactionBuilder = TransactionBuilder(notary = notary), dsl: TransactionDSL<TransactionDSLInterpreter>.() -> Unit): WireTransaction","net.corda.testing.dsl.LedgerDSL.unverifiedTransaction"]},{"name":"fun validateIsMatchingCtor(methodNameHint: String, parameters: List<<Error class: unknown class><String, Type>>, args: String)","description":"net.corda.client.jackson.StringToMethodCallParser.validateIsMatchingCtor","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/validate-is-matching-ctor.html","searchKeys":["validateIsMatchingCtor","fun validateIsMatchingCtor(methodNameHint: String, parameters: List<<Error class: unknown class><String, Type>>, args: String)","net.corda.client.jackson.StringToMethodCallParser.validateIsMatchingCtor"]},{"name":"fun validateLegalName(normalizedLegalName: String)","description":"net.corda.core.internal.LegalNameValidator.validateLegalName","location":"docs/net.corda.core.internal/-legal-name-validator/validate-legal-name.html","searchKeys":["validateLegalName","fun validateLegalName(normalizedLegalName: String)","net.corda.core.internal.LegalNameValidator.validateLegalName"]},{"name":"fun validateNameAttribute(normalizedNameAttribute: String, validation: LegalNameValidator.Validation)","description":"net.corda.core.internal.LegalNameValidator.validateNameAttribute","location":"docs/net.corda.core.internal/-legal-name-validator/validate-name-attribute.html","searchKeys":["validateNameAttribute","fun validateNameAttribute(normalizedNameAttribute: String, validation: LegalNameValidator.Validation)","net.corda.core.internal.LegalNameValidator.validateNameAttribute"]},{"name":"fun validateOrganization(normalizedOrganization: String, validation: LegalNameValidator.Validation)","description":"net.corda.core.internal.LegalNameValidator.validateOrganization","location":"docs/net.corda.core.internal/-legal-name-validator/validate-organization.html","searchKeys":["validateOrganization","fun validateOrganization(normalizedOrganization: String, validation: LegalNameValidator.Validation)","net.corda.core.internal.LegalNameValidator.validateOrganization"]},{"name":"fun validatePublicKey(key: PublicKey): Boolean","description":"net.corda.core.crypto.Crypto.validatePublicKey","location":"docs/net.corda.core.crypto/-crypto/validate-public-key.html","searchKeys":["validatePublicKey","fun validatePublicKey(key: PublicKey): Boolean","net.corda.core.crypto.Crypto.validatePublicKey"]},{"name":"fun validateTimeWindow(currentTime: Instant, timeWindow: TimeWindow?): NotaryError.TimeWindowInvalid?","description":"net.corda.core.internal.notary.validateTimeWindow","location":"docs/net.corda.core.internal.notary/validate-time-window.html","searchKeys":["validateTimeWindow","fun validateTimeWindow(currentTime: Instant, timeWindow: TimeWindow?): NotaryError.TimeWindowInvalid?","net.corda.core.internal.notary.validateTimeWindow"]},{"name":"fun valueOf(value: String): AccrualAdjustment","description":"net.corda.finance.contracts.AccrualAdjustment.valueOf","location":"docs/net.corda.finance.contracts/-accrual-adjustment/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AccrualAdjustment","net.corda.finance.contracts.AccrualAdjustment.valueOf"]},{"name":"fun valueOf(value: String): AggregateFunctionType","description":"net.corda.core.node.services.vault.AggregateFunctionType.valueOf","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AggregateFunctionType","net.corda.core.node.services.vault.AggregateFunctionType.valueOf"]},{"name":"fun valueOf(value: String): AttachmentSort.AttachmentSortAttribute","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.valueOf","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): AttachmentSort.AttachmentSortAttribute","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.valueOf"]},{"name":"fun valueOf(value: String): BinaryComparisonOperator","description":"net.corda.core.node.services.vault.BinaryComparisonOperator.valueOf","location":"docs/net.corda.core.node.services.vault/-binary-comparison-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BinaryComparisonOperator","net.corda.core.node.services.vault.BinaryComparisonOperator.valueOf"]},{"name":"fun valueOf(value: String): BinaryLogicalOperator","description":"net.corda.core.node.services.vault.BinaryLogicalOperator.valueOf","location":"docs/net.corda.core.node.services.vault/-binary-logical-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BinaryLogicalOperator","net.corda.core.node.services.vault.BinaryLogicalOperator.valueOf"]},{"name":"fun valueOf(value: String): CertRole","description":"net.corda.core.internal.CertRole.valueOf","location":"docs/net.corda.core.internal/-cert-role/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): CertRole","net.corda.core.internal.CertRole.valueOf"]},{"name":"fun valueOf(value: String): CollectionOperator","description":"net.corda.core.node.services.vault.CollectionOperator.valueOf","location":"docs/net.corda.core.node.services.vault/-collection-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): CollectionOperator","net.corda.core.node.services.vault.CollectionOperator.valueOf"]},{"name":"fun valueOf(value: String): ComponentGroupEnum","description":"net.corda.core.contracts.ComponentGroupEnum.valueOf","location":"docs/net.corda.core.contracts/-component-group-enum/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ComponentGroupEnum","net.corda.core.contracts.ComponentGroupEnum.valueOf"]},{"name":"fun valueOf(value: String): ContextPropertyKeys","description":"net.corda.core.serialization.ContextPropertyKeys.valueOf","location":"docs/net.corda.core.serialization/-context-property-keys/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ContextPropertyKeys","net.corda.core.serialization.ContextPropertyKeys.valueOf"]},{"name":"fun valueOf(value: String): ContractUpgradeWireTransaction.Component","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.valueOf","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ContractUpgradeWireTransaction.Component","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.valueOf"]},{"name":"fun valueOf(value: String): DateRollConvention","description":"net.corda.finance.contracts.DateRollConvention.valueOf","location":"docs/net.corda.finance.contracts/-date-roll-convention/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DateRollConvention","net.corda.finance.contracts.DateRollConvention.valueOf"]},{"name":"fun valueOf(value: String): DateRollDirection","description":"net.corda.finance.contracts.DateRollDirection.valueOf","location":"docs/net.corda.finance.contracts/-date-roll-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DateRollDirection","net.corda.finance.contracts.DateRollDirection.valueOf"]},{"name":"fun valueOf(value: String): DayCountBasisDay","description":"net.corda.finance.contracts.DayCountBasisDay.valueOf","location":"docs/net.corda.finance.contracts/-day-count-basis-day/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DayCountBasisDay","net.corda.finance.contracts.DayCountBasisDay.valueOf"]},{"name":"fun valueOf(value: String): DayCountBasisYear","description":"net.corda.finance.contracts.DayCountBasisYear.valueOf","location":"docs/net.corda.finance.contracts/-day-count-basis-year/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DayCountBasisYear","net.corda.finance.contracts.DayCountBasisYear.valueOf"]},{"name":"fun valueOf(value: String): DistributionRecordType","description":"net.corda.core.flows.DistributionRecordType.valueOf","location":"docs/net.corda.core.flows/-distribution-record-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DistributionRecordType","net.corda.core.flows.DistributionRecordType.valueOf"]},{"name":"fun valueOf(value: String): EqualityComparisonOperator","description":"net.corda.core.node.services.vault.EqualityComparisonOperator.valueOf","location":"docs/net.corda.core.node.services.vault/-equality-comparison-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): EqualityComparisonOperator","net.corda.core.node.services.vault.EqualityComparisonOperator.valueOf"]},{"name":"fun valueOf(value: String): FetchDataFlow.DataType","description":"net.corda.core.internal.FetchDataFlow.DataType.valueOf","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): FetchDataFlow.DataType","net.corda.core.internal.FetchDataFlow.DataType.valueOf"]},{"name":"fun valueOf(value: String): Frequency","description":"net.corda.finance.contracts.Frequency.valueOf","location":"docs/net.corda.finance.contracts/-frequency/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Frequency","net.corda.finance.contracts.Frequency.valueOf"]},{"name":"fun valueOf(value: String): LegalNameValidator.Validation","description":"net.corda.core.internal.LegalNameValidator.Validation.valueOf","location":"docs/net.corda.core.internal/-legal-name-validator/-validation/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LegalNameValidator.Validation","net.corda.core.internal.LegalNameValidator.Validation.valueOf"]},{"name":"fun valueOf(value: String): LikenessOperator","description":"net.corda.core.node.services.vault.LikenessOperator.valueOf","location":"docs/net.corda.core.node.services.vault/-likeness-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): LikenessOperator","net.corda.core.node.services.vault.LikenessOperator.valueOf"]},{"name":"fun valueOf(value: String): NetType","description":"net.corda.finance.contracts.NetType.valueOf","location":"docs/net.corda.finance.contracts/-net-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): NetType","net.corda.finance.contracts.NetType.valueOf"]},{"name":"fun valueOf(value: String): NotaryChangeWireTransaction.Component","description":"net.corda.core.transactions.NotaryChangeWireTransaction.Component.valueOf","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-component/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): NotaryChangeWireTransaction.Component","net.corda.core.transactions.NotaryChangeWireTransaction.Component.valueOf"]},{"name":"fun valueOf(value: String): NullOperator","description":"net.corda.core.node.services.vault.NullOperator.valueOf","location":"docs/net.corda.core.node.services.vault/-null-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): NullOperator","net.corda.core.node.services.vault.NullOperator.valueOf"]},{"name":"fun valueOf(value: String): Obligation.Lifecycle","description":"net.corda.finance.contracts.asset.Obligation.Lifecycle.valueOf","location":"docs/net.corda.finance.contracts.asset/-obligation/-lifecycle/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Obligation.Lifecycle","net.corda.finance.contracts.asset.Obligation.Lifecycle.valueOf"]},{"name":"fun valueOf(value: String): PaymentRule","description":"net.corda.finance.contracts.PaymentRule.valueOf","location":"docs/net.corda.finance.contracts/-payment-rule/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): PaymentRule","net.corda.finance.contracts.PaymentRule.valueOf"]},{"name":"fun valueOf(value: String): QueryCriteria.SoftLockingType","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.valueOf","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): QueryCriteria.SoftLockingType","net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.valueOf"]},{"name":"fun valueOf(value: String): QueryCriteria.TimeInstantType","description":"net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.valueOf","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-instant-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): QueryCriteria.TimeInstantType","net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.valueOf"]},{"name":"fun valueOf(value: String): ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.valueOf","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.valueOf"]},{"name":"fun valueOf(value: String): SerializationContext.UseCase","description":"net.corda.core.serialization.SerializationContext.UseCase.valueOf","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): SerializationContext.UseCase","net.corda.core.serialization.SerializationContext.UseCase.valueOf"]},{"name":"fun valueOf(value: String): ServiceLifecycleEvent","description":"net.corda.core.node.services.ServiceLifecycleEvent.valueOf","location":"docs/net.corda.core.node.services/-service-lifecycle-event/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ServiceLifecycleEvent","net.corda.core.node.services.ServiceLifecycleEvent.valueOf"]},{"name":"fun valueOf(value: String): Sort.CommonStateAttribute","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute.valueOf","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Sort.CommonStateAttribute","net.corda.core.node.services.vault.Sort.CommonStateAttribute.valueOf"]},{"name":"fun valueOf(value: String): Sort.Direction","description":"net.corda.core.node.services.vault.Sort.Direction.valueOf","location":"docs/net.corda.core.node.services.vault/-sort/-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Sort.Direction","net.corda.core.node.services.vault.Sort.Direction.valueOf"]},{"name":"fun valueOf(value: String): Sort.FungibleStateAttribute","description":"net.corda.core.node.services.vault.Sort.FungibleStateAttribute.valueOf","location":"docs/net.corda.core.node.services.vault/-sort/-fungible-state-attribute/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Sort.FungibleStateAttribute","net.corda.core.node.services.vault.Sort.FungibleStateAttribute.valueOf"]},{"name":"fun valueOf(value: String): Sort.LinearStateAttribute","description":"net.corda.core.node.services.vault.Sort.LinearStateAttribute.valueOf","location":"docs/net.corda.core.node.services.vault/-sort/-linear-state-attribute/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Sort.LinearStateAttribute","net.corda.core.node.services.vault.Sort.LinearStateAttribute.valueOf"]},{"name":"fun valueOf(value: String): Sort.VaultStateAttribute","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.valueOf","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Sort.VaultStateAttribute","net.corda.core.node.services.vault.Sort.VaultStateAttribute.valueOf"]},{"name":"fun valueOf(value: String): StateConsumptionDetails.ConsumedStateType","description":"net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.valueOf","location":"docs/net.corda.core.flows/-state-consumption-details/-consumed-state-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): StateConsumptionDetails.ConsumedStateType","net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.valueOf"]},{"name":"fun valueOf(value: String): StatesToRecord","description":"net.corda.core.node.StatesToRecord.valueOf","location":"docs/net.corda.core.node/-states-to-record/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): StatesToRecord","net.corda.core.node.StatesToRecord.valueOf"]},{"name":"fun valueOf(value: String): TelemetryStatusCode","description":"net.corda.core.internal.telemetry.TelemetryStatusCode.valueOf","location":"docs/net.corda.core.internal.telemetry/-telemetry-status-code/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): TelemetryStatusCode","net.corda.core.internal.telemetry.TelemetryStatusCode.valueOf"]},{"name":"fun valueOf(value: String): Tenor.TimeUnit","description":"net.corda.finance.contracts.Tenor.TimeUnit.valueOf","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Tenor.TimeUnit","net.corda.finance.contracts.Tenor.TimeUnit.valueOf"]},{"name":"fun valueOf(value: String): TransactionStatus","description":"net.corda.core.node.services.TransactionStatus.valueOf","location":"docs/net.corda.core.node.services/-transaction-status/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): TransactionStatus","net.corda.core.node.services.TransactionStatus.valueOf"]},{"name":"fun valueOf(value: String): TransactionVerificationException.Direction","description":"net.corda.core.contracts.TransactionVerificationException.Direction.valueOf","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-direction/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): TransactionVerificationException.Direction","net.corda.core.contracts.TransactionVerificationException.Direction.valueOf"]},{"name":"fun valueOf(value: String): Vault.ConstraintInfo.Type","description":"net.corda.core.node.services.Vault.ConstraintInfo.Type.valueOf","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Vault.ConstraintInfo.Type","net.corda.core.node.services.Vault.ConstraintInfo.Type.valueOf"]},{"name":"fun valueOf(value: String): Vault.RelevancyStatus","description":"net.corda.core.node.services.Vault.RelevancyStatus.valueOf","location":"docs/net.corda.core.node.services/-vault/-relevancy-status/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Vault.RelevancyStatus","net.corda.core.node.services.Vault.RelevancyStatus.valueOf"]},{"name":"fun valueOf(value: String): Vault.StateStatus","description":"net.corda.core.node.services.Vault.StateStatus.valueOf","location":"docs/net.corda.core.node.services/-vault/-state-status/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Vault.StateStatus","net.corda.core.node.services.Vault.StateStatus.valueOf"]},{"name":"fun valueOf(value: String): Vault.UpdateType","description":"net.corda.core.node.services.Vault.UpdateType.valueOf","location":"docs/net.corda.core.node.services/-vault/-update-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Vault.UpdateType","net.corda.core.node.services.Vault.UpdateType.valueOf"]},{"name":"fun valueOf(value: String): VerifierType","description":"net.corda.testing.driver.VerifierType.valueOf","location":"docs/net.corda.testing.driver/-verifier-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): VerifierType","net.corda.testing.driver.VerifierType.valueOf"]},{"name":"fun values(): Array<AccrualAdjustment>","description":"net.corda.finance.contracts.AccrualAdjustment.values","location":"docs/net.corda.finance.contracts/-accrual-adjustment/values.html","searchKeys":["values","fun values(): Array<AccrualAdjustment>","net.corda.finance.contracts.AccrualAdjustment.values"]},{"name":"fun values(): Array<AggregateFunctionType>","description":"net.corda.core.node.services.vault.AggregateFunctionType.values","location":"docs/net.corda.core.node.services.vault/-aggregate-function-type/values.html","searchKeys":["values","fun values(): Array<AggregateFunctionType>","net.corda.core.node.services.vault.AggregateFunctionType.values"]},{"name":"fun values(): Array<AttachmentSort.AttachmentSortAttribute>","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.values","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/values.html","searchKeys":["values","fun values(): Array<AttachmentSort.AttachmentSortAttribute>","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.values"]},{"name":"fun values(): Array<BinaryComparisonOperator>","description":"net.corda.core.node.services.vault.BinaryComparisonOperator.values","location":"docs/net.corda.core.node.services.vault/-binary-comparison-operator/values.html","searchKeys":["values","fun values(): Array<BinaryComparisonOperator>","net.corda.core.node.services.vault.BinaryComparisonOperator.values"]},{"name":"fun values(): Array<BinaryLogicalOperator>","description":"net.corda.core.node.services.vault.BinaryLogicalOperator.values","location":"docs/net.corda.core.node.services.vault/-binary-logical-operator/values.html","searchKeys":["values","fun values(): Array<BinaryLogicalOperator>","net.corda.core.node.services.vault.BinaryLogicalOperator.values"]},{"name":"fun values(): Array<CertRole>","description":"net.corda.core.internal.CertRole.values","location":"docs/net.corda.core.internal/-cert-role/values.html","searchKeys":["values","fun values(): Array<CertRole>","net.corda.core.internal.CertRole.values"]},{"name":"fun values(): Array<CollectionOperator>","description":"net.corda.core.node.services.vault.CollectionOperator.values","location":"docs/net.corda.core.node.services.vault/-collection-operator/values.html","searchKeys":["values","fun values(): Array<CollectionOperator>","net.corda.core.node.services.vault.CollectionOperator.values"]},{"name":"fun values(): Array<ComponentGroupEnum>","description":"net.corda.core.contracts.ComponentGroupEnum.values","location":"docs/net.corda.core.contracts/-component-group-enum/values.html","searchKeys":["values","fun values(): Array<ComponentGroupEnum>","net.corda.core.contracts.ComponentGroupEnum.values"]},{"name":"fun values(): Array<ContextPropertyKeys>","description":"net.corda.core.serialization.ContextPropertyKeys.values","location":"docs/net.corda.core.serialization/-context-property-keys/values.html","searchKeys":["values","fun values(): Array<ContextPropertyKeys>","net.corda.core.serialization.ContextPropertyKeys.values"]},{"name":"fun values(): Array<ContractUpgradeWireTransaction.Component>","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Component.values","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-component/values.html","searchKeys":["values","fun values(): Array<ContractUpgradeWireTransaction.Component>","net.corda.core.transactions.ContractUpgradeWireTransaction.Component.values"]},{"name":"fun values(): Array<DateRollConvention>","description":"net.corda.finance.contracts.DateRollConvention.values","location":"docs/net.corda.finance.contracts/-date-roll-convention/values.html","searchKeys":["values","fun values(): Array<DateRollConvention>","net.corda.finance.contracts.DateRollConvention.values"]},{"name":"fun values(): Array<DateRollDirection>","description":"net.corda.finance.contracts.DateRollDirection.values","location":"docs/net.corda.finance.contracts/-date-roll-direction/values.html","searchKeys":["values","fun values(): Array<DateRollDirection>","net.corda.finance.contracts.DateRollDirection.values"]},{"name":"fun values(): Array<DayCountBasisDay>","description":"net.corda.finance.contracts.DayCountBasisDay.values","location":"docs/net.corda.finance.contracts/-day-count-basis-day/values.html","searchKeys":["values","fun values(): Array<DayCountBasisDay>","net.corda.finance.contracts.DayCountBasisDay.values"]},{"name":"fun values(): Array<DayCountBasisYear>","description":"net.corda.finance.contracts.DayCountBasisYear.values","location":"docs/net.corda.finance.contracts/-day-count-basis-year/values.html","searchKeys":["values","fun values(): Array<DayCountBasisYear>","net.corda.finance.contracts.DayCountBasisYear.values"]},{"name":"fun values(): Array<DistributionRecordType>","description":"net.corda.core.flows.DistributionRecordType.values","location":"docs/net.corda.core.flows/-distribution-record-type/values.html","searchKeys":["values","fun values(): Array<DistributionRecordType>","net.corda.core.flows.DistributionRecordType.values"]},{"name":"fun values(): Array<EqualityComparisonOperator>","description":"net.corda.core.node.services.vault.EqualityComparisonOperator.values","location":"docs/net.corda.core.node.services.vault/-equality-comparison-operator/values.html","searchKeys":["values","fun values(): Array<EqualityComparisonOperator>","net.corda.core.node.services.vault.EqualityComparisonOperator.values"]},{"name":"fun values(): Array<FetchDataFlow.DataType>","description":"net.corda.core.internal.FetchDataFlow.DataType.values","location":"docs/net.corda.core.internal/-fetch-data-flow/-data-type/values.html","searchKeys":["values","fun values(): Array<FetchDataFlow.DataType>","net.corda.core.internal.FetchDataFlow.DataType.values"]},{"name":"fun values(): Array<Frequency>","description":"net.corda.finance.contracts.Frequency.values","location":"docs/net.corda.finance.contracts/-frequency/values.html","searchKeys":["values","fun values(): Array<Frequency>","net.corda.finance.contracts.Frequency.values"]},{"name":"fun values(): Array<LegalNameValidator.Validation>","description":"net.corda.core.internal.LegalNameValidator.Validation.values","location":"docs/net.corda.core.internal/-legal-name-validator/-validation/values.html","searchKeys":["values","fun values(): Array<LegalNameValidator.Validation>","net.corda.core.internal.LegalNameValidator.Validation.values"]},{"name":"fun values(): Array<LikenessOperator>","description":"net.corda.core.node.services.vault.LikenessOperator.values","location":"docs/net.corda.core.node.services.vault/-likeness-operator/values.html","searchKeys":["values","fun values(): Array<LikenessOperator>","net.corda.core.node.services.vault.LikenessOperator.values"]},{"name":"fun values(): Array<NetType>","description":"net.corda.finance.contracts.NetType.values","location":"docs/net.corda.finance.contracts/-net-type/values.html","searchKeys":["values","fun values(): Array<NetType>","net.corda.finance.contracts.NetType.values"]},{"name":"fun values(): Array<NotaryChangeWireTransaction.Component>","description":"net.corda.core.transactions.NotaryChangeWireTransaction.Component.values","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/-component/values.html","searchKeys":["values","fun values(): Array<NotaryChangeWireTransaction.Component>","net.corda.core.transactions.NotaryChangeWireTransaction.Component.values"]},{"name":"fun values(): Array<NullOperator>","description":"net.corda.core.node.services.vault.NullOperator.values","location":"docs/net.corda.core.node.services.vault/-null-operator/values.html","searchKeys":["values","fun values(): Array<NullOperator>","net.corda.core.node.services.vault.NullOperator.values"]},{"name":"fun values(): Array<Obligation.Lifecycle>","description":"net.corda.finance.contracts.asset.Obligation.Lifecycle.values","location":"docs/net.corda.finance.contracts.asset/-obligation/-lifecycle/values.html","searchKeys":["values","fun values(): Array<Obligation.Lifecycle>","net.corda.finance.contracts.asset.Obligation.Lifecycle.values"]},{"name":"fun values(): Array<PaymentRule>","description":"net.corda.finance.contracts.PaymentRule.values","location":"docs/net.corda.finance.contracts/-payment-rule/values.html","searchKeys":["values","fun values(): Array<PaymentRule>","net.corda.finance.contracts.PaymentRule.values"]},{"name":"fun values(): Array<QueryCriteria.SoftLockingType>","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.values","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-type/values.html","searchKeys":["values","fun values(): Array<QueryCriteria.SoftLockingType>","net.corda.core.node.services.vault.QueryCriteria.SoftLockingType.values"]},{"name":"fun values(): Array<QueryCriteria.TimeInstantType>","description":"net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.values","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-instant-type/values.html","searchKeys":["values","fun values(): Array<QueryCriteria.TimeInstantType>","net.corda.core.node.services.vault.QueryCriteria.TimeInstantType.values"]},{"name":"fun values(): Array<ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState>","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.values","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/-current-state/values.html","searchKeys":["values","fun values(): Array<ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState>","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.CurrentState.values"]},{"name":"fun values(): Array<SerializationContext.UseCase>","description":"net.corda.core.serialization.SerializationContext.UseCase.values","location":"docs/net.corda.core.serialization/-serialization-context/-use-case/values.html","searchKeys":["values","fun values(): Array<SerializationContext.UseCase>","net.corda.core.serialization.SerializationContext.UseCase.values"]},{"name":"fun values(): Array<ServiceLifecycleEvent>","description":"net.corda.core.node.services.ServiceLifecycleEvent.values","location":"docs/net.corda.core.node.services/-service-lifecycle-event/values.html","searchKeys":["values","fun values(): Array<ServiceLifecycleEvent>","net.corda.core.node.services.ServiceLifecycleEvent.values"]},{"name":"fun values(): Array<Sort.CommonStateAttribute>","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute.values","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/values.html","searchKeys":["values","fun values(): Array<Sort.CommonStateAttribute>","net.corda.core.node.services.vault.Sort.CommonStateAttribute.values"]},{"name":"fun values(): Array<Sort.Direction>","description":"net.corda.core.node.services.vault.Sort.Direction.values","location":"docs/net.corda.core.node.services.vault/-sort/-direction/values.html","searchKeys":["values","fun values(): Array<Sort.Direction>","net.corda.core.node.services.vault.Sort.Direction.values"]},{"name":"fun values(): Array<Sort.FungibleStateAttribute>","description":"net.corda.core.node.services.vault.Sort.FungibleStateAttribute.values","location":"docs/net.corda.core.node.services.vault/-sort/-fungible-state-attribute/values.html","searchKeys":["values","fun values(): Array<Sort.FungibleStateAttribute>","net.corda.core.node.services.vault.Sort.FungibleStateAttribute.values"]},{"name":"fun values(): Array<Sort.LinearStateAttribute>","description":"net.corda.core.node.services.vault.Sort.LinearStateAttribute.values","location":"docs/net.corda.core.node.services.vault/-sort/-linear-state-attribute/values.html","searchKeys":["values","fun values(): Array<Sort.LinearStateAttribute>","net.corda.core.node.services.vault.Sort.LinearStateAttribute.values"]},{"name":"fun values(): Array<Sort.VaultStateAttribute>","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.values","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/values.html","searchKeys":["values","fun values(): Array<Sort.VaultStateAttribute>","net.corda.core.node.services.vault.Sort.VaultStateAttribute.values"]},{"name":"fun values(): Array<StateConsumptionDetails.ConsumedStateType>","description":"net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.values","location":"docs/net.corda.core.flows/-state-consumption-details/-consumed-state-type/values.html","searchKeys":["values","fun values(): Array<StateConsumptionDetails.ConsumedStateType>","net.corda.core.flows.StateConsumptionDetails.ConsumedStateType.values"]},{"name":"fun values(): Array<StatesToRecord>","description":"net.corda.core.node.StatesToRecord.values","location":"docs/net.corda.core.node/-states-to-record/values.html","searchKeys":["values","fun values(): Array<StatesToRecord>","net.corda.core.node.StatesToRecord.values"]},{"name":"fun values(): Array<TelemetryStatusCode>","description":"net.corda.core.internal.telemetry.TelemetryStatusCode.values","location":"docs/net.corda.core.internal.telemetry/-telemetry-status-code/values.html","searchKeys":["values","fun values(): Array<TelemetryStatusCode>","net.corda.core.internal.telemetry.TelemetryStatusCode.values"]},{"name":"fun values(): Array<Tenor.TimeUnit>","description":"net.corda.finance.contracts.Tenor.TimeUnit.values","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/values.html","searchKeys":["values","fun values(): Array<Tenor.TimeUnit>","net.corda.finance.contracts.Tenor.TimeUnit.values"]},{"name":"fun values(): Array<TransactionStatus>","description":"net.corda.core.node.services.TransactionStatus.values","location":"docs/net.corda.core.node.services/-transaction-status/values.html","searchKeys":["values","fun values(): Array<TransactionStatus>","net.corda.core.node.services.TransactionStatus.values"]},{"name":"fun values(): Array<TransactionVerificationException.Direction>","description":"net.corda.core.contracts.TransactionVerificationException.Direction.values","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-direction/values.html","searchKeys":["values","fun values(): Array<TransactionVerificationException.Direction>","net.corda.core.contracts.TransactionVerificationException.Direction.values"]},{"name":"fun values(): Array<Vault.ConstraintInfo.Type>","description":"net.corda.core.node.services.Vault.ConstraintInfo.Type.values","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-type/values.html","searchKeys":["values","fun values(): Array<Vault.ConstraintInfo.Type>","net.corda.core.node.services.Vault.ConstraintInfo.Type.values"]},{"name":"fun values(): Array<Vault.RelevancyStatus>","description":"net.corda.core.node.services.Vault.RelevancyStatus.values","location":"docs/net.corda.core.node.services/-vault/-relevancy-status/values.html","searchKeys":["values","fun values(): Array<Vault.RelevancyStatus>","net.corda.core.node.services.Vault.RelevancyStatus.values"]},{"name":"fun values(): Array<Vault.StateStatus>","description":"net.corda.core.node.services.Vault.StateStatus.values","location":"docs/net.corda.core.node.services/-vault/-state-status/values.html","searchKeys":["values","fun values(): Array<Vault.StateStatus>","net.corda.core.node.services.Vault.StateStatus.values"]},{"name":"fun values(): Array<Vault.UpdateType>","description":"net.corda.core.node.services.Vault.UpdateType.values","location":"docs/net.corda.core.node.services/-vault/-update-type/values.html","searchKeys":["values","fun values(): Array<Vault.UpdateType>","net.corda.core.node.services.Vault.UpdateType.values"]},{"name":"fun values(): Array<VerifierType>","description":"net.corda.testing.driver.VerifierType.values","location":"docs/net.corda.testing.driver/-verifier-type/values.html","searchKeys":["values","fun values(): Array<VerifierType>","net.corda.testing.driver.VerifierType.values"]},{"name":"fun verified(): T","description":"net.corda.core.crypto.SignedData.verified","location":"docs/net.corda.core.crypto/-signed-data/verified.html","searchKeys":["verified","fun verified(): T","net.corda.core.crypto.SignedData.verified"]},{"name":"fun verified(): T","description":"net.corda.core.internal.SignedDataWithCert.verified","location":"docs/net.corda.core.internal/-signed-data-with-cert/verified.html","searchKeys":["verified","fun verified(): T","net.corda.core.internal.SignedDataWithCert.verified"]},{"name":"fun verify()","description":"net.corda.core.transactions.FilteredTransaction.verify","location":"docs/net.corda.core.transactions/-filtered-transaction/verify.html","searchKeys":["verify","fun verify()","net.corda.core.transactions.FilteredTransaction.verify"]},{"name":"fun verify()","description":"net.corda.core.transactions.LedgerTransaction.verify","location":"docs/net.corda.core.transactions/-ledger-transaction/verify.html","searchKeys":["verify","fun verify()","net.corda.core.transactions.LedgerTransaction.verify"]},{"name":"fun verify(content: ByteArray): Boolean","description":"net.corda.core.crypto.DigitalSignature.WithKey.verify","location":"docs/net.corda.core.crypto/-digital-signature/-with-key/verify.html","searchKeys":["verify","fun verify(content: ByteArray): Boolean","net.corda.core.crypto.DigitalSignature.WithKey.verify"]},{"name":"fun verify(content: ByteArray): Boolean","description":"net.corda.core.internal.DigitalSignatureWithCert.verify","location":"docs/net.corda.core.internal/-digital-signature-with-cert/verify.html","searchKeys":["verify","fun verify(content: ByteArray): Boolean","net.corda.core.internal.DigitalSignatureWithCert.verify"]},{"name":"fun verify(content: OpaqueBytes): Boolean","description":"net.corda.core.crypto.DigitalSignature.WithKey.verify","location":"docs/net.corda.core.crypto/-digital-signature/-with-key/verify.html","searchKeys":["verify","fun verify(content: OpaqueBytes): Boolean","net.corda.core.crypto.DigitalSignature.WithKey.verify"]},{"name":"fun verify(content: OpaqueBytes): Boolean","description":"net.corda.core.internal.DigitalSignatureWithCert.verify","location":"docs/net.corda.core.internal/-digital-signature-with-cert/verify.html","searchKeys":["verify","fun verify(content: OpaqueBytes): Boolean","net.corda.core.internal.DigitalSignatureWithCert.verify"]},{"name":"fun verify(merkleRootHash: SecureHash, hashesToCheck: List<SecureHash>): Boolean","description":"net.corda.core.crypto.PartialMerkleTree.verify","location":"docs/net.corda.core.crypto/-partial-merkle-tree/verify.html","searchKeys":["verify","fun verify(merkleRootHash: SecureHash, hashesToCheck: List<SecureHash>): Boolean","net.corda.core.crypto.PartialMerkleTree.verify"]},{"name":"fun verify(services: ServiceHub)","description":"net.corda.core.transactions.TransactionBuilder.verify","location":"docs/net.corda.core.transactions/-transaction-builder/verify.html","searchKeys":["verify","fun verify(services: ServiceHub)","net.corda.core.transactions.TransactionBuilder.verify"]},{"name":"fun verify(services: ServiceHub, checkSufficientSignatures: Boolean = true)","description":"net.corda.core.transactions.SignedTransaction.verify","location":"docs/net.corda.core.transactions/-signed-transaction/verify.html","searchKeys":["verify","fun verify(services: ServiceHub, checkSufficientSignatures: Boolean = true)","net.corda.core.transactions.SignedTransaction.verify"]},{"name":"fun verify(trustAnchor: TrustAnchor): PKIXCertPathValidatorResult","description":"net.corda.core.identity.PartyAndCertificate.verify","location":"docs/net.corda.core.identity/-party-and-certificate/verify.html","searchKeys":["verify","fun verify(trustAnchor: TrustAnchor): PKIXCertPathValidatorResult","net.corda.core.identity.PartyAndCertificate.verify"]},{"name":"fun verify(trustAnchors: Set<TrustAnchor>): PKIXCertPathValidatorResult","description":"net.corda.core.identity.PartyAndCertificate.verify","location":"docs/net.corda.core.identity/-party-and-certificate/verify.html","searchKeys":["verify","fun verify(trustAnchors: Set<TrustAnchor>): PKIXCertPathValidatorResult","net.corda.core.identity.PartyAndCertificate.verify"]},{"name":"fun verify(txId: SecureHash): Boolean","description":"net.corda.core.crypto.TransactionSignature.verify","location":"docs/net.corda.core.crypto/-transaction-signature/verify.html","searchKeys":["verify","fun verify(txId: SecureHash): Boolean","net.corda.core.crypto.TransactionSignature.verify"]},{"name":"fun waitForAllFlowsToComplete(nodeHandle: NodeHandle, maxIterations: Int = 60, iterationDelay: Long = 500)","description":"net.corda.testing.flows.waitForAllFlowsToComplete","location":"docs/net.corda.testing.flows/wait-for-all-flows-to-complete.html","searchKeys":["waitForAllFlowsToComplete","fun waitForAllFlowsToComplete(nodeHandle: NodeHandle, maxIterations: Int = 60, iterationDelay: Long = 500)","net.corda.testing.flows.waitForAllFlowsToComplete"]},{"name":"fun waitForLedgerCommit(hash: SecureHash, maySkipCheckpoint: Boolean = false): SignedTransaction","description":"net.corda.core.flows.FlowLogic.waitForLedgerCommit","location":"docs/net.corda.core.flows/-flow-logic/wait-for-ledger-commit.html","searchKeys":["waitForLedgerCommit","fun waitForLedgerCommit(hash: SecureHash, maySkipCheckpoint: Boolean = false): SignedTransaction","net.corda.core.flows.FlowLogic.waitForLedgerCommit"]},{"name":"fun waitForStateConsumption(stateRefs: Set<StateRef>)","description":"net.corda.core.flows.FlowLogic.waitForStateConsumption","location":"docs/net.corda.core.flows/-flow-logic/wait-for-state-consumption.html","searchKeys":["waitForStateConsumption","fun waitForStateConsumption(stateRefs: Set<StateRef>)","net.corda.core.flows.FlowLogic.waitForStateConsumption"]},{"name":"fun waitQuiescent()","description":"net.corda.testing.node.MockNetwork.waitQuiescent","location":"docs/net.corda.testing.node/-mock-network/wait-quiescent.html","searchKeys":["waitQuiescent","fun waitQuiescent()","net.corda.testing.node.MockNetwork.waitQuiescent"]},{"name":"fun waitQuiescent()","description":"net.corda.testing.node.internal.InternalMockNetwork.waitQuiescent","location":"docs/net.corda.testing.node.internal/-internal-mock-network/wait-quiescent.html","searchKeys":["waitQuiescent","fun waitQuiescent()","net.corda.testing.node.internal.InternalMockNetwork.waitQuiescent"]},{"name":"fun with(serializationFactory: SerializationFactory, p2pContext: SerializationContext, rpcServerContext: SerializationContext? = null, rpcClientContext: SerializationContext? = null, storageContext: SerializationContext? = null, checkpointContext: CheckpointSerializationContext? = null, checkpointSerializer: CheckpointSerializer? = null): SerializationEnvironment","description":"net.corda.core.serialization.internal.SerializationEnvironment.Companion.with","location":"docs/net.corda.core.serialization.internal/-serialization-environment/-companion/with.html","searchKeys":["with","fun with(serializationFactory: SerializationFactory, p2pContext: SerializationContext, rpcServerContext: SerializationContext? = null, rpcClientContext: SerializationContext? = null, storageContext: SerializationContext? = null, checkpointContext: CheckpointSerializationContext? = null, checkpointSerializer: CheckpointSerializer? = null): SerializationEnvironment","net.corda.core.serialization.internal.SerializationEnvironment.Companion.with"]},{"name":"fun withAdditionalCordapps(additionalCordapps: Collection<TestCordapp>): MockNodeParameters","description":"net.corda.testing.node.MockNodeParameters.withAdditionalCordapps","location":"docs/net.corda.testing.node/-mock-node-parameters/with-additional-cordapps.html","searchKeys":["withAdditionalCordapps","fun withAdditionalCordapps(additionalCordapps: Collection<TestCordapp>): MockNodeParameters","net.corda.testing.node.MockNodeParameters.withAdditionalCordapps"]},{"name":"fun withAdditionalCordapps(additionalCordapps: Set<TestCordapp>): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withAdditionalCordapps","location":"docs/net.corda.testing.driver/-node-parameters/with-additional-cordapps.html","searchKeys":["withAdditionalCordapps","fun withAdditionalCordapps(additionalCordapps: Set<TestCordapp>): NodeParameters","net.corda.testing.driver.NodeParameters.withAdditionalCordapps"]},{"name":"fun withAdditionalSignature(keyPair: KeyPair, signatureMetadata: SignatureMetadata): SignedTransaction","description":"net.corda.core.transactions.SignedTransaction.withAdditionalSignature","location":"docs/net.corda.core.transactions/-signed-transaction/with-additional-signature.html","searchKeys":["withAdditionalSignature","fun withAdditionalSignature(keyPair: KeyPair, signatureMetadata: SignatureMetadata): SignedTransaction","net.corda.core.transactions.SignedTransaction.withAdditionalSignature"]},{"name":"fun withAdditionalSignature(sig: TransactionSignature): SignedTransaction","description":"net.corda.core.transactions.SignedTransaction.withAdditionalSignature","location":"docs/net.corda.core.transactions/-signed-transaction/with-additional-signature.html","searchKeys":["withAdditionalSignature","fun withAdditionalSignature(sig: TransactionSignature): SignedTransaction","net.corda.core.transactions.SignedTransaction.withAdditionalSignature"]},{"name":"fun withAdditionalSignatures(sigList: Iterable<TransactionSignature>): SignedTransaction","description":"net.corda.core.transactions.SignedTransaction.withAdditionalSignatures","location":"docs/net.corda.core.transactions/-signed-transaction/with-additional-signatures.html","searchKeys":["withAdditionalSignatures","fun withAdditionalSignatures(sigList: Iterable<TransactionSignature>): SignedTransaction","net.corda.core.transactions.SignedTransaction.withAdditionalSignatures"]},{"name":"fun withAllowHibernateToManageAppSchema(value: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withAllowHibernateToManageAppSchema","location":"docs/net.corda.testing.driver/-driver-parameters/with-allow-hibernate-to-manage-app-schema.html","searchKeys":["withAllowHibernateToManageAppSchema","fun withAllowHibernateToManageAppSchema(value: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.withAllowHibernateToManageAppSchema"]},{"name":"fun withConfigOverrides(configOverrides: MockNodeConfigOverrides): MockNodeParameters","description":"net.corda.testing.node.MockNodeParameters.withConfigOverrides","location":"docs/net.corda.testing.node/-mock-node-parameters/with-config-overrides.html","searchKeys":["withConfigOverrides","fun withConfigOverrides(configOverrides: MockNodeConfigOverrides): MockNodeParameters","net.corda.testing.node.MockNodeParameters.withConfigOverrides"]},{"name":"fun withConstraintTypes(constraintTypes: Set<Vault.ConstraintInfo.Type>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withConstraintTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-constraint-types.html","searchKeys":["withConstraintTypes","fun withConstraintTypes(constraintTypes: Set<Vault.ConstraintInfo.Type>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withConstraintTypes"]},{"name":"fun withConstraints(constraints: Set<Vault.ConstraintInfo>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withConstraints","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-constraints.html","searchKeys":["withConstraints","fun withConstraints(constraints: Set<Vault.ConstraintInfo>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withConstraints"]},{"name":"fun withContractClassNames(contractClassNamesPredicate: ColumnPredicate<List<ContractClassName>>): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withContractClassNames","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/with-contract-class-names.html","searchKeys":["withContractClassNames","fun withContractClassNames(contractClassNamesPredicate: ColumnPredicate<List<ContractClassName>>): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withContractClassNames"]},{"name":"fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withContractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-contract-state-types.html","searchKeys":["withContractStateTypes","fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withContractStateTypes"]},{"name":"fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.FungibleStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withContractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/with-contract-state-types.html","searchKeys":["withContractStateTypes","fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.FungibleStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withContractStateTypes"]},{"name":"fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withContractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/with-contract-state-types.html","searchKeys":["withContractStateTypes","fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withContractStateTypes"]},{"name":"fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.VaultCustomQueryCriteria<L>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withContractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/with-contract-state-types.html","searchKeys":["withContractStateTypes","fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.VaultCustomQueryCriteria<L>","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withContractStateTypes"]},{"name":"fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withContractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-contract-state-types.html","searchKeys":["withContractStateTypes","fun withContractStateTypes(contractStateTypes: Set<Class<out ContractState>>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withContractStateTypes"]},{"name":"fun withCordappsForAllNodes(cordappsForAllNodes: Collection<TestCordapp>): MockNetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.withCordappsForAllNodes","location":"docs/net.corda.testing.node/-mock-network-parameters/with-cordapps-for-all-nodes.html","searchKeys":["withCordappsForAllNodes","fun withCordappsForAllNodes(cordappsForAllNodes: Collection<TestCordapp>): MockNetworkParameters","net.corda.testing.node.MockNetworkParameters.withCordappsForAllNodes"]},{"name":"fun withCordappsForAllNodes(cordappsForAllNodes: Collection<TestCordapp>?): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withCordappsForAllNodes","location":"docs/net.corda.testing.driver/-driver-parameters/with-cordapps-for-all-nodes.html","searchKeys":["withCordappsForAllNodes","fun withCordappsForAllNodes(cordappsForAllNodes: Collection<TestCordapp>?): DriverParameters","net.corda.testing.driver.DriverParameters.withCordappsForAllNodes"]},{"name":"fun withCustomOverrides(customOverrides: Map<String, Any?>): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withCustomOverrides","location":"docs/net.corda.testing.driver/-node-parameters/with-custom-overrides.html","searchKeys":["withCustomOverrides","fun withCustomOverrides(customOverrides: Map<String, Any?>): NodeParameters","net.corda.testing.driver.NodeParameters.withCustomOverrides"]},{"name":"fun withDebugPortAllocation(debugPortAllocation: PortAllocation): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withDebugPortAllocation","location":"docs/net.corda.testing.driver/-driver-parameters/with-debug-port-allocation.html","searchKeys":["withDebugPortAllocation","fun withDebugPortAllocation(debugPortAllocation: PortAllocation): DriverParameters","net.corda.testing.driver.DriverParameters.withDebugPortAllocation"]},{"name":"fun withDriverDirectory(driverDirectory: Path): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withDriverDirectory","location":"docs/net.corda.testing.driver/-driver-parameters/with-driver-directory.html","searchKeys":["withDriverDirectory","fun withDriverDirectory(driverDirectory: Path): DriverParameters","net.corda.testing.driver.DriverParameters.withDriverDirectory"]},{"name":"fun withEntropyRoot(entropyRoot: BigInteger): MockNodeParameters","description":"net.corda.testing.node.MockNodeParameters.withEntropyRoot","location":"docs/net.corda.testing.node/-mock-node-parameters/with-entropy-root.html","searchKeys":["withEntropyRoot","fun withEntropyRoot(entropyRoot: BigInteger): MockNodeParameters","net.corda.testing.node.MockNodeParameters.withEntropyRoot"]},{"name":"fun withEnvironmentVariables(variables: Map<String, String>): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withEnvironmentVariables","location":"docs/net.corda.testing.driver/-driver-parameters/with-environment-variables.html","searchKeys":["withEnvironmentVariables","fun withEnvironmentVariables(variables: Map<String, String>): DriverParameters","net.corda.testing.driver.DriverParameters.withEnvironmentVariables"]},{"name":"fun withExactParticipants(exactParticipants: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withExactParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-exact-participants.html","searchKeys":["withExactParticipants","fun withExactParticipants(exactParticipants: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withExactParticipants"]},{"name":"fun withExactParticipants(exactParticipants: List<AbstractParty>): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withExactParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/with-exact-participants.html","searchKeys":["withExactParticipants","fun withExactParticipants(exactParticipants: List<AbstractParty>): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withExactParticipants"]},{"name":"fun withExactParticipants(exactParticipants: List<AbstractParty>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withExactParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-exact-participants.html","searchKeys":["withExactParticipants","fun withExactParticipants(exactParticipants: List<AbstractParty>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withExactParticipants"]},{"name":"fun withExpression(expression: CriteriaExpression<L, Boolean>): QueryCriteria.VaultCustomQueryCriteria<L>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withExpression","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/with-expression.html","searchKeys":["withExpression","fun withExpression(expression: CriteriaExpression<L, Boolean>): QueryCriteria.VaultCustomQueryCriteria<L>","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withExpression"]},{"name":"fun withExternalId(externalId: List<String>): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withExternalId","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/with-external-id.html","searchKeys":["withExternalId","fun withExternalId(externalId: List<String>): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withExternalId"]},{"name":"fun withExternalIds(externalIds: List<UUID>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withExternalIds","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-external-ids.html","searchKeys":["withExternalIds","fun withExternalIds(externalIds: List<UUID>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withExternalIds"]},{"name":"fun withExtraCordappPackagesToScan(extraCordappPackagesToScan: List<String>): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withExtraCordappPackagesToScan","location":"docs/net.corda.testing.driver/-driver-parameters/with-extra-cordapp-packages-to-scan.html","searchKeys":["withExtraCordappPackagesToScan","fun withExtraCordappPackagesToScan(extraCordappPackagesToScan: List<String>): DriverParameters","net.corda.testing.driver.DriverParameters.withExtraCordappPackagesToScan"]},{"name":"fun withFilename(filenamePredicate: ColumnPredicate<String>): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withFilename","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/with-filename.html","searchKeys":["withFilename","fun withFilename(filenamePredicate: ColumnPredicate<String>): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withFilename"]},{"name":"fun withFlowOverrides(flowOverrides: Map<Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withFlowOverrides","location":"docs/net.corda.testing.driver/-node-parameters/with-flow-overrides.html","searchKeys":["withFlowOverrides","fun withFlowOverrides(flowOverrides: Map<Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>): NodeParameters","net.corda.testing.driver.NodeParameters.withFlowOverrides"]},{"name":"fun withForcedID(forcedID: Int?): MockNodeParameters","description":"net.corda.testing.node.MockNodeParameters.withForcedID","location":"docs/net.corda.testing.node/-mock-node-parameters/with-forced-i-d.html","searchKeys":["withForcedID","fun withForcedID(forcedID: Int?): MockNodeParameters","net.corda.testing.node.MockNodeParameters.withForcedID"]},{"name":"fun withInMemoryDB(inMemoryDB: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withInMemoryDB","location":"docs/net.corda.testing.driver/-driver-parameters/with-in-memory-d-b.html","searchKeys":["withInMemoryDB","fun withInMemoryDB(inMemoryDB: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.withInMemoryDB"]},{"name":"fun withIsDebug(isDebug: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withIsDebug","location":"docs/net.corda.testing.driver/-driver-parameters/with-is-debug.html","searchKeys":["withIsDebug","fun withIsDebug(isDebug: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.withIsDebug"]},{"name":"fun withIssuer(issuer: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withIssuer","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-issuer.html","searchKeys":["withIssuer","fun withIssuer(issuer: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withIssuer"]},{"name":"fun withItems(vararg items: Any): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.withItems","location":"docs/net.corda.core.transactions/-transaction-builder/with-items.html","searchKeys":["withItems","fun withItems(vararg items: Any): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.withItems"]},{"name":"fun withJmxPolicy(jmxPolicy: JmxPolicy): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withJmxPolicy","location":"docs/net.corda.testing.driver/-driver-parameters/with-jmx-policy.html","searchKeys":["withJmxPolicy","fun withJmxPolicy(jmxPolicy: JmxPolicy): DriverParameters","net.corda.testing.driver.DriverParameters.withJmxPolicy"]},{"name":"fun withLegacyContracts(legacyContracts: Collection<TestCordapp>): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withLegacyContracts","location":"docs/net.corda.testing.driver/-node-parameters/with-legacy-contracts.html","searchKeys":["withLegacyContracts","fun withLegacyContracts(legacyContracts: Collection<TestCordapp>): NodeParameters","net.corda.testing.driver.NodeParameters.withLegacyContracts"]},{"name":"fun withLegalName(legalName: CordaX500Name?): MockNodeParameters","description":"net.corda.testing.node.MockNodeParameters.withLegalName","location":"docs/net.corda.testing.node/-mock-node-parameters/with-legal-name.html","searchKeys":["withLegalName","fun withLegalName(legalName: CordaX500Name?): MockNodeParameters","net.corda.testing.node.MockNodeParameters.withLegalName"]},{"name":"fun withLogLevelOverride(logLevelOverride: String?): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withLogLevelOverride","location":"docs/net.corda.testing.driver/-node-parameters/with-log-level-override.html","searchKeys":["withLogLevelOverride","fun withLogLevelOverride(logLevelOverride: String?): NodeParameters","net.corda.testing.driver.NodeParameters.withLogLevelOverride"]},{"name":"fun withMaximumHeapSize(maximumHeapSize: String): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withMaximumHeapSize","location":"docs/net.corda.testing.driver/-node-parameters/with-maximum-heap-size.html","searchKeys":["withMaximumHeapSize","fun withMaximumHeapSize(maximumHeapSize: String): NodeParameters","net.corda.testing.driver.NodeParameters.withMaximumHeapSize"]},{"name":"fun withNetworkParameters(networkParameters: NetworkParameters): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withNetworkParameters","location":"docs/net.corda.testing.driver/-driver-parameters/with-network-parameters.html","searchKeys":["withNetworkParameters","fun withNetworkParameters(networkParameters: NetworkParameters): DriverParameters","net.corda.testing.driver.DriverParameters.withNetworkParameters"]},{"name":"fun withNetworkParameters(networkParameters: NetworkParameters): MockNetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.withNetworkParameters","location":"docs/net.corda.testing.node/-mock-network-parameters/with-network-parameters.html","searchKeys":["withNetworkParameters","fun withNetworkParameters(networkParameters: NetworkParameters): MockNetworkParameters","net.corda.testing.node.MockNetworkParameters.withNetworkParameters"]},{"name":"fun withNetworkSendManuallyPumped(networkSendManuallyPumped: Boolean): MockNetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.withNetworkSendManuallyPumped","location":"docs/net.corda.testing.node/-mock-network-parameters/with-network-send-manually-pumped.html","searchKeys":["withNetworkSendManuallyPumped","fun withNetworkSendManuallyPumped(networkSendManuallyPumped: Boolean): MockNetworkParameters","net.corda.testing.node.MockNetworkParameters.withNetworkSendManuallyPumped"]},{"name":"fun withNotary(notary: List<AbstractParty>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withNotary","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-notary.html","searchKeys":["withNotary","fun withNotary(notary: List<AbstractParty>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withNotary"]},{"name":"fun withNotaryCustomOverrides(notaryCustomOverrides: Map<String, Any?>): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withNotaryCustomOverrides","location":"docs/net.corda.testing.driver/-driver-parameters/with-notary-custom-overrides.html","searchKeys":["withNotaryCustomOverrides","fun withNotaryCustomOverrides(notaryCustomOverrides: Map<String, Any?>): DriverParameters","net.corda.testing.driver.DriverParameters.withNotaryCustomOverrides"]},{"name":"fun withNotaryHandleTimeout(value: Duration): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withNotaryHandleTimeout","location":"docs/net.corda.testing.driver/-driver-parameters/with-notary-handle-timeout.html","searchKeys":["withNotaryHandleTimeout","fun withNotaryHandleTimeout(value: Duration): DriverParameters","net.corda.testing.driver.DriverParameters.withNotaryHandleTimeout"]},{"name":"fun withNotarySpecs(notarySpecs: List<MockNetworkNotarySpec>): MockNetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.withNotarySpecs","location":"docs/net.corda.testing.node/-mock-network-parameters/with-notary-specs.html","searchKeys":["withNotarySpecs","fun withNotarySpecs(notarySpecs: List<MockNetworkNotarySpec>): MockNetworkParameters","net.corda.testing.node.MockNetworkParameters.withNotarySpecs"]},{"name":"fun withNotarySpecs(notarySpecs: List<NotarySpec>): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withNotarySpecs","location":"docs/net.corda.testing.driver/-driver-parameters/with-notary-specs.html","searchKeys":["withNotarySpecs","fun withNotarySpecs(notarySpecs: List<NotarySpec>): DriverParameters","net.corda.testing.driver.DriverParameters.withNotarySpecs"]},{"name":"fun withOwner(owner: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withOwner","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-owner.html","searchKeys":["withOwner","fun withOwner(owner: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withOwner"]},{"name":"fun withParticipants(participants: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-participants.html","searchKeys":["withParticipants","fun withParticipants(participants: List<AbstractParty>): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withParticipants"]},{"name":"fun withParticipants(participants: List<AbstractParty>): QueryCriteria.FungibleStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/with-participants.html","searchKeys":["withParticipants","fun withParticipants(participants: List<AbstractParty>): QueryCriteria.FungibleStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withParticipants"]},{"name":"fun withParticipants(participants: List<AbstractParty>): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/with-participants.html","searchKeys":["withParticipants","fun withParticipants(participants: List<AbstractParty>): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withParticipants"]},{"name":"fun withParticipants(participants: List<AbstractParty>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-participants.html","searchKeys":["withParticipants","fun withParticipants(participants: List<AbstractParty>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withParticipants"]},{"name":"fun withPortAllocation(portAllocation: PortAllocation): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withPortAllocation","location":"docs/net.corda.testing.driver/-driver-parameters/with-port-allocation.html","searchKeys":["withPortAllocation","fun withPortAllocation(portAllocation: PortAllocation): DriverParameters","net.corda.testing.driver.DriverParameters.withPortAllocation"]},{"name":"fun withProvidedName(providedName: CordaX500Name?): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withProvidedName","location":"docs/net.corda.testing.driver/-node-parameters/with-provided-name.html","searchKeys":["withProvidedName","fun withProvidedName(providedName: CordaX500Name?): NodeParameters","net.corda.testing.driver.NodeParameters.withProvidedName"]},{"name":"fun withQuantity(quantity: ColumnPredicate<Long>): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withQuantity","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-quantity.html","searchKeys":["withQuantity","fun withQuantity(quantity: ColumnPredicate<Long>): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withQuantity"]},{"name":"fun withQuantity(quantity: ColumnPredicate<Long>): QueryCriteria.FungibleStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withQuantity","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/with-quantity.html","searchKeys":["withQuantity","fun withQuantity(quantity: ColumnPredicate<Long>): QueryCriteria.FungibleStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withQuantity"]},{"name":"fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withRelevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-relevancy-status.html","searchKeys":["withRelevancyStatus","fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withRelevancyStatus"]},{"name":"fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.FungibleStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withRelevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/with-relevancy-status.html","searchKeys":["withRelevancyStatus","fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.FungibleStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withRelevancyStatus"]},{"name":"fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withRelevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/with-relevancy-status.html","searchKeys":["withRelevancyStatus","fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withRelevancyStatus"]},{"name":"fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.VaultCustomQueryCriteria<L>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withRelevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/with-relevancy-status.html","searchKeys":["withRelevancyStatus","fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.VaultCustomQueryCriteria<L>","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withRelevancyStatus"]},{"name":"fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withRelevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-relevancy-status.html","searchKeys":["withRelevancyStatus","fun withRelevancyStatus(relevancyStatus: Vault.RelevancyStatus): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withRelevancyStatus"]},{"name":"fun withRpcAddress(rpcAddress: NetworkHostAndPort?): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withRpcAddress","location":"docs/net.corda.testing.driver/-node-parameters/with-rpc-address.html","searchKeys":["withRpcAddress","fun withRpcAddress(rpcAddress: NetworkHostAndPort?): NodeParameters","net.corda.testing.driver.NodeParameters.withRpcAddress"]},{"name":"fun withRpcUsers(rpcUsers: List<User>): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withRpcUsers","location":"docs/net.corda.testing.driver/-node-parameters/with-rpc-users.html","searchKeys":["withRpcUsers","fun withRpcUsers(rpcUsers: List<User>): NodeParameters","net.corda.testing.driver.NodeParameters.withRpcUsers"]},{"name":"fun withServicePeerAllocationStrategy(servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy): MockNetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.withServicePeerAllocationStrategy","location":"docs/net.corda.testing.node/-mock-network-parameters/with-service-peer-allocation-strategy.html","searchKeys":["withServicePeerAllocationStrategy","fun withServicePeerAllocationStrategy(servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy): MockNetworkParameters","net.corda.testing.node.MockNetworkParameters.withServicePeerAllocationStrategy"]},{"name":"fun withSigners(signersPredicate: ColumnPredicate<List<PublicKey>>): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withSigners","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/with-signers.html","searchKeys":["withSigners","fun withSigners(signersPredicate: ColumnPredicate<List<PublicKey>>): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withSigners"]},{"name":"fun withSoftLockingCondition(softLockingCondition: QueryCriteria.SoftLockingCondition): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withSoftLockingCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-soft-locking-condition.html","searchKeys":["withSoftLockingCondition","fun withSoftLockingCondition(softLockingCondition: QueryCriteria.SoftLockingCondition): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withSoftLockingCondition"]},{"name":"fun withStartInSameProcess(startInSameProcess: Boolean?): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withStartInSameProcess","location":"docs/net.corda.testing.driver/-node-parameters/with-start-in-same-process.html","searchKeys":["withStartInSameProcess","fun withStartInSameProcess(startInSameProcess: Boolean?): NodeParameters","net.corda.testing.driver.NodeParameters.withStartInSameProcess"]},{"name":"fun withStartNodesInProcess(startNodesInProcess: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withStartNodesInProcess","location":"docs/net.corda.testing.driver/-driver-parameters/with-start-nodes-in-process.html","searchKeys":["withStartNodesInProcess","fun withStartNodesInProcess(startNodesInProcess: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.withStartNodesInProcess"]},{"name":"fun withStateRefs(stateRefs: List<StateRef>): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withStateRefs","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-state-refs.html","searchKeys":["withStateRefs","fun withStateRefs(stateRefs: List<StateRef>): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withStateRefs"]},{"name":"fun withStatus(status: Vault.StateStatus): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/with-status.html","searchKeys":["withStatus","fun withStatus(status: Vault.StateStatus): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withStatus"]},{"name":"fun withStatus(status: Vault.StateStatus): QueryCriteria.FungibleStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/with-status.html","searchKeys":["withStatus","fun withStatus(status: Vault.StateStatus): QueryCriteria.FungibleStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.withStatus"]},{"name":"fun withStatus(status: Vault.StateStatus): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/with-status.html","searchKeys":["withStatus","fun withStatus(status: Vault.StateStatus): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withStatus"]},{"name":"fun withStatus(status: Vault.StateStatus): QueryCriteria.VaultCustomQueryCriteria<L>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/with-status.html","searchKeys":["withStatus","fun withStatus(status: Vault.StateStatus): QueryCriteria.VaultCustomQueryCriteria<L>","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.withStatus"]},{"name":"fun withStatus(status: Vault.StateStatus): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-status.html","searchKeys":["withStatus","fun withStatus(status: Vault.StateStatus): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withStatus"]},{"name":"fun withSystemProperties(systemProperties: Map<String, String>): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withSystemProperties","location":"docs/net.corda.testing.driver/-driver-parameters/with-system-properties.html","searchKeys":["withSystemProperties","fun withSystemProperties(systemProperties: Map<String, String>): DriverParameters","net.corda.testing.driver.DriverParameters.withSystemProperties"]},{"name":"fun withSystemProperties(systemProperties: Map<String, String>): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withSystemProperties","location":"docs/net.corda.testing.driver/-node-parameters/with-system-properties.html","searchKeys":["withSystemProperties","fun withSystemProperties(systemProperties: Map<String, String>): NodeParameters","net.corda.testing.driver.NodeParameters.withSystemProperties"]},{"name":"fun withThreadPerNode(threadPerNode: Boolean): MockNetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.withThreadPerNode","location":"docs/net.corda.testing.node/-mock-network-parameters/with-thread-per-node.html","searchKeys":["withThreadPerNode","fun withThreadPerNode(threadPerNode: Boolean): MockNetworkParameters","net.corda.testing.node.MockNetworkParameters.withThreadPerNode"]},{"name":"fun withTimeCondition(timeCondition: QueryCriteria.TimeCondition): QueryCriteria.VaultQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withTimeCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/with-time-condition.html","searchKeys":["withTimeCondition","fun withTimeCondition(timeCondition: QueryCriteria.TimeCondition): QueryCriteria.VaultQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.withTimeCondition"]},{"name":"fun withTolerance(instant: Instant, tolerance: Duration): TimeWindow","description":"net.corda.core.contracts.TimeWindow.Companion.withTolerance","location":"docs/net.corda.core.contracts/-time-window/-companion/with-tolerance.html","searchKeys":["withTolerance","fun withTolerance(instant: Instant, tolerance: Duration): TimeWindow","net.corda.core.contracts.TimeWindow.Companion.withTolerance"]},{"name":"fun withUploadDate(uploadDatePredicate: ColumnPredicate<Instant>): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withUploadDate","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/with-upload-date.html","searchKeys":["withUploadDate","fun withUploadDate(uploadDatePredicate: ColumnPredicate<Instant>): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withUploadDate"]},{"name":"fun withUploader(uploaderPredicate: ColumnPredicate<String>): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withUploader","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/with-uploader.html","searchKeys":["withUploader","fun withUploader(uploaderPredicate: ColumnPredicate<String>): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withUploader"]},{"name":"fun withUseTestClock(useTestClock: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withUseTestClock","location":"docs/net.corda.testing.driver/-driver-parameters/with-use-test-clock.html","searchKeys":["withUseTestClock","fun withUseTestClock(useTestClock: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.withUseTestClock"]},{"name":"fun withUuid(uuid: List<UUID>): QueryCriteria.LinearStateQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withUuid","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/with-uuid.html","searchKeys":["withUuid","fun withUuid(uuid: List<UUID>): QueryCriteria.LinearStateQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.withUuid"]},{"name":"fun withVerifierType(verifierType: VerifierType): NodeParameters","description":"net.corda.testing.driver.NodeParameters.withVerifierType","location":"docs/net.corda.testing.driver/-node-parameters/with-verifier-type.html","searchKeys":["withVerifierType","fun withVerifierType(verifierType: VerifierType): NodeParameters","net.corda.testing.driver.NodeParameters.withVerifierType"]},{"name":"fun withVersion(versionPredicate: ColumnPredicate<Int>): AttachmentQueryCriteria.AttachmentsQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withVersion","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/with-version.html","searchKeys":["withVersion","fun withVersion(versionPredicate: ColumnPredicate<Int>): AttachmentQueryCriteria.AttachmentsQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.withVersion"]},{"name":"fun withWaitForAllNodesToFinish(waitForAllNodesToFinish: Boolean): DriverParameters","description":"net.corda.testing.driver.DriverParameters.withWaitForAllNodesToFinish","location":"docs/net.corda.testing.driver/-driver-parameters/with-wait-for-all-nodes-to-finish.html","searchKeys":["withWaitForAllNodesToFinish","fun withWaitForAllNodesToFinish(waitForAllNodesToFinish: Boolean): DriverParameters","net.corda.testing.driver.DriverParameters.withWaitForAllNodesToFinish"]},{"name":"fun withissuerRef(issuerRef: List<OpaqueBytes>): QueryCriteria.FungibleAssetQueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withissuerRef","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/withissuer-ref.html","searchKeys":["withissuerRef","fun withissuerRef(issuerRef: List<OpaqueBytes>): QueryCriteria.FungibleAssetQueryCriteria","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.withissuerRef"]},{"name":"fun withoutKey(): DigitalSignature","description":"net.corda.core.crypto.DigitalSignature.WithKey.withoutKey","location":"docs/net.corda.core.crypto/-digital-signature/-with-key/without-key.html","searchKeys":["withoutKey","fun withoutKey(): DigitalSignature","net.corda.core.crypto.DigitalSignature.WithKey.withoutKey"]},{"name":"fun withoutOwner(): CommercialPaper.State","description":"net.corda.finance.contracts.CommercialPaper.State.withoutOwner","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/without-owner.html","searchKeys":["withoutOwner","fun withoutOwner(): CommercialPaper.State","net.corda.finance.contracts.CommercialPaper.State.withoutOwner"]},{"name":"fun writeConfig(path: Path, filename: String, config: <Error class: unknown class>)","description":"net.corda.testing.node.internal.writeConfig","location":"docs/net.corda.testing.node.internal/write-config.html","searchKeys":["writeConfig","fun writeConfig(path: Path, filename: String, config: <Error class: unknown class>)","net.corda.testing.node.internal.writeConfig"]},{"name":"fun writeTo(output: OutputStream)","description":"net.corda.core.utilities.ByteSequence.writeTo","location":"docs/net.corda.core.utilities/-byte-sequence/write-to.html","searchKeys":["writeTo","fun writeTo(output: OutputStream)","net.corda.core.utilities.ByteSequence.writeTo"]},{"name":"fun x500Matches(query: String, exactMatch: Boolean, x500name: CordaX500Name): Boolean","description":"net.corda.core.identity.x500Matches","location":"docs/net.corda.core.identity/x500-matches.html","searchKeys":["x500Matches","fun x500Matches(query: String, exactMatch: Boolean, x500name: CordaX500Name): Boolean","net.corda.core.identity.x500Matches"]},{"name":"fun zeroHashFor(algorithm: String): SecureHash","description":"net.corda.core.crypto.SecureHash.Companion.zeroHashFor","location":"docs/net.corda.core.crypto/-secure-hash/-companion/zero-hash-for.html","searchKeys":["zeroHashFor","fun zeroHashFor(algorithm: String): SecureHash","net.corda.core.crypto.SecureHash.Companion.zeroHashFor"]},{"name":"infix fun <R : Any> Map<FlowSession, UntrustworthyData<Any>>.from(session: FlowSession): R","description":"net.corda.testing.flows.from","location":"docs/net.corda.testing.flows/from.html","searchKeys":["from","infix fun <R : Any> Map<FlowSession, UntrustworthyData<Any>>.from(session: FlowSession): R","net.corda.testing.flows.from"]},{"name":"infix fun <T : Any> KClass<T>.from(session: FlowSession): <Error class: unknown class><FlowSession, Class<T>>","description":"net.corda.testing.flows.from","location":"docs/net.corda.testing.flows/from.html","searchKeys":["from","infix fun <T : Any> KClass<T>.from(session: FlowSession): <Error class: unknown class><FlowSession, Class<T>>","net.corda.testing.flows.from"]},{"name":"infix fun <T : Any> Obligation.State<T>.at(dueBefore: Instant): Obligation.State<T>","description":"net.corda.finance.contracts.asset.at","location":"docs/net.corda.finance.contracts.asset/at.html","searchKeys":["at","infix fun <T : Any> Obligation.State<T>.at(dueBefore: Instant): Obligation.State<T>","net.corda.finance.contracts.asset.at"]},{"name":"infix fun <T : Any> Obligation.State<T>.between(parties: <Error class: unknown class><AbstractParty, AbstractParty>): Obligation.State<T>","description":"net.corda.finance.contracts.asset.between","location":"docs/net.corda.finance.contracts.asset/between.html","searchKeys":["between","infix fun <T : Any> Obligation.State<T>.between(parties: <Error class: unknown class><AbstractParty, AbstractParty>): Obligation.State<T>","net.corda.finance.contracts.asset.between"]},{"name":"infix fun <T : Any> Obligation.State<T>.issued by(party: AbstractParty): Obligation.State<T>","description":"net.corda.finance.contracts.asset.issued by","location":"docs/net.corda.finance.contracts.asset/issued by.html","searchKeys":["issued by","infix fun <T : Any> Obligation.State<T>.issued by(party: AbstractParty): Obligation.State<T>","net.corda.finance.contracts.asset.issued by"]},{"name":"infix fun <T : Any> Obligation.State<T>.owned by(owner: AbstractParty): Obligation.State<T>","description":"net.corda.finance.contracts.asset.owned by","location":"docs/net.corda.finance.contracts.asset/owned by.html","searchKeys":["owned by","infix fun <T : Any> Obligation.State<T>.owned by(owner: AbstractParty): Obligation.State<T>","net.corda.finance.contracts.asset.owned by"]},{"name":"infix fun <T : Class<out Any>> T.from(session: FlowSession): <Error class: unknown class><FlowSession, T>","description":"net.corda.testing.flows.from","location":"docs/net.corda.testing.flows/from.html","searchKeys":["from","infix fun <T : Class<out Any>> T.from(session: FlowSession): <Error class: unknown class><FlowSession, T>","net.corda.testing.flows.from"]},{"name":"infix fun Amount<Currency>.issued by(deposit: PartyAndReference): Amount<Issued<Currency>>","description":"net.corda.finance.issued by","location":"docs/net.corda.finance/issued by.html","searchKeys":["issued by","infix fun Amount<Currency>.issued by(deposit: PartyAndReference): Amount<Issued<Currency>>","net.corda.finance.issued by"]},{"name":"infix fun Amount<Currency>.issuedBy(deposit: PartyAndReference): Amount<Issued<Currency>>","description":"net.corda.finance.issuedBy","location":"docs/net.corda.finance/issued-by.html","searchKeys":["issuedBy","infix fun Amount<Currency>.issuedBy(deposit: PartyAndReference): Amount<Issued<Currency>>","net.corda.finance.issuedBy"]},{"name":"infix fun Currency.issued by(deposit: PartyAndReference): Issued<Currency>","description":"net.corda.finance.issued by","location":"docs/net.corda.finance/issued by.html","searchKeys":["issued by","infix fun Currency.issued by(deposit: PartyAndReference): Issued<Currency>","net.corda.finance.issued by"]},{"name":"infix fun Currency.issuedBy(deposit: PartyAndReference): Issued<Currency>","description":"net.corda.finance.issuedBy","location":"docs/net.corda.finance/issued-by.html","searchKeys":["issuedBy","infix fun Currency.issuedBy(deposit: PartyAndReference): Issued<Currency>","net.corda.finance.issuedBy"]},{"name":"infix fun Int.exactAdd(b: Int): Int","description":"net.corda.core.utilities.exactAdd","location":"docs/net.corda.core.utilities/exact-add.html","searchKeys":["exactAdd","infix fun Int.exactAdd(b: Int): Int","net.corda.core.utilities.exactAdd"]},{"name":"infix fun Long.exactAdd(b: Long): Long","description":"net.corda.core.utilities.exactAdd","location":"docs/net.corda.core.utilities/exact-add.html","searchKeys":["exactAdd","infix fun Long.exactAdd(b: Long): Long","net.corda.core.utilities.exactAdd"]},{"name":"infix fun Temporal.until(endExclusive: Temporal): Duration","description":"net.corda.core.internal.until","location":"docs/net.corda.core.internal/until.html","searchKeys":["until","infix fun Temporal.until(endExclusive: Temporal): Duration","net.corda.core.internal.until"]},{"name":"infix fun issuedBy(deposit: PartyAndReference): Cash.State","description":"net.corda.finance.contracts.asset.Cash.State.issuedBy","location":"docs/net.corda.finance.contracts.asset/-cash/-state/issued-by.html","searchKeys":["issuedBy","infix fun issuedBy(deposit: PartyAndReference): Cash.State","net.corda.finance.contracts.asset.Cash.State.issuedBy"]},{"name":"infix fun issuedBy(party: AbstractParty): Cash.State","description":"net.corda.finance.contracts.asset.Cash.State.issuedBy","location":"docs/net.corda.finance.contracts.asset/-cash/-state/issued-by.html","searchKeys":["issuedBy","infix fun issuedBy(party: AbstractParty): Cash.State","net.corda.finance.contracts.asset.Cash.State.issuedBy"]},{"name":"infix fun ownedBy(owner: AbstractParty): Cash.State","description":"net.corda.finance.contracts.asset.Cash.State.ownedBy","location":"docs/net.corda.finance.contracts.asset/-cash/-state/owned-by.html","searchKeys":["ownedBy","infix fun ownedBy(owner: AbstractParty): Cash.State","net.corda.finance.contracts.asset.Cash.State.ownedBy"]},{"name":"infix fun withDeposit(deposit: PartyAndReference): Cash.State","description":"net.corda.finance.contracts.asset.Cash.State.withDeposit","location":"docs/net.corda.finance.contracts.asset/-cash/-state/with-deposit.html","searchKeys":["withDeposit","infix fun withDeposit(deposit: PartyAndReference): Cash.State","net.corda.finance.contracts.asset.Cash.State.withDeposit"]},{"name":"infix inline fun String.using(expr: Boolean)","description":"net.corda.core.contracts.Requirements.using","location":"docs/net.corda.core.contracts/-requirements/using.html","searchKeys":["using","infix inline fun String.using(expr: Boolean)","net.corda.core.contracts.Requirements.using"]},{"name":"inline fun <A> builder(block: Builder.() -> A): A","description":"net.corda.core.node.services.vault.builder","location":"docs/net.corda.core.node.services.vault/builder.html","searchKeys":["builder","inline fun <A> builder(block: Builder.() -> A): A","net.corda.core.node.services.vault.builder"]},{"name":"inline fun <A> run(providedExecutorService: ExecutorService? = null, block: ShutdownManager.() -> A): A","description":"net.corda.testing.node.internal.ShutdownManager.Companion.run","location":"docs/net.corda.testing.node.internal/-shutdown-manager/-companion/run.html","searchKeys":["run","inline fun <A> run(providedExecutorService: ExecutorService? = null, block: ShutdownManager.() -> A): A","net.corda.testing.node.internal.ShutdownManager.Companion.run"]},{"name":"inline fun <A> use(username: String, password: String, block: (CordaRPCConnection) -> A): A","description":"net.corda.client.rpc.CordaRPCClient.use","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/use.html","searchKeys":["use","inline fun <A> use(username: String, password: String, block: (CordaRPCConnection) -> A): A","net.corda.client.rpc.CordaRPCClient.use"]},{"name":"inline fun <B, C> combine(other: Try<B>, function: (A, B) -> C): Try<C>","description":"net.corda.core.utilities.Try.combine","location":"docs/net.corda.core.utilities/-try/combine.html","searchKeys":["combine","inline fun <B, C> combine(other: Try<B>, function: (A, B) -> C): Try<C>","net.corda.core.utilities.Try.combine"]},{"name":"inline fun <B> flatMap(function: (A) -> Try<B>): Try<B>","description":"net.corda.core.utilities.Try.flatMap","location":"docs/net.corda.core.utilities/-try/flat-map.html","searchKeys":["flatMap","inline fun <B> flatMap(function: (A) -> Try<B>): Try<B>","net.corda.core.utilities.Try.flatMap"]},{"name":"inline fun <B> map(function: (A) -> B): Try<B>","description":"net.corda.core.utilities.Try.map","location":"docs/net.corda.core.utilities/-try/map.html","searchKeys":["map","inline fun <B> map(function: (A) -> B): Try<B>","net.corda.core.utilities.Try.map"]},{"name":"inline fun <C : Any> startJavaProcess(arguments: List<String>, classPath: List<String> = defaultClassPath, workingDirectory: Path? = null, jdwpPort: Int? = null, extraJvmArguments: List<String> = emptyList(), maximumHeapSize: String? = null, environmentVariables: Map<String, String> = emptyMap()): Process","description":"net.corda.testing.node.internal.ProcessUtilities.startJavaProcess","location":"docs/net.corda.testing.node.internal/-process-utilities/start-java-process.html","searchKeys":["startJavaProcess","inline fun <C : Any> startJavaProcess(arguments: List<String>, classPath: List<String> = defaultClassPath, workingDirectory: Path? = null, jdwpPort: Int? = null, extraJvmArguments: List<String> = emptyList(), maximumHeapSize: String? = null, environmentVariables: Map<String, String> = emptyMap()): Process","net.corda.testing.node.internal.ProcessUtilities.startJavaProcess"]},{"name":"inline fun <Error class: unknown class>.debug(msg: () -> String)","description":"net.corda.core.utilities.debug","location":"docs/net.corda.core.utilities/debug.html","searchKeys":["debug","inline fun <Error class: unknown class>.debug(msg: () -> String)","net.corda.core.utilities.debug"]},{"name":"inline fun <Error class: unknown class>.jsonObject(fieldName: String? = null, gen: <Error class: unknown class>.() -> Unit)","description":"net.corda.client.jackson.internal.jsonObject","location":"docs/net.corda.client.jackson.internal/json-object.html","searchKeys":["jsonObject","inline fun <Error class: unknown class>.jsonObject(fieldName: String? = null, gen: <Error class: unknown class>.() -> Unit)","net.corda.client.jackson.internal.jsonObject"]},{"name":"inline fun <Error class: unknown class>.trace(msg: () -> String)","description":"net.corda.core.utilities.trace","location":"docs/net.corda.core.utilities/trace.html","searchKeys":["trace","inline fun <Error class: unknown class>.trace(msg: () -> String)","net.corda.core.utilities.trace"]},{"name":"inline fun <I : RPCOps> RPCDriverDSL.startInVmRpcClient(username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): <Error class: unknown class>","description":"net.corda.testing.node.internal.startInVmRpcClient","location":"docs/net.corda.testing.node.internal/start-in-vm-rpc-client.html","searchKeys":["startInVmRpcClient","inline fun <I : RPCOps> RPCDriverDSL.startInVmRpcClient(username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): <Error class: unknown class>","net.corda.testing.node.internal.startInVmRpcClient"]},{"name":"inline fun <I : RPCOps> RPCDriverDSL.startRandomRpcClient(hostAndPort: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password): CordaFuture<Process>","description":"net.corda.testing.node.internal.startRandomRpcClient","location":"docs/net.corda.testing.node.internal/start-random-rpc-client.html","searchKeys":["startRandomRpcClient","inline fun <I : RPCOps> RPCDriverDSL.startRandomRpcClient(hostAndPort: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password): CordaFuture<Process>","net.corda.testing.node.internal.startRandomRpcClient"]},{"name":"inline fun <I : RPCOps> RPCDriverDSL.startRpcClient(haAddressPool: List<NetworkHostAndPort>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): <Error class: unknown class>","description":"net.corda.testing.node.internal.startRpcClient","location":"docs/net.corda.testing.node.internal/start-rpc-client.html","searchKeys":["startRpcClient","inline fun <I : RPCOps> RPCDriverDSL.startRpcClient(haAddressPool: List<NetworkHostAndPort>, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): <Error class: unknown class>","net.corda.testing.node.internal.startRpcClient"]},{"name":"inline fun <I : RPCOps> RPCDriverDSL.startRpcClient(rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): <Error class: unknown class>","description":"net.corda.testing.node.internal.startRpcClient","location":"docs/net.corda.testing.node.internal/start-rpc-client.html","searchKeys":["startRpcClient","inline fun <I : RPCOps> RPCDriverDSL.startRpcClient(rpcAddress: NetworkHostAndPort, username: String = rpcTestUser.username, password: String = rpcTestUser.password, configuration: CordaRPCClientConfiguration = CordaRPCClientConfiguration.DEFAULT): <Error class: unknown class>","net.corda.testing.node.internal.startRpcClient"]},{"name":"inline fun <K, V> Iterable<V>.groupByMultipleKeys(keysSelector: (V) -> Iterable<K>, onDuplicate: (K, V, V) -> Unit = { key, value1, value2 -> throw IllegalArgumentException(\"Duplicate mapping for $key ($value1, $value2)\") }): Map<K, V>","description":"net.corda.core.internal.groupByMultipleKeys","location":"docs/net.corda.core.internal/group-by-multiple-keys.html","searchKeys":["groupByMultipleKeys","inline fun <K, V> Iterable<V>.groupByMultipleKeys(keysSelector: (V) -> Iterable<K>, onDuplicate: (K, V, V) -> Unit = { key, value1, value2 -> throw IllegalArgumentException(\"Duplicate mapping for $key ($value1, $value2)\") }): Map<K, V>","net.corda.core.internal.groupByMultipleKeys"]},{"name":"inline fun <P : FlowLogic<*>> TestStartedNode.registerCordappFlowFactory(initiatingFlowClass: KClass<out FlowLogic<*>>, initiatedFlowVersion: Int = 1, noinline flowFactory: (FlowSession) -> P): CordaFuture<P>","description":"net.corda.testing.flows.registerCordappFlowFactory","location":"docs/net.corda.testing.flows/register-cordapp-flow-factory.html","searchKeys":["registerCordappFlowFactory","inline fun <P : FlowLogic<*>> TestStartedNode.registerCordappFlowFactory(initiatingFlowClass: KClass<out FlowLogic<*>>, initiatedFlowVersion: Int = 1, noinline flowFactory: (FlowSession) -> P): CordaFuture<P>","net.corda.testing.flows.registerCordappFlowFactory"]},{"name":"inline fun <R : Any> FlowLogic<*>.receiveAll(session: FlowSession, vararg sessions: FlowSession): List<UntrustworthyData<R>>","description":"net.corda.testing.flows.receiveAll","location":"docs/net.corda.testing.flows/receive-all.html","searchKeys":["receiveAll","inline fun <R : Any> FlowLogic<*>.receiveAll(session: FlowSession, vararg sessions: FlowSession): List<UntrustworthyData<R>>","net.corda.testing.flows.receiveAll"]},{"name":"inline fun <R : Any> receive(): UntrustworthyData<R>","description":"net.corda.core.flows.FlowSession.receive","location":"docs/net.corda.core.flows/-flow-session/receive.html","searchKeys":["receive","inline fun <R : Any> receive(): UntrustworthyData<R>","net.corda.core.flows.FlowSession.receive"]},{"name":"inline fun <R : Any> receive(otherParty: Party): UntrustworthyData<R>","description":"net.corda.core.flows.FlowLogic.receive","location":"docs/net.corda.core.flows/-flow-logic/receive.html","searchKeys":["receive","inline fun <R : Any> receive(otherParty: Party): UntrustworthyData<R>","net.corda.core.flows.FlowLogic.receive"]},{"name":"inline fun <R : Any> sendAndReceive(otherParty: Party, payload: Any): UntrustworthyData<R>","description":"net.corda.core.flows.FlowLogic.sendAndReceive","location":"docs/net.corda.core.flows/-flow-logic/send-and-receive.html","searchKeys":["sendAndReceive","inline fun <R : Any> sendAndReceive(otherParty: Party, payload: Any): UntrustworthyData<R>","net.corda.core.flows.FlowLogic.sendAndReceive"]},{"name":"inline fun <R : Any> sendAndReceive(payload: Any): UntrustworthyData<R>","description":"net.corda.core.flows.FlowSession.sendAndReceive","location":"docs/net.corda.core.flows/-flow-session/send-and-receive.html","searchKeys":["sendAndReceive","inline fun <R : Any> sendAndReceive(payload: Any): UntrustworthyData<R>","net.corda.core.flows.FlowSession.sendAndReceive"]},{"name":"inline fun <R> Path.read(vararg options: OpenOption, block: (InputStream) -> R): R","description":"net.corda.core.internal.read","location":"docs/net.corda.core.internal/read.html","searchKeys":["read","inline fun <R> Path.read(vararg options: OpenOption, block: (InputStream) -> R): R","net.corda.core.internal.read"]},{"name":"inline fun <R> alreadyLocked(body: T.() -> R): R","description":"net.corda.core.internal.ThreadBox.alreadyLocked","location":"docs/net.corda.core.internal/-thread-box/already-locked.html","searchKeys":["alreadyLocked","inline fun <R> alreadyLocked(body: T.() -> R): R","net.corda.core.internal.ThreadBox.alreadyLocked"]},{"name":"inline fun <R> locked(body: T.() -> R): R","description":"net.corda.core.internal.ThreadBox.locked","location":"docs/net.corda.core.internal/-thread-box/locked.html","searchKeys":["locked","inline fun <R> locked(body: T.() -> R): R","net.corda.core.internal.ThreadBox.locked"]},{"name":"inline fun <R> requireThat(body: Requirements.() -> R): R","description":"net.corda.core.contracts.requireThat","location":"docs/net.corda.core.contracts/require-that.html","searchKeys":["requireThat","inline fun <R> requireThat(body: Requirements.() -> R): R","net.corda.core.contracts.requireThat"]},{"name":"inline fun <R> run(stickToOrNull: Any? = null, withInstance: (A) -> R): R","description":"net.corda.core.internal.LazyStickyPool.run","location":"docs/net.corda.core.internal/-lazy-sticky-pool/run.html","searchKeys":["run","inline fun <R> run(stickToOrNull: Any? = null, withInstance: (A) -> R): R","net.corda.core.internal.LazyStickyPool.run"]},{"name":"inline fun <R> run(withInstance: (A) -> R): R","description":"net.corda.core.internal.LazyPool.run","location":"docs/net.corda.core.internal/-lazy-pool/run.html","searchKeys":["run","inline fun <R> run(withInstance: (A) -> R): R","net.corda.core.internal.LazyPool.run"]},{"name":"inline fun <R> span(name: String, attributes: Map<String, String> = emptyMap(), flowLogic: FlowLogic<*>? = null, block: () -> R): R","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.span","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/span.html","searchKeys":["span","inline fun <R> span(name: String, attributes: Map<String, String> = emptyMap(), flowLogic: FlowLogic<*>? = null, block: () -> R): R","net.corda.core.internal.telemetry.TelemetryServiceImpl.span"]},{"name":"inline fun <R> spanForFlow(name: String, attributes: Map<String, String>, flowLogic: FlowLogic<*>? = null, remoteSerializedTelemetry: SerializedTelemetry? = null, block: () -> R): R","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.spanForFlow","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/span-for-flow.html","searchKeys":["spanForFlow","inline fun <R> spanForFlow(name: String, attributes: Map<String, String>, flowLogic: FlowLogic<*>? = null, remoteSerializedTelemetry: SerializedTelemetry? = null, block: () -> R): R","net.corda.core.internal.telemetry.TelemetryServiceImpl.spanForFlow"]},{"name":"inline fun <ReceiveType> receiveResultOrTiming(session: FlowSession): UntrustworthyData<ReceiveType>","description":"net.corda.core.internal.BackpressureAwareTimedFlow.receiveResultOrTiming","location":"docs/net.corda.core.internal/-backpressure-aware-timed-flow/receive-result-or-timing.html","searchKeys":["receiveResultOrTiming","inline fun <ReceiveType> receiveResultOrTiming(session: FlowSession): UntrustworthyData<ReceiveType>","net.corda.core.internal.BackpressureAwareTimedFlow.receiveResultOrTiming"]},{"name":"inline fun <S : ContractState> String.output(): S","description":"net.corda.testing.dsl.LedgerDSL.output","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/output.html","searchKeys":["output","inline fun <S : ContractState> String.output(): S","net.corda.testing.dsl.LedgerDSL.output"]},{"name":"inline fun <S : ContractState> String.outputStateAndRef(): StateAndRef<S>","description":"net.corda.testing.dsl.LedgerDSL.outputStateAndRef","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/output-state-and-ref.html","searchKeys":["outputStateAndRef","inline fun <S : ContractState> String.outputStateAndRef(): StateAndRef<S>","net.corda.testing.dsl.LedgerDSL.outputStateAndRef"]},{"name":"inline fun <T : Any> <Error class: unknown class>.childrenAs(mapper: <Error class: unknown class>): List<T>","description":"net.corda.client.jackson.internal.childrenAs","location":"docs/net.corda.client.jackson.internal/children-as.html","searchKeys":["childrenAs","inline fun <T : Any> <Error class: unknown class>.childrenAs(mapper: <Error class: unknown class>): List<T>","net.corda.client.jackson.internal.childrenAs"]},{"name":"inline fun <T : Any> <Error class: unknown class>.valueAs(mapper: <Error class: unknown class>): T","description":"net.corda.client.jackson.internal.valueAs","location":"docs/net.corda.client.jackson.internal/value-as.html","searchKeys":["valueAs","inline fun <T : Any> <Error class: unknown class>.valueAs(mapper: <Error class: unknown class>): T","net.corda.client.jackson.internal.valueAs"]},{"name":"inline fun <T : Any> Blob.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","description":"net.corda.core.serialization.deserialize","location":"docs/net.corda.core.serialization/deserialize.html","searchKeys":["deserialize","inline fun <T : Any> Blob.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","net.corda.core.serialization.deserialize"]},{"name":"inline fun <T : Any> ByteArray.checkpointDeserialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): T","description":"net.corda.core.serialization.internal.checkpointDeserialize","location":"docs/net.corda.core.serialization.internal/checkpoint-deserialize.html","searchKeys":["checkpointDeserialize","inline fun <T : Any> ByteArray.checkpointDeserialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): T","net.corda.core.serialization.internal.checkpointDeserialize"]},{"name":"inline fun <T : Any> ByteArray.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","description":"net.corda.core.serialization.deserialize","location":"docs/net.corda.core.serialization/deserialize.html","searchKeys":["deserialize","inline fun <T : Any> ByteArray.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","net.corda.core.serialization.deserialize"]},{"name":"inline fun <T : Any> ByteSequence.checkpointDeserialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): T","description":"net.corda.core.serialization.internal.checkpointDeserialize","location":"docs/net.corda.core.serialization.internal/checkpoint-deserialize.html","searchKeys":["checkpointDeserialize","inline fun <T : Any> ByteSequence.checkpointDeserialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): T","net.corda.core.serialization.internal.checkpointDeserialize"]},{"name":"inline fun <T : Any> ByteSequence.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","description":"net.corda.core.serialization.deserialize","location":"docs/net.corda.core.serialization/deserialize.html","searchKeys":["deserialize","inline fun <T : Any> ByteSequence.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","net.corda.core.serialization.deserialize"]},{"name":"inline fun <T : Any> ByteSequence.deserializeWithCompatibleContext(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): ObjectWithCompatibleContext<T>","description":"net.corda.core.serialization.deserializeWithCompatibleContext","location":"docs/net.corda.core.serialization/deserialize-with-compatible-context.html","searchKeys":["deserializeWithCompatibleContext","inline fun <T : Any> ByteSequence.deserializeWithCompatibleContext(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): ObjectWithCompatibleContext<T>","net.corda.core.serialization.deserializeWithCompatibleContext"]},{"name":"inline fun <T : Any> HttpURLConnection.responseAs(): T","description":"net.corda.core.internal.responseAs","location":"docs/net.corda.core.internal/response-as.html","searchKeys":["responseAs","inline fun <T : Any> HttpURLConnection.responseAs(): T","net.corda.core.internal.responseAs"]},{"name":"inline fun <T : Any> InputStream.readObject(): T","description":"net.corda.core.internal.readObject","location":"docs/net.corda.core.internal/read-object.html","searchKeys":["readObject","inline fun <T : Any> InputStream.readObject(): T","net.corda.core.internal.readObject"]},{"name":"inline fun <T : Any> Path.readObject(): T","description":"net.corda.core.internal.readObject","location":"docs/net.corda.core.internal/read-object.html","searchKeys":["readObject","inline fun <T : Any> Path.readObject(): T","net.corda.core.internal.readObject"]},{"name":"inline fun <T : Any> SerializedBytes<T>.checkpointDeserialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): T","description":"net.corda.core.serialization.internal.checkpointDeserialize","location":"docs/net.corda.core.serialization.internal/checkpoint-deserialize.html","searchKeys":["checkpointDeserialize","inline fun <T : Any> SerializedBytes<T>.checkpointDeserialize(context: CheckpointSerializationContext = effectiveSerializationEnv.checkpointContext): T","net.corda.core.serialization.internal.checkpointDeserialize"]},{"name":"inline fun <T : Any> SerializedBytes<T>.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","description":"net.corda.core.serialization.deserialize","location":"docs/net.corda.core.serialization/deserialize.html","searchKeys":["deserialize","inline fun <T : Any> SerializedBytes<T>.deserialize(serializationFactory: SerializationFactory = SerializationFactory.defaultFactory, context: SerializationContext = serializationFactory.defaultContext): T","net.corda.core.serialization.deserialize"]},{"name":"inline fun <T : Any> SerializedBytes<T>.sign(signer: (SerializedBytes<T>) -> DigitalSignature.WithKey): SignedData<T>","description":"net.corda.core.internal.sign","location":"docs/net.corda.core.internal/sign.html","searchKeys":["sign","inline fun <T : Any> SerializedBytes<T>.sign(signer: (SerializedBytes<T>) -> DigitalSignature.WithKey): SignedData<T>","net.corda.core.internal.sign"]},{"name":"inline fun <T : Any> T.amqpSpecific(reason: String, function: () -> Unit)","description":"net.corda.testing.internal.amqpSpecific","location":"docs/net.corda.testing.internal/amqp-specific.html","searchKeys":["amqpSpecific","inline fun <T : Any> T.amqpSpecific(reason: String, function: () -> Unit)","net.corda.testing.internal.amqpSpecific"]},{"name":"inline fun <T : Any> T.kryoSpecific(reason: String, function: () -> Unit)","description":"net.corda.testing.internal.kryoSpecific","location":"docs/net.corda.testing.internal/kryo-specific.html","searchKeys":["kryoSpecific","inline fun <T : Any> T.kryoSpecific(reason: String, function: () -> Unit)","net.corda.testing.internal.kryoSpecific"]},{"name":"inline fun <T : Any> T.signWithCert(signer: (SerializedBytes<T>) -> DigitalSignatureWithCert): SignedDataWithCert<T>","description":"net.corda.core.internal.signWithCert","location":"docs/net.corda.core.internal/sign-with-cert.html","searchKeys":["signWithCert","inline fun <T : Any> T.signWithCert(signer: (SerializedBytes<T>) -> DigitalSignatureWithCert): SignedDataWithCert<T>","net.corda.core.internal.signWithCert"]},{"name":"inline fun <T : Any> getJson(path: String, params: Map<String, String> = mapOf()): T","description":"net.corda.testing.http.HttpApi.getJson","location":"docs/net.corda.testing.http/-http-api/get-json.html","searchKeys":["getJson","inline fun <T : Any> getJson(path: String, params: Map<String, String> = mapOf()): T","net.corda.testing.http.HttpApi.getJson"]},{"name":"inline fun <T : Any> getJson(url: URL, params: Map<String, String> = mapOf(), mapper: <Error class: unknown class> = defaultMapper): T","description":"net.corda.testing.http.HttpUtils.getJson","location":"docs/net.corda.testing.http/-http-utils/get-json.html","searchKeys":["getJson","inline fun <T : Any> getJson(url: URL, params: Map<String, String> = mapOf(), mapper: <Error class: unknown class> = defaultMapper): T","net.corda.testing.http.HttpUtils.getJson"]},{"name":"inline fun <T : Any> loggerFor(): <Error class: unknown class>","description":"net.corda.core.utilities.loggerFor","location":"docs/net.corda.core.utilities/logger-for.html","searchKeys":["loggerFor","inline fun <T : Any> loggerFor(): <Error class: unknown class>","net.corda.core.utilities.loggerFor"]},{"name":"inline fun <T : CommandData> Collection<CommandWithParties<CommandData>>.requireSingleCommand(): Nothing","description":"net.corda.core.contracts.requireSingleCommand","location":"docs/net.corda.core.contracts/require-single-command.html","searchKeys":["requireSingleCommand","inline fun <T : CommandData> Collection<CommandWithParties<CommandData>>.requireSingleCommand(): Nothing","net.corda.core.contracts.requireSingleCommand"]},{"name":"inline fun <T : CommandData> Collection<CommandWithParties<CommandData>>.select(signer: PublicKey? = null, party: AbstractParty? = null): <Error class: unknown class>","description":"net.corda.core.contracts.select","location":"docs/net.corda.core.contracts/select.html","searchKeys":["select","inline fun <T : CommandData> Collection<CommandWithParties<CommandData>>.select(signer: PublicKey? = null, party: AbstractParty? = null): <Error class: unknown class>","net.corda.core.contracts.select"]},{"name":"inline fun <T : CommandData> Collection<CommandWithParties<CommandData>>.select(signers: Collection<PublicKey>?, parties: Collection<Party>?): <Error class: unknown class>","description":"net.corda.core.contracts.select","location":"docs/net.corda.core.contracts/select.html","searchKeys":["select","inline fun <T : CommandData> Collection<CommandWithParties<CommandData>>.select(signers: Collection<PublicKey>?, parties: Collection<Party>?): <Error class: unknown class>","net.corda.core.contracts.select"]},{"name":"inline fun <T : CommandData> commandsOfType(): List<Command<T>>","description":"net.corda.core.transactions.LedgerTransaction.commandsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/commands-of-type.html","searchKeys":["commandsOfType","inline fun <T : CommandData> commandsOfType(): List<Command<T>>","net.corda.core.transactions.LedgerTransaction.commandsOfType"]},{"name":"inline fun <T : CommandData> filterCommands(crossinline predicate: (T) -> Boolean): List<Command<T>>","description":"net.corda.core.transactions.LedgerTransaction.filterCommands","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-commands.html","searchKeys":["filterCommands","inline fun <T : CommandData> filterCommands(crossinline predicate: (T) -> Boolean): List<Command<T>>","net.corda.core.transactions.LedgerTransaction.filterCommands"]},{"name":"inline fun <T : CommandData> findCommand(crossinline predicate: (T) -> Boolean): Command<T>","description":"net.corda.core.transactions.LedgerTransaction.findCommand","location":"docs/net.corda.core.transactions/-ledger-transaction/find-command.html","searchKeys":["findCommand","inline fun <T : CommandData> findCommand(crossinline predicate: (T) -> Boolean): Command<T>","net.corda.core.transactions.LedgerTransaction.findCommand"]},{"name":"inline fun <T : ContractState, K : Any> groupStates(noinline selector: (T) -> K): List<LedgerTransaction.InOutGroup<T, K>>","description":"net.corda.core.transactions.LedgerTransaction.groupStates","location":"docs/net.corda.core.transactions/-ledger-transaction/group-states.html","searchKeys":["groupStates","inline fun <T : ContractState, K : Any> groupStates(noinline selector: (T) -> K): List<LedgerTransaction.InOutGroup<T, K>>","net.corda.core.transactions.LedgerTransaction.groupStates"]},{"name":"inline fun <T : ContractState> CordaRPCOps.vaultQueryBy(criteria: QueryCriteria = QueryCriteria.VaultQueryCriteria(), paging: PageSpecification = PageSpecification(), sorting: Sort = Sort(emptySet())): Vault.Page<T>","description":"net.corda.core.messaging.vaultQueryBy","location":"docs/net.corda.core.messaging/vault-query-by.html","searchKeys":["vaultQueryBy","inline fun <T : ContractState> CordaRPCOps.vaultQueryBy(criteria: QueryCriteria = QueryCriteria.VaultQueryCriteria(), paging: PageSpecification = PageSpecification(), sorting: Sort = Sort(emptySet())): Vault.Page<T>","net.corda.core.messaging.vaultQueryBy"]},{"name":"inline fun <T : ContractState> CordaRPCOps.vaultTrackBy(criteria: QueryCriteria = QueryCriteria.VaultQueryCriteria(), paging: PageSpecification = PageSpecification(), sorting: Sort = Sort(emptySet())): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.messaging.vaultTrackBy","location":"docs/net.corda.core.messaging/vault-track-by.html","searchKeys":["vaultTrackBy","inline fun <T : ContractState> CordaRPCOps.vaultTrackBy(criteria: QueryCriteria = QueryCriteria.VaultQueryCriteria(), paging: PageSpecification = PageSpecification(), sorting: Sort = Sort(emptySet())): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.messaging.vaultTrackBy"]},{"name":"inline fun <T : ContractState> Iterable<StateAndRef<ContractState>>.filterStatesOfType(): List<StateAndRef<T>>","description":"net.corda.core.contracts.filterStatesOfType","location":"docs/net.corda.core.contracts/filter-states-of-type.html","searchKeys":["filterStatesOfType","inline fun <T : ContractState> Iterable<StateAndRef<ContractState>>.filterStatesOfType(): List<StateAndRef<T>>","net.corda.core.contracts.filterStatesOfType"]},{"name":"inline fun <T : ContractState> VaultService.queryBy(): Vault.Page<T>","description":"net.corda.core.node.services.queryBy","location":"docs/net.corda.core.node.services/query-by.html","searchKeys":["queryBy","inline fun <T : ContractState> VaultService.queryBy(): Vault.Page<T>","net.corda.core.node.services.queryBy"]},{"name":"inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria): Vault.Page<T>","description":"net.corda.core.node.services.queryBy","location":"docs/net.corda.core.node.services/query-by.html","searchKeys":["queryBy","inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria): Vault.Page<T>","net.corda.core.node.services.queryBy"]},{"name":"inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<T>","description":"net.corda.core.node.services.queryBy","location":"docs/net.corda.core.node.services/query-by.html","searchKeys":["queryBy","inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria, paging: PageSpecification): Vault.Page<T>","net.corda.core.node.services.queryBy"]},{"name":"inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): Vault.Page<T>","description":"net.corda.core.node.services.queryBy","location":"docs/net.corda.core.node.services/query-by.html","searchKeys":["queryBy","inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): Vault.Page<T>","net.corda.core.node.services.queryBy"]},{"name":"inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<T>","description":"net.corda.core.node.services.queryBy","location":"docs/net.corda.core.node.services/query-by.html","searchKeys":["queryBy","inline fun <T : ContractState> VaultService.queryBy(criteria: QueryCriteria, sorting: Sort): Vault.Page<T>","net.corda.core.node.services.queryBy"]},{"name":"inline fun <T : ContractState> VaultService.queryBy(paging: PageSpecification): Vault.Page<T>","description":"net.corda.core.node.services.queryBy","location":"docs/net.corda.core.node.services/query-by.html","searchKeys":["queryBy","inline fun <T : ContractState> VaultService.queryBy(paging: PageSpecification): Vault.Page<T>","net.corda.core.node.services.queryBy"]},{"name":"inline fun <T : ContractState> VaultService.trackBy(): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.trackBy","location":"docs/net.corda.core.node.services/track-by.html","searchKeys":["trackBy","inline fun <T : ContractState> VaultService.trackBy(): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.trackBy"]},{"name":"inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.trackBy","location":"docs/net.corda.core.node.services/track-by.html","searchKeys":["trackBy","inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.trackBy"]},{"name":"inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.trackBy","location":"docs/net.corda.core.node.services/track-by.html","searchKeys":["trackBy","inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.trackBy"]},{"name":"inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.trackBy","location":"docs/net.corda.core.node.services/track-by.html","searchKeys":["trackBy","inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.trackBy"]},{"name":"inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.trackBy","location":"docs/net.corda.core.node.services/track-by.html","searchKeys":["trackBy","inline fun <T : ContractState> VaultService.trackBy(criteria: QueryCriteria, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.trackBy"]},{"name":"inline fun <T : ContractState> VaultService.trackBy(paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.trackBy","location":"docs/net.corda.core.node.services/track-by.html","searchKeys":["trackBy","inline fun <T : ContractState> VaultService.trackBy(paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.trackBy"]},{"name":"inline fun <T : ContractState> containsType(): Boolean","description":"net.corda.core.node.services.Vault.Update.containsType","location":"docs/net.corda.core.node.services/-vault/-update/contains-type.html","searchKeys":["containsType","inline fun <T : ContractState> containsType(): Boolean","net.corda.core.node.services.Vault.Update.containsType"]},{"name":"inline fun <T : ContractState> filterInRefs(crossinline predicate: (T) -> Boolean): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.filterInRefs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-in-refs.html","searchKeys":["filterInRefs","inline fun <T : ContractState> filterInRefs(crossinline predicate: (T) -> Boolean): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.filterInRefs"]},{"name":"inline fun <T : ContractState> filterInputs(crossinline predicate: (T) -> Boolean): List<T>","description":"net.corda.core.transactions.LedgerTransaction.filterInputs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-inputs.html","searchKeys":["filterInputs","inline fun <T : ContractState> filterInputs(crossinline predicate: (T) -> Boolean): List<T>","net.corda.core.transactions.LedgerTransaction.filterInputs"]},{"name":"inline fun <T : ContractState> filterOutRefs(crossinline predicate: (T) -> Boolean): List<StateAndRef<T>>","description":"net.corda.core.transactions.BaseTransaction.filterOutRefs","location":"docs/net.corda.core.transactions/-base-transaction/filter-out-refs.html","searchKeys":["filterOutRefs","inline fun <T : ContractState> filterOutRefs(crossinline predicate: (T) -> Boolean): List<StateAndRef<T>>","net.corda.core.transactions.BaseTransaction.filterOutRefs"]},{"name":"inline fun <T : ContractState> filterOutputs(crossinline predicate: (T) -> Boolean): List<T>","description":"net.corda.core.transactions.BaseTransaction.filterOutputs","location":"docs/net.corda.core.transactions/-base-transaction/filter-outputs.html","searchKeys":["filterOutputs","inline fun <T : ContractState> filterOutputs(crossinline predicate: (T) -> Boolean): List<T>","net.corda.core.transactions.BaseTransaction.filterOutputs"]},{"name":"inline fun <T : ContractState> filterReferenceInputRefs(crossinline predicate: (T) -> Boolean): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.filterReferenceInputRefs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-reference-input-refs.html","searchKeys":["filterReferenceInputRefs","inline fun <T : ContractState> filterReferenceInputRefs(crossinline predicate: (T) -> Boolean): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.filterReferenceInputRefs"]},{"name":"inline fun <T : ContractState> filterReferenceInputs(crossinline predicate: (T) -> Boolean): List<T>","description":"net.corda.core.transactions.LedgerTransaction.filterReferenceInputs","location":"docs/net.corda.core.transactions/-ledger-transaction/filter-reference-inputs.html","searchKeys":["filterReferenceInputs","inline fun <T : ContractState> filterReferenceInputs(crossinline predicate: (T) -> Boolean): List<T>","net.corda.core.transactions.LedgerTransaction.filterReferenceInputs"]},{"name":"inline fun <T : ContractState> findInRef(crossinline predicate: (T) -> Boolean): StateAndRef<T>","description":"net.corda.core.transactions.LedgerTransaction.findInRef","location":"docs/net.corda.core.transactions/-ledger-transaction/find-in-ref.html","searchKeys":["findInRef","inline fun <T : ContractState> findInRef(crossinline predicate: (T) -> Boolean): StateAndRef<T>","net.corda.core.transactions.LedgerTransaction.findInRef"]},{"name":"inline fun <T : ContractState> findInput(crossinline predicate: (T) -> Boolean): T","description":"net.corda.core.transactions.LedgerTransaction.findInput","location":"docs/net.corda.core.transactions/-ledger-transaction/find-input.html","searchKeys":["findInput","inline fun <T : ContractState> findInput(crossinline predicate: (T) -> Boolean): T","net.corda.core.transactions.LedgerTransaction.findInput"]},{"name":"inline fun <T : ContractState> findOutRef(crossinline predicate: (T) -> Boolean): StateAndRef<T>","description":"net.corda.core.transactions.BaseTransaction.findOutRef","location":"docs/net.corda.core.transactions/-base-transaction/find-out-ref.html","searchKeys":["findOutRef","inline fun <T : ContractState> findOutRef(crossinline predicate: (T) -> Boolean): StateAndRef<T>","net.corda.core.transactions.BaseTransaction.findOutRef"]},{"name":"inline fun <T : ContractState> findOutput(crossinline predicate: (T) -> Boolean): T","description":"net.corda.core.transactions.BaseTransaction.findOutput","location":"docs/net.corda.core.transactions/-base-transaction/find-output.html","searchKeys":["findOutput","inline fun <T : ContractState> findOutput(crossinline predicate: (T) -> Boolean): T","net.corda.core.transactions.BaseTransaction.findOutput"]},{"name":"inline fun <T : ContractState> findReference(crossinline predicate: (T) -> Boolean): T","description":"net.corda.core.transactions.LedgerTransaction.findReference","location":"docs/net.corda.core.transactions/-ledger-transaction/find-reference.html","searchKeys":["findReference","inline fun <T : ContractState> findReference(crossinline predicate: (T) -> Boolean): T","net.corda.core.transactions.LedgerTransaction.findReference"]},{"name":"inline fun <T : ContractState> findReferenceInputRef(crossinline predicate: (T) -> Boolean): StateAndRef<T>","description":"net.corda.core.transactions.LedgerTransaction.findReferenceInputRef","location":"docs/net.corda.core.transactions/-ledger-transaction/find-reference-input-ref.html","searchKeys":["findReferenceInputRef","inline fun <T : ContractState> findReferenceInputRef(crossinline predicate: (T) -> Boolean): StateAndRef<T>","net.corda.core.transactions.LedgerTransaction.findReferenceInputRef"]},{"name":"inline fun <T : ContractState> inRefsOfType(): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.inRefsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/in-refs-of-type.html","searchKeys":["inRefsOfType","inline fun <T : ContractState> inRefsOfType(): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.inRefsOfType"]},{"name":"inline fun <T : ContractState> inputsOfType(): List<T>","description":"net.corda.core.transactions.LedgerTransaction.inputsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/inputs-of-type.html","searchKeys":["inputsOfType","inline fun <T : ContractState> inputsOfType(): List<T>","net.corda.core.transactions.LedgerTransaction.inputsOfType"]},{"name":"inline fun <T : ContractState> outRefsOfType(): List<StateAndRef<T>>","description":"net.corda.core.transactions.BaseTransaction.outRefsOfType","location":"docs/net.corda.core.transactions/-base-transaction/out-refs-of-type.html","searchKeys":["outRefsOfType","inline fun <T : ContractState> outRefsOfType(): List<StateAndRef<T>>","net.corda.core.transactions.BaseTransaction.outRefsOfType"]},{"name":"inline fun <T : ContractState> outputsOfType(): List<T>","description":"net.corda.core.transactions.BaseTransaction.outputsOfType","location":"docs/net.corda.core.transactions/-base-transaction/outputs-of-type.html","searchKeys":["outputsOfType","inline fun <T : ContractState> outputsOfType(): List<T>","net.corda.core.transactions.BaseTransaction.outputsOfType"]},{"name":"inline fun <T : ContractState> referenceInputRefsOfType(): List<StateAndRef<T>>","description":"net.corda.core.transactions.LedgerTransaction.referenceInputRefsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/reference-input-refs-of-type.html","searchKeys":["referenceInputRefsOfType","inline fun <T : ContractState> referenceInputRefsOfType(): List<StateAndRef<T>>","net.corda.core.transactions.LedgerTransaction.referenceInputRefsOfType"]},{"name":"inline fun <T : ContractState> referenceInputsOfType(): List<T>","description":"net.corda.core.transactions.LedgerTransaction.referenceInputsOfType","location":"docs/net.corda.core.transactions/-ledger-transaction/reference-inputs-of-type.html","searchKeys":["referenceInputsOfType","inline fun <T : ContractState> referenceInputsOfType(): List<T>","net.corda.core.transactions.LedgerTransaction.referenceInputsOfType"]},{"name":"inline fun <T : ContractState> staticPointer(stateAndRef: StateAndRef<T>, isResolved: Boolean = false): <Error class: unknown class>","description":"net.corda.core.contracts.StatePointer.Companion.staticPointer","location":"docs/net.corda.core.contracts/-state-pointer/-companion/static-pointer.html","searchKeys":["staticPointer","inline fun <T : ContractState> staticPointer(stateAndRef: StateAndRef<T>, isResolved: Boolean = false): <Error class: unknown class>","net.corda.core.contracts.StatePointer.Companion.staticPointer"]},{"name":"inline fun <T : LinearState> linearPointer(state: T, isResolved: Boolean = true): <Error class: unknown class>","description":"net.corda.core.contracts.StatePointer.Companion.linearPointer","location":"docs/net.corda.core.contracts/-state-pointer/-companion/linear-pointer.html","searchKeys":["linearPointer","inline fun <T : LinearState> linearPointer(state: T, isResolved: Boolean = true): <Error class: unknown class>","net.corda.core.contracts.StatePointer.Companion.linearPointer"]},{"name":"inline fun <T : MoveCommand> verifyMoveCommand(inputs: List<OwnableState>, commands: List<CommandWithParties<CommandData>>): MoveCommand","description":"net.corda.core.contracts.verifyMoveCommand","location":"docs/net.corda.core.contracts/verify-move-command.html","searchKeys":["verifyMoveCommand","inline fun <T : MoveCommand> verifyMoveCommand(inputs: List<OwnableState>, commands: List<CommandWithParties<CommandData>>): MoveCommand","net.corda.core.contracts.verifyMoveCommand"]},{"name":"inline fun <T, A, B, C, D, E, F, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C, D, E, F) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E, arg5: F): FlowHandle<T>","description":"net.corda.core.messaging.startFlow","location":"docs/net.corda.core.messaging/start-flow.html","searchKeys":["startFlow","inline fun <T, A, B, C, D, E, F, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C, D, E, F) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E, arg5: F): FlowHandle<T>","net.corda.core.messaging.startFlow"]},{"name":"inline fun <T, A, B, C, D, E, F, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C, D, E, F) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E, arg5: F): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.startFlowWithClientId","location":"docs/net.corda.core.messaging/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","inline fun <T, A, B, C, D, E, F, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C, D, E, F) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E, arg5: F): FlowHandleWithClientId<T>","net.corda.core.messaging.startFlowWithClientId"]},{"name":"inline fun <T, A, B, C, D, E, F, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C, D, E, F) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E, arg5: F): FlowProgressHandle<T>","description":"net.corda.core.messaging.startTrackedFlow","location":"docs/net.corda.core.messaging/start-tracked-flow.html","searchKeys":["startTrackedFlow","inline fun <T, A, B, C, D, E, F, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C, D, E, F) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E, arg5: F): FlowProgressHandle<T>","net.corda.core.messaging.startTrackedFlow"]},{"name":"inline fun <T, A, B, C, D, E, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C, D, E) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E): FlowHandle<T>","description":"net.corda.core.messaging.startFlow","location":"docs/net.corda.core.messaging/start-flow.html","searchKeys":["startFlow","inline fun <T, A, B, C, D, E, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C, D, E) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E): FlowHandle<T>","net.corda.core.messaging.startFlow"]},{"name":"inline fun <T, A, B, C, D, E, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C, D, E) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.startFlowWithClientId","location":"docs/net.corda.core.messaging/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","inline fun <T, A, B, C, D, E, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C, D, E) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E): FlowHandleWithClientId<T>","net.corda.core.messaging.startFlowWithClientId"]},{"name":"inline fun <T, A, B, C, D, E, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C, D, E) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E): FlowProgressHandle<T>","description":"net.corda.core.messaging.startTrackedFlow","location":"docs/net.corda.core.messaging/start-tracked-flow.html","searchKeys":["startTrackedFlow","inline fun <T, A, B, C, D, E, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C, D, E) -> R, arg0: A, arg1: B, arg2: C, arg3: D, arg4: E): FlowProgressHandle<T>","net.corda.core.messaging.startTrackedFlow"]},{"name":"inline fun <T, A, B, C, D, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C, D) -> R, arg0: A, arg1: B, arg2: C, arg3: D): FlowHandle<T>","description":"net.corda.core.messaging.startFlow","location":"docs/net.corda.core.messaging/start-flow.html","searchKeys":["startFlow","inline fun <T, A, B, C, D, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C, D) -> R, arg0: A, arg1: B, arg2: C, arg3: D): FlowHandle<T>","net.corda.core.messaging.startFlow"]},{"name":"inline fun <T, A, B, C, D, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C, D) -> R, arg0: A, arg1: B, arg2: C, arg3: D): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.startFlowWithClientId","location":"docs/net.corda.core.messaging/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","inline fun <T, A, B, C, D, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C, D) -> R, arg0: A, arg1: B, arg2: C, arg3: D): FlowHandleWithClientId<T>","net.corda.core.messaging.startFlowWithClientId"]},{"name":"inline fun <T, A, B, C, D, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C, D) -> R, arg0: A, arg1: B, arg2: C, arg3: D): FlowProgressHandle<T>","description":"net.corda.core.messaging.startTrackedFlow","location":"docs/net.corda.core.messaging/start-tracked-flow.html","searchKeys":["startTrackedFlow","inline fun <T, A, B, C, D, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C, D) -> R, arg0: A, arg1: B, arg2: C, arg3: D): FlowProgressHandle<T>","net.corda.core.messaging.startTrackedFlow"]},{"name":"inline fun <T, A, B, C, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C) -> R, arg0: A, arg1: B, arg2: C): FlowHandle<T>","description":"net.corda.core.messaging.startFlow","location":"docs/net.corda.core.messaging/start-flow.html","searchKeys":["startFlow","inline fun <T, A, B, C, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B, C) -> R, arg0: A, arg1: B, arg2: C): FlowHandle<T>","net.corda.core.messaging.startFlow"]},{"name":"inline fun <T, A, B, C, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C) -> R, arg0: A, arg1: B, arg2: C): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.startFlowWithClientId","location":"docs/net.corda.core.messaging/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","inline fun <T, A, B, C, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B, C) -> R, arg0: A, arg1: B, arg2: C): FlowHandleWithClientId<T>","net.corda.core.messaging.startFlowWithClientId"]},{"name":"inline fun <T, A, B, C, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C) -> R, arg0: A, arg1: B, arg2: C): FlowProgressHandle<T>","description":"net.corda.core.messaging.startTrackedFlow","location":"docs/net.corda.core.messaging/start-tracked-flow.html","searchKeys":["startTrackedFlow","inline fun <T, A, B, C, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B, C) -> R, arg0: A, arg1: B, arg2: C): FlowProgressHandle<T>","net.corda.core.messaging.startTrackedFlow"]},{"name":"inline fun <T, A, B, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B) -> R, arg0: A, arg1: B): FlowHandle<T>","description":"net.corda.core.messaging.startFlow","location":"docs/net.corda.core.messaging/start-flow.html","searchKeys":["startFlow","inline fun <T, A, B, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A, B) -> R, arg0: A, arg1: B): FlowHandle<T>","net.corda.core.messaging.startFlow"]},{"name":"inline fun <T, A, B, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B) -> R, arg0: A, arg1: B): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.startFlowWithClientId","location":"docs/net.corda.core.messaging/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","inline fun <T, A, B, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A, B) -> R, arg0: A, arg1: B): FlowHandleWithClientId<T>","net.corda.core.messaging.startFlowWithClientId"]},{"name":"inline fun <T, A, B, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B) -> R, arg0: A, arg1: B): FlowProgressHandle<T>","description":"net.corda.core.messaging.startTrackedFlow","location":"docs/net.corda.core.messaging/start-tracked-flow.html","searchKeys":["startTrackedFlow","inline fun <T, A, B, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A, B) -> R, arg0: A, arg1: B): FlowProgressHandle<T>","net.corda.core.messaging.startTrackedFlow"]},{"name":"inline fun <T, A, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A) -> R, arg0: A): FlowHandle<T>","description":"net.corda.core.messaging.startFlow","location":"docs/net.corda.core.messaging/start-flow.html","searchKeys":["startFlow","inline fun <T, A, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: (A) -> R, arg0: A): FlowHandle<T>","net.corda.core.messaging.startFlow"]},{"name":"inline fun <T, A, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A) -> R, arg0: A): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.startFlowWithClientId","location":"docs/net.corda.core.messaging/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","inline fun <T, A, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: (A) -> R, arg0: A): FlowHandleWithClientId<T>","net.corda.core.messaging.startFlowWithClientId"]},{"name":"inline fun <T, A, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A) -> R, arg0: A): FlowProgressHandle<T>","description":"net.corda.core.messaging.startTrackedFlow","location":"docs/net.corda.core.messaging/start-tracked-flow.html","searchKeys":["startTrackedFlow","inline fun <T, A, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: (A) -> R, arg0: A): FlowProgressHandle<T>","net.corda.core.messaging.startTrackedFlow"]},{"name":"inline fun <T, R : Any> Stream<T>.mapNotNull(crossinline transform: (T) -> R?): Stream<R>","description":"net.corda.core.internal.mapNotNull","location":"docs/net.corda.core.internal/map-not-null.html","searchKeys":["mapNotNull","inline fun <T, R : Any> Stream<T>.mapNotNull(crossinline transform: (T) -> R?): Stream<R>","net.corda.core.internal.mapNotNull"]},{"name":"inline fun <T, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: () -> R): FlowHandle<T>","description":"net.corda.core.messaging.startFlow","location":"docs/net.corda.core.messaging/start-flow.html","searchKeys":["startFlow","inline fun <T, R : FlowLogic<T>> CordaRPCOps.startFlow(flowConstructor: () -> R): FlowHandle<T>","net.corda.core.messaging.startFlow"]},{"name":"inline fun <T, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: () -> R): FlowHandleWithClientId<T>","description":"net.corda.core.messaging.startFlowWithClientId","location":"docs/net.corda.core.messaging/start-flow-with-client-id.html","searchKeys":["startFlowWithClientId","inline fun <T, R : FlowLogic<T>> CordaRPCOps.startFlowWithClientId(clientId: String, flowConstructor: () -> R): FlowHandleWithClientId<T>","net.corda.core.messaging.startFlowWithClientId"]},{"name":"inline fun <T, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: () -> R): FlowProgressHandle<T>","description":"net.corda.core.messaging.startTrackedFlow","location":"docs/net.corda.core.messaging/start-tracked-flow.html","searchKeys":["startTrackedFlow","inline fun <T, R : FlowLogic<T>> CordaRPCOps.startTrackedFlow(flowConstructor: () -> R): FlowProgressHandle<T>","net.corda.core.messaging.startTrackedFlow"]},{"name":"inline fun <T, R> Collection<T>.flatMapToSet(transform: (T) -> Iterable<R>): Set<R>","description":"net.corda.core.internal.flatMapToSet","location":"docs/net.corda.core.internal/flat-map-to-set.html","searchKeys":["flatMapToSet","inline fun <T, R> Collection<T>.flatMapToSet(transform: (T) -> Iterable<R>): Set<R>","net.corda.core.internal.flatMapToSet"]},{"name":"inline fun <T, R> Collection<T>.mapToSet(transform: (T) -> R): Set<R>","description":"net.corda.core.internal.mapToSet","location":"docs/net.corda.core.internal/map-to-set.html","searchKeys":["mapToSet","inline fun <T, R> Collection<T>.mapToSet(transform: (T) -> R): Set<R>","net.corda.core.internal.mapToSet"]},{"name":"inline fun <T, R> UntrustworthyData<T>.unwrap(validator: (T) -> R): R","description":"net.corda.core.utilities.unwrap","location":"docs/net.corda.core.utilities/unwrap.html","searchKeys":["unwrap","inline fun <T, R> UntrustworthyData<T>.unwrap(validator: (T) -> R): R","net.corda.core.utilities.unwrap"]},{"name":"inline fun <T> <Error class: unknown class>.readValueAs(): T","description":"net.corda.client.jackson.internal.readValueAs","location":"docs/net.corda.client.jackson.internal/read-value-as.html","searchKeys":["readValueAs","inline fun <T> <Error class: unknown class>.readValueAs(): T","net.corda.client.jackson.internal.readValueAs"]},{"name":"inline fun <T> Iterable<T>.noneOrSingle(predicate: (T) -> Boolean): T?","description":"net.corda.core.internal.noneOrSingle","location":"docs/net.corda.core.internal/none-or-single.html","searchKeys":["noneOrSingle","inline fun <T> Iterable<T>.noneOrSingle(predicate: (T) -> Boolean): T?","net.corda.core.internal.noneOrSingle"]},{"name":"inline fun <T> Stream<out T>.toTypedArray(): Array<out T?>?","description":"net.corda.core.internal.toTypedArray","location":"docs/net.corda.core.internal/to-typed-array.html","searchKeys":["toTypedArray","inline fun <T> Stream<out T>.toTypedArray(): Array<out T?>?","net.corda.core.internal.toTypedArray"]},{"name":"inline fun <T> loadClassOfType(className: String, initialize: Boolean = true, classLoader: ClassLoader? = null): Class<out T>","description":"net.corda.core.internal.loadClassOfType","location":"docs/net.corda.core.internal/load-class-of-type.html","searchKeys":["loadClassOfType","inline fun <T> loadClassOfType(className: String, initialize: Boolean = true, classLoader: ClassLoader? = null): Class<out T>","net.corda.core.internal.loadClassOfType"]},{"name":"inline fun <T> on(body: () -> T): Try<T>","description":"net.corda.core.utilities.Try.Companion.on","location":"docs/net.corda.core.utilities/-try/-companion/on.html","searchKeys":["on","inline fun <T> on(body: () -> T): Try<T>","net.corda.core.utilities.Try.Companion.on"]},{"name":"inline fun <T> renderIfSupported(body: () -> T): T","description":"net.corda.core.internal.Emoji.renderIfSupported","location":"docs/net.corda.core.internal/-emoji/render-if-supported.html","searchKeys":["renderIfSupported","inline fun <T> renderIfSupported(body: () -> T): T","net.corda.core.internal.Emoji.renderIfSupported"]},{"name":"inline fun <T> withLevel(logName: String, levelName: String, block: () -> T): <Error class: unknown class>","description":"net.corda.testing.internal.LogHelper.withLevel","location":"docs/net.corda.testing.internal/-log-helper/with-level.html","searchKeys":["withLevel","inline fun <T> withLevel(logName: String, levelName: String, block: () -> T): <Error class: unknown class>","net.corda.testing.internal.LogHelper.withLevel"]},{"name":"inline fun JarOutputStream.addEntry(entry: ZipEntry, write: () -> Unit)","description":"net.corda.testing.node.internal.addEntry","location":"docs/net.corda.testing.node.internal/add-entry.html","searchKeys":["addEntry","inline fun JarOutputStream.addEntry(entry: ZipEntry, write: () -> Unit)","net.corda.testing.node.internal.addEntry"]},{"name":"inline fun Path.write(createDirs: Boolean = false, vararg options: OpenOption = emptyArray(), block: (OutputStream) -> Unit)","description":"net.corda.core.internal.write","location":"docs/net.corda.core.internal/write.html","searchKeys":["write","inline fun Path.write(createDirs: Boolean = false, vararg options: OpenOption = emptyArray(), block: (OutputStream) -> Unit)","net.corda.core.internal.write"]},{"name":"inline fun elapsedTime(block: () -> Unit): Duration","description":"net.corda.core.internal.elapsedTime","location":"docs/net.corda.core.internal/elapsed-time.html","searchKeys":["elapsedTime","inline fun elapsedTime(block: () -> Unit): Duration","net.corda.core.internal.elapsedTime"]},{"name":"inner class InMemoryNetworkMapService","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/index.html","searchKeys":["InMemoryNetworkMapService","inner class InMemoryNetworkMapService","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService"]},{"name":"inner class LocalNetworkMap(notaryInfos: List<NotaryInfo>)","description":"net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-local-network-map/index.html","searchKeys":["LocalNetworkMap","inner class LocalNetworkMap(notaryInfos: List<NotaryInfo>)","net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap"]},{"name":"inner class ParsedMethodCall(target: T?, val method: Method, val args: Array<Any?>) : Callable<Any?> ","description":"net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-parsed-method-call/index.html","searchKeys":["ParsedMethodCall","inner class ParsedMethodCall(target: T?, val method: Method, val args: Array<Any?>) : Callable<Any?> ","net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall"]},{"name":"interface AllPossibleRecipients : MessageRecipients","description":"net.corda.core.messaging.AllPossibleRecipients","location":"docs/net.corda.core.messaging/-all-possible-recipients/index.html","searchKeys":["AllPossibleRecipients","interface AllPossibleRecipients : MessageRecipients","net.corda.core.messaging.AllPossibleRecipients"]},{"name":"interface AndVisitor<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, S>, in S : BaseSort> : GenericQueryCriteria<Q, P> ","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-and-visitor/index.html","searchKeys":["AndVisitor","interface AndVisitor<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, S>, in S : BaseSort> : GenericQueryCriteria<Q, P> ","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor"]},{"name":"interface AppServiceHub : ServiceHub","description":"net.corda.core.node.AppServiceHub","location":"docs/net.corda.core.node/-app-service-hub/index.html","searchKeys":["AppServiceHub","interface AppServiceHub : ServiceHub","net.corda.core.node.AppServiceHub"]},{"name":"interface Attachment : NamedByHash","description":"net.corda.core.contracts.Attachment","location":"docs/net.corda.core.contracts/-attachment/index.html","searchKeys":["Attachment","interface Attachment : NamedByHash","net.corda.core.contracts.Attachment"]},{"name":"interface AttachmentConstraint","description":"net.corda.core.contracts.AttachmentConstraint","location":"docs/net.corda.core.contracts/-attachment-constraint/index.html","searchKeys":["AttachmentConstraint","interface AttachmentConstraint","net.corda.core.contracts.AttachmentConstraint"]},{"name":"interface AttachmentStorage","description":"net.corda.core.node.services.AttachmentStorage","location":"docs/net.corda.core.node.services/-attachment-storage/index.html","searchKeys":["AttachmentStorage","interface AttachmentStorage","net.corda.core.node.services.AttachmentStorage"]},{"name":"interface AttachmentTrustCalculator","description":"net.corda.core.internal.AttachmentTrustCalculator","location":"docs/net.corda.core.internal/-attachment-trust-calculator/index.html","searchKeys":["AttachmentTrustCalculator","interface AttachmentTrustCalculator","net.corda.core.internal.AttachmentTrustCalculator"]},{"name":"interface AttachmentTrustInfoRPCOps : RPCOps","description":"net.corda.core.internal.messaging.AttachmentTrustInfoRPCOps","location":"docs/net.corda.core.internal.messaging/-attachment-trust-info-r-p-c-ops/index.html","searchKeys":["AttachmentTrustInfoRPCOps","interface AttachmentTrustInfoRPCOps : RPCOps","net.corda.core.internal.messaging.AttachmentTrustInfoRPCOps"]},{"name":"interface AttachmentsClassLoaderCache","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderCache","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-cache/index.html","searchKeys":["AttachmentsClassLoaderCache","interface AttachmentsClassLoaderCache","net.corda.core.serialization.internal.AttachmentsClassLoaderCache"]},{"name":"interface AttachmentsHolder","description":"net.corda.core.serialization.internal.AttachmentsHolder","location":"docs/net.corda.core.serialization.internal/-attachments-holder/index.html","searchKeys":["AttachmentsHolder","interface AttachmentsHolder","net.corda.core.serialization.internal.AttachmentsHolder"]},{"name":"interface AttachmentsQueryCriteriaParser : BaseQueryCriteriaParser<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser, AttachmentSort> ","description":"net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser","location":"docs/net.corda.core.node.services.vault/-attachments-query-criteria-parser/index.html","searchKeys":["AttachmentsQueryCriteriaParser","interface AttachmentsQueryCriteriaParser : BaseQueryCriteriaParser<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser, AttachmentSort> ","net.corda.core.node.services.vault.AttachmentsQueryCriteriaParser"]},{"name":"interface Attribute","description":"net.corda.core.node.services.vault.Sort.Attribute","location":"docs/net.corda.core.node.services.vault/-sort/-attribute/index.html","searchKeys":["Attribute","interface Attribute","net.corda.core.node.services.vault.Sort.Attribute"]},{"name":"interface BaseQueryCriteriaParser<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, S>, in S : BaseSort>","description":"net.corda.core.node.services.vault.BaseQueryCriteriaParser","location":"docs/net.corda.core.node.services.vault/-base-query-criteria-parser/index.html","searchKeys":["BaseQueryCriteriaParser","interface BaseQueryCriteriaParser<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, S>, in S : BaseSort>","net.corda.core.node.services.vault.BaseQueryCriteriaParser"]},{"name":"interface BilateralNettableState<N : BilateralNettableState<N>>","description":"net.corda.finance.contracts.BilateralNettableState","location":"docs/net.corda.finance.contracts/-bilateral-nettable-state/index.html","searchKeys":["BilateralNettableState","interface BilateralNettableState<N : BilateralNettableState<N>>","net.corda.finance.contracts.BilateralNettableState"]},{"name":"interface ChainableQueryCriteria<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, *>>","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/index.html","searchKeys":["ChainableQueryCriteria","interface ChainableQueryCriteria<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, *>>","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria"]},{"name":"interface CheckpointCustomSerializer<OBJ, PROXY>","description":"net.corda.core.serialization.CheckpointCustomSerializer","location":"docs/net.corda.core.serialization/-checkpoint-custom-serializer/index.html","searchKeys":["CheckpointCustomSerializer","interface CheckpointCustomSerializer<OBJ, PROXY>","net.corda.core.serialization.CheckpointCustomSerializer"]},{"name":"interface CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationContext","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-context/index.html","searchKeys":["CheckpointSerializationContext","interface CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationContext"]},{"name":"interface CheckpointSerializer","description":"net.corda.core.serialization.internal.CheckpointSerializer","location":"docs/net.corda.core.serialization.internal/-checkpoint-serializer/index.html","searchKeys":["CheckpointSerializer","interface CheckpointSerializer","net.corda.core.serialization.internal.CheckpointSerializer"]},{"name":"interface ClassWhitelist","description":"net.corda.core.serialization.ClassWhitelist","location":"docs/net.corda.core.serialization/-class-whitelist/index.html","searchKeys":["ClassWhitelist","interface ClassWhitelist","net.corda.core.serialization.ClassWhitelist"]},{"name":"interface ClientRelevantError","description":"net.corda.core.ClientRelevantError","location":"docs/net.corda.core/-client-relevant-error/index.html","searchKeys":["ClientRelevantError","interface ClientRelevantError","net.corda.core.ClientRelevantError"]},{"name":"interface CloseableFlowManagerRPCOps : FlowManagerRPCOps, AutoCloseable","description":"net.corda.testing.driver.internal.checkpoint.CheckpointRpcHelper.CloseableFlowManagerRPCOps","location":"docs/net.corda.testing.driver.internal.checkpoint/-checkpoint-rpc-helper/-closeable-flow-manager-r-p-c-ops/index.html","searchKeys":["CloseableFlowManagerRPCOps","interface CloseableFlowManagerRPCOps : FlowManagerRPCOps, AutoCloseable","net.corda.testing.driver.internal.checkpoint.CheckpointRpcHelper.CloseableFlowManagerRPCOps"]},{"name":"interface CommandData","description":"net.corda.core.contracts.CommandData","location":"docs/net.corda.core.contracts/-command-data/index.html","searchKeys":["CommandData","interface CommandData","net.corda.core.contracts.CommandData"]},{"name":"interface Commands : CommandData","description":"net.corda.finance.contracts.CommercialPaper.Commands","location":"docs/net.corda.finance.contracts/-commercial-paper/-commands/index.html","searchKeys":["Commands","interface Commands : CommandData","net.corda.finance.contracts.CommercialPaper.Commands"]},{"name":"interface Commands : CommandData","description":"net.corda.finance.contracts.asset.Cash.Commands","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/index.html","searchKeys":["Commands","interface Commands : CommandData","net.corda.finance.contracts.asset.Cash.Commands"]},{"name":"interface Commands : CommandData","description":"net.corda.finance.contracts.asset.Obligation.Commands","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/index.html","searchKeys":["Commands","interface Commands : CommandData","net.corda.finance.contracts.asset.Obligation.Commands"]},{"name":"interface ConnectionContext<I : RPCOps>","description":"net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/-connection-context/index.html","searchKeys":["ConnectionContext","interface ConnectionContext<I : RPCOps>","net.corda.client.rpc.ext.RPCConnectionListener.ConnectionContext"]},{"name":"interface Contract","description":"net.corda.core.contracts.Contract","location":"docs/net.corda.core.contracts/-contract/index.html","searchKeys":["Contract","interface Contract","net.corda.core.contracts.Contract"]},{"name":"interface ContractState","description":"net.corda.core.contracts.ContractState","location":"docs/net.corda.core.contracts/-contract-state/index.html","searchKeys":["ContractState","interface ContractState","net.corda.core.contracts.ContractState"]},{"name":"interface ContractUpgradeService","description":"net.corda.core.node.services.ContractUpgradeService","location":"docs/net.corda.core.node.services/-contract-upgrade-service/index.html","searchKeys":["ContractUpgradeService","interface ContractUpgradeService","net.corda.core.node.services.ContractUpgradeService"]},{"name":"interface CordaFuture<V> : Future<V> ","description":"net.corda.core.concurrent.CordaFuture","location":"docs/net.corda.core.concurrent/-corda-future/index.html","searchKeys":["CordaFuture","interface CordaFuture<V> : Future<V> ","net.corda.core.concurrent.CordaFuture"]},{"name":"interface CordaRPCOps : RPCOps","description":"net.corda.core.messaging.CordaRPCOps","location":"docs/net.corda.core.messaging/-corda-r-p-c-ops/index.html","searchKeys":["CordaRPCOps","interface CordaRPCOps : RPCOps","net.corda.core.messaging.CordaRPCOps"]},{"name":"interface CordaThrowable","description":"net.corda.core.CordaThrowable","location":"docs/net.corda.core/-corda-throwable/index.html","searchKeys":["CordaThrowable","interface CordaThrowable","net.corda.core.CordaThrowable"]},{"name":"interface CordaTransactionSupport","description":"net.corda.core.node.services.vault.CordaTransactionSupport","location":"docs/net.corda.core.node.services.vault/-corda-transaction-support/index.html","searchKeys":["CordaTransactionSupport","interface CordaTransactionSupport","net.corda.core.node.services.vault.CordaTransactionSupport"]},{"name":"interface Cordapp","description":"net.corda.core.cordapp.Cordapp","location":"docs/net.corda.core.cordapp/-cordapp/index.html","searchKeys":["Cordapp","interface Cordapp","net.corda.core.cordapp.Cordapp"]},{"name":"interface CordappConfig","description":"net.corda.core.cordapp.CordappConfig","location":"docs/net.corda.core.cordapp/-cordapp-config/index.html","searchKeys":["CordappConfig","interface CordappConfig","net.corda.core.cordapp.CordappConfig"]},{"name":"interface CordappProvider","description":"net.corda.core.cordapp.CordappProvider","location":"docs/net.corda.core.cordapp/-cordapp-provider/index.html","searchKeys":["CordappProvider","interface CordappProvider","net.corda.core.cordapp.CordappProvider"]},{"name":"interface CordappProviderInternal : CordappProvider","description":"net.corda.core.internal.cordapp.CordappProviderInternal","location":"docs/net.corda.core.internal.cordapp/-cordapp-provider-internal/index.html","searchKeys":["CordappProviderInternal","interface CordappProviderInternal : CordappProvider","net.corda.core.internal.cordapp.CordappProviderInternal"]},{"name":"interface CustomSerializationScheme","description":"net.corda.core.serialization.CustomSerializationScheme","location":"docs/net.corda.core.serialization/-custom-serialization-scheme/index.html","searchKeys":["CustomSerializationScheme","interface CustomSerializationScheme","net.corda.core.serialization.CustomSerializationScheme"]},{"name":"interface DealState : LinearState","description":"net.corda.finance.contracts.DealState","location":"docs/net.corda.finance.contracts/-deal-state/index.html","searchKeys":["DealState","interface DealState : LinearState","net.corda.finance.contracts.DealState"]},{"name":"interface Destination","description":"net.corda.core.flows.Destination","location":"docs/net.corda.core.flows/-destination/index.html","searchKeys":["Destination","interface Destination","net.corda.core.flows.Destination"]},{"name":"interface DiagnosticsService","description":"net.corda.core.node.services.diagnostics.DiagnosticsService","location":"docs/net.corda.core.node.services.diagnostics/-diagnostics-service/index.html","searchKeys":["DiagnosticsService","interface DiagnosticsService","net.corda.core.node.services.diagnostics.DiagnosticsService"]},{"name":"interface DigestAlgorithm","description":"net.corda.core.crypto.DigestAlgorithm","location":"docs/net.corda.core.crypto/-digest-algorithm/index.html","searchKeys":["DigestAlgorithm","interface DigestAlgorithm","net.corda.core.crypto.DigestAlgorithm"]},{"name":"interface DirectStatePersistable : StatePersistable","description":"net.corda.core.schemas.DirectStatePersistable","location":"docs/net.corda.core.schemas/-direct-state-persistable/index.html","searchKeys":["DirectStatePersistable","interface DirectStatePersistable : StatePersistable","net.corda.core.schemas.DirectStatePersistable"]},{"name":"interface DriverDSL","description":"net.corda.testing.driver.DriverDSL","location":"docs/net.corda.testing.driver/-driver-d-s-l/index.html","searchKeys":["DriverDSL","interface DriverDSL","net.corda.testing.driver.DriverDSL"]},{"name":"interface EncodingWhitelist","description":"net.corda.core.serialization.EncodingWhitelist","location":"docs/net.corda.core.serialization/-encoding-whitelist/index.html","searchKeys":["EncodingWhitelist","interface EncodingWhitelist","net.corda.core.serialization.EncodingWhitelist"]},{"name":"interface ExternalVerifierHandle : AutoCloseable","description":"net.corda.core.internal.verification.ExternalVerifierHandle","location":"docs/net.corda.core.internal.verification/-external-verifier-handle/index.html","searchKeys":["ExternalVerifierHandle","interface ExternalVerifierHandle : AutoCloseable","net.corda.core.internal.verification.ExternalVerifierHandle"]},{"name":"interface FixableDealState : DealState","description":"net.corda.finance.contracts.FixableDealState","location":"docs/net.corda.finance.contracts/-fixable-deal-state/index.html","searchKeys":["FixableDealState","interface FixableDealState : DealState","net.corda.finance.contracts.FixableDealState"]},{"name":"interface FlowAsyncOperation<R : Any>","description":"net.corda.core.internal.FlowAsyncOperation","location":"docs/net.corda.core.internal/-flow-async-operation/index.html","searchKeys":["FlowAsyncOperation","interface FlowAsyncOperation<R : Any>","net.corda.core.internal.FlowAsyncOperation"]},{"name":"interface FlowExternalAsyncOperation<R : Any>","description":"net.corda.core.flows.FlowExternalAsyncOperation","location":"docs/net.corda.core.flows/-flow-external-async-operation/index.html","searchKeys":["FlowExternalAsyncOperation","interface FlowExternalAsyncOperation<R : Any>","net.corda.core.flows.FlowExternalAsyncOperation"]},{"name":"interface FlowExternalOperation<R : Any>","description":"net.corda.core.flows.FlowExternalOperation","location":"docs/net.corda.core.flows/-flow-external-operation/index.html","searchKeys":["FlowExternalOperation","interface FlowExternalOperation<R : Any>","net.corda.core.flows.FlowExternalOperation"]},{"name":"interface FlowHandle<A> : AutoCloseable","description":"net.corda.core.messaging.FlowHandle","location":"docs/net.corda.core.messaging/-flow-handle/index.html","searchKeys":["FlowHandle","interface FlowHandle<A> : AutoCloseable","net.corda.core.messaging.FlowHandle"]},{"name":"interface FlowHandleWithClientId<A> : FlowHandle<A> ","description":"net.corda.core.messaging.FlowHandleWithClientId","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id/index.html","searchKeys":["FlowHandleWithClientId","interface FlowHandleWithClientId<A> : FlowHandle<A> ","net.corda.core.messaging.FlowHandleWithClientId"]},{"name":"interface FlowLogicRef","description":"net.corda.core.flows.FlowLogicRef","location":"docs/net.corda.core.flows/-flow-logic-ref/index.html","searchKeys":["FlowLogicRef","interface FlowLogicRef","net.corda.core.flows.FlowLogicRef"]},{"name":"interface FlowLogicRefFactory","description":"net.corda.core.flows.FlowLogicRefFactory","location":"docs/net.corda.core.flows/-flow-logic-ref-factory/index.html","searchKeys":["FlowLogicRefFactory","interface FlowLogicRefFactory","net.corda.core.flows.FlowLogicRefFactory"]},{"name":"interface FlowManagerRPCOps : RPCOps","description":"net.corda.core.internal.messaging.FlowManagerRPCOps","location":"docs/net.corda.core.internal.messaging/-flow-manager-r-p-c-ops/index.html","searchKeys":["FlowManagerRPCOps","interface FlowManagerRPCOps : RPCOps","net.corda.core.internal.messaging.FlowManagerRPCOps"]},{"name":"interface FlowManagerRPCOps : RPCOps","description":"net.corda.core.messaging.flows.FlowManagerRPCOps","location":"docs/net.corda.core.messaging.flows/-flow-manager-r-p-c-ops/index.html","searchKeys":["FlowManagerRPCOps","interface FlowManagerRPCOps : RPCOps","net.corda.core.messaging.flows.FlowManagerRPCOps"]},{"name":"interface FlowProgressHandle<A> : FlowHandle<A> ","description":"net.corda.core.messaging.FlowProgressHandle","location":"docs/net.corda.core.messaging/-flow-progress-handle/index.html","searchKeys":["FlowProgressHandle","interface FlowProgressHandle<A> : FlowHandle<A> ","net.corda.core.messaging.FlowProgressHandle"]},{"name":"interface FlowStateMachine<FLOWRETURN> : FlowStateMachineHandle<FLOWRETURN> ","description":"net.corda.core.internal.FlowStateMachine","location":"docs/net.corda.core.internal/-flow-state-machine/index.html","searchKeys":["FlowStateMachine","interface FlowStateMachine<FLOWRETURN> : FlowStateMachineHandle<FLOWRETURN> ","net.corda.core.internal.FlowStateMachine"]},{"name":"interface FlowStateMachineHandle<FLOWRETURN>","description":"net.corda.core.internal.FlowStateMachineHandle","location":"docs/net.corda.core.internal/-flow-state-machine-handle/index.html","searchKeys":["FlowStateMachineHandle","interface FlowStateMachineHandle<FLOWRETURN>","net.corda.core.internal.FlowStateMachineHandle"]},{"name":"interface Follower","description":"net.corda.testing.node.internal.ShutdownManager.Follower","location":"docs/net.corda.testing.node.internal/-shutdown-manager/-follower/index.html","searchKeys":["Follower","interface Follower","net.corda.testing.node.internal.ShutdownManager.Follower"]},{"name":"interface FungibleAsset<T : Any> : FungibleState<Issued<T>> , OwnableState","description":"net.corda.core.contracts.FungibleAsset","location":"docs/net.corda.core.contracts/-fungible-asset/index.html","searchKeys":["FungibleAsset","interface FungibleAsset<T : Any> : FungibleState<Issued<T>> , OwnableState","net.corda.core.contracts.FungibleAsset"]},{"name":"interface FungibleState<T : Any> : ContractState","description":"net.corda.core.contracts.FungibleState","location":"docs/net.corda.core.contracts/-fungible-state/index.html","searchKeys":["FungibleState","interface FungibleState<T : Any> : ContractState","net.corda.core.contracts.FungibleState"]},{"name":"interface GenericQueryCriteria<Q : GenericQueryCriteria<Q, *>, in P : BaseQueryCriteriaParser<Q, *, *>>","description":"net.corda.core.node.services.vault.GenericQueryCriteria","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/index.html","searchKeys":["GenericQueryCriteria","interface GenericQueryCriteria<Q : GenericQueryCriteria<Q, *>, in P : BaseQueryCriteriaParser<Q, *, *>>","net.corda.core.node.services.vault.GenericQueryCriteria"]},{"name":"interface IQueryCriteriaParser : BaseQueryCriteriaParser<QueryCriteria, IQueryCriteriaParser, Sort> ","description":"net.corda.core.node.services.vault.IQueryCriteriaParser","location":"docs/net.corda.core.node.services.vault/-i-query-criteria-parser/index.html","searchKeys":["IQueryCriteriaParser","interface IQueryCriteriaParser : BaseQueryCriteriaParser<QueryCriteria, IQueryCriteriaParser, Sort> ","net.corda.core.node.services.vault.IQueryCriteriaParser"]},{"name":"interface IdempotentFlow","description":"net.corda.core.internal.IdempotentFlow","location":"docs/net.corda.core.internal/-idempotent-flow/index.html","searchKeys":["IdempotentFlow","interface IdempotentFlow","net.corda.core.internal.IdempotentFlow"]},{"name":"interface IdentityService","description":"net.corda.core.node.services.IdentityService","location":"docs/net.corda.core.node.services/-identity-service/index.html","searchKeys":["IdentityService","interface IdentityService","net.corda.core.node.services.IdentityService"]},{"name":"interface InProcess : NodeHandle","description":"net.corda.testing.driver.InProcess","location":"docs/net.corda.testing.driver/-in-process/index.html","searchKeys":["InProcess","interface InProcess : NodeHandle","net.corda.testing.driver.InProcess"]},{"name":"interface IndirectStatePersistable<T : DirectStatePersistable> : StatePersistable","description":"net.corda.core.schemas.IndirectStatePersistable","location":"docs/net.corda.core.schemas/-indirect-state-persistable/index.html","searchKeys":["IndirectStatePersistable","interface IndirectStatePersistable<T : DirectStatePersistable> : StatePersistable","net.corda.core.schemas.IndirectStatePersistable"]},{"name":"interface Info","description":"net.corda.core.cordapp.Cordapp.Info","location":"docs/net.corda.core.cordapp/-cordapp/-info/index.html","searchKeys":["Info","interface Info","net.corda.core.cordapp.Cordapp.Info"]},{"name":"interface Internable<T>","description":"net.corda.core.internal.utilities.Internable","location":"docs/net.corda.core.internal.utilities/-internable/index.html","searchKeys":["Internable","interface Internable<T>","net.corda.core.internal.utilities.Internable"]},{"name":"interface InternalDriverDSL : DriverDSL","description":"net.corda.testing.node.internal.InternalDriverDSL","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/index.html","searchKeys":["InternalDriverDSL","interface InternalDriverDSL : DriverDSL","net.corda.testing.node.internal.InternalDriverDSL"]},{"name":"interface InvocationHandlerTemplate : InvocationHandler","description":"net.corda.core.internal.utilities.InvocationHandlerTemplate","location":"docs/net.corda.core.internal.utilities/-invocation-handler-template/index.html","searchKeys":["InvocationHandlerTemplate","interface InvocationHandlerTemplate : InvocationHandler","net.corda.core.internal.utilities.InvocationHandlerTemplate"]},{"name":"interface IternabilityVerifier<T>","description":"net.corda.core.internal.utilities.IternabilityVerifier","location":"docs/net.corda.core.internal.utilities/-iternability-verifier/index.html","searchKeys":["IternabilityVerifier","interface IternabilityVerifier<T>","net.corda.core.internal.utilities.IternabilityVerifier"]},{"name":"interface KeyManagementService","description":"net.corda.core.node.services.KeyManagementService","location":"docs/net.corda.core.node.services/-key-management-service/index.html","searchKeys":["KeyManagementService","interface KeyManagementService","net.corda.core.node.services.KeyManagementService"]},{"name":"interface LatencyCalculator","description":"net.corda.testing.node.InMemoryMessagingNetwork.LatencyCalculator","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-latency-calculator/index.html","searchKeys":["LatencyCalculator","interface LatencyCalculator","net.corda.testing.node.InMemoryMessagingNetwork.LatencyCalculator"]},{"name":"interface LedgerDSLInterpreter<out T : TransactionDSLInterpreter> : Verifies, OutputStateLookup","description":"net.corda.testing.dsl.LedgerDSLInterpreter","location":"docs/net.corda.testing.dsl/-ledger-d-s-l-interpreter/index.html","searchKeys":["LedgerDSLInterpreter","interface LedgerDSLInterpreter<out T : TransactionDSLInterpreter> : Verifies, OutputStateLookup","net.corda.testing.dsl.LedgerDSLInterpreter"]},{"name":"interface LinearState : ContractState","description":"net.corda.core.contracts.LinearState","location":"docs/net.corda.core.contracts/-linear-state/index.html","searchKeys":["LinearState","interface LinearState : ContractState","net.corda.core.contracts.LinearState"]},{"name":"interface MessageRecipientGroup : MessageRecipients","description":"net.corda.core.messaging.MessageRecipientGroup","location":"docs/net.corda.core.messaging/-message-recipient-group/index.html","searchKeys":["MessageRecipientGroup","interface MessageRecipientGroup : MessageRecipients","net.corda.core.messaging.MessageRecipientGroup"]},{"name":"interface MessageRecipients","description":"net.corda.core.messaging.MessageRecipients","location":"docs/net.corda.core.messaging/-message-recipients/index.html","searchKeys":["MessageRecipients","interface MessageRecipients","net.corda.core.messaging.MessageRecipients"]},{"name":"interface MoveCommand : CommandData","description":"net.corda.core.contracts.MoveCommand","location":"docs/net.corda.core.contracts/-move-command/index.html","searchKeys":["MoveCommand","interface MoveCommand : CommandData","net.corda.core.contracts.MoveCommand"]},{"name":"interface MultilateralNettableState<out T : Any>","description":"net.corda.finance.contracts.MultilateralNettableState","location":"docs/net.corda.finance.contracts/-multilateral-nettable-state/index.html","searchKeys":["MultilateralNettableState","interface MultilateralNettableState<out T : Any>","net.corda.finance.contracts.MultilateralNettableState"]},{"name":"interface NamedByHash","description":"net.corda.core.contracts.NamedByHash","location":"docs/net.corda.core.contracts/-named-by-hash/index.html","searchKeys":["NamedByHash","interface NamedByHash","net.corda.core.contracts.NamedByHash"]},{"name":"interface NamedCacheFactory","description":"net.corda.core.internal.NamedCacheFactory","location":"docs/net.corda.core.internal/-named-cache-factory/index.html","searchKeys":["NamedCacheFactory","interface NamedCacheFactory","net.corda.core.internal.NamedCacheFactory"]},{"name":"interface NetCommand : CommandData","description":"net.corda.finance.contracts.NetCommand","location":"docs/net.corda.finance.contracts/-net-command/index.html","searchKeys":["NetCommand","interface NetCommand : CommandData","net.corda.finance.contracts.NetCommand"]},{"name":"interface NetState<P : Any>","description":"net.corda.finance.contracts.asset.NetState","location":"docs/net.corda.finance.contracts.asset/-net-state/index.html","searchKeys":["NetState","interface NetState<P : Any>","net.corda.finance.contracts.asset.NetState"]},{"name":"interface NettableState<N : BilateralNettableState<N>, out T : Any> : BilateralNettableState<N> , MultilateralNettableState<T> ","description":"net.corda.finance.contracts.NettableState","location":"docs/net.corda.finance.contracts/-nettable-state/index.html","searchKeys":["NettableState","interface NettableState<N : BilateralNettableState<N>, out T : Any> : BilateralNettableState<N> , MultilateralNettableState<T> ","net.corda.finance.contracts.NettableState"]},{"name":"interface NetworkMapCache : NetworkMapCacheBase","description":"net.corda.core.node.services.NetworkMapCache","location":"docs/net.corda.core.node.services/-network-map-cache/index.html","searchKeys":["NetworkMapCache","interface NetworkMapCache : NetworkMapCacheBase","net.corda.core.node.services.NetworkMapCache"]},{"name":"interface NetworkMapCacheBase","description":"net.corda.core.node.services.NetworkMapCacheBase","location":"docs/net.corda.core.node.services/-network-map-cache-base/index.html","searchKeys":["NetworkMapCacheBase","interface NetworkMapCacheBase","net.corda.core.node.services.NetworkMapCacheBase"]},{"name":"interface NetworkParametersService","description":"net.corda.core.node.services.NetworkParametersService","location":"docs/net.corda.core.node.services/-network-parameters-service/index.html","searchKeys":["NetworkParametersService","interface NetworkParametersService","net.corda.core.node.services.NetworkParametersService"]},{"name":"interface NetworkParametersStorage : NetworkParametersService","description":"net.corda.core.internal.NetworkParametersStorage","location":"docs/net.corda.core.internal/-network-parameters-storage/index.html","searchKeys":["NetworkParametersStorage","interface NetworkParametersStorage : NetworkParametersService","net.corda.core.internal.NetworkParametersStorage"]},{"name":"interface NodeHandle : AutoCloseable","description":"net.corda.testing.driver.NodeHandle","location":"docs/net.corda.testing.driver/-node-handle/index.html","searchKeys":["NodeHandle","interface NodeHandle : AutoCloseable","net.corda.testing.driver.NodeHandle"]},{"name":"interface NodeHandleInternal : NodeHandle","description":"net.corda.testing.driver.internal.NodeHandleInternal","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/index.html","searchKeys":["NodeHandleInternal","interface NodeHandleInternal : NodeHandle","net.corda.testing.driver.internal.NodeHandleInternal"]},{"name":"interface NodeVerificationSupport : VerificationSupport","description":"net.corda.core.internal.verification.NodeVerificationSupport","location":"docs/net.corda.core.internal.verification/-node-verification-support/index.html","searchKeys":["NodeVerificationSupport","interface NodeVerificationSupport : VerificationSupport","net.corda.core.internal.verification.NodeVerificationSupport"]},{"name":"interface OpenFuture<V> : ValueOrException<V> , CordaFuture<V> ","description":"net.corda.core.internal.concurrent.OpenFuture","location":"docs/net.corda.core.internal.concurrent/-open-future/index.html","searchKeys":["OpenFuture","interface OpenFuture<V> : ValueOrException<V> , CordaFuture<V> ","net.corda.core.internal.concurrent.OpenFuture"]},{"name":"interface Operator","description":"net.corda.core.node.services.vault.Operator","location":"docs/net.corda.core.node.services.vault/-operator/index.html","searchKeys":["Operator","interface Operator","net.corda.core.node.services.vault.Operator"]},{"name":"interface OrVisitor<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, S>, in S : BaseSort> : GenericQueryCriteria<Q, P> ","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-or-visitor/index.html","searchKeys":["OrVisitor","interface OrVisitor<Q : GenericQueryCriteria<Q, P>, in P : BaseQueryCriteriaParser<Q, P, S>, in S : BaseSort> : GenericQueryCriteria<Q, P> ","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor"]},{"name":"interface OutOfProcess : NodeHandle","description":"net.corda.testing.driver.OutOfProcess","location":"docs/net.corda.testing.driver/-out-of-process/index.html","searchKeys":["OutOfProcess","interface OutOfProcess : NodeHandle","net.corda.testing.driver.OutOfProcess"]},{"name":"interface OutputStateLookup","description":"net.corda.testing.dsl.OutputStateLookup","location":"docs/net.corda.testing.dsl/-output-state-lookup/index.html","searchKeys":["OutputStateLookup","interface OutputStateLookup","net.corda.testing.dsl.OutputStateLookup"]},{"name":"interface OwnableState : ContractState","description":"net.corda.core.contracts.OwnableState","location":"docs/net.corda.core.contracts/-ownable-state/index.html","searchKeys":["OwnableState","interface OwnableState : ContractState","net.corda.core.contracts.OwnableState"]},{"name":"interface PartyObjectMapper","description":"net.corda.client.jackson.JacksonSupport.PartyObjectMapper","location":"docs/net.corda.client.jackson/-jackson-support/-party-object-mapper/index.html","searchKeys":["PartyObjectMapper","interface PartyObjectMapper","net.corda.client.jackson.JacksonSupport.PartyObjectMapper"]},{"name":"interface PropertyDelegate<out T>","description":"net.corda.core.utilities.PropertyDelegate","location":"docs/net.corda.core.utilities/-property-delegate/index.html","searchKeys":["PropertyDelegate","interface PropertyDelegate<out T>","net.corda.core.utilities.PropertyDelegate"]},{"name":"interface Query","description":"net.corda.core.internal.notary.NotaryService.Query","location":"docs/net.corda.core.internal.notary/-notary-service/-query/index.html","searchKeys":["Query","interface Query","net.corda.core.internal.notary.NotaryService.Query"]},{"name":"interface QueryableState : ContractState","description":"net.corda.core.schemas.QueryableState","location":"docs/net.corda.core.schemas/-queryable-state/index.html","searchKeys":["QueryableState","interface QueryableState : ContractState","net.corda.core.schemas.QueryableState"]},{"name":"interface RPCConnection<out I : RPCOps> : Closeable","description":"net.corda.client.rpc.RPCConnection","location":"docs/net.corda.client.rpc/-r-p-c-connection/index.html","searchKeys":["RPCConnection","interface RPCConnection<out I : RPCOps> : Closeable","net.corda.client.rpc.RPCConnection"]},{"name":"interface RPCConnectionListener<I : RPCOps>","description":"net.corda.client.rpc.ext.RPCConnectionListener","location":"docs/net.corda.client.rpc.ext/-r-p-c-connection-listener/index.html","searchKeys":["RPCConnectionListener","interface RPCConnectionListener<I : RPCOps>","net.corda.client.rpc.ext.RPCConnectionListener"]},{"name":"interface RPCOps","description":"net.corda.core.messaging.RPCOps","location":"docs/net.corda.core.messaging/-r-p-c-ops/index.html","searchKeys":["RPCOps","interface RPCOps","net.corda.core.messaging.RPCOps"]},{"name":"interface Request","description":"net.corda.core.internal.notary.NotaryService.Query.Request","location":"docs/net.corda.core.internal.notary/-notary-service/-query/-request/index.html","searchKeys":["Request","interface Request","net.corda.core.internal.notary.NotaryService.Query.Request"]},{"name":"interface Result","description":"net.corda.core.internal.notary.NotaryService.Query.Result","location":"docs/net.corda.core.internal.notary/-notary-service/-query/-result/index.html","searchKeys":["Result","interface Result","net.corda.core.internal.notary.NotaryService.Query.Result"]},{"name":"interface SchedulableState : ContractState","description":"net.corda.core.contracts.SchedulableState","location":"docs/net.corda.core.contracts/-schedulable-state/index.html","searchKeys":["SchedulableState","interface SchedulableState : ContractState","net.corda.core.contracts.SchedulableState"]},{"name":"interface Scheduled","description":"net.corda.core.contracts.Scheduled","location":"docs/net.corda.core.contracts/-scheduled/index.html","searchKeys":["Scheduled","interface Scheduled","net.corda.core.contracts.Scheduled"]},{"name":"interface SerializationContext","description":"net.corda.core.serialization.SerializationContext","location":"docs/net.corda.core.serialization/-serialization-context/index.html","searchKeys":["SerializationContext","interface SerializationContext","net.corda.core.serialization.SerializationContext"]},{"name":"interface SerializationCustomSerializer<OBJ, PROXY>","description":"net.corda.core.serialization.SerializationCustomSerializer","location":"docs/net.corda.core.serialization/-serialization-custom-serializer/index.html","searchKeys":["SerializationCustomSerializer","interface SerializationCustomSerializer<OBJ, PROXY>","net.corda.core.serialization.SerializationCustomSerializer"]},{"name":"interface SerializationEncoding","description":"net.corda.core.serialization.SerializationEncoding","location":"docs/net.corda.core.serialization/-serialization-encoding/index.html","searchKeys":["SerializationEncoding","interface SerializationEncoding","net.corda.core.serialization.SerializationEncoding"]},{"name":"interface SerializationEnvironment","description":"net.corda.core.serialization.internal.SerializationEnvironment","location":"docs/net.corda.core.serialization.internal/-serialization-environment/index.html","searchKeys":["SerializationEnvironment","interface SerializationEnvironment","net.corda.core.serialization.internal.SerializationEnvironment"]},{"name":"interface SerializationSchemeContext","description":"net.corda.core.serialization.SerializationSchemeContext","location":"docs/net.corda.core.serialization/-serialization-scheme-context/index.html","searchKeys":["SerializationSchemeContext","interface SerializationSchemeContext","net.corda.core.serialization.SerializationSchemeContext"]},{"name":"interface SerializationToken","description":"net.corda.core.serialization.SerializationToken","location":"docs/net.corda.core.serialization/-serialization-token/index.html","searchKeys":["SerializationToken","interface SerializationToken","net.corda.core.serialization.SerializationToken"]},{"name":"interface SerializationWhitelist","description":"net.corda.core.serialization.SerializationWhitelist","location":"docs/net.corda.core.serialization/-serialization-whitelist/index.html","searchKeys":["SerializationWhitelist","interface SerializationWhitelist","net.corda.core.serialization.SerializationWhitelist"]},{"name":"interface SerializeAsToken","description":"net.corda.core.serialization.SerializeAsToken","location":"docs/net.corda.core.serialization/-serialize-as-token/index.html","searchKeys":["SerializeAsToken","interface SerializeAsToken","net.corda.core.serialization.SerializeAsToken"]},{"name":"interface SerializeAsTokenContext","description":"net.corda.core.serialization.SerializeAsTokenContext","location":"docs/net.corda.core.serialization/-serialize-as-token-context/index.html","searchKeys":["SerializeAsTokenContext","interface SerializeAsTokenContext","net.corda.core.serialization.SerializeAsTokenContext"]},{"name":"interface ServiceHub : ServicesForResolution","description":"net.corda.core.node.ServiceHub","location":"docs/net.corda.core.node/-service-hub/index.html","searchKeys":["ServiceHub","interface ServiceHub : ServicesForResolution","net.corda.core.node.ServiceHub"]},{"name":"interface ServiceHubCoreInternal : VerifyingServiceHub","description":"net.corda.core.internal.ServiceHubCoreInternal","location":"docs/net.corda.core.internal/-service-hub-core-internal/index.html","searchKeys":["ServiceHubCoreInternal","interface ServiceHubCoreInternal : VerifyingServiceHub","net.corda.core.internal.ServiceHubCoreInternal"]},{"name":"interface ServiceLifecycleObserver","description":"net.corda.core.node.services.ServiceLifecycleObserver","location":"docs/net.corda.core.node.services/-service-lifecycle-observer/index.html","searchKeys":["ServiceLifecycleObserver","interface ServiceLifecycleObserver","net.corda.core.node.services.ServiceLifecycleObserver"]},{"name":"interface ServicesForResolution","description":"net.corda.core.node.ServicesForResolution","location":"docs/net.corda.core.node/-services-for-resolution/index.html","searchKeys":["ServicesForResolution","interface ServicesForResolution","net.corda.core.node.ServicesForResolution"]},{"name":"interface SessionScope","description":"net.corda.core.node.services.vault.SessionScope","location":"docs/net.corda.core.node.services.vault/-session-scope/index.html","searchKeys":["SessionScope","interface SessionScope","net.corda.core.node.services.vault.SessionScope"]},{"name":"interface SignatureFactory","description":"net.corda.core.crypto.internal.SignatureFactory","location":"docs/net.corda.core.crypto.internal/-signature-factory/index.html","searchKeys":["SignatureFactory","interface SignatureFactory","net.corda.core.crypto.internal.SignatureFactory"]},{"name":"interface SingleMessageRecipient : MessageRecipients","description":"net.corda.core.messaging.SingleMessageRecipient","location":"docs/net.corda.core.messaging/-single-message-recipient/index.html","searchKeys":["SingleMessageRecipient","interface SingleMessageRecipient : MessageRecipients","net.corda.core.messaging.SingleMessageRecipient"]},{"name":"interface StatePersistable","description":"net.corda.core.schemas.StatePersistable","location":"docs/net.corda.core.schemas/-state-persistable/index.html","searchKeys":["StatePersistable","interface StatePersistable","net.corda.core.schemas.StatePersistable"]},{"name":"interface TelemetryComponent","description":"net.corda.core.internal.telemetry.TelemetryComponent","location":"docs/net.corda.core.internal.telemetry/-telemetry-component/index.html","searchKeys":["TelemetryComponent","interface TelemetryComponent","net.corda.core.internal.telemetry.TelemetryComponent"]},{"name":"interface TelemetryComponentId","description":"net.corda.core.internal.telemetry.TelemetryComponentId","location":"docs/net.corda.core.internal.telemetry/-telemetry-component-id/index.html","searchKeys":["TelemetryComponentId","interface TelemetryComponentId","net.corda.core.internal.telemetry.TelemetryComponentId"]},{"name":"interface TelemetryDataItem","description":"net.corda.core.internal.telemetry.TelemetryDataItem","location":"docs/net.corda.core.internal.telemetry/-telemetry-data-item/index.html","searchKeys":["TelemetryDataItem","interface TelemetryDataItem","net.corda.core.internal.telemetry.TelemetryDataItem"]},{"name":"interface TelemetryEvent","description":"net.corda.core.internal.telemetry.TelemetryEvent","location":"docs/net.corda.core.internal.telemetry/-telemetry-event/index.html","searchKeys":["TelemetryEvent","interface TelemetryEvent","net.corda.core.internal.telemetry.TelemetryEvent"]},{"name":"interface TelemetryService","description":"net.corda.core.node.services.TelemetryService","location":"docs/net.corda.core.node.services/-telemetry-service/index.html","searchKeys":["TelemetryService","interface TelemetryService","net.corda.core.node.services.TelemetryService"]},{"name":"interface TestStartedNode","description":"net.corda.testing.node.internal.TestStartedNode","location":"docs/net.corda.testing.node.internal/-test-started-node/index.html","searchKeys":["TestStartedNode","interface TestStartedNode","net.corda.testing.node.internal.TestStartedNode"]},{"name":"interface TimedFlow : IdempotentFlow","description":"net.corda.core.internal.TimedFlow","location":"docs/net.corda.core.internal/-timed-flow/index.html","searchKeys":["TimedFlow","interface TimedFlow : IdempotentFlow","net.corda.core.internal.TimedFlow"]},{"name":"interface TokenizableAssetInfo","description":"net.corda.core.contracts.TokenizableAssetInfo","location":"docs/net.corda.core.contracts/-tokenizable-asset-info/index.html","searchKeys":["TokenizableAssetInfo","interface TokenizableAssetInfo","net.corda.core.contracts.TokenizableAssetInfo"]},{"name":"interface TransactionDSLInterpreter : Verifies, OutputStateLookup","description":"net.corda.testing.dsl.TransactionDSLInterpreter","location":"docs/net.corda.testing.dsl/-transaction-d-s-l-interpreter/index.html","searchKeys":["TransactionDSLInterpreter","interface TransactionDSLInterpreter : Verifies, OutputStateLookup","net.corda.testing.dsl.TransactionDSLInterpreter"]},{"name":"interface TransactionStorage","description":"net.corda.core.node.services.TransactionStorage","location":"docs/net.corda.core.node.services/-transaction-storage/index.html","searchKeys":["TransactionStorage","interface TransactionStorage","net.corda.core.node.services.TransactionStorage"]},{"name":"interface TransactionWithSignatures : NamedByHash","description":"net.corda.core.transactions.TransactionWithSignatures","location":"docs/net.corda.core.transactions/-transaction-with-signatures/index.html","searchKeys":["TransactionWithSignatures","interface TransactionWithSignatures : NamedByHash","net.corda.core.transactions.TransactionWithSignatures"]},{"name":"interface TransactionsResolver","description":"net.corda.core.internal.TransactionsResolver","location":"docs/net.corda.core.internal/-transactions-resolver/index.html","searchKeys":["TransactionsResolver","interface TransactionsResolver","net.corda.core.internal.TransactionsResolver"]},{"name":"interface UniquenessProvider","description":"net.corda.core.internal.notary.UniquenessProvider","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/index.html","searchKeys":["UniquenessProvider","interface UniquenessProvider","net.corda.core.internal.notary.UniquenessProvider"]},{"name":"interface UpgradedContract<in OldState : ContractState, out NewState : ContractState> : Contract","description":"net.corda.core.contracts.UpgradedContract","location":"docs/net.corda.core.contracts/-upgraded-contract/index.html","searchKeys":["UpgradedContract","interface UpgradedContract<in OldState : ContractState, out NewState : ContractState> : Contract","net.corda.core.contracts.UpgradedContract"]},{"name":"interface UpgradedContractWithLegacyConstraint<in OldState : ContractState, out NewState : ContractState> : UpgradedContract<OldState, NewState> ","description":"net.corda.core.contracts.UpgradedContractWithLegacyConstraint","location":"docs/net.corda.core.contracts/-upgraded-contract-with-legacy-constraint/index.html","searchKeys":["UpgradedContractWithLegacyConstraint","interface UpgradedContractWithLegacyConstraint<in OldState : ContractState, out NewState : ContractState> : UpgradedContract<OldState, NewState> ","net.corda.core.contracts.UpgradedContractWithLegacyConstraint"]},{"name":"interface Validator<in T, out R> : Serializable","description":"net.corda.core.utilities.UntrustworthyData.Validator","location":"docs/net.corda.core.utilities/-untrustworthy-data/-validator/index.html","searchKeys":["Validator","interface Validator<in T, out R> : Serializable","net.corda.core.utilities.UntrustworthyData.Validator"]},{"name":"interface ValueOrException<in V>","description":"net.corda.core.internal.concurrent.ValueOrException","location":"docs/net.corda.core.internal.concurrent/-value-or-exception/index.html","searchKeys":["ValueOrException","interface ValueOrException<in V>","net.corda.core.internal.concurrent.ValueOrException"]},{"name":"interface VariablePropertyDelegate<T> : PropertyDelegate<T> ","description":"net.corda.core.utilities.VariablePropertyDelegate","location":"docs/net.corda.core.utilities/-variable-property-delegate/index.html","searchKeys":["VariablePropertyDelegate","interface VariablePropertyDelegate<T> : PropertyDelegate<T> ","net.corda.core.utilities.VariablePropertyDelegate"]},{"name":"interface VaultService","description":"net.corda.core.node.services.VaultService","location":"docs/net.corda.core.node.services/-vault-service/index.html","searchKeys":["VaultService","interface VaultService","net.corda.core.node.services.VaultService"]},{"name":"interface VerificationSupport","description":"net.corda.core.internal.verification.VerificationSupport","location":"docs/net.corda.core.internal.verification/-verification-support/index.html","searchKeys":["VerificationSupport","interface VerificationSupport","net.corda.core.internal.verification.VerificationSupport"]},{"name":"interface Verifier","description":"net.corda.core.internal.verification.Verifier","location":"docs/net.corda.core.internal.verification/-verifier/index.html","searchKeys":["Verifier","interface Verifier","net.corda.core.internal.verification.Verifier"]},{"name":"interface Verifies","description":"net.corda.testing.dsl.Verifies","location":"docs/net.corda.testing.dsl/-verifies/index.html","searchKeys":["Verifies","interface Verifies","net.corda.testing.dsl.Verifies"]},{"name":"interface VerifyingServiceHub : ServiceHub, NodeVerificationSupport","description":"net.corda.core.internal.verification.VerifyingServiceHub","location":"docs/net.corda.core.internal.verification/-verifying-service-hub/index.html","searchKeys":["VerifyingServiceHub","interface VerifyingServiceHub : ServiceHub, NodeVerificationSupport","net.corda.core.internal.verification.VerifyingServiceHub"]},{"name":"interface Waitable","description":"net.corda.testing.node.internal.DriverDSLImpl.Waitable","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-waitable/index.html","searchKeys":["Waitable","interface Waitable","net.corda.testing.node.internal.DriverDSLImpl.Waitable"]},{"name":"object APPROVING : ProgressTracker.Step","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion.APPROVING","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/-companion/-a-p-p-r-o-v-i-n-g/index.html","searchKeys":["APPROVING","object APPROVING : ProgressTracker.Step","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion.APPROVING"]},{"name":"object ATTEMPT : ProgressTracker.Step","description":"net.corda.core.flows.WithReferencedStatesFlow.Companion.ATTEMPT","location":"docs/net.corda.core.flows/-with-referenced-states-flow/-companion/-a-t-t-e-m-p-t/index.html","searchKeys":["ATTEMPT","object ATTEMPT : ProgressTracker.Step","net.corda.core.flows.WithReferencedStatesFlow.Companion.ATTEMPT"]},{"name":"object AWAITING_PROPOSAL : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.AWAITING_PROPOSAL","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/-companion/-a-w-a-i-t-i-n-g_-p-r-o-p-o-s-a-l/index.html","searchKeys":["AWAITING_PROPOSAL","object AWAITING_PROPOSAL : ProgressTracker.Step","net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.AWAITING_PROPOSAL"]},{"name":"object AlwaysAcceptAttachmentConstraint : AttachmentConstraint","description":"net.corda.core.contracts.AlwaysAcceptAttachmentConstraint","location":"docs/net.corda.core.contracts/-always-accept-attachment-constraint/index.html","searchKeys":["AlwaysAcceptAttachmentConstraint","object AlwaysAcceptAttachmentConstraint : AttachmentConstraint","net.corda.core.contracts.AlwaysAcceptAttachmentConstraint"]},{"name":"object AmountDeserializer","description":"net.corda.client.jackson.JacksonSupport.AmountDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-amount-deserializer/index.html","searchKeys":["AmountDeserializer","object AmountDeserializer","net.corda.client.jackson.JacksonSupport.AmountDeserializer"]},{"name":"object AmountSerializer","description":"net.corda.client.jackson.JacksonSupport.AmountSerializer","location":"docs/net.corda.client.jackson/-jackson-support/-amount-serializer/index.html","searchKeys":["AmountSerializer","object AmountSerializer","net.corda.client.jackson.JacksonSupport.AmountSerializer"]},{"name":"object AnonymousPartyDeserializer","description":"net.corda.client.jackson.JacksonSupport.AnonymousPartyDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-anonymous-party-deserializer/index.html","searchKeys":["AnonymousPartyDeserializer","object AnonymousPartyDeserializer","net.corda.client.jackson.JacksonSupport.AnonymousPartyDeserializer"]},{"name":"object AnonymousPartySerializer","description":"net.corda.client.jackson.JacksonSupport.AnonymousPartySerializer","location":"docs/net.corda.client.jackson/-jackson-support/-anonymous-party-serializer/index.html","searchKeys":["AnonymousPartySerializer","object AnonymousPartySerializer","net.corda.client.jackson.JacksonSupport.AnonymousPartySerializer"]},{"name":"object AttachmentURLStreamHandlerFactory : URLStreamHandlerFactory","description":"net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory","location":"docs/net.corda.core.serialization.internal/-attachment-u-r-l-stream-handler-factory/index.html","searchKeys":["AttachmentURLStreamHandlerFactory","object AttachmentURLStreamHandlerFactory : URLStreamHandlerFactory","net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory"]},{"name":"object AttachmentsClassLoaderBuilder","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderBuilder","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-builder/index.html","searchKeys":["AttachmentsClassLoaderBuilder","object AttachmentsClassLoaderBuilder","net.corda.core.serialization.internal.AttachmentsClassLoaderBuilder"]},{"name":"object AutomaticHashConstraint : AttachmentConstraint","description":"net.corda.core.contracts.AutomaticHashConstraint","location":"docs/net.corda.core.contracts/-automatic-hash-constraint/index.html","searchKeys":["AutomaticHashConstraint","object AutomaticHashConstraint : AttachmentConstraint","net.corda.core.contracts.AutomaticHashConstraint"]},{"name":"object AutomaticPlaceholderConstraint : AttachmentConstraint","description":"net.corda.core.contracts.AutomaticPlaceholderConstraint","location":"docs/net.corda.core.contracts/-automatic-placeholder-constraint/index.html","searchKeys":["AutomaticPlaceholderConstraint","object AutomaticPlaceholderConstraint : AttachmentConstraint","net.corda.core.contracts.AutomaticPlaceholderConstraint"]},{"name":"object BROADCASTING : ProgressTracker.Step","description":"net.corda.core.flows.FinalityFlow.Companion.BROADCASTING","location":"docs/net.corda.core.flows/-finality-flow/-companion/-b-r-o-a-d-c-a-s-t-i-n-g/index.html","searchKeys":["BROADCASTING","object BROADCASTING : ProgressTracker.Step","net.corda.core.flows.FinalityFlow.Companion.BROADCASTING"]},{"name":"object BROADCASTING_NOTARY_ERROR : ProgressTracker.Step","description":"net.corda.core.flows.FinalityFlow.Companion.BROADCASTING_NOTARY_ERROR","location":"docs/net.corda.core.flows/-finality-flow/-companion/-b-r-o-a-d-c-a-s-t-i-n-g_-n-o-t-a-r-y_-e-r-r-o-r/index.html","searchKeys":["BROADCASTING_NOTARY_ERROR","object BROADCASTING_NOTARY_ERROR : ProgressTracker.Step","net.corda.core.flows.FinalityFlow.Companion.BROADCASTING_NOTARY_ERROR"]},{"name":"object BROADCASTING_POST_NOTARISATION : ProgressTracker.Step","description":"net.corda.core.flows.FinalityFlow.Companion.BROADCASTING_POST_NOTARISATION","location":"docs/net.corda.core.flows/-finality-flow/-companion/-b-r-o-a-d-c-a-s-t-i-n-g_-p-o-s-t_-n-o-t-a-r-i-s-a-t-i-o-n/index.html","searchKeys":["BROADCASTING_POST_NOTARISATION","object BROADCASTING_POST_NOTARISATION : ProgressTracker.Step","net.corda.core.flows.FinalityFlow.Companion.BROADCASTING_POST_NOTARISATION"]},{"name":"object BROADCASTING_PRE_NOTARISATION : ProgressTracker.Step","description":"net.corda.core.flows.FinalityFlow.Companion.BROADCASTING_PRE_NOTARISATION","location":"docs/net.corda.core.flows/-finality-flow/-companion/-b-r-o-a-d-c-a-s-t-i-n-g_-p-r-e_-n-o-t-a-r-i-s-a-t-i-o-n/index.html","searchKeys":["BROADCASTING_PRE_NOTARISATION","object BROADCASTING_PRE_NOTARISATION : ProgressTracker.Step","net.corda.core.flows.FinalityFlow.Companion.BROADCASTING_PRE_NOTARISATION"]},{"name":"object Builder","description":"net.corda.core.node.services.vault.Builder","location":"docs/net.corda.core.node.services.vault/-builder/index.html","searchKeys":["Builder","object Builder","net.corda.core.node.services.vault.Builder"]},{"name":"object COLLECTING : ProgressTracker.Step","description":"net.corda.core.flows.CollectSignaturesFlow.Companion.COLLECTING","location":"docs/net.corda.core.flows/-collect-signatures-flow/-companion/-c-o-l-l-e-c-t-i-n-g/index.html","searchKeys":["COLLECTING","object COLLECTING : ProgressTracker.Step","net.corda.core.flows.CollectSignaturesFlow.Companion.COLLECTING"]},{"name":"object COLLECTING_SIGNATURES : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.COLLECTING_SIGNATURES","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-companion/-c-o-l-l-e-c-t-i-n-g_-s-i-g-n-a-t-u-r-e-s/index.html","searchKeys":["COLLECTING_SIGNATURES","object COLLECTING_SIGNATURES : ProgressTracker.Step","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.COLLECTING_SIGNATURES"]},{"name":"object COLLECTING_SIGNATURES : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.COLLECTING_SIGNATURES","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-c-o-l-l-e-c-t-i-n-g_-s-i-g-n-a-t-u-r-e-s/index.html","searchKeys":["COLLECTING_SIGNATURES","object COLLECTING_SIGNATURES : ProgressTracker.Step","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.COLLECTING_SIGNATURES"]},{"name":"object CashSchema","description":"net.corda.finance.schemas.CashSchema","location":"docs/net.corda.finance.schemas/-cash-schema/index.html","searchKeys":["CashSchema","object CashSchema","net.corda.finance.schemas.CashSchema"]},{"name":"object CashSchema","description":"net.corda.finance.test.CashSchema","location":"docs/net.corda.finance.test/-cash-schema/index.html","searchKeys":["CashSchema","object CashSchema","net.corda.finance.test.CashSchema"]},{"name":"object CashSchemaV1 : MappedSchema","description":"net.corda.finance.schemas.CashSchemaV1","location":"docs/net.corda.finance.schemas/-cash-schema-v1/index.html","searchKeys":["CashSchemaV1","object CashSchemaV1 : MappedSchema","net.corda.finance.schemas.CashSchemaV1"]},{"name":"object CashUtils","description":"net.corda.finance.workflows.asset.CashUtils","location":"docs/net.corda.finance.workflows.asset/-cash-utils/index.html","searchKeys":["CashUtils","object CashUtils","net.corda.finance.workflows.asset.CashUtils"]},{"name":"object CheckpointRpcHelper","description":"net.corda.testing.driver.internal.checkpoint.CheckpointRpcHelper","location":"docs/net.corda.testing.driver.internal.checkpoint/-checkpoint-rpc-helper/index.html","searchKeys":["CheckpointRpcHelper","object CheckpointRpcHelper","net.corda.testing.driver.internal.checkpoint.CheckpointRpcHelper"]},{"name":"object CheckpointSerializationDefaults","description":"net.corda.core.serialization.internal.CheckpointSerializationDefaults","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-defaults/index.html","searchKeys":["CheckpointSerializationDefaults","object CheckpointSerializationDefaults","net.corda.core.serialization.internal.CheckpointSerializationDefaults"]},{"name":"object CommercialPaperSchema","description":"net.corda.finance.schemas.CommercialPaperSchema","location":"docs/net.corda.finance.schemas/-commercial-paper-schema/index.html","searchKeys":["CommercialPaperSchema","object CommercialPaperSchema","net.corda.finance.schemas.CommercialPaperSchema"]},{"name":"object CommercialPaperSchemaV1 : MappedSchema","description":"net.corda.finance.schemas.CommercialPaperSchemaV1","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/index.html","searchKeys":["CommercialPaperSchemaV1","object CommercialPaperSchemaV1 : MappedSchema","net.corda.finance.schemas.CommercialPaperSchemaV1"]},{"name":"object CommercialPaperUtils","description":"net.corda.finance.workflows.CommercialPaperUtils","location":"docs/net.corda.finance.workflows/-commercial-paper-utils/index.html","searchKeys":["CommercialPaperUtils","object CommercialPaperUtils","net.corda.finance.workflows.CommercialPaperUtils"]},{"name":"object CommonSchema","description":"net.corda.core.schemas.CommonSchema","location":"docs/net.corda.core.schemas/-common-schema/index.html","searchKeys":["CommonSchema","object CommonSchema","net.corda.core.schemas.CommonSchema"]},{"name":"object CommonSchemaV1 : MappedSchema","description":"net.corda.core.schemas.CommonSchemaV1","location":"docs/net.corda.core.schemas/-common-schema-v1/index.html","searchKeys":["CommonSchemaV1","object CommonSchemaV1 : MappedSchema","net.corda.core.schemas.CommonSchemaV1"]},{"name":"object Companion","description":"net.corda.client.jackson.StringToMethodCallParser.Companion","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.client.jackson.StringToMethodCallParser.Companion"]},{"name":"object Companion","description":"net.corda.client.rpc.CordaRPCClient.Companion","location":"docs/net.corda.client.rpc/-corda-r-p-c-client/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.client.rpc.CordaRPCClient.Companion"]},{"name":"object Companion","description":"net.corda.client.rpc.CordaRPCClientConfiguration.Companion","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.client.rpc.CordaRPCClientConfiguration.Companion"]},{"name":"object Companion","description":"net.corda.client.rpc.CordaRPCConnection.Companion","location":"docs/net.corda.client.rpc/-corda-r-p-c-connection/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.client.rpc.CordaRPCConnection.Companion"]},{"name":"object Companion","description":"net.corda.client.rpc.internal.RPCClient.Companion","location":"docs/net.corda.client.rpc.internal/-r-p-c-client/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.client.rpc.internal.RPCClient.Companion"]},{"name":"object Companion","description":"net.corda.client.rpc.internal.RPCClientTelemetry.Companion","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.client.rpc.internal.RPCClientTelemetry.Companion"]},{"name":"object Companion","description":"net.corda.core.context.Actor.Companion","location":"docs/net.corda.core.context/-actor/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.context.Actor.Companion"]},{"name":"object Companion","description":"net.corda.core.context.InvocationContext.Companion","location":"docs/net.corda.core.context/-invocation-context/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.context.InvocationContext.Companion"]},{"name":"object Companion","description":"net.corda.core.context.Trace.Companion","location":"docs/net.corda.core.context/-trace/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.context.Trace.Companion"]},{"name":"object Companion","description":"net.corda.core.context.Trace.InvocationId.Companion","location":"docs/net.corda.core.context/-trace/-invocation-id/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.context.Trace.InvocationId.Companion"]},{"name":"object Companion","description":"net.corda.core.context.Trace.SessionId.Companion","location":"docs/net.corda.core.context/-trace/-session-id/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.context.Trace.SessionId.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.Amount.Companion","location":"docs/net.corda.core.contracts/-amount/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.Amount.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.AmountTransfer.Companion","location":"docs/net.corda.core.contracts/-amount-transfer/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.AmountTransfer.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.ContractAttachment.Companion","location":"docs/net.corda.core.contracts/-contract-attachment/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.ContractAttachment.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.HashAttachmentConstraint.Companion","location":"docs/net.corda.core.contracts/-hash-attachment-constraint/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.HashAttachmentConstraint.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.PrivacySalt.Companion","location":"docs/net.corda.core.contracts/-privacy-salt/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.PrivacySalt.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.StatePointer.Companion","location":"docs/net.corda.core.contracts/-state-pointer/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.StatePointer.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.TimeWindow.Companion","location":"docs/net.corda.core.contracts/-time-window/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.TimeWindow.Companion"]},{"name":"object Companion","description":"net.corda.core.contracts.UniqueIdentifier.Companion","location":"docs/net.corda.core.contracts/-unique-identifier/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.contracts.UniqueIdentifier.Companion"]},{"name":"object Companion","description":"net.corda.core.cordapp.CordappContext.Companion","location":"docs/net.corda.core.cordapp/-cordapp-context/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.cordapp.CordappContext.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.CompositeKey.Companion","location":"docs/net.corda.core.crypto/-composite-key/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.CompositeKey.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.CompositeSignature.Companion","location":"docs/net.corda.core.crypto/-composite-signature/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.CompositeSignature.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.CompositeSignaturesWithKeys.Companion","location":"docs/net.corda.core.crypto/-composite-signatures-with-keys/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.CompositeSignaturesWithKeys.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.CordaSecurityProvider.Companion","location":"docs/net.corda.core.crypto/-corda-security-provider/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.CordaSecurityProvider.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.DigestService.Companion","location":"docs/net.corda.core.crypto/-digest-service/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.DigestService.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.MerkleTree.Companion","location":"docs/net.corda.core.crypto/-merkle-tree/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.MerkleTree.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.PartialMerkleTree.Companion","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.PartialMerkleTree.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.internal.AliasPrivateKey.Companion","location":"docs/net.corda.core.crypto.internal/-alias-private-key/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.internal.AliasPrivateKey.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.internal.DigestAlgorithmFactory.Companion","location":"docs/net.corda.core.crypto.internal/-digest-algorithm-factory/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.internal.DigestAlgorithmFactory.Companion"]},{"name":"object Companion","description":"net.corda.core.crypto.internal.PlatformSecureRandomService.Companion","location":"docs/net.corda.core.crypto.internal/-platform-secure-random-service/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.crypto.internal.PlatformSecureRandomService.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.CollectSignaturesFlow.Companion","location":"docs/net.corda.core.flows/-collect-signatures-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.CollectSignaturesFlow.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.ComparableRecoveryTimeWindow.Companion","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.ComparableRecoveryTimeWindow.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.FinalityFlow.Companion","location":"docs/net.corda.core.flows/-finality-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.FinalityFlow.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.FlowLogic.Companion","location":"docs/net.corda.core.flows/-flow-logic/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.FlowLogic.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.FlowTimeWindow.Companion","location":"docs/net.corda.core.flows/-flow-time-window/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.FlowTimeWindow.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.NotarisationRequest.Companion","location":"docs/net.corda.core.flows/-notarisation-request/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.NotarisationRequest.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.NotaryError.Companion","location":"docs/net.corda.core.flows/-notary-error/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.NotaryError.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.NotaryError.TimeWindowInvalid.Companion","location":"docs/net.corda.core.flows/-notary-error/-time-window-invalid/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.NotaryError.TimeWindowInvalid.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.NotaryFlow.Client.Companion","location":"docs/net.corda.core.flows/-notary-flow/-client/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.NotaryFlow.Client.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.RecoveryTimeWindow.Companion","location":"docs/net.corda.core.flows/-recovery-time-window/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.RecoveryTimeWindow.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.SendTransactionFlow.Companion","location":"docs/net.corda.core.flows/-send-transaction-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.SendTransactionFlow.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.SignTransactionFlow.Companion","location":"docs/net.corda.core.flows/-sign-transaction-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.SignTransactionFlow.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.StateMachineRunId.Companion","location":"docs/net.corda.core.flows/-state-machine-run-id/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.StateMachineRunId.Companion"]},{"name":"object Companion","description":"net.corda.core.flows.WithReferencedStatesFlow.Companion","location":"docs/net.corda.core.flows/-with-referenced-states-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.flows.WithReferencedStatesFlow.Companion"]},{"name":"object Companion","description":"net.corda.core.identity.AnonymousParty.Companion","location":"docs/net.corda.core.identity/-anonymous-party/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.identity.AnonymousParty.Companion"]},{"name":"object Companion","description":"net.corda.core.identity.Party.Companion","location":"docs/net.corda.core.identity/-party/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.identity.Party.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.AbstractAttachment.Companion","location":"docs/net.corda.core.internal/-abstract-attachment/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.AbstractAttachment.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.CertRole.Companion","location":"docs/net.corda.core.internal/-cert-role/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.CertRole.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.HashAgility.Companion","location":"docs/net.corda.core.internal/-hash-agility/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.HashAgility.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.InheritableThreadLocalToggleField.Companion","location":"docs/net.corda.core.internal/-inheritable-thread-local-toggle-field/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.InheritableThreadLocalToggleField.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.InputStreamAndHash.Companion","location":"docs/net.corda.core.internal/-input-stream-and-hash/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.InputStreamAndHash.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.LegalNameValidator.Rule.Companion","location":"docs/net.corda.core.internal/-legal-name-validator/-rule/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.LegalNameValidator.Rule.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.NamedCacheFactory.Companion","location":"docs/net.corda.core.internal/-named-cache-factory/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.NamedCacheFactory.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.WaitForStateConsumption.Companion","location":"docs/net.corda.core.internal/-wait-for-state-consumption/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.WaitForStateConsumption.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.concurrent.CordaFutureImpl.Companion","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.concurrent.CordaFutureImpl.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.cordapp.CordappImpl.Companion","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.cordapp.CordappImpl.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.Companion","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.cordapp.KotlinMetadataVersion.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.cordapp.LanguageVersion.Bytecode.Companion","location":"docs/net.corda.core.internal.cordapp/-language-version/-bytecode/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.cordapp.LanguageVersion.Bytecode.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.notary.NotaryServiceFlow.Companion","location":"docs/net.corda.core.internal.notary/-notary-service-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.notary.NotaryServiceFlow.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.notary.SinglePartyNotaryService.Companion","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.notary.SinglePartyNotaryService.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.Companion","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.Companion","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.telemetry.TelemetryServiceImpl.Companion"]},{"name":"object Companion","description":"net.corda.core.internal.utilities.PrivateInterner.Companion","location":"docs/net.corda.core.internal.utilities/-private-interner/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.internal.utilities.PrivateInterner.Companion"]},{"name":"object Companion","description":"net.corda.core.node.AppServiceHub.Companion","location":"docs/net.corda.core.node/-app-service-hub/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.node.AppServiceHub.Companion"]},{"name":"object Companion","description":"net.corda.core.node.services.IdentityService.Companion","location":"docs/net.corda.core.node.services/-identity-service/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.node.services.IdentityService.Companion"]},{"name":"object Companion","description":"net.corda.core.node.services.Vault.Companion","location":"docs/net.corda.core.node.services/-vault/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.node.services.Vault.Companion"]},{"name":"object Companion","description":"net.corda.core.node.services.Vault.ConstraintInfo.Companion","location":"docs/net.corda.core.node.services/-vault/-constraint-info/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.node.services.Vault.ConstraintInfo.Companion"]},{"name":"object Companion","description":"net.corda.core.serialization.SerializationFactory.Companion","location":"docs/net.corda.core.serialization/-serialization-factory/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.serialization.SerializationFactory.Companion"]},{"name":"object Companion","description":"net.corda.core.serialization.SerializedBytes.Companion","location":"docs/net.corda.core.serialization/-serialized-bytes/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.serialization.SerializedBytes.Companion"]},{"name":"object Companion","description":"net.corda.core.serialization.SingletonSerializationToken.Companion","location":"docs/net.corda.core.serialization/-singleton-serialization-token/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.serialization.SingletonSerializationToken.Companion"]},{"name":"object Companion","description":"net.corda.core.serialization.internal.AttachmentsClassLoader.Companion","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.serialization.internal.AttachmentsClassLoader.Companion"]},{"name":"object Companion","description":"net.corda.core.serialization.internal.CustomSerializationSchemeUtils.Companion","location":"docs/net.corda.core.serialization.internal/-custom-serialization-scheme-utils/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.serialization.internal.CustomSerializationSchemeUtils.Companion"]},{"name":"object Companion","description":"net.corda.core.serialization.internal.SerializationEnvironment.Companion","location":"docs/net.corda.core.serialization.internal/-serialization-environment/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.serialization.internal.SerializationEnvironment.Companion"]},{"name":"object Companion","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.Companion","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.transactions.ContractUpgradeLedgerTransaction.Companion"]},{"name":"object Companion","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.Companion","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.transactions.ContractUpgradeWireTransaction.Companion"]},{"name":"object Companion","description":"net.corda.core.transactions.FilteredTransaction.Companion","location":"docs/net.corda.core.transactions/-filtered-transaction/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.transactions.FilteredTransaction.Companion"]},{"name":"object Companion","description":"net.corda.core.transactions.LedgerTransaction.Companion","location":"docs/net.corda.core.transactions/-ledger-transaction/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.transactions.LedgerTransaction.Companion"]},{"name":"object Companion","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.Companion","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.transactions.NotaryChangeLedgerTransaction.Companion"]},{"name":"object Companion","description":"net.corda.core.utilities.ByteSequence.Companion","location":"docs/net.corda.core.utilities/-byte-sequence/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.utilities.ByteSequence.Companion"]},{"name":"object Companion","description":"net.corda.core.utilities.Id.Companion","location":"docs/net.corda.core.utilities/-id/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.utilities.Id.Companion"]},{"name":"object Companion","description":"net.corda.core.utilities.NetworkHostAndPort.Companion","location":"docs/net.corda.core.utilities/-network-host-and-port/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.utilities.NetworkHostAndPort.Companion"]},{"name":"object Companion","description":"net.corda.core.utilities.NonEmptySet.Companion","location":"docs/net.corda.core.utilities/-non-empty-set/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.utilities.NonEmptySet.Companion"]},{"name":"object Companion","description":"net.corda.core.utilities.OpaqueBytes.Companion","location":"docs/net.corda.core.utilities/-opaque-bytes/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.utilities.OpaqueBytes.Companion"]},{"name":"object Companion","description":"net.corda.core.utilities.Try.Companion","location":"docs/net.corda.core.utilities/-try/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.utilities.Try.Companion"]},{"name":"object Companion","description":"net.corda.core.utilities.UuidGenerator.Companion","location":"docs/net.corda.core.utilities/-uuid-generator/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.core.utilities.UuidGenerator.Companion"]},{"name":"object Companion","description":"net.corda.finance.contracts.BusinessCalendar.Companion","location":"docs/net.corda.finance.contracts/-business-calendar/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.contracts.BusinessCalendar.Companion"]},{"name":"object Companion","description":"net.corda.finance.contracts.CommercialPaper.Companion","location":"docs/net.corda.finance.contracts/-commercial-paper/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.contracts.CommercialPaper.Companion"]},{"name":"object Companion","description":"net.corda.finance.contracts.Commodity.Companion","location":"docs/net.corda.finance.contracts/-commodity/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.contracts.Commodity.Companion"]},{"name":"object Companion","description":"net.corda.finance.contracts.asset.Cash.Companion","location":"docs/net.corda.finance.contracts.asset/-cash/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.contracts.asset.Cash.Companion"]},{"name":"object Companion","description":"net.corda.finance.contracts.asset.Obligation.Companion","location":"docs/net.corda.finance.contracts.asset/-obligation/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.contracts.asset.Obligation.Companion"]},{"name":"object Companion","description":"net.corda.finance.contracts.asset.OnLedgerAsset.Companion","location":"docs/net.corda.finance.contracts.asset/-on-ledger-asset/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.contracts.asset.OnLedgerAsset.Companion"]},{"name":"object Companion","description":"net.corda.finance.flows.AbstractCashFlow.Companion","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.flows.AbstractCashFlow.Companion"]},{"name":"object Companion","description":"net.corda.finance.flows.CashExitFlow.Companion","location":"docs/net.corda.finance.flows/-cash-exit-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.flows.CashExitFlow.Companion"]},{"name":"object Companion","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.Companion","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.flows.CashIssueAndPaymentFlow.Companion"]},{"name":"object Companion","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion"]},{"name":"object Companion","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion"]},{"name":"object Companion","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion"]},{"name":"object Companion","description":"net.corda.finance.internal.ConfigHolder.Companion","location":"docs/net.corda.finance.internal/-config-holder/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.internal.ConfigHolder.Companion"]},{"name":"object Companion","description":"net.corda.finance.workflows.asset.selection.AbstractCashSelection.Companion","location":"docs/net.corda.finance.workflows.asset.selection/-abstract-cash-selection/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.workflows.asset.selection.AbstractCashSelection.Companion"]},{"name":"object Companion","description":"net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.Companion","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-h2-impl/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.Companion"]},{"name":"object Companion","description":"net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.Companion","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-postgre-s-q-l-impl/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.Companion"]},{"name":"object Companion","description":"net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.Companion","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-s-q-l-server-impl/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.Companion"]},{"name":"object Companion","description":"net.corda.testing.driver.JmxPolicy.Companion","location":"docs/net.corda.testing.driver/-jmx-policy/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.driver.JmxPolicy.Companion"]},{"name":"object Companion","description":"net.corda.testing.driver.PortAllocation.Companion","location":"docs/net.corda.testing.driver/-port-allocation/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.driver.PortAllocation.Companion"]},{"name":"object Companion","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.Companion","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.dsl.TestLedgerDSLInterpreter.Companion"]},{"name":"object Companion","description":"net.corda.testing.http.HttpApi.Companion","location":"docs/net.corda.testing.http/-http-api/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.http.HttpApi.Companion"]},{"name":"object Companion","description":"net.corda.testing.internal.vault.VaultFiller.Companion","location":"docs/net.corda.testing.internal.vault/-vault-filler/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.internal.vault.VaultFiller.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.InMemoryMessagingNetwork.Companion","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.InMemoryMessagingNetwork.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.Companion","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-message-transfer/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.InMemoryMessagingNetwork.MockMessagingService.Companion","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-mock-messaging-service/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.InMemoryMessagingNetwork.MockMessagingService.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.MockServices.Companion","location":"docs/net.corda.testing.node/-mock-services/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.MockServices.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.StartedMockNode.Companion","location":"docs/net.corda.testing.node/-started-mock-node/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.StartedMockNode.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.TestCordapp.Companion","location":"docs/net.corda.testing.node/-test-cordapp/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.TestCordapp.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.UnstartedMockNode.Companion","location":"docs/net.corda.testing.node/-unstarted-mock-node/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.UnstartedMockNode.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.CustomCordapp.Companion","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.CustomCordapp.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.DriverDSLImpl.Companion","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.DriverDSLImpl.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.InternalMockNetwork.Companion","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.InternalMockNetwork.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.Companion","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.InternalMockNetwork.MockNode.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.NodeBasedTest.Companion","location":"docs/net.corda.testing.node.internal/-node-based-test/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.NodeBasedTest.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.RandomRpcUser.Companion","location":"docs/net.corda.testing.node.internal/-random-rpc-user/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.RandomRpcUser.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.Companion","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.ScanPackageTestCordapp.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.ShutdownManager.Companion","location":"docs/net.corda.testing.node.internal/-shutdown-manager/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.ShutdownManager.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.TestCordappInternal.Companion","location":"docs/net.corda.testing.node.internal/-test-cordapp-internal/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.TestCordappInternal.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.network.CrlServer.Companion","location":"docs/net.corda.testing.node.internal.network/-crl-server/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.network.CrlServer.Companion"]},{"name":"object Companion","description":"net.corda.testing.node.internal.network.NetworkMapServer.Companion","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-companion/index.html","searchKeys":["Companion","object Companion","net.corda.testing.node.internal.network.NetworkMapServer.Companion"]},{"name":"object Companion : Internable<AbstractParty> ","description":"net.corda.core.identity.AbstractParty.Companion","location":"docs/net.corda.core.identity/-abstract-party/-companion/index.html","searchKeys":["Companion","object Companion : Internable<AbstractParty> ","net.corda.core.identity.AbstractParty.Companion"]},{"name":"object Companion : Internable<CordaX500Name> ","description":"net.corda.core.identity.CordaX500Name.Companion","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/index.html","searchKeys":["Companion","object Companion : Internable<CordaX500Name> ","net.corda.core.identity.CordaX500Name.Companion"]},{"name":"object Companion : Internable<SecureHash> ","description":"net.corda.core.crypto.SecureHash.Companion","location":"docs/net.corda.core.crypto/-secure-hash/-companion/index.html","searchKeys":["Companion","object Companion : Internable<SecureHash> ","net.corda.core.crypto.SecureHash.Companion"]},{"name":"object Companion : Internable<SignatureAttachmentConstraint> ","description":"net.corda.core.contracts.SignatureAttachmentConstraint.Companion","location":"docs/net.corda.core.contracts/-signature-attachment-constraint/-companion/index.html","searchKeys":["Companion","object Companion : Internable<SignatureAttachmentConstraint> ","net.corda.core.contracts.SignatureAttachmentConstraint.Companion"]},{"name":"object ContractStateClassCache","description":"net.corda.core.internal.ContractStateClassCache","location":"docs/net.corda.core.internal/-contract-state-class-cache/index.html","searchKeys":["ContractStateClassCache","object ContractStateClassCache","net.corda.core.internal.ContractStateClassCache"]},{"name":"object ContractUpgradeFlow","description":"net.corda.core.flows.ContractUpgradeFlow","location":"docs/net.corda.core.flows/-contract-upgrade-flow/index.html","searchKeys":["ContractUpgradeFlow","object ContractUpgradeFlow","net.corda.core.flows.ContractUpgradeFlow"]},{"name":"object ContractUpgradeUtils","description":"net.corda.core.internal.ContractUpgradeUtils","location":"docs/net.corda.core.internal/-contract-upgrade-utils/index.html","searchKeys":["ContractUpgradeUtils","object ContractUpgradeUtils","net.corda.core.internal.ContractUpgradeUtils"]},{"name":"object CordaOID","description":"net.corda.core.CordaOID","location":"docs/net.corda.core/-corda-o-i-d/index.html","searchKeys":["CordaOID","object CordaOID","net.corda.core.CordaOID"]},{"name":"object CordaObjectIdentifier","description":"net.corda.core.crypto.CordaObjectIdentifier","location":"docs/net.corda.core.crypto/-corda-object-identifier/index.html","searchKeys":["CordaObjectIdentifier","object CordaObjectIdentifier","net.corda.core.crypto.CordaObjectIdentifier"]},{"name":"object CordaX500NameDeserializer","description":"net.corda.client.jackson.JacksonSupport.CordaX500NameDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-corda-x500-name-deserializer/index.html","searchKeys":["CordaX500NameDeserializer","object CordaX500NameDeserializer","net.corda.client.jackson.JacksonSupport.CordaX500NameDeserializer"]},{"name":"object CordaX500NameSerializer","description":"net.corda.client.jackson.JacksonSupport.CordaX500NameSerializer","location":"docs/net.corda.client.jackson/-jackson-support/-corda-x500-name-serializer/index.html","searchKeys":["CordaX500NameSerializer","object CordaX500NameSerializer","net.corda.client.jackson.JacksonSupport.CordaX500NameSerializer"]},{"name":"object Crypto","description":"net.corda.core.crypto.Crypto","location":"docs/net.corda.core.crypto/-crypto/index.html","searchKeys":["Crypto","object Crypto","net.corda.core.crypto.Crypto"]},{"name":"object Curve25519","description":"net.corda.core.crypto.internal.Curve25519","location":"docs/net.corda.core.crypto.internal/-curve25519/index.html","searchKeys":["Curve25519","object Curve25519","net.corda.core.crypto.internal.Curve25519"]},{"name":"object DONE : ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.DONE","location":"docs/net.corda.core.utilities/-progress-tracker/-d-o-n-e/index.html","searchKeys":["DONE","object DONE : ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.DONE"]},{"name":"object Data : LanguageVersion","description":"net.corda.core.internal.cordapp.LanguageVersion.Data","location":"docs/net.corda.core.internal.cordapp/-language-version/-data/index.html","searchKeys":["Data","object Data : LanguageVersion","net.corda.core.internal.cordapp.LanguageVersion.Data"]},{"name":"object DatabaseSnapshot","description":"net.corda.testing.node.DatabaseSnapshot","location":"docs/net.corda.testing.node/-database-snapshot/index.html","searchKeys":["DatabaseSnapshot","object DatabaseSnapshot","net.corda.testing.node.DatabaseSnapshot"]},{"name":"object DummyDealStateSchema","description":"net.corda.testing.internal.vault.DummyDealStateSchema","location":"docs/net.corda.testing.internal.vault/-dummy-deal-state-schema/index.html","searchKeys":["DummyDealStateSchema","object DummyDealStateSchema","net.corda.testing.internal.vault.DummyDealStateSchema"]},{"name":"object DummyDealStateSchemaV1 : MappedSchema","description":"net.corda.testing.internal.vault.DummyDealStateSchemaV1","location":"docs/net.corda.testing.internal.vault/-dummy-deal-state-schema-v1/index.html","searchKeys":["DummyDealStateSchemaV1","object DummyDealStateSchemaV1 : MappedSchema","net.corda.testing.internal.vault.DummyDealStateSchemaV1"]},{"name":"object DummyLinearStateSchema","description":"net.corda.testing.internal.vault.DummyLinearStateSchema","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema/index.html","searchKeys":["DummyLinearStateSchema","object DummyLinearStateSchema","net.corda.testing.internal.vault.DummyLinearStateSchema"]},{"name":"object DummyLinearStateSchemaV1 : MappedSchema","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/index.html","searchKeys":["DummyLinearStateSchemaV1","object DummyLinearStateSchemaV1 : MappedSchema","net.corda.testing.internal.vault.DummyLinearStateSchemaV1"]},{"name":"object DummyLinearStateSchemaV2 : MappedSchema","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/index.html","searchKeys":["DummyLinearStateSchemaV2","object DummyLinearStateSchemaV2 : MappedSchema","net.corda.testing.internal.vault.DummyLinearStateSchemaV2"]},{"name":"object DummySecureRandom : SecureRandom","description":"net.corda.core.crypto.DummySecureRandom","location":"docs/net.corda.core.crypto/-dummy-secure-random/index.html","searchKeys":["DummySecureRandom","object DummySecureRandom : SecureRandom","net.corda.core.crypto.DummySecureRandom"]},{"name":"object Emoji","description":"net.corda.core.internal.Emoji","location":"docs/net.corda.core.internal/-emoji/index.html","searchKeys":["Emoji","object Emoji","net.corda.core.internal.Emoji"]},{"name":"object End : FetchDataFlow.Request","description":"net.corda.core.internal.FetchDataFlow.Request.End","location":"docs/net.corda.core.internal/-fetch-data-flow/-request/-end/index.html","searchKeys":["End","object End : FetchDataFlow.Request","net.corda.core.internal.FetchDataFlow.Request.End"]},{"name":"object FINALISING_TRANSACTION : ProgressTracker.Step","description":"net.corda.core.flows.FinalityFlow.Companion.FINALISING_TRANSACTION","location":"docs/net.corda.core.flows/-finality-flow/-companion/-f-i-n-a-l-i-s-i-n-g_-t-r-a-n-s-a-c-t-i-o-n/index.html","searchKeys":["FINALISING_TRANSACTION","object FINALISING_TRANSACTION : ProgressTracker.Step","net.corda.core.flows.FinalityFlow.Companion.FINALISING_TRANSACTION"]},{"name":"object FINALISING_TX : ProgressTracker.Step","description":"net.corda.finance.flows.AbstractCashFlow.Companion.FINALISING_TX","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-companion/-f-i-n-a-l-i-s-i-n-g_-t-x/index.html","searchKeys":["FINALISING_TX","object FINALISING_TX : ProgressTracker.Step","net.corda.finance.flows.AbstractCashFlow.Companion.FINALISING_TX"]},{"name":"object ForceCheckpoint : FlowIORequest<Unit> ","description":"net.corda.core.internal.FlowIORequest.ForceCheckpoint","location":"docs/net.corda.core.internal/-flow-i-o-request/-force-checkpoint/index.html","searchKeys":["ForceCheckpoint","object ForceCheckpoint : FlowIORequest<Unit> ","net.corda.core.internal.FlowIORequest.ForceCheckpoint"]},{"name":"object GENERATING_ID : ProgressTracker.Step","description":"net.corda.finance.flows.AbstractCashFlow.Companion.GENERATING_ID","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-companion/-g-e-n-e-r-a-t-i-n-g_-i-d/index.html","searchKeys":["GENERATING_ID","object GENERATING_ID : ProgressTracker.Step","net.corda.finance.flows.AbstractCashFlow.Companion.GENERATING_ID"]},{"name":"object GENERATING_ID : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion.GENERATING_ID","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/-companion/-g-e-n-e-r-a-t-i-n-g_-i-d/index.html","searchKeys":["GENERATING_ID","object GENERATING_ID : ProgressTracker.Step","net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion.GENERATING_ID"]},{"name":"object GENERATING_TX : ProgressTracker.Step","description":"net.corda.finance.flows.AbstractCashFlow.Companion.GENERATING_TX","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-companion/-g-e-n-e-r-a-t-i-n-g_-t-x/index.html","searchKeys":["GENERATING_TX","object GENERATING_TX : ProgressTracker.Step","net.corda.finance.flows.AbstractCashFlow.Companion.GENERATING_TX"]},{"name":"object HttpUtils","description":"net.corda.testing.http.HttpUtils","location":"docs/net.corda.testing.http/-http-utils/index.html","searchKeys":["HttpUtils","object HttpUtils","net.corda.testing.http.HttpUtils"]},{"name":"object Instances","description":"net.corda.core.crypto.internal.Instances","location":"docs/net.corda.core.crypto.internal/-instances/index.html","searchKeys":["Instances","object Instances","net.corda.core.crypto.internal.Instances"]},{"name":"object JacksonSupport","description":"net.corda.client.jackson.JacksonSupport","location":"docs/net.corda.client.jackson/-jackson-support/index.html","searchKeys":["JacksonSupport","object JacksonSupport","net.corda.client.jackson.JacksonSupport"]},{"name":"object JarSignatureCollector","description":"net.corda.core.internal.JarSignatureCollector","location":"docs/net.corda.core.internal/-jar-signature-collector/index.html","searchKeys":["JarSignatureCollector","object JarSignatureCollector","net.corda.core.internal.JarSignatureCollector"]},{"name":"object LegalNameValidator","description":"net.corda.core.internal.LegalNameValidator","location":"docs/net.corda.core.internal/-legal-name-validator/index.html","searchKeys":["LegalNameValidator","object LegalNameValidator","net.corda.core.internal.LegalNameValidator"]},{"name":"object LogHelper","description":"net.corda.testing.internal.LogHelper","location":"docs/net.corda.testing.internal/-log-helper/index.html","searchKeys":["LogHelper","object LogHelper","net.corda.testing.internal.LogHelper"]},{"name":"object MappedSchemaValidator","description":"net.corda.core.schemas.MappedSchemaValidator","location":"docs/net.corda.core.schemas/-mapped-schema-validator/index.html","searchKeys":["MappedSchemaValidator","object MappedSchemaValidator","net.corda.core.schemas.MappedSchemaValidator"]},{"name":"object NOTARISING : ProgressTracker.Step","description":"net.corda.core.flows.FinalityFlow.Companion.NOTARISING","location":"docs/net.corda.core.flows/-finality-flow/-companion/-n-o-t-a-r-i-s-i-n-g/index.html","searchKeys":["NOTARISING","object NOTARISING : ProgressTracker.Step","net.corda.core.flows.FinalityFlow.Companion.NOTARISING"]},{"name":"object NOTARY : ProgressTracker.Step","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion.NOTARY","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/-companion/-n-o-t-a-r-y/index.html","searchKeys":["NOTARY","object NOTARY : ProgressTracker.Step","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion.NOTARY"]},{"name":"object NodeInfoDeserializer","description":"net.corda.client.jackson.JacksonSupport.NodeInfoDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-node-info-deserializer/index.html","searchKeys":["NodeInfoDeserializer","object NodeInfoDeserializer","net.corda.client.jackson.JacksonSupport.NodeInfoDeserializer"]},{"name":"object NodeInfoSerializer","description":"net.corda.client.jackson.JacksonSupport.NodeInfoSerializer","location":"docs/net.corda.client.jackson/-jackson-support/-node-info-serializer/index.html","searchKeys":["NodeInfoSerializer","object NodeInfoSerializer","net.corda.client.jackson.JacksonSupport.NodeInfoSerializer"]},{"name":"object NotarySigCheck","description":"net.corda.core.flows.NotarySigCheck","location":"docs/net.corda.core.flows/-notary-sig-check/index.html","searchKeys":["NotarySigCheck","object NotarySigCheck","net.corda.core.flows.NotarySigCheck"]},{"name":"object NullKeys","description":"net.corda.core.crypto.NullKeys","location":"docs/net.corda.core.crypto/-null-keys/index.html","searchKeys":["NullKeys","object NullKeys","net.corda.core.crypto.NullKeys"]},{"name":"object NullPublicKey : PublicKey, Comparable<PublicKey> ","description":"net.corda.core.crypto.NullKeys.NullPublicKey","location":"docs/net.corda.core.crypto/-null-keys/-null-public-key/index.html","searchKeys":["NullPublicKey","object NullPublicKey : PublicKey, Comparable<PublicKey> ","net.corda.core.crypto.NullKeys.NullPublicKey"]},{"name":"object ObligationUtils","description":"net.corda.finance.workflows.asset.ObligationUtils","location":"docs/net.corda.finance.workflows.asset/-obligation-utils/index.html","searchKeys":["ObligationUtils","object ObligationUtils","net.corda.finance.workflows.asset.ObligationUtils"]},{"name":"object OpaqueBytesDeserializer","description":"net.corda.client.jackson.JacksonSupport.OpaqueBytesDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-opaque-bytes-deserializer/index.html","searchKeys":["OpaqueBytesDeserializer","object OpaqueBytesDeserializer","net.corda.client.jackson.JacksonSupport.OpaqueBytesDeserializer"]},{"name":"object OpaqueBytesSerializer","description":"net.corda.client.jackson.JacksonSupport.OpaqueBytesSerializer","location":"docs/net.corda.client.jackson/-jackson-support/-opaque-bytes-serializer/index.html","searchKeys":["OpaqueBytesSerializer","object OpaqueBytesSerializer","net.corda.client.jackson.JacksonSupport.OpaqueBytesSerializer"]},{"name":"object PartyDeserializer","description":"net.corda.client.jackson.JacksonSupport.PartyDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-party-deserializer/index.html","searchKeys":["PartyDeserializer","object PartyDeserializer","net.corda.client.jackson.JacksonSupport.PartyDeserializer"]},{"name":"object PartySerializer","description":"net.corda.client.jackson.JacksonSupport.PartySerializer","location":"docs/net.corda.client.jackson/-jackson-support/-party-serializer/index.html","searchKeys":["PartySerializer","object PartySerializer","net.corda.client.jackson.JacksonSupport.PartySerializer"]},{"name":"object PlatformVersionSwitches","description":"net.corda.core.internal.PlatformVersionSwitches","location":"docs/net.corda.core.internal/-platform-version-switches/index.html","searchKeys":["PlatformVersionSwitches","object PlatformVersionSwitches","net.corda.core.internal.PlatformVersionSwitches"]},{"name":"object ProcessUtilities","description":"net.corda.testing.node.internal.ProcessUtilities","location":"docs/net.corda.testing.node.internal/-process-utilities/index.html","searchKeys":["ProcessUtilities","object ProcessUtilities","net.corda.testing.node.internal.ProcessUtilities"]},{"name":"object PublicKeyCache","description":"net.corda.core.crypto.internal.PublicKeyCache","location":"docs/net.corda.core.crypto.internal/-public-key-cache/index.html","searchKeys":["PublicKeyCache","object PublicKeyCache","net.corda.core.crypto.internal.PublicKeyCache"]},{"name":"object PublicKeyDeserializer","description":"net.corda.client.jackson.JacksonSupport.PublicKeyDeserializer","location":"docs/net.corda.client.jackson/-jackson-support/-public-key-deserializer/index.html","searchKeys":["PublicKeyDeserializer","object PublicKeyDeserializer","net.corda.client.jackson.JacksonSupport.PublicKeyDeserializer"]},{"name":"object PublicKeySerializer","description":"net.corda.client.jackson.JacksonSupport.PublicKeySerializer","location":"docs/net.corda.client.jackson/-jackson-support/-public-key-serializer/index.html","searchKeys":["PublicKeySerializer","object PublicKeySerializer","net.corda.client.jackson.JacksonSupport.PublicKeySerializer"]},{"name":"object RECEIVING : ProgressTracker.Step","description":"net.corda.core.flows.SignTransactionFlow.Companion.RECEIVING","location":"docs/net.corda.core.flows/-sign-transaction-flow/-companion/-r-e-c-e-i-v-i-n-g/index.html","searchKeys":["RECEIVING","object RECEIVING : ProgressTracker.Step","net.corda.core.flows.SignTransactionFlow.Companion.RECEIVING"]},{"name":"object RECEIVING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.RECEIVING","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-companion/-r-e-c-e-i-v-i-n-g/index.html","searchKeys":["RECEIVING","object RECEIVING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.RECEIVING"]},{"name":"object RECEIVING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.RECEIVING","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-r-e-c-e-i-v-i-n-g/index.html","searchKeys":["RECEIVING","object RECEIVING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.RECEIVING"]},{"name":"object RECORDING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.RECORDING","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-companion/-r-e-c-o-r-d-i-n-g/index.html","searchKeys":["RECORDING","object RECORDING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.RECORDING"]},{"name":"object RECORDING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.RECORDING","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-r-e-c-o-r-d-i-n-g/index.html","searchKeys":["RECORDING","object RECORDING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.RECORDING"]},{"name":"object RECORD_UNNOTARISED : ProgressTracker.Step","description":"net.corda.core.flows.FinalityFlow.Companion.RECORD_UNNOTARISED","location":"docs/net.corda.core.flows/-finality-flow/-companion/-r-e-c-o-r-d_-u-n-n-o-t-a-r-i-s-e-d/index.html","searchKeys":["RECORD_UNNOTARISED","object RECORD_UNNOTARISED : ProgressTracker.Step","net.corda.core.flows.FinalityFlow.Companion.RECORD_UNNOTARISED"]},{"name":"object REQUESTING : ProgressTracker.Step","description":"net.corda.core.flows.NotaryFlow.Client.Companion.REQUESTING","location":"docs/net.corda.core.flows/-notary-flow/-client/-companion/-r-e-q-u-e-s-t-i-n-g/index.html","searchKeys":["REQUESTING","object REQUESTING : ProgressTracker.Step","net.corda.core.flows.NotaryFlow.Client.Companion.REQUESTING"]},{"name":"object RETRYING : ProgressTracker.Step","description":"net.corda.core.flows.WithReferencedStatesFlow.Companion.RETRYING","location":"docs/net.corda.core.flows/-with-referenced-states-flow/-companion/-r-e-t-r-y-i-n-g/index.html","searchKeys":["RETRYING","object RETRYING : ProgressTracker.Step","net.corda.core.flows.WithReferencedStatesFlow.Companion.RETRYING"]},{"name":"object RPCUtils","description":"net.corda.client.rpc.internal.RPCUtils","location":"docs/net.corda.client.rpc.internal/-r-p-c-utils/index.html","searchKeys":["RPCUtils","object RPCUtils","net.corda.client.rpc.internal.RPCUtils"]},{"name":"object Requirements","description":"net.corda.core.contracts.Requirements","location":"docs/net.corda.core.contracts/-requirements/index.html","searchKeys":["Requirements","object Requirements","net.corda.core.contracts.Requirements"]},{"name":"object RetrieveAnyTransactionPayload","description":"net.corda.core.internal.RetrieveAnyTransactionPayload","location":"docs/net.corda.core.internal/-retrieve-any-transaction-payload/index.html","searchKeys":["RetrieveAnyTransactionPayload","object RetrieveAnyTransactionPayload","net.corda.core.internal.RetrieveAnyTransactionPayload"]},{"name":"object SENDING_PROPOSAL : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion.SENDING_PROPOSAL","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/-companion/-s-e-n-d-i-n-g_-p-r-o-p-o-s-a-l/index.html","searchKeys":["SENDING_PROPOSAL","object SENDING_PROPOSAL : ProgressTracker.Step","net.corda.finance.flows.TwoPartyDealFlow.Primary.Companion.SENDING_PROPOSAL"]},{"name":"object SIGNING : ProgressTracker.Step","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion.SIGNING","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/-companion/-s-i-g-n-i-n-g/index.html","searchKeys":["SIGNING","object SIGNING : ProgressTracker.Step","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.Companion.SIGNING"]},{"name":"object SIGNING : ProgressTracker.Step","description":"net.corda.core.flows.SignTransactionFlow.Companion.SIGNING","location":"docs/net.corda.core.flows/-sign-transaction-flow/-companion/-s-i-g-n-i-n-g/index.html","searchKeys":["SIGNING","object SIGNING : ProgressTracker.Step","net.corda.core.flows.SignTransactionFlow.Companion.SIGNING"]},{"name":"object SIGNING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.SIGNING","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-companion/-s-i-g-n-i-n-g/index.html","searchKeys":["SIGNING","object SIGNING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.SIGNING"]},{"name":"object SIGNING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SIGNING","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-s-i-g-n-i-n-g/index.html","searchKeys":["SIGNING","object SIGNING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SIGNING"]},{"name":"object SIGNING_TX : ProgressTracker.Step","description":"net.corda.finance.flows.AbstractCashFlow.Companion.SIGNING_TX","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-companion/-s-i-g-n-i-n-g_-t-x/index.html","searchKeys":["SIGNING_TX","object SIGNING_TX : ProgressTracker.Step","net.corda.finance.flows.AbstractCashFlow.Companion.SIGNING_TX"]},{"name":"object STARTING : ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.STARTING","location":"docs/net.corda.core.utilities/-progress-tracker/-s-t-a-r-t-i-n-g/index.html","searchKeys":["STARTING","object STARTING : ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.STARTING"]},{"name":"object SUCCESS : ProgressTracker.Step","description":"net.corda.core.flows.WithReferencedStatesFlow.Companion.SUCCESS","location":"docs/net.corda.core.flows/-with-referenced-states-flow/-companion/-s-u-c-c-e-s-s/index.html","searchKeys":["SUCCESS","object SUCCESS : ProgressTracker.Step","net.corda.core.flows.WithReferencedStatesFlow.Companion.SUCCESS"]},{"name":"object SampleCashSchemaV1 : MappedSchema","description":"net.corda.finance.test.SampleCashSchemaV1","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/index.html","searchKeys":["SampleCashSchemaV1","object SampleCashSchemaV1 : MappedSchema","net.corda.finance.test.SampleCashSchemaV1"]},{"name":"object SampleCashSchemaV2 : MappedSchema","description":"net.corda.finance.test.SampleCashSchemaV2","location":"docs/net.corda.finance.test/-sample-cash-schema-v2/index.html","searchKeys":["SampleCashSchemaV2","object SampleCashSchemaV2 : MappedSchema","net.corda.finance.test.SampleCashSchemaV2"]},{"name":"object SampleCashSchemaV3 : MappedSchema","description":"net.corda.finance.test.SampleCashSchemaV3","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/index.html","searchKeys":["SampleCashSchemaV3","object SampleCashSchemaV3 : MappedSchema","net.corda.finance.test.SampleCashSchemaV3"]},{"name":"object SecureHashSerializer","description":"net.corda.client.jackson.JacksonSupport.SecureHashSerializer","location":"docs/net.corda.client.jackson/-jackson-support/-secure-hash-serializer/index.html","searchKeys":["SecureHashSerializer","object SecureHashSerializer","net.corda.client.jackson.JacksonSupport.SecureHashSerializer"]},{"name":"object SerializationDefaults","description":"net.corda.core.serialization.SerializationDefaults","location":"docs/net.corda.core.serialization/-serialization-defaults/index.html","searchKeys":["SerializationDefaults","object SerializationDefaults","net.corda.core.serialization.SerializationDefaults"]},{"name":"object Shell : FlowInitiator","description":"net.corda.core.flows.FlowInitiator.Shell","location":"docs/net.corda.core.flows/-flow-initiator/-shell/index.html","searchKeys":["Shell","object Shell : FlowInitiator","net.corda.core.flows.FlowInitiator.Shell"]},{"name":"object Shell : InvocationOrigin","description":"net.corda.core.context.InvocationOrigin.Shell","location":"docs/net.corda.core.context/-invocation-origin/-shell/index.html","searchKeys":["Shell","object Shell : InvocationOrigin","net.corda.core.context.InvocationOrigin.Shell"]},{"name":"object StateContractValidationEnforcementRule","description":"net.corda.core.internal.rules.StateContractValidationEnforcementRule","location":"docs/net.corda.core.internal.rules/-state-contract-validation-enforcement-rule/index.html","searchKeys":["StateContractValidationEnforcementRule","object StateContractValidationEnforcementRule","net.corda.core.internal.rules.StateContractValidationEnforcementRule"]},{"name":"object TestCordappSigner","description":"net.corda.testing.node.internal.TestCordappSigner","location":"docs/net.corda.testing.node.internal/-test-cordapp-signer/index.html","searchKeys":["TestCordappSigner","object TestCordappSigner","net.corda.testing.node.internal.TestCordappSigner"]},{"name":"object ToStringSerializer","description":"net.corda.client.jackson.JacksonSupport.ToStringSerializer","location":"docs/net.corda.client.jackson/-jackson-support/-to-string-serializer/index.html","searchKeys":["ToStringSerializer","object ToStringSerializer","net.corda.client.jackson.JacksonSupport.ToStringSerializer"]},{"name":"object TwoPartyDealFlow","description":"net.corda.finance.flows.TwoPartyDealFlow","location":"docs/net.corda.finance.flows/-two-party-deal-flow/index.html","searchKeys":["TwoPartyDealFlow","object TwoPartyDealFlow","net.corda.finance.flows.TwoPartyDealFlow"]},{"name":"object TwoPartyTradeFlow","description":"net.corda.finance.flows.TwoPartyTradeFlow","location":"docs/net.corda.finance.flows/-two-party-trade-flow/index.html","searchKeys":["TwoPartyTradeFlow","object TwoPartyTradeFlow","net.corda.finance.flows.TwoPartyTradeFlow"]},{"name":"object UNSTARTED : ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.UNSTARTED","location":"docs/net.corda.core.utilities/-progress-tracker/-u-n-s-t-a-r-t-e-d/index.html","searchKeys":["UNSTARTED","object UNSTARTED : ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.UNSTARTED"]},{"name":"object UniqueDummyFungibleStateSchema : MappedSchema","description":"net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-state-schema/index.html","searchKeys":["UniqueDummyFungibleStateSchema","object UniqueDummyFungibleStateSchema : MappedSchema","net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema"]},{"name":"object UniqueDummyLinearStateSchema : MappedSchema","description":"net.corda.testing.internal.vault.UniqueDummyLinearStateSchema","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-state-schema/index.html","searchKeys":["UniqueDummyLinearStateSchema","object UniqueDummyLinearStateSchema : MappedSchema","net.corda.testing.internal.vault.UniqueDummyLinearStateSchema"]},{"name":"object VALIDATING : ProgressTracker.Step","description":"net.corda.core.flows.NotaryFlow.Client.Companion.VALIDATING","location":"docs/net.corda.core.flows/-notary-flow/-client/-companion/-v-a-l-i-d-a-t-i-n-g/index.html","searchKeys":["VALIDATING","object VALIDATING : ProgressTracker.Step","net.corda.core.flows.NotaryFlow.Client.Companion.VALIDATING"]},{"name":"object VERIFYING : ProgressTracker.Step","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion.VERIFYING","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/-companion/-v-e-r-i-f-y-i-n-g/index.html","searchKeys":["VERIFYING","object VERIFYING : ProgressTracker.Step","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.Companion.VERIFYING"]},{"name":"object VERIFYING : ProgressTracker.Step","description":"net.corda.core.flows.CollectSignaturesFlow.Companion.VERIFYING","location":"docs/net.corda.core.flows/-collect-signatures-flow/-companion/-v-e-r-i-f-y-i-n-g/index.html","searchKeys":["VERIFYING","object VERIFYING : ProgressTracker.Step","net.corda.core.flows.CollectSignaturesFlow.Companion.VERIFYING"]},{"name":"object VERIFYING : ProgressTracker.Step","description":"net.corda.core.flows.SignTransactionFlow.Companion.VERIFYING","location":"docs/net.corda.core.flows/-sign-transaction-flow/-companion/-v-e-r-i-f-y-i-n-g/index.html","searchKeys":["VERIFYING","object VERIFYING : ProgressTracker.Step","net.corda.core.flows.SignTransactionFlow.Companion.VERIFYING"]},{"name":"object VERIFYING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.VERIFYING","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/-companion/-v-e-r-i-f-y-i-n-g/index.html","searchKeys":["VERIFYING","object VERIFYING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyDealFlow.Secondary.Companion.VERIFYING"]},{"name":"object VERIFYING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.VERIFYING","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-v-e-r-i-f-y-i-n-g/index.html","searchKeys":["VERIFYING","object VERIFYING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.VERIFYING"]},{"name":"object VERIFYING_AND_SIGNING : ProgressTracker.Step","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.VERIFYING_AND_SIGNING","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/-companion/-v-e-r-i-f-y-i-n-g_-a-n-d_-s-i-g-n-i-n-g/index.html","searchKeys":["VERIFYING_AND_SIGNING","object VERIFYING_AND_SIGNING : ProgressTracker.Step","net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.VERIFYING_AND_SIGNING"]},{"name":"object WhitelistedByZoneAttachmentConstraint : AttachmentConstraint","description":"net.corda.core.contracts.WhitelistedByZoneAttachmentConstraint","location":"docs/net.corda.core.contracts/-whitelisted-by-zone-attachment-constraint/index.html","searchKeys":["WhitelistedByZoneAttachmentConstraint","object WhitelistedByZoneAttachmentConstraint : AttachmentConstraint","net.corda.core.contracts.WhitelistedByZoneAttachmentConstraint"]},{"name":"object WrongNotary : NotaryError","description":"net.corda.core.flows.NotaryError.WrongNotary","location":"docs/net.corda.core.flows/-notary-error/-wrong-notary/index.html","searchKeys":["WrongNotary","object WrongNotary : NotaryError","net.corda.core.flows.NotaryError.WrongNotary"]},{"name":"object ZipBombDetector","description":"net.corda.core.internal.utilities.ZipBombDetector","location":"docs/net.corda.core.internal.utilities/-zip-bomb-detector/index.html","searchKeys":["ZipBombDetector","object ZipBombDetector","net.corda.core.internal.utilities.ZipBombDetector"]},{"name":"open class Acceptor(val otherSideSession: FlowSession, val progressTracker: ProgressTracker = Secondary.tracker()) : TwoPartyDealFlow.Secondary<TwoPartyDealFlow.AutoOffer> ","description":"net.corda.finance.flows.TwoPartyDealFlow.Acceptor","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-acceptor/index.html","searchKeys":["Acceptor","open class Acceptor(val otherSideSession: FlowSession, val progressTracker: ProgressTracker = Secondary.tracker()) : TwoPartyDealFlow.Secondary<TwoPartyDealFlow.AutoOffer> ","net.corda.finance.flows.TwoPartyDealFlow.Acceptor"]},{"name":"open class BusinessCalendar(val holidayDates: SortedSet<LocalDate>)","description":"net.corda.finance.contracts.BusinessCalendar","location":"docs/net.corda.finance.contracts/-business-calendar/index.html","searchKeys":["BusinessCalendar","open class BusinessCalendar(val holidayDates: SortedSet<LocalDate>)","net.corda.finance.contracts.BusinessCalendar"]},{"name":"open class Buyer(sellerSession: FlowSession, notary: Party, acceptablePrice: Amount<Currency>, typeToBuy: Class<out OwnableState>, anonymous: Boolean) : FlowLogic<SignedTransaction> ","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/index.html","searchKeys":["Buyer","open class Buyer(sellerSession: FlowSession, notary: Party, acceptablePrice: Amount<Currency>, typeToBuy: Class<out OwnableState>, anonymous: Boolean) : FlowLogic<SignedTransaction> ","net.corda.finance.flows.TwoPartyTradeFlow.Buyer"]},{"name":"open class CashPaymentFlow(val amount: Amount<Currency>, val recipient: Party, val anonymous: Boolean, progressTracker: ProgressTracker, val issuerConstraint: Set<Party> = emptySet(), val notary: Party? = null) : AbstractCashFlow<AbstractCashFlow.Result> ","description":"net.corda.finance.flows.CashPaymentFlow","location":"docs/net.corda.finance.flows/-cash-payment-flow/index.html","searchKeys":["CashPaymentFlow","open class CashPaymentFlow(val amount: Amount<Currency>, val recipient: Party, val anonymous: Boolean, progressTracker: ProgressTracker, val issuerConstraint: Set<Party> = emptySet(), val notary: Party? = null) : AbstractCashFlow<AbstractCashFlow.Result> ","net.corda.finance.flows.CashPaymentFlow"]},{"name":"open class Client(stx: SignedTransaction, val progressTracker: ProgressTracker, skipVerification: Boolean = false) : BackpressureAwareTimedFlow<List<TransactionSignature>> ","description":"net.corda.core.flows.NotaryFlow.Client","location":"docs/net.corda.core.flows/-notary-flow/-client/index.html","searchKeys":["Client","open class Client(stx: SignedTransaction, val progressTracker: ProgressTracker, skipVerification: Boolean = false) : BackpressureAwareTimedFlow<List<TransactionSignature>> ","net.corda.core.flows.NotaryFlow.Client"]},{"name":"open class ComponentGroup(val groupIndex: Int, val components: List<OpaqueBytes>)","description":"net.corda.core.transactions.ComponentGroup","location":"docs/net.corda.core.transactions/-component-group/index.html","searchKeys":["ComponentGroup","open class ComponentGroup(val groupIndex: Int, val components: List<OpaqueBytes>)","net.corda.core.transactions.ComponentGroup"]},{"name":"open class ConnectionFailureException(cause: Throwable? = null) : RPCException","description":"net.corda.client.rpc.ConnectionFailureException","location":"docs/net.corda.client.rpc/-connection-failure-exception/index.html","searchKeys":["ConnectionFailureException","open class ConnectionFailureException(cause: Throwable? = null) : RPCException","net.corda.client.rpc.ConnectionFailureException"]},{"name":"open class CordaException : Exception, CordaThrowable","description":"net.corda.core.CordaException","location":"docs/net.corda.core/-corda-exception/index.html","searchKeys":["CordaException","open class CordaException : Exception, CordaThrowable","net.corda.core.CordaException"]},{"name":"open class CordaRPCClientConfiguration constructor(val connectionMaxRetryInterval: Duration = 3.minutes, val minimumServerProtocolVersion: Int = PLATFORM_VERSION, val trackRpcCallSites: Boolean = java.lang.Boolean.getBoolean(\"net.corda.client.rpc.trackRpcCallSites\"), val reapInterval: Duration = 1.seconds, val observationExecutorPoolSize: Int = 4, cacheConcurrencyLevel: Int = 1, val connectionRetryInterval: Duration = 5.seconds, val connectionRetryIntervalMultiplier: Double = 1.5, val maxReconnectAttempts: Int = unlimitedReconnectAttempts, val maxFileSize: Int = 10485760, val deduplicationCacheExpiry: Duration = 1.days, val openTelemetryEnabled: Boolean = true, val simpleLogTelemetryEnabled: Boolean = false, val spanStartEndEventsEnabled: Boolean = false, val copyBaggageToTags: Boolean = false)","description":"net.corda.client.rpc.CordaRPCClientConfiguration","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/index.html","searchKeys":["CordaRPCClientConfiguration","open class CordaRPCClientConfiguration constructor(val connectionMaxRetryInterval: Duration = 3.minutes, val minimumServerProtocolVersion: Int = PLATFORM_VERSION, val trackRpcCallSites: Boolean = java.lang.Boolean.getBoolean(\"net.corda.client.rpc.trackRpcCallSites\"), val reapInterval: Duration = 1.seconds, val observationExecutorPoolSize: Int = 4, cacheConcurrencyLevel: Int = 1, val connectionRetryInterval: Duration = 5.seconds, val connectionRetryIntervalMultiplier: Double = 1.5, val maxReconnectAttempts: Int = unlimitedReconnectAttempts, val maxFileSize: Int = 10485760, val deduplicationCacheExpiry: Duration = 1.days, val openTelemetryEnabled: Boolean = true, val simpleLogTelemetryEnabled: Boolean = false, val spanStartEndEventsEnabled: Boolean = false, val copyBaggageToTags: Boolean = false)","net.corda.client.rpc.CordaRPCClientConfiguration"]},{"name":"open class CordaRuntimeException(var originalExceptionClassName: String?, _message: String?, _cause: Throwable?) : RuntimeException, CordaThrowable","description":"net.corda.core.CordaRuntimeException","location":"docs/net.corda.core/-corda-runtime-exception/index.html","searchKeys":["CordaRuntimeException","open class CordaRuntimeException(var originalExceptionClassName: String?, _message: String?, _cause: Throwable?) : RuntimeException, CordaThrowable","net.corda.core.CordaRuntimeException"]},{"name":"open class DataVendingFlow(val otherSessions: Set<FlowSession>, val payload: Any, txnMetadata: TransactionMetadata? = null) : FlowLogic<Void?> ","description":"net.corda.core.flows.DataVendingFlow","location":"docs/net.corda.core.flows/-data-vending-flow/index.html","searchKeys":["DataVendingFlow","open class DataVendingFlow(val otherSessions: Set<FlowSession>, val payload: Any, txnMetadata: TransactionMetadata? = null) : FlowLogic<Void?> ","net.corda.core.flows.DataVendingFlow"]},{"name":"open class DigitalSignature(bytes: ByteArray) : OpaqueBytes","description":"net.corda.core.crypto.DigitalSignature","location":"docs/net.corda.core.crypto/-digital-signature/index.html","searchKeys":["DigitalSignature","open class DigitalSignature(bytes: ByteArray) : OpaqueBytes","net.corda.core.crypto.DigitalSignature"]},{"name":"open class FlowException(message: String?, cause: Throwable?, var originalErrorId: Long? = null) : CordaException","description":"net.corda.core.flows.FlowException","location":"docs/net.corda.core.flows/-flow-exception/index.html","searchKeys":["FlowException","open class FlowException(message: String?, cause: Throwable?, var originalErrorId: Long? = null) : CordaException","net.corda.core.flows.FlowException"]},{"name":"open class HospitalizeFlowException(message: String?, cause: Throwable?) : CordaRuntimeException","description":"net.corda.core.flows.HospitalizeFlowException","location":"docs/net.corda.core.flows/-hospitalize-flow-exception/index.html","searchKeys":["HospitalizeFlowException","open class HospitalizeFlowException(message: String?, cause: Throwable?) : CordaRuntimeException","net.corda.core.flows.HospitalizeFlowException"]},{"name":"open class Id<out VALUE : Any>(val value: VALUE, val entityType: String?, val timestamp: Instant)","description":"net.corda.core.utilities.Id","location":"docs/net.corda.core.utilities/-id/index.html","searchKeys":["Id","open class Id<out VALUE : Any>(val value: VALUE, val entityType: String?, val timestamp: Instant)","net.corda.core.utilities.Id"]},{"name":"open class Incremental(startingPort: Int) : PortAllocation","description":"net.corda.testing.driver.PortAllocation.Incremental","location":"docs/net.corda.testing.driver/-port-allocation/-incremental/index.html","searchKeys":["Incremental","open class Incremental(startingPort: Int) : PortAllocation","net.corda.testing.driver.PortAllocation.Incremental"]},{"name":"open class Instigator(val otherSideSession: FlowSession, val payload: TwoPartyDealFlow.AutoOffer, val progressTracker: ProgressTracker = Primary.tracker()) : TwoPartyDealFlow.Primary","description":"net.corda.finance.flows.TwoPartyDealFlow.Instigator","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-instigator/index.html","searchKeys":["Instigator","open class Instigator(val otherSideSession: FlowSession, val payload: TwoPartyDealFlow.AutoOffer, val progressTracker: ProgressTracker = Primary.tracker()) : TwoPartyDealFlow.Primary","net.corda.finance.flows.TwoPartyDealFlow.Instigator"]},{"name":"open class InternalMockNetwork(cordappPackages: List<String> = emptyList(), defaultParameters: MockNetworkParameters = MockNetworkParameters(), val networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, val threadPerNode: Boolean = defaultParameters.threadPerNode, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, val notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, val testDirectory: Path = Paths.get(\"build\") / \"mock-network\" /  getTimestampAsDirectoryName(), initialNetworkParameters: NetworkParameters = testNetworkParameters(), val defaultFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = { args -> MockNode(args) }, cordappsForAllNodes: Collection<TestCordappInternal> = emptySet(), val autoVisibleNodes: Boolean = true) : AutoCloseable","description":"net.corda.testing.node.internal.InternalMockNetwork","location":"docs/net.corda.testing.node.internal/-internal-mock-network/index.html","searchKeys":["InternalMockNetwork","open class InternalMockNetwork(cordappPackages: List<String> = emptyList(), defaultParameters: MockNetworkParameters = MockNetworkParameters(), val networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, val threadPerNode: Boolean = defaultParameters.threadPerNode, servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, val notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, val testDirectory: Path = Paths.get(\"build\") / \"mock-network\" /  getTimestampAsDirectoryName(), initialNetworkParameters: NetworkParameters = testNetworkParameters(), val defaultFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode = { args -> MockNode(args) }, cordappsForAllNodes: Collection<TestCordappInternal> = emptySet(), val autoVisibleNodes: Boolean = true) : AutoCloseable","net.corda.testing.node.internal.InternalMockNetwork"]},{"name":"open class MappedSchema(schemaFamily: Class<*>, val version: Int, val mappedTypes: Iterable<Class<*>>)","description":"net.corda.core.schemas.MappedSchema","location":"docs/net.corda.core.schemas/-mapped-schema/index.html","searchKeys":["MappedSchema","open class MappedSchema(schemaFamily: Class<*>, val version: Int, val mappedTypes: Iterable<Class<*>>)","net.corda.core.schemas.MappedSchema"]},{"name":"open class MissingSerializerException : NotSerializableException","description":"net.corda.core.serialization.internal.MissingSerializerException","location":"docs/net.corda.core.serialization.internal/-missing-serializer-exception/index.html","searchKeys":["MissingSerializerException","open class MissingSerializerException : NotSerializableException","net.corda.core.serialization.internal.MissingSerializerException"]},{"name":"open class MockNetwork(val cordappPackages: List<String>, val defaultParameters: MockNetworkParameters = MockNetworkParameters(), val networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, val threadPerNode: Boolean = defaultParameters.threadPerNode, val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, val notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, val networkParameters: NetworkParameters = defaultParameters.networkParameters)","description":"net.corda.testing.node.MockNetwork","location":"docs/net.corda.testing.node/-mock-network/index.html","searchKeys":["MockNetwork","open class MockNetwork(val cordappPackages: List<String>, val defaultParameters: MockNetworkParameters = MockNetworkParameters(), val networkSendManuallyPumped: Boolean = defaultParameters.networkSendManuallyPumped, val threadPerNode: Boolean = defaultParameters.threadPerNode, val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy = defaultParameters.servicePeerAllocationStrategy, val notarySpecs: List<MockNetworkNotarySpec> = defaultParameters.notarySpecs, val networkParameters: NetworkParameters = defaultParameters.networkParameters)","net.corda.testing.node.MockNetwork"]},{"name":"open class MockNode(args: MockNodeArgs, mockFlowManager: MockNodeFlowManager = args.flowManager, allowAppSchemaUpgradeWithCheckpoints: Boolean = false)","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/index.html","searchKeys":["MockNode","open class MockNode(args: MockNodeArgs, mockFlowManager: MockNodeFlowManager = args.flowManager, allowAppSchemaUpgradeWithCheckpoints: Boolean = false)","net.corda.testing.node.internal.InternalMockNetwork.MockNode"]},{"name":"open class MockServices : ServiceHub","description":"net.corda.testing.node.MockServices","location":"docs/net.corda.testing.node/-mock-services/index.html","searchKeys":["MockServices","open class MockServices : ServiceHub","net.corda.testing.node.MockServices"]},{"name":"open class MockTransactionStorage : SingletonSerializeAsToken","description":"net.corda.testing.node.internal.MockTransactionStorage","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/index.html","searchKeys":["MockTransactionStorage","open class MockTransactionStorage : SingletonSerializeAsToken","net.corda.testing.node.internal.MockTransactionStorage"]},{"name":"open class OpaqueBytes(bytes: ByteArray) : ByteSequence","description":"net.corda.core.utilities.OpaqueBytes","location":"docs/net.corda.core.utilities/-opaque-bytes/index.html","searchKeys":["OpaqueBytes","open class OpaqueBytes(bytes: ByteArray) : ByteSequence","net.corda.core.utilities.OpaqueBytes"]},{"name":"open class PersistentState(var stateRef: PersistentStateRef? = null) : DirectStatePersistable","description":"net.corda.core.schemas.PersistentState","location":"docs/net.corda.core.schemas/-persistent-state/index.html","searchKeys":["PersistentState","open class PersistentState(var stateRef: PersistentStateRef? = null) : DirectStatePersistable","net.corda.core.schemas.PersistentState"]},{"name":"open class RPCException(message: String?, cause: Throwable?) : CordaRuntimeException","description":"net.corda.client.rpc.RPCException","location":"docs/net.corda.client.rpc/-r-p-c-exception/index.html","searchKeys":["RPCException","open class RPCException(message: String?, cause: Throwable?) : CordaRuntimeException","net.corda.client.rpc.RPCException"]},{"name":"open class ReceiveTransactionFlow(otherSideSession: FlowSession, checkSufficientSignatures: Boolean = true, statesToRecord: StatesToRecord = StatesToRecord.NONE, handlePropagatedNotaryError: Boolean? = null) : FlowLogic<SignedTransaction> ","description":"net.corda.core.flows.ReceiveTransactionFlow","location":"docs/net.corda.core.flows/-receive-transaction-flow/index.html","searchKeys":["ReceiveTransactionFlow","open class ReceiveTransactionFlow(otherSideSession: FlowSession, checkSufficientSignatures: Boolean = true, statesToRecord: StatesToRecord = StatesToRecord.NONE, handlePropagatedNotaryError: Boolean? = null) : FlowLogic<SignedTransaction> ","net.corda.core.flows.ReceiveTransactionFlow"]},{"name":"open class Seller(otherSideSession: FlowSession, assetToSell: StateAndRef<OwnableState>, price: Amount<Currency>, myParty: PartyAndCertificate, val progressTracker: ProgressTracker = Seller.tracker()) : FlowLogic<SignedTransaction> ","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/index.html","searchKeys":["Seller","open class Seller(otherSideSession: FlowSession, assetToSell: StateAndRef<OwnableState>, price: Amount<Currency>, myParty: PartyAndCertificate, val progressTracker: ProgressTracker = Seller.tracker()) : FlowLogic<SignedTransaction> ","net.corda.finance.flows.TwoPartyTradeFlow.Seller"]},{"name":"open class SendStateAndRefFlow(otherSideSession: FlowSession, stateAndRefs: List<StateAndRef<*>>) : DataVendingFlow","description":"net.corda.core.flows.SendStateAndRefFlow","location":"docs/net.corda.core.flows/-send-state-and-ref-flow/index.html","searchKeys":["SendStateAndRefFlow","open class SendStateAndRefFlow(otherSideSession: FlowSession, stateAndRefs: List<StateAndRef<*>>) : DataVendingFlow","net.corda.core.flows.SendStateAndRefFlow"]},{"name":"open class SendTransactionFlow(val stx: SignedTransaction, val participantSessions: Set<FlowSession>, val observerSessions: Set<FlowSession>, val senderStatesToRecord: StatesToRecord, recordMetaDataEvenIfNotFullySigned: Boolean = false) : DataVendingFlow","description":"net.corda.core.flows.SendTransactionFlow","location":"docs/net.corda.core.flows/-send-transaction-flow/index.html","searchKeys":["SendTransactionFlow","open class SendTransactionFlow(val stx: SignedTransaction, val participantSessions: Set<FlowSession>, val observerSessions: Set<FlowSession>, val senderStatesToRecord: StatesToRecord, recordMetaDataEvenIfNotFullySigned: Boolean = false) : DataVendingFlow","net.corda.core.flows.SendTransactionFlow"]},{"name":"open class SignedData<T : Any>(val raw: SerializedBytes<T>, val sig: DigitalSignature.WithKey)","description":"net.corda.core.crypto.SignedData","location":"docs/net.corda.core.crypto/-signed-data/index.html","searchKeys":["SignedData","open class SignedData<T : Any>(val raw: SerializedBytes<T>, val sig: DigitalSignature.WithKey)","net.corda.core.crypto.SignedData"]},{"name":"open class StateReplacementException constructor(message: String? = null, cause: Throwable? = null) : FlowException","description":"net.corda.core.flows.StateReplacementException","location":"docs/net.corda.core.flows/-state-replacement-exception/index.html","searchKeys":["StateReplacementException","open class StateReplacementException constructor(message: String? = null, cause: Throwable? = null) : FlowException","net.corda.core.flows.StateReplacementException"]},{"name":"open class Step(val label: String)","description":"net.corda.core.utilities.ProgressTracker.Step","location":"docs/net.corda.core.utilities/-progress-tracker/-step/index.html","searchKeys":["Step","open class Step(val label: String)","net.corda.core.utilities.ProgressTracker.Step"]},{"name":"open class StringToMethodCallParser<in T : Any> constructor(targetType: Class<out T>, om: <Error class: unknown class> = JacksonSupport.createNonRpcMapper(YAMLFactory()))","description":"net.corda.client.jackson.StringToMethodCallParser","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/index.html","searchKeys":["StringToMethodCallParser","open class StringToMethodCallParser<in T : Any> constructor(targetType: Class<out T>, om: <Error class: unknown class> = JacksonSupport.createNonRpcMapper(YAMLFactory()))","net.corda.client.jackson.StringToMethodCallParser"]},{"name":"open class TransactionBuilder(var notary: Party? = null, var lockId: UUID = defaultLockId(), inputs: MutableList<StateRef> = arrayListOf(), attachments: MutableList<AttachmentId> = arrayListOf(), outputs: MutableList<TransactionState<ContractState>> = arrayListOf(), commands: MutableList<Command<*>> = arrayListOf(), window: TimeWindow? = null, privacySalt: PrivacySalt = PrivacySalt(), references: MutableList<StateRef> = arrayListOf(), serviceHub: ServiceHub? = (Strand.currentStrand() as? FlowStateMachine<*>)?.serviceHub)","description":"net.corda.core.transactions.TransactionBuilder","location":"docs/net.corda.core.transactions/-transaction-builder/index.html","searchKeys":["TransactionBuilder","open class TransactionBuilder(var notary: Party? = null, var lockId: UUID = defaultLockId(), inputs: MutableList<StateRef> = arrayListOf(), attachments: MutableList<AttachmentId> = arrayListOf(), outputs: MutableList<TransactionState<ContractState>> = arrayListOf(), commands: MutableList<Command<*>> = arrayListOf(), window: TimeWindow? = null, privacySalt: PrivacySalt = PrivacySalt(), references: MutableList<StateRef> = arrayListOf(), serviceHub: ServiceHub? = (Strand.currentStrand() as? FlowStateMachine<*>)?.serviceHub)","net.corda.core.transactions.TransactionBuilder"]},{"name":"open class TransactionResolutionException constructor(val hash: SecureHash, message: String = \"Transaction resolution failure for \") : FlowException","description":"net.corda.core.contracts.TransactionResolutionException","location":"docs/net.corda.core.contracts/-transaction-resolution-exception/index.html","searchKeys":["TransactionResolutionException","open class TransactionResolutionException constructor(val hash: SecureHash, message: String = \"Transaction resolution failure for \") : FlowException","net.corda.core.contracts.TransactionResolutionException"]},{"name":"open class UnparseableCallException(command: String, cause: Throwable? = null) : CordaException","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/index.html","searchKeys":["UnparseableCallException","open class UnparseableCallException(command: String, cause: Throwable? = null) : CordaException","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException"]},{"name":"open class UnrecoverableRPCException(message: String?, cause: Throwable? = null) : RPCException","description":"net.corda.client.rpc.UnrecoverableRPCException","location":"docs/net.corda.client.rpc/-unrecoverable-r-p-c-exception/index.html","searchKeys":["UnrecoverableRPCException","open class UnrecoverableRPCException(message: String?, cause: Throwable? = null) : RPCException","net.corda.client.rpc.UnrecoverableRPCException"]},{"name":"open class WithKey(val by: PublicKey, bytes: ByteArray) : DigitalSignature","description":"net.corda.core.crypto.DigitalSignature.WithKey","location":"docs/net.corda.core.crypto/-digital-signature/-with-key/index.html","searchKeys":["WithKey","open class WithKey(val by: PublicKey, bytes: ByteArray) : DigitalSignature","net.corda.core.crypto.DigitalSignature.WithKey"]},{"name":"open fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String): <Error class: unknown class><K, V>","description":"net.corda.testing.internal.TestingNamedCacheFactory.buildNamed","location":"docs/net.corda.testing.internal/-testing-named-cache-factory/build-named.html","searchKeys":["buildNamed","open fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String): <Error class: unknown class><K, V>","net.corda.testing.internal.TestingNamedCacheFactory.buildNamed"]},{"name":"open fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","description":"net.corda.testing.internal.TestingNamedCacheFactory.buildNamed","location":"docs/net.corda.testing.internal/-testing-named-cache-factory/build-named.html","searchKeys":["buildNamed","open fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","net.corda.testing.internal.TestingNamedCacheFactory.buildNamed"]},{"name":"open fun <K : Any, V : Any> buildNamed(name: String): <Error class: unknown class><K, V>","description":"net.corda.core.internal.NamedCacheFactory.buildNamed","location":"docs/net.corda.core.internal/-named-cache-factory/build-named.html","searchKeys":["buildNamed","open fun <K : Any, V : Any> buildNamed(name: String): <Error class: unknown class><K, V>","net.corda.core.internal.NamedCacheFactory.buildNamed"]},{"name":"open fun <K : Any, V : Any> buildNamed(name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","description":"net.corda.core.internal.NamedCacheFactory.buildNamed","location":"docs/net.corda.core.internal/-named-cache-factory/build-named.html","searchKeys":["buildNamed","open fun <K : Any, V : Any> buildNamed(name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","net.corda.core.internal.NamedCacheFactory.buildNamed"]},{"name":"open fun <R : Any> receive(receiveType: Class<R>, otherParty: Party): UntrustworthyData<R>","description":"net.corda.core.flows.FlowLogic.receive","location":"docs/net.corda.core.flows/-flow-logic/receive.html","searchKeys":["receive","open fun <R : Any> receive(receiveType: Class<R>, otherParty: Party): UntrustworthyData<R>","net.corda.core.flows.FlowLogic.receive"]},{"name":"open fun <R : Any> receiveAll(receiveType: Class<R>, sessions: List<FlowSession>, maySkipCheckpoint: Boolean = false): List<UntrustworthyData<R>>","description":"net.corda.core.flows.FlowLogic.receiveAll","location":"docs/net.corda.core.flows/-flow-logic/receive-all.html","searchKeys":["receiveAll","open fun <R : Any> receiveAll(receiveType: Class<R>, sessions: List<FlowSession>, maySkipCheckpoint: Boolean = false): List<UntrustworthyData<R>>","net.corda.core.flows.FlowLogic.receiveAll"]},{"name":"open fun <R : Any> sendAndReceive(receiveType: Class<R>, otherParty: Party, payload: Any): UntrustworthyData<R>","description":"net.corda.core.flows.FlowLogic.sendAndReceive","location":"docs/net.corda.core.flows/-flow-logic/send-and-receive.html","searchKeys":["sendAndReceive","open fun <R : Any> sendAndReceive(receiveType: Class<R>, otherParty: Party, payload: Any): UntrustworthyData<R>","net.corda.core.flows.FlowLogic.sendAndReceive"]},{"name":"open fun <R> subFlow(subLogic: FlowLogic<R>): R","description":"net.corda.core.flows.FlowLogic.subFlow","location":"docs/net.corda.core.flows/-flow-logic/sub-flow.html","searchKeys":["subFlow","open fun <R> subFlow(subLogic: FlowLogic<R>): R","net.corda.core.flows.FlowLogic.subFlow"]},{"name":"open fun <T : ContractState, C : MutableCollection<StateAndRef<T>>> loadStatesInternal(input: Iterable<StateRef>, output: C): C","description":"net.corda.core.internal.verification.VerifyingServiceHub.loadStatesInternal","location":"docs/net.corda.core.internal.verification/-verifying-service-hub/load-states-internal.html","searchKeys":["loadStatesInternal","open fun <T : ContractState, C : MutableCollection<StateAndRef<T>>> loadStatesInternal(input: Iterable<StateRef>, output: C): C","net.corda.core.internal.verification.VerifyingServiceHub.loadStatesInternal"]},{"name":"open fun <T : ContractState> queryBy(contractStateType: Class<out T>): Vault.Page<T>","description":"net.corda.core.node.services.VaultService.queryBy","location":"docs/net.corda.core.node.services/-vault-service/query-by.html","searchKeys":["queryBy","open fun <T : ContractState> queryBy(contractStateType: Class<out T>): Vault.Page<T>","net.corda.core.node.services.VaultService.queryBy"]},{"name":"open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria): Vault.Page<T>","description":"net.corda.core.node.services.VaultService.queryBy","location":"docs/net.corda.core.node.services/-vault-service/query-by.html","searchKeys":["queryBy","open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria): Vault.Page<T>","net.corda.core.node.services.VaultService.queryBy"]},{"name":"open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): Vault.Page<T>","description":"net.corda.core.node.services.VaultService.queryBy","location":"docs/net.corda.core.node.services/-vault-service/query-by.html","searchKeys":["queryBy","open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): Vault.Page<T>","net.corda.core.node.services.VaultService.queryBy"]},{"name":"open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): Vault.Page<T>","description":"net.corda.core.node.services.VaultService.queryBy","location":"docs/net.corda.core.node.services/-vault-service/query-by.html","searchKeys":["queryBy","open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): Vault.Page<T>","net.corda.core.node.services.VaultService.queryBy"]},{"name":"open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): Vault.Page<T>","description":"net.corda.core.node.services.VaultService.queryBy","location":"docs/net.corda.core.node.services/-vault-service/query-by.html","searchKeys":["queryBy","open fun <T : ContractState> queryBy(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): Vault.Page<T>","net.corda.core.node.services.VaultService.queryBy"]},{"name":"open fun <T : ContractState> queryBy(contractStateType: Class<out T>, paging: PageSpecification): Vault.Page<T>","description":"net.corda.core.node.services.VaultService.queryBy","location":"docs/net.corda.core.node.services/-vault-service/query-by.html","searchKeys":["queryBy","open fun <T : ContractState> queryBy(contractStateType: Class<out T>, paging: PageSpecification): Vault.Page<T>","net.corda.core.node.services.VaultService.queryBy"]},{"name":"open fun <T : ContractState> toStateAndRef(stateRef: StateRef): StateAndRef<T>","description":"net.corda.core.node.ServiceHub.toStateAndRef","location":"docs/net.corda.core.node/-service-hub/to-state-and-ref.html","searchKeys":["toStateAndRef","open fun <T : ContractState> toStateAndRef(stateRef: StateRef): StateAndRef<T>","net.corda.core.node.ServiceHub.toStateAndRef"]},{"name":"open fun <T : ContractState> trackBy(contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.VaultService.trackBy","location":"docs/net.corda.core.node.services/-vault-service/track-by.html","searchKeys":["trackBy","open fun <T : ContractState> trackBy(contractStateType: Class<out T>): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.VaultService.trackBy"]},{"name":"open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.VaultService.trackBy","location":"docs/net.corda.core.node.services/-vault-service/track-by.html","searchKeys":["trackBy","open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.VaultService.trackBy"]},{"name":"open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.VaultService.trackBy","location":"docs/net.corda.core.node.services/-vault-service/track-by.html","searchKeys":["trackBy","open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.VaultService.trackBy"]},{"name":"open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.VaultService.trackBy","location":"docs/net.corda.core.node.services/-vault-service/track-by.html","searchKeys":["trackBy","open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria, paging: PageSpecification, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.VaultService.trackBy"]},{"name":"open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.VaultService.trackBy","location":"docs/net.corda.core.node.services/-vault-service/track-by.html","searchKeys":["trackBy","open fun <T : ContractState> trackBy(contractStateType: Class<out T>, criteria: QueryCriteria, sorting: Sort): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.VaultService.trackBy"]},{"name":"open fun <T : ContractState> trackBy(contractStateType: Class<out T>, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","description":"net.corda.core.node.services.VaultService.trackBy","location":"docs/net.corda.core.node.services/-vault-service/track-by.html","searchKeys":["trackBy","open fun <T : ContractState> trackBy(contractStateType: Class<out T>, paging: PageSpecification): DataFeed<Vault.Page<T>, Vault.Update<T>>","net.corda.core.node.services.VaultService.trackBy"]},{"name":"open fun <T> register(priority: Int = SERVICE_PRIORITY_NORMAL, func: (ServiceLifecycleEvent) -> T)","description":"net.corda.core.node.AppServiceHub.register","location":"docs/net.corda.core.node/-app-service-hub/register.html","searchKeys":["register","open fun <T> register(priority: Int = SERVICE_PRIORITY_NORMAL, func: (ServiceLifecycleEvent) -> T)","net.corda.core.node.AppServiceHub.register"]},{"name":"open fun <T> startFlow(logic: FlowLogic<T>): CordaFuture<T>","description":"net.corda.testing.driver.InProcess.startFlow","location":"docs/net.corda.testing.driver/-in-process/start-flow.html","searchKeys":["startFlow","open fun <T> startFlow(logic: FlowLogic<T>): CordaFuture<T>","net.corda.testing.driver.InProcess.startFlow"]},{"name":"open fun _onError(e: Throwable)","description":"net.corda.core.observable.internal.ResilientSubscriber._onError","location":"docs/net.corda.core.observable.internal/-resilient-subscriber/_on-error.html","searchKeys":["_onError","open fun _onError(e: Throwable)","net.corda.core.observable.internal.ResilientSubscriber._onError"]},{"name":"open fun acceptableLiveFiberCountOnStop(): Int","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.acceptableLiveFiberCountOnStop","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/acceptable-live-fiber-count-on-stop.html","searchKeys":["acceptableLiveFiberCountOnStop","open fun acceptableLiveFiberCountOnStop(): Int","net.corda.testing.node.internal.InternalMockNetwork.MockNode.acceptableLiveFiberCountOnStop"]},{"name":"open fun addInputState(stateAndRef: StateAndRef<*>): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.addInputState","location":"docs/net.corda.core.transactions/-transaction-builder/add-input-state.html","searchKeys":["addInputState","open fun addInputState(stateAndRef: StateAndRef<*>): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.addInputState"]},{"name":"open fun addMessageHandler(topic: String, callback: <Error class: unknown class>): <Error class: unknown class>","description":"net.corda.testing.node.internal.MockNodeMessagingService.addMessageHandler","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/add-message-handler.html","searchKeys":["addMessageHandler","open fun addMessageHandler(topic: String, callback: <Error class: unknown class>): <Error class: unknown class>","net.corda.testing.node.internal.MockNodeMessagingService.addMessageHandler"]},{"name":"open fun addReceiverTransactionRecoveryMetadata(txId: SecureHash, sender: CordaX500Name, metadata: TransactionMetadata)","description":"net.corda.testing.node.internal.MockTransactionStorage.addReceiverTransactionRecoveryMetadata","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/add-receiver-transaction-recovery-metadata.html","searchKeys":["addReceiverTransactionRecoveryMetadata","open fun addReceiverTransactionRecoveryMetadata(txId: SecureHash, sender: CordaX500Name, metadata: TransactionMetadata)","net.corda.testing.node.internal.MockTransactionStorage.addReceiverTransactionRecoveryMetadata"]},{"name":"open fun addReferenceState(referencedStateAndRef: ReferencedStateAndRef<*>): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionBuilder.addReferenceState","location":"docs/net.corda.core.transactions/-transaction-builder/add-reference-state.html","searchKeys":["addReferenceState","open fun addReferenceState(referencedStateAndRef: ReferencedStateAndRef<*>): <Error class: unknown class>","net.corda.core.transactions.TransactionBuilder.addReferenceState"]},{"name":"open fun addSenderTransactionRecoveryMetadata(txId: SecureHash, metadata: TransactionMetadata): ByteArray?","description":"net.corda.testing.node.internal.MockTransactionStorage.addSenderTransactionRecoveryMetadata","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/add-sender-transaction-recovery-metadata.html","searchKeys":["addSenderTransactionRecoveryMetadata","open fun addSenderTransactionRecoveryMetadata(txId: SecureHash, metadata: TransactionMetadata): ByteArray?","net.corda.testing.node.internal.MockTransactionStorage.addSenderTransactionRecoveryMetadata"]},{"name":"open fun addSignature(signedTransaction: SignedTransaction): SignedTransaction","description":"net.corda.core.node.ServiceHub.addSignature","location":"docs/net.corda.core.node/-service-hub/add-signature.html","searchKeys":["addSignature","open fun addSignature(signedTransaction: SignedTransaction): SignedTransaction","net.corda.core.node.ServiceHub.addSignature"]},{"name":"open fun addSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): SignedTransaction","description":"net.corda.core.node.ServiceHub.addSignature","location":"docs/net.corda.core.node/-service-hub/add-signature.html","searchKeys":["addSignature","open fun addSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): SignedTransaction","net.corda.core.node.ServiceHub.addSignature"]},{"name":"open fun addTransaction(transaction: SignedTransaction): Boolean","description":"net.corda.testing.node.internal.MockTransactionStorage.addTransaction","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/add-transaction.html","searchKeys":["addTransaction","open fun addTransaction(transaction: SignedTransaction): Boolean","net.corda.testing.node.internal.MockTransactionStorage.addTransaction"]},{"name":"open fun addUnnotarisedTransaction(transaction: SignedTransaction): Boolean","description":"net.corda.testing.node.internal.MockTransactionStorage.addUnnotarisedTransaction","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/add-unnotarised-transaction.html","searchKeys":["addUnnotarisedTransaction","open fun addUnnotarisedTransaction(transaction: SignedTransaction): Boolean","net.corda.testing.node.internal.MockTransactionStorage.addUnnotarisedTransaction"]},{"name":"open fun addUnverifiedTransaction(transaction: SignedTransaction)","description":"net.corda.testing.node.internal.MockTransactionStorage.addUnverifiedTransaction","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/add-unverified-transaction.html","searchKeys":["addUnverifiedTransaction","open fun addUnverifiedTransaction(transaction: SignedTransaction)","net.corda.testing.node.internal.MockTransactionStorage.addUnverifiedTransaction"]},{"name":"open fun applyRollConvention(testDate: LocalDate, dateRollConvention: DateRollConvention): LocalDate","description":"net.corda.finance.contracts.BusinessCalendar.applyRollConvention","location":"docs/net.corda.finance.contracts/-business-calendar/apply-roll-convention.html","searchKeys":["applyRollConvention","open fun applyRollConvention(testDate: LocalDate, dateRollConvention: DateRollConvention): LocalDate","net.corda.finance.contracts.BusinessCalendar.applyRollConvention"]},{"name":"open fun applyWaitTimeUpdate(session: FlowSession, update: WaitTimeUpdate)","description":"net.corda.core.internal.BackpressureAwareTimedFlow.applyWaitTimeUpdate","location":"docs/net.corda.core.internal/-backpressure-aware-timed-flow/apply-wait-time-update.html","searchKeys":["applyWaitTimeUpdate","open fun applyWaitTimeUpdate(session: FlowSession, update: WaitTimeUpdate)","net.corda.core.internal.BackpressureAwareTimedFlow.applyWaitTimeUpdate"]},{"name":"open fun assertOwnership(party: Party, anonymousParty: AnonymousParty)","description":"net.corda.core.node.services.IdentityService.assertOwnership","location":"docs/net.corda.core.node.services/-identity-service/assert-ownership.html","searchKeys":["assertOwnership","open fun assertOwnership(party: Party, anonymousParty: AnonymousParty)","net.corda.core.node.services.IdentityService.assertOwnership"]},{"name":"open fun baseDirectory(nodeName: String): Path","description":"net.corda.testing.node.internal.InternalDriverDSL.baseDirectory","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/base-directory.html","searchKeys":["baseDirectory","open fun baseDirectory(nodeName: String): Path","net.corda.testing.node.internal.InternalDriverDSL.baseDirectory"]},{"name":"open fun bindWithConfig(nodeConfiguration: <Error class: unknown class>): <Error class: unknown class>","description":"net.corda.testing.internal.TestingNamedCacheFactory.bindWithConfig","location":"docs/net.corda.testing.internal/-testing-named-cache-factory/bind-with-config.html","searchKeys":["bindWithConfig","open fun bindWithConfig(nodeConfiguration: <Error class: unknown class>): <Error class: unknown class>","net.corda.testing.internal.TestingNamedCacheFactory.bindWithConfig"]},{"name":"open fun bindWithMetrics(metricRegistry: <Error class: unknown class>): <Error class: unknown class>","description":"net.corda.testing.internal.TestingNamedCacheFactory.bindWithMetrics","location":"docs/net.corda.testing.internal/-testing-named-cache-factory/bind-with-metrics.html","searchKeys":["bindWithMetrics","open fun bindWithMetrics(metricRegistry: <Error class: unknown class>): <Error class: unknown class>","net.corda.testing.internal.TestingNamedCacheFactory.bindWithMetrics"]},{"name":"open fun call(subscriber: <Error class: unknown class><in T>)","description":"net.corda.core.observable.internal.OnResilientSubscribe.call","location":"docs/net.corda.core.observable.internal/-on-resilient-subscribe/call.html","searchKeys":["call","open fun call(subscriber: <Error class: unknown class><in T>)","net.corda.core.observable.internal.OnResilientSubscribe.call"]},{"name":"open fun capture(block: () -> V): Boolean","description":"net.corda.core.internal.concurrent.ValueOrException.capture","location":"docs/net.corda.core.internal.concurrent/-value-or-exception/capture.html","searchKeys":["capture","open fun capture(block: () -> V): Boolean","net.corda.core.internal.concurrent.ValueOrException.capture"]},{"name":"open fun captureLater(f: CordaFuture<out V>)","description":"net.corda.core.internal.concurrent.ValueOrException.captureLater","location":"docs/net.corda.core.internal.concurrent/-value-or-exception/capture-later.html","searchKeys":["captureLater","open fun captureLater(f: CordaFuture<out V>)","net.corda.core.internal.concurrent.ValueOrException.captureLater"]},{"name":"open fun checkCacheName(name: String)","description":"net.corda.core.internal.NamedCacheFactory.checkCacheName","location":"docs/net.corda.core.internal/-named-cache-factory/check-cache-name.html","searchKeys":["checkCacheName","open fun checkCacheName(name: String)","net.corda.core.internal.NamedCacheFactory.checkCacheName"]},{"name":"open fun checkSignaturesAreValid()","description":"net.corda.core.transactions.TransactionWithSignatures.checkSignaturesAreValid","location":"docs/net.corda.core.transactions/-transaction-with-signatures/check-signatures-are-valid.html","searchKeys":["checkSignaturesAreValid","open fun checkSignaturesAreValid()","net.corda.core.transactions.TransactionWithSignatures.checkSignaturesAreValid"]},{"name":"open fun childProgressTracker(): ProgressTracker?","description":"net.corda.core.utilities.ProgressTracker.Step.childProgressTracker","location":"docs/net.corda.core.utilities/-progress-tracker/-step/child-progress-tracker.html","searchKeys":["childProgressTracker","open fun childProgressTracker(): ProgressTracker?","net.corda.core.utilities.ProgressTracker.Step.childProgressTracker"]},{"name":"open fun close()","description":"net.corda.testing.node.internal.MockNodeMessagingService.close","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/close.html","searchKeys":["close","open fun close()","net.corda.testing.node.internal.MockNodeMessagingService.close"]},{"name":"open fun commitInputStates(inputs: List<StateRef>, txId: SecureHash, caller: Party, requestSignature: NotarisationRequestSignature, timeWindow: TimeWindow?, references: List<StateRef>): UniquenessProvider.Result","description":"net.corda.core.internal.notary.SinglePartyNotaryService.commitInputStates","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/commit-input-states.html","searchKeys":["commitInputStates","open fun commitInputStates(inputs: List<StateRef>, txId: SecureHash, caller: Party, requestSignature: NotarisationRequestSignature, timeWindow: TimeWindow?, references: List<StateRef>): UniquenessProvider.Result","net.corda.core.internal.notary.SinglePartyNotaryService.commitInputStates"]},{"name":"open fun componentDigest(bytes: ByteArray): ByteArray","description":"net.corda.core.crypto.DigestAlgorithm.componentDigest","location":"docs/net.corda.core.crypto/-digest-algorithm/component-digest.html","searchKeys":["componentDigest","open fun componentDigest(bytes: ByteArray): ByteArray","net.corda.core.crypto.DigestAlgorithm.componentDigest"]},{"name":"open fun containsKey(alias: String): Boolean","description":"net.corda.testing.node.internal.MockCryptoService.containsKey","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/contains-key.html","searchKeys":["containsKey","open fun containsKey(alias: String): Boolean","net.corda.testing.node.internal.MockCryptoService.containsKey"]},{"name":"open fun createMessage(topic: String, data: ByteArray, deduplicationId: <Error class: unknown class>, additionalHeaders: Map<String, String>): <Error class: unknown class>","description":"net.corda.testing.node.internal.MockNodeMessagingService.createMessage","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/create-message.html","searchKeys":["createMessage","open fun createMessage(topic: String, data: ByteArray, deduplicationId: <Error class: unknown class>, additionalHeaders: Map<String, String>): <Error class: unknown class>","net.corda.testing.node.internal.MockNodeMessagingService.createMessage"]},{"name":"open fun createSignature(filteredTransaction: FilteredTransaction): TransactionSignature","description":"net.corda.core.node.ServiceHub.createSignature","location":"docs/net.corda.core.node/-service-hub/create-signature.html","searchKeys":["createSignature","open fun createSignature(filteredTransaction: FilteredTransaction): TransactionSignature","net.corda.core.node.ServiceHub.createSignature"]},{"name":"open fun createSignature(filteredTransaction: FilteredTransaction, publicKey: PublicKey): TransactionSignature","description":"net.corda.core.node.ServiceHub.createSignature","location":"docs/net.corda.core.node/-service-hub/create-signature.html","searchKeys":["createSignature","open fun createSignature(filteredTransaction: FilteredTransaction, publicKey: PublicKey): TransactionSignature","net.corda.core.node.ServiceHub.createSignature"]},{"name":"open fun createSignature(signedTransaction: SignedTransaction): TransactionSignature","description":"net.corda.core.node.ServiceHub.createSignature","location":"docs/net.corda.core.node/-service-hub/create-signature.html","searchKeys":["createSignature","open fun createSignature(signedTransaction: SignedTransaction): TransactionSignature","net.corda.core.node.ServiceHub.createSignature"]},{"name":"open fun createSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): TransactionSignature","description":"net.corda.core.node.ServiceHub.createSignature","location":"docs/net.corda.core.node/-service-hub/create-signature.html","searchKeys":["createSignature","open fun createSignature(signedTransaction: SignedTransaction, publicKey: PublicKey): TransactionSignature","net.corda.core.node.ServiceHub.createSignature"]},{"name":"open fun createStartedNode(nodeInfo: NodeInfo, rpcOps: List<RPCOps>, notaryService: NotaryService?): TestStartedNode","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.createStartedNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/create-started-node.html","searchKeys":["createStartedNode","open fun createStartedNode(nodeInfo: NodeInfo, rpcOps: List<RPCOps>, notaryService: NotaryService?): TestStartedNode","net.corda.testing.node.internal.InternalMockNetwork.MockNode.createStartedNode"]},{"name":"open fun createVerifier(ltx: LedgerTransaction, serializationContext: SerializationContext): Verifier","description":"net.corda.core.internal.verification.VerificationSupport.createVerifier","location":"docs/net.corda.core.internal.verification/-verification-support/create-verifier.html","searchKeys":["createVerifier","open fun createVerifier(ltx: LedgerTransaction, serializationContext: SerializationContext): Verifier","net.corda.core.internal.verification.VerificationSupport.createVerifier"]},{"name":"open fun createWrappingKey(alias: String, failIfExists: Boolean)","description":"net.corda.testing.node.internal.MockCryptoService.createWrappingKey","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/create-wrapping-key.html","searchKeys":["createWrappingKey","open fun createWrappingKey(alias: String, failIfExists: Boolean)","net.corda.testing.node.internal.MockCryptoService.createWrappingKey"]},{"name":"open fun decrypt(ciphertext: ByteArray): <Error class: unknown class>","description":"net.corda.testing.node.internal.MockEncryptionService.decrypt","location":"docs/net.corda.testing.node.internal/-mock-encryption-service/decrypt.html","searchKeys":["decrypt","open fun decrypt(ciphertext: ByteArray): <Error class: unknown class>","net.corda.testing.node.internal.MockEncryptionService.decrypt"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): Amount<*>","description":"net.corda.client.jackson.JacksonSupport.AmountDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-amount-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): Amount<*>","net.corda.client.jackson.JacksonSupport.AmountDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): AnonymousParty","description":"net.corda.client.jackson.JacksonSupport.AnonymousPartyDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-anonymous-party-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): AnonymousParty","net.corda.client.jackson.JacksonSupport.AnonymousPartyDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): CordaX500Name","description":"net.corda.client.jackson.JacksonSupport.CordaX500NameDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-corda-x500-name-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): CordaX500Name","net.corda.client.jackson.JacksonSupport.CordaX500NameDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): NodeInfo","description":"net.corda.client.jackson.JacksonSupport.NodeInfoDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-node-info-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): NodeInfo","net.corda.client.jackson.JacksonSupport.NodeInfoDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): Party","description":"net.corda.client.jackson.JacksonSupport.PartyDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-party-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): Party","net.corda.client.jackson.JacksonSupport.PartyDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): PublicKey","description":"net.corda.client.jackson.JacksonSupport.PublicKeyDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-public-key-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): PublicKey","net.corda.client.jackson.JacksonSupport.PublicKeyDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): T","description":"net.corda.client.jackson.JacksonSupport.SecureHashDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-secure-hash-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, context: <Error class: unknown class>): T","net.corda.client.jackson.JacksonSupport.SecureHashDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, ctxt: <Error class: unknown class>): OpaqueBytes","description":"net.corda.client.jackson.JacksonSupport.OpaqueBytesDeserializer.deserialize","location":"docs/net.corda.client.jackson/-jackson-support/-opaque-bytes-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, ctxt: <Error class: unknown class>): OpaqueBytes","net.corda.client.jackson.JacksonSupport.OpaqueBytesDeserializer.deserialize"]},{"name":"open fun deserialize(parser: <Error class: unknown class>, ctxt: <Error class: unknown class>): T","description":"net.corda.client.jackson.internal.SimpleDeserializer.deserialize","location":"docs/net.corda.client.jackson.internal/-simple-deserializer/deserialize.html","searchKeys":["deserialize","open fun deserialize(parser: <Error class: unknown class>, ctxt: <Error class: unknown class>): T","net.corda.client.jackson.internal.SimpleDeserializer.deserialize"]},{"name":"open fun dispose(): <Error class: unknown class>","description":"net.corda.testing.node.internal.TestStartedNode.dispose","location":"docs/net.corda.testing.node.internal/-test-started-node/dispose.html","searchKeys":["dispose","open fun dispose(): <Error class: unknown class>","net.corda.testing.node.internal.TestStartedNode.dispose"]},{"name":"open fun encrypt(plaintext: ByteArray, additionalData: ByteArray?): ByteArray","description":"net.corda.testing.node.internal.MockEncryptionService.encrypt","location":"docs/net.corda.testing.node.internal/-mock-encryption-service/encrypt.html","searchKeys":["encrypt","open fun encrypt(plaintext: ByteArray, additionalData: ByteArray?): ByteArray","net.corda.testing.node.internal.MockEncryptionService.encrypt"]},{"name":"open fun extractFile(path: String, outputTo: OutputStream): <Error class: unknown class>","description":"net.corda.core.contracts.Attachment.extractFile","location":"docs/net.corda.core.contracts/-attachment/extract-file.html","searchKeys":["extractFile","open fun extractFile(path: String, outputTo: OutputStream): <Error class: unknown class>","net.corda.core.contracts.Attachment.extractFile"]},{"name":"open fun extractUnauthenticatedAdditionalData(ciphertext: ByteArray): ByteArray?","description":"net.corda.testing.node.internal.MockEncryptionService.extractUnauthenticatedAdditionalData","location":"docs/net.corda.testing.node.internal/-mock-encryption-service/extract-unauthenticated-additional-data.html","searchKeys":["extractUnauthenticatedAdditionalData","open fun extractUnauthenticatedAdditionalData(ciphertext: ByteArray): ByteArray?","net.corda.testing.node.internal.MockEncryptionService.extractUnauthenticatedAdditionalData"]},{"name":"open fun fails(): EnforceVerifyOrFail","description":"net.corda.testing.dsl.Verifies.fails","location":"docs/net.corda.testing.dsl/-verifies/fails.html","searchKeys":["fails","open fun fails(): EnforceVerifyOrFail","net.corda.testing.dsl.Verifies.fails"]},{"name":"open fun failsWith(expectedMessage: String?): EnforceVerifyOrFail","description":"net.corda.testing.dsl.Verifies.failsWith","location":"docs/net.corda.testing.dsl/-verifies/fails-with.html","searchKeys":["failsWith","open fun failsWith(expectedMessage: String?): EnforceVerifyOrFail","net.corda.testing.dsl.Verifies.failsWith"]},{"name":"open fun filterMyKeys(candidateKeys: Iterable<PublicKey>): Iterable<PublicKey>","description":"net.corda.testing.node.internal.MockKeyManagementService.filterMyKeys","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/filter-my-keys.html","searchKeys":["filterMyKeys","open fun filterMyKeys(candidateKeys: Iterable<PublicKey>): Iterable<PublicKey>","net.corda.testing.node.internal.MockKeyManagementService.filterMyKeys"]},{"name":"open fun finalizeTransaction(transaction: SignedTransaction): Boolean","description":"net.corda.testing.node.internal.MockTransactionStorage.finalizeTransaction","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/finalize-transaction.html","searchKeys":["finalizeTransaction","open fun finalizeTransaction(transaction: SignedTransaction): Boolean","net.corda.testing.node.internal.MockTransactionStorage.finalizeTransaction"]},{"name":"open fun finalizeTransactionWithExtraSignatures(transaction: SignedTransaction, signatures: Collection<TransactionSignature>): Boolean","description":"net.corda.testing.node.internal.MockTransactionStorage.finalizeTransactionWithExtraSignatures","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/finalize-transaction-with-extra-signatures.html","searchKeys":["finalizeTransactionWithExtraSignatures","open fun finalizeTransactionWithExtraSignatures(transaction: SignedTransaction, signatures: Collection<TransactionSignature>): Boolean","net.corda.testing.node.internal.MockTransactionStorage.finalizeTransactionWithExtraSignatures"]},{"name":"open fun freshKeyInternal(externalId: UUID?): PublicKey","description":"net.corda.testing.node.internal.MockKeyManagementService.freshKeyInternal","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/fresh-key-internal.html","searchKeys":["freshKeyInternal","open fun freshKeyInternal(externalId: UUID?): PublicKey","net.corda.testing.node.internal.MockKeyManagementService.freshKeyInternal"]},{"name":"open fun generateKeyPair(alias: String, scheme: SignatureScheme): PublicKey","description":"net.corda.testing.node.internal.MockCryptoService.generateKeyPair","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/generate-key-pair.html","searchKeys":["generateKeyPair","open fun generateKeyPair(alias: String, scheme: SignatureScheme): PublicKey","net.corda.testing.node.internal.MockCryptoService.generateKeyPair"]},{"name":"open fun generateWrappedKeyPair(masterKeyAlias: String, childKeyScheme: SignatureScheme): <Error class: unknown class><PublicKey, <Error class: unknown class>>","description":"net.corda.testing.node.internal.MockCryptoService.generateWrappedKeyPair","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/generate-wrapped-key-pair.html","searchKeys":["generateWrappedKeyPair","open fun generateWrappedKeyPair(masterKeyAlias: String, childKeyScheme: SignatureScheme): <Error class: unknown class><PublicKey, <Error class: unknown class>>","net.corda.testing.node.internal.MockCryptoService.generateWrappedKeyPair"]},{"name":"open fun get(index: Int): U","description":"net.corda.core.internal.LazyMappedList.get","location":"docs/net.corda.core.internal/-lazy-mapped-list/get.html","searchKeys":["get","open fun get(index: Int): U","net.corda.core.internal.LazyMappedList.get"]},{"name":"open fun get(key: PublicKey): <Error class: unknown class>","description":"net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache.get","location":"docs/net.corda.testing.node.internal/-mock-public-key-to-owning-identity-cache/get.html","searchKeys":["get","open fun get(key: PublicKey): <Error class: unknown class>","net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache.get"]},{"name":"open fun getAddressOfParty(partyInfo: PartyInfo): MessageRecipients","description":"net.corda.testing.node.internal.MockNodeMessagingService.getAddressOfParty","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/get-address-of-party.html","searchKeys":["getAddressOfParty","open fun getAddressOfParty(partyInfo: PartyInfo): MessageRecipients","net.corda.testing.node.internal.MockNodeMessagingService.getAddressOfParty"]},{"name":"open fun getAppContext(): CordappContext","description":"net.corda.core.node.ServiceHub.getAppContext","location":"docs/net.corda.core.node/-service-hub/get-app-context.html","searchKeys":["getAppContext","open fun getAppContext(): CordappContext","net.corda.core.node.ServiceHub.getAppContext"]},{"name":"open fun getAttachments(ids: Collection<SecureHash>): List<Attachment?>","description":"net.corda.core.internal.verification.VerificationSupport.getAttachments","location":"docs/net.corda.core.internal.verification/-verification-support/get-attachments.html","searchKeys":["getAttachments","open fun getAttachments(ids: Collection<SecureHash>): List<Attachment?>","net.corda.core.internal.verification.VerificationSupport.getAttachments"]},{"name":"open fun getConfigByName(name: String): <Error class: unknown class>","description":"net.corda.testing.internal.MockCordappConfigProvider.getConfigByName","location":"docs/net.corda.testing.internal/-mock-cordapp-config-provider/get-config-by-name.html","searchKeys":["getConfigByName","open fun getConfigByName(name: String): <Error class: unknown class>","net.corda.testing.internal.MockCordappConfigProvider.getConfigByName"]},{"name":"open fun getContractAttachmentID(contractClassName: ContractClassName): AttachmentId?","description":"net.corda.testing.internal.MockCordappProvider.getContractAttachmentID","location":"docs/net.corda.testing.internal/-mock-cordapp-provider/get-contract-attachment-i-d.html","searchKeys":["getContractAttachmentID","open fun getContractAttachmentID(contractClassName: ContractClassName): AttachmentId?","net.corda.testing.internal.MockCordappProvider.getContractAttachmentID"]},{"name":"open fun getErrorId(): Long?","description":"net.corda.core.flows.FlowException.getErrorId","location":"docs/net.corda.core.flows/-flow-exception/get-error-id.html","searchKeys":["getErrorId","open fun getErrorId(): Long?","net.corda.core.flows.FlowException.getErrorId"]},{"name":"open fun getErrorId(): Long?","description":"net.corda.core.flows.UnexpectedFlowEndException.getErrorId","location":"docs/net.corda.core.flows/-unexpected-flow-end-exception/get-error-id.html","searchKeys":["getErrorId","open fun getErrorId(): Long?","net.corda.core.flows.UnexpectedFlowEndException.getErrorId"]},{"name":"open fun getEta(numStates: Int): Duration","description":"net.corda.core.internal.notary.UniquenessProvider.getEta","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/get-eta.html","searchKeys":["getEta","open fun getEta(numStates: Int): Duration","net.corda.core.internal.notary.UniquenessProvider.getEta"]},{"name":"open fun getFlowFactoryForInitiatingFlow(initiatedFlowClass: Class<out FlowLogic<*>>): <Error class: unknown class><out <Error class: unknown class>>?","description":"net.corda.testing.node.internal.MockNodeFlowManager.getFlowFactoryForInitiatingFlow","location":"docs/net.corda.testing.node.internal/-mock-node-flow-manager/get-flow-factory-for-initiating-flow.html","searchKeys":["getFlowFactoryForInitiatingFlow","open fun getFlowFactoryForInitiatingFlow(initiatedFlowClass: Class<out FlowLogic<*>>): <Error class: unknown class><out <Error class: unknown class>>?","net.corda.testing.node.internal.MockNodeFlowManager.getFlowFactoryForInitiatingFlow"]},{"name":"open fun getFlowStackSnapshot(flowClass: Class<out FlowLogic<*>>): FlowStackSnapshot","description":"net.corda.testing.internal.FlowStackSnapshotFactoryImpl.getFlowStackSnapshot","location":"docs/net.corda.testing.internal/-flow-stack-snapshot-factory-impl/get-flow-stack-snapshot.html","searchKeys":["getFlowStackSnapshot","open fun getFlowStackSnapshot(flowClass: Class<out FlowLogic<*>>): FlowStackSnapshot","net.corda.testing.internal.FlowStackSnapshotFactoryImpl.getFlowStackSnapshot"]},{"name":"open fun getMissingSigners(): Set<PublicKey>","description":"net.corda.core.transactions.TransactionWithSignatures.getMissingSigners","location":"docs/net.corda.core.transactions/-transaction-with-signatures/get-missing-signers.html","searchKeys":["getMissingSigners","open fun getMissingSigners(): Set<PublicKey>","net.corda.core.transactions.TransactionWithSignatures.getMissingSigners"]},{"name":"open fun getNotary(name: CordaX500Name): Party?","description":"net.corda.core.node.services.NetworkMapCacheBase.getNotary","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-notary.html","searchKeys":["getNotary","open fun getNotary(name: CordaX500Name): Party?","net.corda.core.node.services.NetworkMapCacheBase.getNotary"]},{"name":"open fun getParticipantSessions(): List<<Error class: unknown class><FlowSession, List<AbstractParty>>>","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.getParticipantSessions","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/get-participant-sessions.html","searchKeys":["getParticipantSessions","open fun getParticipantSessions(): List<<Error class: unknown class><FlowSession, List<AbstractParty>>>","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.getParticipantSessions"]},{"name":"open fun getPeerByLegalName(name: CordaX500Name): Party?","description":"net.corda.core.node.services.NetworkMapCacheBase.getPeerByLegalName","location":"docs/net.corda.core.node.services/-network-map-cache-base/get-peer-by-legal-name.html","searchKeys":["getPeerByLegalName","open fun getPeerByLegalName(name: CordaX500Name): Party?","net.corda.core.node.services.NetworkMapCacheBase.getPeerByLegalName"]},{"name":"open fun getPublicKey(alias: String): PublicKey?","description":"net.corda.testing.node.internal.MockCryptoService.getPublicKey","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/get-public-key.html","searchKeys":["getPublicKey","open fun getPublicKey(alias: String): PublicKey?","net.corda.testing.node.internal.MockCryptoService.getPublicKey"]},{"name":"open fun getSigner(alias: String): <Error class: unknown class>","description":"net.corda.testing.node.internal.MockCryptoService.getSigner","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/get-signer.html","searchKeys":["getSigner","open fun getSigner(alias: String): <Error class: unknown class>","net.corda.testing.node.internal.MockCryptoService.getSigner"]},{"name":"open fun getSigner(publicKey: PublicKey): <Error class: unknown class>","description":"net.corda.testing.node.internal.MockKeyManagementService.getSigner","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/get-signer.html","searchKeys":["getSigner","open fun getSigner(publicKey: PublicKey): <Error class: unknown class>","net.corda.testing.node.internal.MockKeyManagementService.getSigner"]},{"name":"open fun getStateAndRef(stateRef: StateRef): StateAndRef<*>","description":"net.corda.core.internal.verification.VerificationSupport.getStateAndRef","location":"docs/net.corda.core.internal.verification/-verification-support/get-state-and-ref.html","searchKeys":["getStateAndRef","open fun getStateAndRef(stateRef: StateRef): StateAndRef<*>","net.corda.core.internal.verification.VerificationSupport.getStateAndRef"]},{"name":"open fun getTransaction(id: SecureHash): SignedTransaction?","description":"net.corda.testing.node.internal.MockTransactionStorage.getTransaction","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/get-transaction.html","searchKeys":["getTransaction","open fun getTransaction(id: SecureHash): SignedTransaction?","net.corda.testing.node.internal.MockTransactionStorage.getTransaction"]},{"name":"open fun getTransactionWithStatus(id: SecureHash): SignedTransactionWithStatus?","description":"net.corda.testing.node.internal.MockTransactionStorage.getTransactionWithStatus","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/get-transaction-with-status.html","searchKeys":["getTransactionWithStatus","open fun getTransactionWithStatus(id: SecureHash): SignedTransactionWithStatus?","net.corda.testing.node.internal.MockTransactionStorage.getTransactionWithStatus"]},{"name":"open fun getWrappingMode(): <Error class: unknown class>?","description":"net.corda.testing.node.internal.MockCryptoService.getWrappingMode","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/get-wrapping-mode.html","searchKeys":["getWrappingMode","open fun getWrappingMode(): <Error class: unknown class>?","net.corda.testing.node.internal.MockCryptoService.getWrappingMode"]},{"name":"open fun initKeyStores(): <Error class: unknown class>","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.initKeyStores","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/init-key-stores.html","searchKeys":["initKeyStores","open fun initKeyStores(): <Error class: unknown class>","net.corda.testing.node.internal.InternalMockNetwork.MockNode.initKeyStores"]},{"name":"open fun isWorkingDay(date: LocalDate): Boolean","description":"net.corda.finance.contracts.BusinessCalendar.isWorkingDay","location":"docs/net.corda.finance.contracts/-business-calendar/is-working-day.html","searchKeys":["isWorkingDay","open fun isWorkingDay(date: LocalDate): Boolean","net.corda.finance.contracts.BusinessCalendar.isWorkingDay"]},{"name":"open fun makeKeyManagementService(identityService: <Error class: unknown class>): <Error class: unknown class>","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.makeKeyManagementService","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/make-key-management-service.html","searchKeys":["makeKeyManagementService","open fun makeKeyManagementService(identityService: <Error class: unknown class>): <Error class: unknown class>","net.corda.testing.node.internal.InternalMockNetwork.MockNode.makeKeyManagementService"]},{"name":"open fun makeMessagingService(): MockNodeMessagingService","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.makeMessagingService","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/make-messaging-service.html","searchKeys":["makeMessagingService","open fun makeMessagingService(): MockNodeMessagingService","net.corda.testing.node.internal.InternalMockNetwork.MockNode.makeMessagingService"]},{"name":"open fun makeNetworkParametersStorage(): NetworkParametersStorage","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.makeNetworkParametersStorage","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/make-network-parameters-storage.html","searchKeys":["makeNetworkParametersStorage","open fun makeNetworkParametersStorage(): NetworkParametersStorage","net.corda.testing.node.internal.InternalMockNetwork.MockNode.makeNetworkParametersStorage"]},{"name":"open fun myAddresses(): List<NetworkHostAndPort>","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.myAddresses","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/my-addresses.html","searchKeys":["myAddresses","open fun myAddresses(): List<NetworkHostAndPort>","net.corda.testing.node.internal.InternalMockNetwork.MockNode.myAddresses"]},{"name":"open fun nextPort(): Int","description":"net.corda.testing.driver.DriverDSL.nextPort","location":"docs/net.corda.testing.driver/-driver-d-s-l/next-port.html","searchKeys":["nextPort","open fun nextPort(): Int","net.corda.testing.driver.DriverDSL.nextPort"]},{"name":"open fun nonceDigest(bytes: ByteArray): ByteArray","description":"net.corda.core.crypto.DigestAlgorithm.nonceDigest","location":"docs/net.corda.core.crypto/-digest-algorithm/nonce-digest.html","searchKeys":["nonceDigest","open fun nonceDigest(bytes: ByteArray): ByteArray","net.corda.core.crypto.DigestAlgorithm.nonceDigest"]},{"name":"open fun onError(e: Throwable)","description":"net.corda.core.observable.internal.ResilientSubscriber.onError","location":"docs/net.corda.core.observable.internal/-resilient-subscriber/on-error.html","searchKeys":["onError","open fun onError(e: Throwable)","net.corda.core.observable.internal.ResilientSubscriber.onError"]},{"name":"open fun onNext(t: T)","description":"net.corda.core.observable.internal.ResilientSubscriber.onNext","location":"docs/net.corda.core.observable.internal/-resilient-subscriber/on-next.html","searchKeys":["onNext","open fun onNext(t: T)","net.corda.core.observable.internal.ResilientSubscriber.onNext"]},{"name":"open fun openAsJAR(): JarInputStream","description":"net.corda.core.contracts.Attachment.openAsJAR","location":"docs/net.corda.core.contracts/-attachment/open-as-j-a-r.html","searchKeys":["openAsJAR","open fun openAsJAR(): JarInputStream","net.corda.core.contracts.Attachment.openAsJAR"]},{"name":"open fun paramNamesFromConstructor(ctor: Constructor<*>): List<String>","description":"net.corda.client.jackson.StringToMethodCallParser.paramNamesFromConstructor","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/param-names-from-constructor.html","searchKeys":["paramNamesFromConstructor","open fun paramNamesFromConstructor(ctor: Constructor<*>): List<String>","net.corda.client.jackson.StringToMethodCallParser.paramNamesFromConstructor"]},{"name":"open fun paramNamesFromMethod(method: Method): List<String>","description":"net.corda.client.jackson.StringToMethodCallParser.paramNamesFromMethod","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/param-names-from-method.html","searchKeys":["paramNamesFromMethod","open fun paramNamesFromMethod(method: Method): List<String>","net.corda.client.jackson.StringToMethodCallParser.paramNamesFromMethod"]},{"name":"open fun persistAsJsonFile(flowClass: Class<out FlowLogic<*>>, baseDir: Path, flowId: StateMachineRunId)","description":"net.corda.testing.internal.FlowStackSnapshotFactoryImpl.persistAsJsonFile","location":"docs/net.corda.testing.internal/-flow-stack-snapshot-factory-impl/persist-as-json-file.html","searchKeys":["persistAsJsonFile","open fun persistAsJsonFile(flowClass: Class<out FlowLogic<*>>, baseDir: Path, flowId: StateMachineRunId)","net.corda.testing.internal.FlowStackSnapshotFactoryImpl.persistAsJsonFile"]},{"name":"open fun pollUntilTrue(pollName: String, pollInterval: Duration = DEFAULT_POLL_INTERVAL, warnCount: Int = DEFAULT_WARN_COUNT, check: () -> Boolean): CordaFuture<Unit>","description":"net.corda.testing.node.internal.InternalDriverDSL.pollUntilTrue","location":"docs/net.corda.testing.node.internal/-internal-driver-d-s-l/poll-until-true.html","searchKeys":["pollUntilTrue","open fun pollUntilTrue(pollName: String, pollInterval: Duration = DEFAULT_POLL_INTERVAL, warnCount: Int = DEFAULT_WARN_COUNT, check: () -> Boolean): CordaFuture<Unit>","net.corda.testing.node.internal.InternalDriverDSL.pollUntilTrue"]},{"name":"open fun processQuery(query: NotaryService.Query.Request): NotaryService.Query.Result","description":"net.corda.core.internal.notary.NotaryService.processQuery","location":"docs/net.corda.core.internal.notary/-notary-service/process-query.html","searchKeys":["processQuery","open fun processQuery(query: NotaryService.Query.Request): NotaryService.Query.Result","net.corda.core.internal.notary.NotaryService.processQuery"]},{"name":"open fun pumpReceive(block: Boolean = false): InMemoryMessagingNetwork.MessageTransfer?","description":"net.corda.testing.node.internal.TestStartedNode.pumpReceive","location":"docs/net.corda.testing.node.internal/-test-started-node/pump-receive.html","searchKeys":["pumpReceive","open fun pumpReceive(block: Boolean = false): InMemoryMessagingNetwork.MessageTransfer?","net.corda.testing.node.internal.TestStartedNode.pumpReceive"]},{"name":"open fun queryAttachments(criteria: AttachmentQueryCriteria): List<AttachmentId>","description":"net.corda.core.node.services.AttachmentStorage.queryAttachments","location":"docs/net.corda.core.node.services/-attachment-storage/query-attachments.html","searchKeys":["queryAttachments","open fun queryAttachments(criteria: AttachmentQueryCriteria): List<AttachmentId>","net.corda.core.node.services.AttachmentStorage.queryAttachments"]},{"name":"open fun receiveAllMap(sessions: Map<FlowSession, Class<out Any>>, maySkipCheckpoint: Boolean = false): Map<FlowSession, UntrustworthyData<Any>>","description":"net.corda.core.flows.FlowLogic.receiveAllMap","location":"docs/net.corda.core.flows/-flow-logic/receive-all-map.html","searchKeys":["receiveAllMap","open fun receiveAllMap(sessions: Map<FlowSession, Class<out Any>>, maySkipCheckpoint: Boolean = false): Map<FlowSession, UntrustworthyData<Any>>","net.corda.core.flows.FlowLogic.receiveAllMap"]},{"name":"open fun recordTransactions(first: SignedTransaction, vararg remaining: SignedTransaction)","description":"net.corda.core.node.ServiceHub.recordTransactions","location":"docs/net.corda.core.node/-service-hub/record-transactions.html","searchKeys":["recordTransactions","open fun recordTransactions(first: SignedTransaction, vararg remaining: SignedTransaction)","net.corda.core.node.ServiceHub.recordTransactions"]},{"name":"open fun recordTransactions(notifyVault: Boolean, first: SignedTransaction, vararg remaining: SignedTransaction)","description":"net.corda.core.node.ServiceHub.recordTransactions","location":"docs/net.corda.core.node/-service-hub/record-transactions.html","searchKeys":["recordTransactions","open fun recordTransactions(notifyVault: Boolean, first: SignedTransaction, vararg remaining: SignedTransaction)","net.corda.core.node.ServiceHub.recordTransactions"]},{"name":"open fun recordTransactions(notifyVault: Boolean, txs: Iterable<SignedTransaction>)","description":"net.corda.core.node.ServiceHub.recordTransactions","location":"docs/net.corda.core.node/-service-hub/record-transactions.html","searchKeys":["recordTransactions","open fun recordTransactions(notifyVault: Boolean, txs: Iterable<SignedTransaction>)","net.corda.core.node.ServiceHub.recordTransactions"]},{"name":"open fun recordTransactions(txs: Iterable<SignedTransaction>)","description":"net.corda.core.node.ServiceHub.recordTransactions","location":"docs/net.corda.core.node/-service-hub/record-transactions.html","searchKeys":["recordTransactions","open fun recordTransactions(txs: Iterable<SignedTransaction>)","net.corda.core.node.ServiceHub.recordTransactions"]},{"name":"open fun release(sig: Signature)","description":"net.corda.core.crypto.internal.SignatureFactory.release","location":"docs/net.corda.core.crypto.internal/-signature-factory/release.html","searchKeys":["release","open fun release(sig: Signature)","net.corda.core.crypto.internal.SignatureFactory.release"]},{"name":"open fun removeMessageHandler(registration: <Error class: unknown class>)","description":"net.corda.testing.node.internal.MockNodeMessagingService.removeMessageHandler","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/remove-message-handler.html","searchKeys":["removeMessageHandler","open fun removeMessageHandler(registration: <Error class: unknown class>)","net.corda.testing.node.internal.MockNodeMessagingService.removeMessageHandler"]},{"name":"open fun removeUnnotarisedTransaction(id: SecureHash): Boolean","description":"net.corda.testing.node.internal.MockTransactionStorage.removeUnnotarisedTransaction","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/remove-unnotarised-transaction.html","searchKeys":["removeUnnotarisedTransaction","open fun removeUnnotarisedTransaction(id: SecureHash): Boolean","net.corda.testing.node.internal.MockTransactionStorage.removeUnnotarisedTransaction"]},{"name":"open fun requireWellKnownPartyFromAnonymous(party: AbstractParty): Party","description":"net.corda.core.node.services.IdentityService.requireWellKnownPartyFromAnonymous","location":"docs/net.corda.core.node.services/-identity-service/require-well-known-party-from-anonymous.html","searchKeys":["requireWellKnownPartyFromAnonymous","open fun requireWellKnownPartyFromAnonymous(party: AbstractParty): Party","net.corda.core.node.services.IdentityService.requireWellKnownPartyFromAnonymous"]},{"name":"open fun resolvePayload(payload: Any): SignedTransaction","description":"net.corda.core.flows.ReceiveTransactionFlow.resolvePayload","location":"docs/net.corda.core.flows/-receive-transaction-flow/resolve-payload.html","searchKeys":["resolvePayload","open fun resolvePayload(payload: Any): SignedTransaction","net.corda.core.flows.ReceiveTransactionFlow.resolvePayload"]},{"name":"open fun send(message: <Error class: unknown class>, target: MessageRecipients, sequenceKey: Any)","description":"net.corda.testing.node.internal.MockNodeMessagingService.send","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/send.html","searchKeys":["send","open fun send(message: <Error class: unknown class>, target: MessageRecipients, sequenceKey: Any)","net.corda.testing.node.internal.MockNodeMessagingService.send"]},{"name":"open fun send(otherParty: Party, payload: Any)","description":"net.corda.core.flows.FlowLogic.send","location":"docs/net.corda.core.flows/-flow-logic/send.html","searchKeys":["send","open fun send(otherParty: Party, payload: Any)","net.corda.core.flows.FlowLogic.send"]},{"name":"open fun sendAll(addressedMessages: List<<Error class: unknown class>>)","description":"net.corda.testing.node.internal.MockNodeMessagingService.sendAll","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/send-all.html","searchKeys":["sendAll","open fun sendAll(addressedMessages: List<<Error class: unknown class>>)","net.corda.testing.node.internal.MockNodeMessagingService.sendAll"]},{"name":"open fun serialize(obj: Any, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.ToStringSerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-to-string-serializer/serialize.html","searchKeys":["serialize","open fun serialize(obj: Any, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.ToStringSerializer.serialize"]},{"name":"open fun serialize(obj: CordaX500Name, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.CordaX500NameSerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-corda-x500-name-serializer/serialize.html","searchKeys":["serialize","open fun serialize(obj: CordaX500Name, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.CordaX500NameSerializer.serialize"]},{"name":"open fun serialize(obj: SecureHash, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.SecureHashSerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-secure-hash-serializer/serialize.html","searchKeys":["serialize","open fun serialize(obj: SecureHash, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.SecureHashSerializer.serialize"]},{"name":"open fun serialize(value: Amount<*>, gen: <Error class: unknown class>, serializers: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.AmountSerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-amount-serializer/serialize.html","searchKeys":["serialize","open fun serialize(value: Amount<*>, gen: <Error class: unknown class>, serializers: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.AmountSerializer.serialize"]},{"name":"open fun serialize(value: AnonymousParty, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.AnonymousPartySerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-anonymous-party-serializer/serialize.html","searchKeys":["serialize","open fun serialize(value: AnonymousParty, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.AnonymousPartySerializer.serialize"]},{"name":"open fun serialize(value: NodeInfo, gen: <Error class: unknown class>, serializers: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.NodeInfoSerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-node-info-serializer/serialize.html","searchKeys":["serialize","open fun serialize(value: NodeInfo, gen: <Error class: unknown class>, serializers: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.NodeInfoSerializer.serialize"]},{"name":"open fun serialize(value: OpaqueBytes, gen: <Error class: unknown class>, serializers: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.OpaqueBytesSerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-opaque-bytes-serializer/serialize.html","searchKeys":["serialize","open fun serialize(value: OpaqueBytes, gen: <Error class: unknown class>, serializers: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.OpaqueBytesSerializer.serialize"]},{"name":"open fun serialize(value: Party, gen: <Error class: unknown class>, provider: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.PartySerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-party-serializer/serialize.html","searchKeys":["serialize","open fun serialize(value: Party, gen: <Error class: unknown class>, provider: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.PartySerializer.serialize"]},{"name":"open fun serialize(value: PublicKey, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","description":"net.corda.client.jackson.JacksonSupport.PublicKeySerializer.serialize","location":"docs/net.corda.client.jackson/-jackson-support/-public-key-serializer/serialize.html","searchKeys":["serialize","open fun serialize(value: PublicKey, generator: <Error class: unknown class>, provider: <Error class: unknown class>)","net.corda.client.jackson.JacksonSupport.PublicKeySerializer.serialize"]},{"name":"open fun set(key: PublicKey, value: <Error class: unknown class>)","description":"net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache.set","location":"docs/net.corda.testing.node.internal/-mock-public-key-to-owning-identity-cache/set.html","searchKeys":["set","open fun set(key: PublicKey, value: <Error class: unknown class>)","net.corda.testing.node.internal.MockPublicKeyToOwningIdentityCache.set"]},{"name":"open fun setMessagingServiceSpy(spy: MessagingServiceSpy)","description":"net.corda.testing.node.internal.TestStartedNode.setMessagingServiceSpy","location":"docs/net.corda.testing.node.internal/-test-started-node/set-messaging-service-spy.html","searchKeys":["setMessagingServiceSpy","open fun setMessagingServiceSpy(spy: MessagingServiceSpy)","net.corda.testing.node.internal.TestStartedNode.setMessagingServiceSpy"]},{"name":"open fun setUp()","description":"net.corda.testing.node.internal.NodeBasedTest.setUp","location":"docs/net.corda.testing.node.internal/-node-based-test/set-up.html","searchKeys":["setUp","open fun setUp()","net.corda.testing.node.internal.NodeBasedTest.setUp"]},{"name":"open fun setupModule(context: <Error class: unknown class>)","description":"net.corda.client.jackson.internal.CordaModule.setupModule","location":"docs/net.corda.client.jackson.internal/-corda-module/setup-module.html","searchKeys":["setupModule","open fun setupModule(context: <Error class: unknown class>)","net.corda.client.jackson.internal.CordaModule.setupModule"]},{"name":"open fun sign(alias: String, data: ByteArray, signAlgorithm: String?): ByteArray","description":"net.corda.testing.node.internal.MockCryptoService.sign","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/sign.html","searchKeys":["sign","open fun sign(alias: String, data: ByteArray, signAlgorithm: String?): ByteArray","net.corda.testing.node.internal.MockCryptoService.sign"]},{"name":"open fun sign(bytes: ByteArray, publicKey: PublicKey): DigitalSignature.WithKey","description":"net.corda.testing.node.internal.MockKeyManagementService.sign","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/sign.html","searchKeys":["sign","open fun sign(bytes: ByteArray, publicKey: PublicKey): DigitalSignature.WithKey","net.corda.testing.node.internal.MockKeyManagementService.sign"]},{"name":"open fun sign(masterKeyAlias: String, wrappedPrivateKey: <Error class: unknown class>, payloadToSign: ByteArray): ByteArray","description":"net.corda.testing.node.internal.MockCryptoService.sign","location":"docs/net.corda.testing.node.internal/-mock-crypto-service/sign.html","searchKeys":["sign","open fun sign(masterKeyAlias: String, wrappedPrivateKey: <Error class: unknown class>, payloadToSign: ByteArray): ByteArray","net.corda.testing.node.internal.MockCryptoService.sign"]},{"name":"open fun sign(signableData: SignableData, publicKey: PublicKey): TransactionSignature","description":"net.corda.testing.node.internal.MockKeyManagementService.sign","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/sign.html","searchKeys":["sign","open fun sign(signableData: SignableData, publicKey: PublicKey): TransactionSignature","net.corda.testing.node.internal.MockKeyManagementService.sign"]},{"name":"open fun signInitialTransaction(builder: TransactionBuilder): SignedTransaction","description":"net.corda.core.node.ServiceHub.signInitialTransaction","location":"docs/net.corda.core.node/-service-hub/sign-initial-transaction.html","searchKeys":["signInitialTransaction","open fun signInitialTransaction(builder: TransactionBuilder): SignedTransaction","net.corda.core.node.ServiceHub.signInitialTransaction"]},{"name":"open fun signInitialTransaction(builder: TransactionBuilder, publicKey: PublicKey): SignedTransaction","description":"net.corda.core.node.ServiceHub.signInitialTransaction","location":"docs/net.corda.core.node/-service-hub/sign-initial-transaction.html","searchKeys":["signInitialTransaction","open fun signInitialTransaction(builder: TransactionBuilder, publicKey: PublicKey): SignedTransaction","net.corda.core.node.ServiceHub.signInitialTransaction"]},{"name":"open fun signInitialTransaction(builder: TransactionBuilder, signingPubKeys: Iterable<PublicKey>): SignedTransaction","description":"net.corda.core.node.ServiceHub.signInitialTransaction","location":"docs/net.corda.core.node/-service-hub/sign-initial-transaction.html","searchKeys":["signInitialTransaction","open fun signInitialTransaction(builder: TransactionBuilder, signingPubKeys: Iterable<PublicKey>): SignedTransaction","net.corda.core.node.ServiceHub.signInitialTransaction"]},{"name":"open fun specialise(ltx: LedgerTransaction): LedgerTransaction","description":"net.corda.core.node.ServicesForResolution.specialise","location":"docs/net.corda.core.node/-services-for-resolution/specialise.html","searchKeys":["specialise","open fun specialise(ltx: LedgerTransaction): LedgerTransaction","net.corda.core.node.ServicesForResolution.specialise"]},{"name":"open fun start()","description":"net.corda.testing.node.internal.MockNodeMessagingService.start","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/start.html","searchKeys":["start","open fun start()","net.corda.testing.node.internal.MockNodeMessagingService.start"]},{"name":"open fun start(): TestStartedNode","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.start","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/start.html","searchKeys":["start","open fun start(): TestStartedNode","net.corda.testing.node.internal.InternalMockNetwork.MockNode.start"]},{"name":"open fun start(initialKeysAndAliases: Iterable<<Error class: unknown class><PublicKey, String>>)","description":"net.corda.testing.node.internal.MockKeyManagementService.start","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/start.html","searchKeys":["start","open fun start(initialKeysAndAliases: Iterable<<Error class: unknown class><PublicKey, String>>)","net.corda.testing.node.internal.MockKeyManagementService.start"]},{"name":"open fun startDatabase()","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.startDatabase","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/start-database.html","searchKeys":["startDatabase","open fun startDatabase()","net.corda.testing.node.internal.InternalMockNetwork.MockNode.startDatabase"]},{"name":"open fun startMessagingService(rpcOps: List<RPCOps>, nodeInfo: NodeInfo, myNotaryIdentity: PartyAndCertificate?, networkParameters: NetworkParameters)","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.startMessagingService","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/start-messaging-service.html","searchKeys":["startMessagingService","open fun startMessagingService(rpcOps: List<RPCOps>, nodeInfo: NodeInfo, myNotaryIdentity: PartyAndCertificate?, networkParameters: NetworkParameters)","net.corda.testing.node.internal.InternalMockNetwork.MockNode.startMessagingService"]},{"name":"open fun startNode(): CordaFuture<NodeHandle>","description":"net.corda.testing.driver.DriverDSL.startNode","location":"docs/net.corda.testing.driver/-driver-d-s-l/start-node.html","searchKeys":["startNode","open fun startNode(): CordaFuture<NodeHandle>","net.corda.testing.driver.DriverDSL.startNode"]},{"name":"open fun startNode(defaultParameters: NodeParameters = NodeParameters(), providedName: CordaX500Name? = defaultParameters.providedName, rpcUsers: List<User> = defaultParameters.rpcUsers, verifierType: VerifierType = defaultParameters.verifierType, customOverrides: Map<String, Any?> = defaultParameters.customOverrides, startInSameProcess: Boolean? = defaultParameters.startInSameProcess, maximumHeapSize: String = defaultParameters.maximumHeapSize): CordaFuture<NodeHandle>","description":"net.corda.testing.driver.DriverDSL.startNode","location":"docs/net.corda.testing.driver/-driver-d-s-l/start-node.html","searchKeys":["startNode","open fun startNode(defaultParameters: NodeParameters = NodeParameters(), providedName: CordaX500Name? = defaultParameters.providedName, rpcUsers: List<User> = defaultParameters.rpcUsers, verifierType: VerifierType = defaultParameters.verifierType, customOverrides: Map<String, Any?> = defaultParameters.customOverrides, startInSameProcess: Boolean? = defaultParameters.startInSameProcess, maximumHeapSize: String = defaultParameters.maximumHeapSize): CordaFuture<NodeHandle>","net.corda.testing.driver.DriverDSL.startNode"]},{"name":"open fun startNode(defaultParameters: NodeParameters = NodeParameters(), providedName: CordaX500Name? = defaultParameters.providedName, rpcUsers: List<User> = defaultParameters.rpcUsers, verifierType: VerifierType = defaultParameters.verifierType, customOverrides: Map<String, Any?> = defaultParameters.customOverrides, startInSameProcess: Boolean? = defaultParameters.startInSameProcess, maximumHeapSize: String = defaultParameters.maximumHeapSize, logLevelOverride: String? = defaultParameters.logLevelOverride): CordaFuture<NodeHandle>","description":"net.corda.testing.driver.DriverDSL.startNode","location":"docs/net.corda.testing.driver/-driver-d-s-l/start-node.html","searchKeys":["startNode","open fun startNode(defaultParameters: NodeParameters = NodeParameters(), providedName: CordaX500Name? = defaultParameters.providedName, rpcUsers: List<User> = defaultParameters.rpcUsers, verifierType: VerifierType = defaultParameters.verifierType, customOverrides: Map<String, Any?> = defaultParameters.customOverrides, startInSameProcess: Boolean? = defaultParameters.startInSameProcess, maximumHeapSize: String = defaultParameters.maximumHeapSize, logLevelOverride: String? = defaultParameters.logLevelOverride): CordaFuture<NodeHandle>","net.corda.testing.driver.DriverDSL.startNode"]},{"name":"open fun startShell()","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.startShell","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/start-shell.html","searchKeys":["startShell","open fun startShell()","net.corda.testing.node.internal.InternalMockNetwork.MockNode.startShell"]},{"name":"open fun startWebserver(handle: NodeHandle): CordaFuture<WebserverHandle>","description":"net.corda.testing.driver.DriverDSL.startWebserver","location":"docs/net.corda.testing.driver/-driver-d-s-l/start-webserver.html","searchKeys":["startWebserver","open fun startWebserver(handle: NodeHandle): CordaFuture<WebserverHandle>","net.corda.testing.driver.DriverDSL.startWebserver"]},{"name":"open fun stop()","description":"net.corda.testing.node.internal.MockNodeMessagingService.stop","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/stop.html","searchKeys":["stop","open fun stop()","net.corda.testing.node.internal.MockNodeMessagingService.stop"]},{"name":"open fun toASN1Primitive(): <Error class: unknown class>","description":"net.corda.core.crypto.CompositeKey.NodeAndWeight.toASN1Primitive","location":"docs/net.corda.core.crypto/-composite-key/-node-and-weight/to-a-s-n1-primitive.html","searchKeys":["toASN1Primitive","open fun toASN1Primitive(): <Error class: unknown class>","net.corda.core.crypto.CompositeKey.NodeAndWeight.toASN1Primitive"]},{"name":"open fun toASN1Primitive(): <Error class: unknown class>","description":"net.corda.core.internal.CertRole.toASN1Primitive","location":"docs/net.corda.core.internal/-cert-role/to-a-s-n1-primitive.html","searchKeys":["toASN1Primitive","open fun toASN1Primitive(): <Error class: unknown class>","net.corda.core.internal.CertRole.toASN1Primitive"]},{"name":"open fun track(): DataFeed<List<SignedTransaction>, SignedTransaction>","description":"net.corda.testing.node.internal.MockTransactionStorage.track","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/track.html","searchKeys":["track","open fun track(): DataFeed<List<SignedTransaction>, SignedTransaction>","net.corda.testing.node.internal.MockTransactionStorage.track"]},{"name":"open fun trackTransaction(id: SecureHash): CordaFuture<SignedTransaction>","description":"net.corda.testing.node.internal.MockTransactionStorage.trackTransaction","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/track-transaction.html","searchKeys":["trackTransaction","open fun trackTransaction(id: SecureHash): CordaFuture<SignedTransaction>","net.corda.testing.node.internal.MockTransactionStorage.trackTransaction"]},{"name":"open fun trackTransactionWithNoWarning(id: SecureHash): CordaFuture<SignedTransaction>","description":"net.corda.testing.node.internal.MockTransactionStorage.trackTransactionWithNoWarning","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/track-transaction-with-no-warning.html","searchKeys":["trackTransactionWithNoWarning","open fun trackTransactionWithNoWarning(id: SecureHash): CordaFuture<SignedTransaction>","net.corda.testing.node.internal.MockTransactionStorage.trackTransactionWithNoWarning"]},{"name":"open fun verifyRequiredSignatures(): <Error class: unknown class>","description":"net.corda.core.transactions.TransactionWithSignatures.verifyRequiredSignatures","location":"docs/net.corda.core.transactions/-transaction-with-signatures/verify-required-signatures.html","searchKeys":["verifyRequiredSignatures","open fun verifyRequiredSignatures(): <Error class: unknown class>","net.corda.core.transactions.TransactionWithSignatures.verifyRequiredSignatures"]},{"name":"open fun verifySignaturesExcept(allowedToBeMissing: Collection<PublicKey>)","description":"net.corda.core.transactions.TransactionWithSignatures.verifySignaturesExcept","location":"docs/net.corda.core.transactions/-transaction-with-signatures/verify-signatures-except.html","searchKeys":["verifySignaturesExcept","open fun verifySignaturesExcept(allowedToBeMissing: Collection<PublicKey>)","net.corda.core.transactions.TransactionWithSignatures.verifySignaturesExcept"]},{"name":"open fun verifySignaturesExcept(vararg allowedToBeMissing: PublicKey)","description":"net.corda.core.transactions.TransactionWithSignatures.verifySignaturesExcept","location":"docs/net.corda.core.transactions/-transaction-with-signatures/verify-signatures-except.html","searchKeys":["verifySignaturesExcept","open fun verifySignaturesExcept(vararg allowedToBeMissing: PublicKey)","net.corda.core.transactions.TransactionWithSignatures.verifySignaturesExcept"]},{"name":"open fun wellKnownPartyFromAnonymous(party: AbstractParty): Party?","description":"net.corda.core.node.services.IdentityService.wellKnownPartyFromAnonymous","location":"docs/net.corda.core.node.services/-identity-service/well-known-party-from-anonymous.html","searchKeys":["wellKnownPartyFromAnonymous","open fun wellKnownPartyFromAnonymous(party: AbstractParty): Party?","net.corda.core.node.services.IdentityService.wellKnownPartyFromAnonymous"]},{"name":"open fun wellKnownPartyFromAnonymous(partyRef: PartyAndReference): Party?","description":"net.corda.core.node.services.IdentityService.wellKnownPartyFromAnonymous","location":"docs/net.corda.core.node.services/-identity-service/well-known-party-from-anonymous.html","searchKeys":["wellKnownPartyFromAnonymous","open fun wellKnownPartyFromAnonymous(partyRef: PartyAndReference): Party?","net.corda.core.node.services.IdentityService.wellKnownPartyFromAnonymous"]},{"name":"open fun whenConsumed(ref: StateRef): CordaFuture<Vault.Update<ContractState>>","description":"net.corda.core.node.services.VaultService.whenConsumed","location":"docs/net.corda.core.node.services/-vault-service/when-consumed.html","searchKeys":["whenConsumed","open fun whenConsumed(ref: StateRef): CordaFuture<Vault.Update<ContractState>>","net.corda.core.node.services.VaultService.whenConsumed"]},{"name":"open fun withFaceValue(newFaceValue: Amount<Issued<Currency>>): <Error class: unknown class>","description":"net.corda.finance.contracts.CommercialPaper.State.withFaceValue","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/with-face-value.html","searchKeys":["withFaceValue","open fun withFaceValue(newFaceValue: Amount<Issued<Currency>>): <Error class: unknown class>","net.corda.finance.contracts.CommercialPaper.State.withFaceValue"]},{"name":"open fun withMaturityDate(newMaturityDate: Instant): <Error class: unknown class>","description":"net.corda.finance.contracts.CommercialPaper.State.withMaturityDate","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/with-maturity-date.html","searchKeys":["withMaturityDate","open fun withMaturityDate(newMaturityDate: Instant): <Error class: unknown class>","net.corda.finance.contracts.CommercialPaper.State.withMaturityDate"]},{"name":"open fun withOwner(newOwner: AbstractParty): <Error class: unknown class>","description":"net.corda.finance.contracts.CommercialPaper.State.withOwner","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/with-owner.html","searchKeys":["withOwner","open fun withOwner(newOwner: AbstractParty): <Error class: unknown class>","net.corda.finance.contracts.CommercialPaper.State.withOwner"]},{"name":"open infix fun fails with(msg: String): EnforceVerifyOrFail","description":"net.corda.testing.dsl.Verifies.fails with","location":"docs/net.corda.testing.dsl/-verifies/fails with.html","searchKeys":["fails with","open infix fun fails with(msg: String): EnforceVerifyOrFail","net.corda.testing.dsl.Verifies.fails with"]},{"name":"open infix override fun and(criteria: AttachmentQueryCriteria): AttachmentQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.and","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/and.html","searchKeys":["and","open infix override fun and(criteria: AttachmentQueryCriteria): AttachmentQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.and"]},{"name":"open infix override fun and(criteria: QueryCriteria): QueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.and","location":"docs/net.corda.core.node.services.vault/-query-criteria/and.html","searchKeys":["and","open infix override fun and(criteria: QueryCriteria): QueryCriteria","net.corda.core.node.services.vault.QueryCriteria.and"]},{"name":"open infix override fun or(criteria: AttachmentQueryCriteria): AttachmentQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.or","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/or.html","searchKeys":["or","open infix override fun or(criteria: AttachmentQueryCriteria): AttachmentQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.or"]},{"name":"open infix override fun or(criteria: QueryCriteria): QueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.or","location":"docs/net.corda.core.node.services.vault/-query-criteria/or.html","searchKeys":["or","open infix override fun or(criteria: QueryCriteria): QueryCriteria","net.corda.core.node.services.vault.QueryCriteria.or"]},{"name":"open operator override fun compareTo(other: ByteSequence): Int","description":"net.corda.core.utilities.ByteSequence.compareTo","location":"docs/net.corda.core.utilities/-byte-sequence/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: ByteSequence): Int","net.corda.core.utilities.ByteSequence.compareTo"]},{"name":"open operator override fun compareTo(other: CompositeKey.NodeAndWeight): Int","description":"net.corda.core.crypto.CompositeKey.NodeAndWeight.compareTo","location":"docs/net.corda.core.crypto/-composite-key/-node-and-weight/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: CompositeKey.NodeAndWeight): Int","net.corda.core.crypto.CompositeKey.NodeAndWeight.compareTo"]},{"name":"open operator override fun compareTo(other: Curve25519.ModP): Int","description":"net.corda.core.crypto.internal.Curve25519.ModP.compareTo","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: Curve25519.ModP): Int","net.corda.core.crypto.internal.Curve25519.ModP.compareTo"]},{"name":"open operator override fun compareTo(other: KotlinMetadataVersion): Int","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.compareTo","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: KotlinMetadataVersion): Int","net.corda.core.internal.cordapp.KotlinMetadataVersion.compareTo"]},{"name":"open operator override fun compareTo(other: PublicKey): Int","description":"net.corda.core.crypto.NullKeys.NullPublicKey.compareTo","location":"docs/net.corda.core.crypto/-null-keys/-null-public-key/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: PublicKey): Int","net.corda.core.crypto.NullKeys.NullPublicKey.compareTo"]},{"name":"open operator override fun compareTo(other: UniqueIdentifier): Int","description":"net.corda.core.contracts.UniqueIdentifier.compareTo","location":"docs/net.corda.core.contracts/-unique-identifier/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: UniqueIdentifier): Int","net.corda.core.contracts.UniqueIdentifier.compareTo"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.client.rpc.CordaRPCClientConfiguration.equals","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.client.rpc.CordaRPCClientConfiguration.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.CordaException.equals","location":"docs/net.corda.core/-corda-exception/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.CordaException.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.CordaRuntimeException.equals","location":"docs/net.corda.core/-corda-runtime-exception/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.CordaRuntimeException.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.contracts.AmountTransfer.equals","location":"docs/net.corda.core.contracts/-amount-transfer/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.contracts.AmountTransfer.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.contracts.LinearPointer.equals","location":"docs/net.corda.core.contracts/-linear-pointer/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.contracts.LinearPointer.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.contracts.StaticPointer.equals","location":"docs/net.corda.core.contracts/-static-pointer/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.contracts.StaticPointer.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.contracts.TypeOnlyCommandData.equals","location":"docs/net.corda.core.contracts/-type-only-command-data/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.contracts.TypeOnlyCommandData.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.contracts.UniqueIdentifier.equals","location":"docs/net.corda.core.contracts/-unique-identifier/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.contracts.UniqueIdentifier.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.crypto.CompositeKey.equals","location":"docs/net.corda.core.crypto/-composite-key/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.crypto.CompositeKey.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.crypto.SecureHash.HASH.equals","location":"docs/net.corda.core.crypto/-secure-hash/-h-a-s-h/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.crypto.SecureHash.HASH.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.crypto.SecureHash.SHA256.equals","location":"docs/net.corda.core.crypto/-secure-hash/-s-h-a256/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.crypto.SecureHash.SHA256.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.crypto.TransactionSignature.equals","location":"docs/net.corda.core.crypto/-transaction-signature/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.crypto.TransactionSignature.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.identity.AbstractParty.equals","location":"docs/net.corda.core.identity/-abstract-party/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.identity.AbstractParty.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.identity.PartyAndCertificate.equals","location":"docs/net.corda.core.identity/-party-and-certificate/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.identity.PartyAndCertificate.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.internal.AbstractAttachment.equals","location":"docs/net.corda.core.internal/-abstract-attachment/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.internal.AbstractAttachment.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations.equals","location":"docs/net.corda.core.internal/-flow-i-o-request/-wait-for-session-confirmations/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.internal.cordapp.CordappImpl.equals","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.internal.cordapp.CordappImpl.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.schemas.MappedSchema.equals","location":"docs/net.corda.core.schemas/-mapped-schema/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.schemas.MappedSchema.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.equals","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.transactions.ContractUpgradeLedgerTransaction.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.transactions.LedgerTransaction.equals","location":"docs/net.corda.core.transactions/-ledger-transaction/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.transactions.LedgerTransaction.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.equals","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.transactions.NotaryChangeLedgerTransaction.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.transactions.WireTransaction.equals","location":"docs/net.corda.core.transactions/-wire-transaction/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.transactions.WireTransaction.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.utilities.ByteSequence.equals","location":"docs/net.corda.core.utilities/-byte-sequence/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.utilities.ByteSequence.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.utilities.NonEmptySet.equals","location":"docs/net.corda.core.utilities/-non-empty-set/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.utilities.NonEmptySet.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.utilities.ProgressTracker.DONE.equals","location":"docs/net.corda.core.utilities/-progress-tracker/-d-o-n-e/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.utilities.ProgressTracker.DONE.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.utilities.ProgressTracker.STARTING.equals","location":"docs/net.corda.core.utilities/-progress-tracker/-s-t-a-r-t-i-n-g/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.utilities.ProgressTracker.STARTING.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.utilities.ProgressTracker.Step.equals","location":"docs/net.corda.core.utilities/-progress-tracker/-step/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.utilities.ProgressTracker.Step.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.core.utilities.ProgressTracker.UNSTARTED.equals","location":"docs/net.corda.core.utilities/-progress-tracker/-u-n-s-t-a-r-t-e-d/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.core.utilities.ProgressTracker.UNSTARTED.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.finance.contracts.BusinessCalendar.equals","location":"docs/net.corda.finance.contracts/-business-calendar/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.finance.contracts.BusinessCalendar.equals"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.equals","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-peer-handle/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.equals"]},{"name":"open operator override fun invoke(proxy: Any, method: Method, arguments: Array<out Any?>?): Any?","description":"net.corda.core.internal.utilities.InvocationHandlerTemplate.invoke","location":"docs/net.corda.core.internal.utilities/-invocation-handler-template/invoke.html","searchKeys":["invoke","open operator override fun invoke(proxy: Any, method: Method, arguments: Array<out Any?>?): Any?","net.corda.core.internal.utilities.InvocationHandlerTemplate.invoke"]},{"name":"open operator override fun iterator(): Iterator<T>","description":"net.corda.core.utilities.NonEmptySet.iterator","location":"docs/net.corda.core.utilities/-non-empty-set/iterator.html","searchKeys":["iterator","open operator override fun iterator(): Iterator<T>","net.corda.core.utilities.NonEmptySet.iterator"]},{"name":"open override fun <A> pickNext(service: InMemoryMessagingNetwork.DistributedServiceHandle, pickFrom: List<A>): A","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random.pickNext","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/-random/pick-next.html","searchKeys":["pickNext","open override fun <A> pickNext(service: InMemoryMessagingNetwork.DistributedServiceHandle, pickFrom: List<A>): A","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random.pickNext"]},{"name":"open override fun <A> pickNext(service: InMemoryMessagingNetwork.DistributedServiceHandle, pickFrom: List<A>): A","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.RoundRobin.pickNext","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/-round-robin/pick-next.html","searchKeys":["pickNext","open override fun <A> pickNext(service: InMemoryMessagingNetwork.DistributedServiceHandle, pickFrom: List<A>): A","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.RoundRobin.pickNext"]},{"name":"open override fun <A> pollUntilNonNull(pollName: String, pollInterval: Duration, warnCount: Int, check: () -> A?): CordaFuture<A>","description":"net.corda.testing.node.internal.DriverDSLImpl.pollUntilNonNull","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/poll-until-non-null.html","searchKeys":["pollUntilNonNull","open override fun <A> pollUntilNonNull(pollName: String, pollInterval: Duration, warnCount: Int, check: () -> A?): CordaFuture<A>","net.corda.testing.node.internal.DriverDSLImpl.pollUntilNonNull"]},{"name":"open override fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String): <Error class: unknown class><K, V>","description":"net.corda.client.rpc.internal.ClientCacheFactory.buildNamed","location":"docs/net.corda.client.rpc.internal/-client-cache-factory/build-named.html","searchKeys":["buildNamed","open override fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String): <Error class: unknown class><K, V>","net.corda.client.rpc.internal.ClientCacheFactory.buildNamed"]},{"name":"open override fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","description":"net.corda.client.rpc.internal.ClientCacheFactory.buildNamed","location":"docs/net.corda.client.rpc.internal/-client-cache-factory/build-named.html","searchKeys":["buildNamed","open override fun <K : Any, V : Any> buildNamed(caffeine: <Error class: unknown class><in K, in V>, name: String, loader: <Error class: unknown class><K, V>): <Error class: unknown class><K, V>","net.corda.client.rpc.internal.ClientCacheFactory.buildNamed"]},{"name":"open override fun <S : ContractState> retrieveOutputStateAndRef(clazz: Class<S>, label: String): StateAndRef<S>","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.retrieveOutputStateAndRef","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/retrieve-output-state-and-ref.html","searchKeys":["retrieveOutputStateAndRef","open override fun <S : ContractState> retrieveOutputStateAndRef(clazz: Class<S>, label: String): StateAndRef<S>","net.corda.testing.dsl.TestLedgerDSLInterpreter.retrieveOutputStateAndRef"]},{"name":"open override fun <T : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<T>): <Error class: unknown class><T>","description":"net.corda.testing.driver.internal.InProcessImpl.registerInitiatedFlow","location":"docs/net.corda.testing.driver.internal/-in-process-impl/register-initiated-flow.html","searchKeys":["registerInitiatedFlow","open override fun <T : FlowLogic<*>> registerInitiatedFlow(initiatedFlowClass: Class<T>): <Error class: unknown class><T>","net.corda.testing.driver.internal.InProcessImpl.registerInitiatedFlow"]},{"name":"open override fun <T : SerializeAsToken> cordaService(type: Class<T>): T","description":"net.corda.testing.node.MockServices.cordaService","location":"docs/net.corda.testing.node/-mock-services/corda-service.html","searchKeys":["cordaService","open override fun <T : SerializeAsToken> cordaService(type: Class<T>): T","net.corda.testing.node.MockServices.cordaService"]},{"name":"open override fun <T : TelemetryComponent> cordaTelemetryComponent(type: Class<T>): T","description":"net.corda.testing.node.MockServices.cordaTelemetryComponent","location":"docs/net.corda.testing.node/-mock-services/corda-telemetry-component.html","searchKeys":["cordaTelemetryComponent","open override fun <T : TelemetryComponent> cordaTelemetryComponent(type: Class<T>): T","net.corda.testing.node.MockServices.cordaTelemetryComponent"]},{"name":"open override fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","description":"net.corda.client.rpc.CordaRPCConnection.getTelemetryHandle","location":"docs/net.corda.client.rpc/-corda-r-p-c-connection/get-telemetry-handle.html","searchKeys":["getTelemetryHandle","open override fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","net.corda.client.rpc.CordaRPCConnection.getTelemetryHandle"]},{"name":"open override fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.getTelemetryHandle","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/get-telemetry-handle.html","searchKeys":["getTelemetryHandle","open override fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.getTelemetryHandle"]},{"name":"open override fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","description":"net.corda.core.internal.telemetry.TelemetryServiceImpl.getTelemetryHandle","location":"docs/net.corda.core.internal.telemetry/-telemetry-service-impl/get-telemetry-handle.html","searchKeys":["getTelemetryHandle","open override fun <T> getTelemetryHandle(telemetryClass: Class<T>): T?","net.corda.core.internal.telemetry.TelemetryServiceImpl.getTelemetryHandle"]},{"name":"open override fun <T> withEntityManager(block: <Error class: unknown class>.() -> T): T","description":"net.corda.testing.node.MockServices.withEntityManager","location":"docs/net.corda.testing.node/-mock-services/with-entity-manager.html","searchKeys":["withEntityManager","open override fun <T> withEntityManager(block: <Error class: unknown class>.() -> T): T","net.corda.testing.node.MockServices.withEntityManager"]},{"name":"open override fun <W> then(callback: (CordaFuture<V>) -> W)","description":"net.corda.core.internal.concurrent.CordaFutureImpl.then","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/then.html","searchKeys":["then","open override fun <W> then(callback: (CordaFuture<V>) -> W)","net.corda.core.internal.concurrent.CordaFutureImpl.then"]},{"name":"open override fun _attachment(contractClassName: ContractClassName)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter._attachment","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/_attachment.html","searchKeys":["_attachment","open override fun _attachment(contractClassName: ContractClassName)","net.corda.testing.dsl.TestTransactionDSLInterpreter._attachment"]},{"name":"open override fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter._attachment","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/_attachment.html","searchKeys":["_attachment","open override fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>)","net.corda.testing.dsl.TestTransactionDSLInterpreter._attachment"]},{"name":"open override fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>, jarManifestAttributes: Map<String, String>)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter._attachment","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/_attachment.html","searchKeys":["_attachment","open override fun _attachment(contractClassName: ContractClassName, attachmentId: AttachmentId, signers: List<PublicKey>, jarManifestAttributes: Map<String, String>)","net.corda.testing.dsl.TestTransactionDSLInterpreter._attachment"]},{"name":"open override fun _transaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: TestTransactionDSLInterpreter.() -> EnforceVerifyOrFail): WireTransaction","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter._transaction","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/_transaction.html","searchKeys":["_transaction","open override fun _transaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: TestTransactionDSLInterpreter.() -> EnforceVerifyOrFail): WireTransaction","net.corda.testing.dsl.TestLedgerDSLInterpreter._transaction"]},{"name":"open override fun _tweak(dsl: LedgerDSLInterpreter<TestTransactionDSLInterpreter>.() -> Unit)","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter._tweak","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/_tweak.html","searchKeys":["_tweak","open override fun _tweak(dsl: LedgerDSLInterpreter<TestTransactionDSLInterpreter>.() -> Unit)","net.corda.testing.dsl.TestLedgerDSLInterpreter._tweak"]},{"name":"open override fun _tweak(dsl: TransactionDSLInterpreter.() -> EnforceVerifyOrFail): EnforceVerifyOrFail","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter._tweak","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/_tweak.html","searchKeys":["_tweak","open override fun _tweak(dsl: TransactionDSLInterpreter.() -> EnforceVerifyOrFail): EnforceVerifyOrFail","net.corda.testing.dsl.TestTransactionDSLInterpreter._tweak"]},{"name":"open override fun _unverifiedTransaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: TestTransactionDSLInterpreter.() -> Unit): WireTransaction","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/_unverified-transaction.html","searchKeys":["_unverifiedTransaction","open override fun _unverifiedTransaction(transactionLabel: String?, transactionBuilder: TransactionBuilder, dsl: TestTransactionDSLInterpreter.() -> Unit): WireTransaction","net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction"]},{"name":"open override fun addSuppressed(suppressed: Array<Throwable>)","description":"net.corda.core.CordaException.addSuppressed","location":"docs/net.corda.core/-corda-exception/add-suppressed.html","searchKeys":["addSuppressed","open override fun addSuppressed(suppressed: Array<Throwable>)","net.corda.core.CordaException.addSuppressed"]},{"name":"open override fun addSuppressed(suppressed: Array<Throwable>)","description":"net.corda.core.CordaRuntimeException.addSuppressed","location":"docs/net.corda.core/-corda-runtime-exception/add-suppressed.html","searchKeys":["addSuppressed","open override fun addSuppressed(suppressed: Array<Throwable>)","net.corda.core.CordaRuntimeException.addSuppressed"]},{"name":"open override fun apply(transactionFactory: Supplier<LedgerTransaction>)","description":"net.corda.core.internal.verification.TransactionVerifier.apply","location":"docs/net.corda.core.internal.verification/-transaction-verifier/apply.html","searchKeys":["apply","open override fun apply(transactionFactory: Supplier<LedgerTransaction>)","net.corda.core.internal.verification.TransactionVerifier.apply"]},{"name":"open override fun asSigned(): CustomCordapp","description":"net.corda.testing.node.internal.CustomCordapp.asSigned","location":"docs/net.corda.testing.node.internal/-custom-cordapp/as-signed.html","searchKeys":["asSigned","open override fun asSigned(): CustomCordapp","net.corda.testing.node.internal.CustomCordapp.asSigned"]},{"name":"open override fun asSigned(): TestCordapp","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.asSigned","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/as-signed.html","searchKeys":["asSigned","open override fun asSigned(): TestCordapp","net.corda.testing.node.internal.ScanPackageTestCordapp.asSigned"]},{"name":"open override fun asSigned(): TestCordapp","description":"net.corda.testing.node.internal.UriTestCordapp.asSigned","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/as-signed.html","searchKeys":["asSigned","open override fun asSigned(): TestCordapp","net.corda.testing.node.internal.UriTestCordapp.asSigned"]},{"name":"open override fun attachment(attachment: InputStream): SecureHash","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.attachment","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/attachment.html","searchKeys":["attachment","open override fun attachment(attachment: InputStream): SecureHash","net.corda.testing.dsl.TestLedgerDSLInterpreter.attachment"]},{"name":"open override fun attachment(attachmentId: SecureHash)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.attachment","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/attachment.html","searchKeys":["attachment","open override fun attachment(attachmentId: SecureHash)","net.corda.testing.dsl.TestTransactionDSLInterpreter.attachment"]},{"name":"open override fun baseDirectory(nodeName: CordaX500Name): Path","description":"net.corda.testing.node.internal.DriverDSLImpl.baseDirectory","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/base-directory.html","searchKeys":["baseDirectory","open override fun baseDirectory(nodeName: CordaX500Name): Path","net.corda.testing.node.internal.DriverDSLImpl.baseDirectory"]},{"name":"open override fun call()","description":"net.corda.core.internal.ResolveTransactionsFlow.call","location":"docs/net.corda.core.internal/-resolve-transactions-flow/call.html","searchKeys":["call","open override fun call()","net.corda.core.internal.ResolveTransactionsFlow.call"]},{"name":"open override fun call()","description":"net.corda.finance.flows.CashExitResponderFlow.call","location":"docs/net.corda.finance.flows/-cash-exit-responder-flow/call.html","searchKeys":["call","open override fun call()","net.corda.finance.flows.CashExitResponderFlow.call"]},{"name":"open override fun call()","description":"net.corda.finance.flows.CashPaymentReceiverFlow.call","location":"docs/net.corda.finance.flows/-cash-payment-receiver-flow/call.html","searchKeys":["call","open override fun call()","net.corda.finance.flows.CashPaymentReceiverFlow.call"]},{"name":"open override fun call(): AbstractCashFlow.Result","description":"net.corda.finance.flows.CashExitFlow.call","location":"docs/net.corda.finance.flows/-cash-exit-flow/call.html","searchKeys":["call","open override fun call(): AbstractCashFlow.Result","net.corda.finance.flows.CashExitFlow.call"]},{"name":"open override fun call(): AbstractCashFlow.Result","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.call","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/call.html","searchKeys":["call","open override fun call(): AbstractCashFlow.Result","net.corda.finance.flows.CashIssueAndPaymentFlow.call"]},{"name":"open override fun call(): AbstractCashFlow.Result","description":"net.corda.finance.flows.CashIssueFlow.call","location":"docs/net.corda.finance.flows/-cash-issue-flow/call.html","searchKeys":["call","open override fun call(): AbstractCashFlow.Result","net.corda.finance.flows.CashIssueFlow.call"]},{"name":"open override fun call(): AbstractCashFlow.Result","description":"net.corda.finance.flows.CashPaymentFlow.call","location":"docs/net.corda.finance.flows/-cash-payment-flow/call.html","searchKeys":["call","open override fun call(): AbstractCashFlow.Result","net.corda.finance.flows.CashPaymentFlow.call"]},{"name":"open override fun call(): Any?","description":"net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.call","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-parsed-method-call/call.html","searchKeys":["call","open override fun call(): Any?","net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.call"]},{"name":"open override fun call(): CashConfiguration","description":"net.corda.finance.internal.CashConfigDataFlow.call","location":"docs/net.corda.finance.internal/-cash-config-data-flow/call.html","searchKeys":["call","open override fun call(): CashConfiguration","net.corda.finance.internal.CashConfigDataFlow.call"]},{"name":"open override fun call(): FetchDataFlow.Result<T>","description":"net.corda.core.internal.FetchDataFlow.call","location":"docs/net.corda.core.internal/-fetch-data-flow/call.html","searchKeys":["call","open override fun call(): FetchDataFlow.Result<T>","net.corda.core.internal.FetchDataFlow.call"]},{"name":"open override fun call(): LedgerRecoveryResult","description":"net.corda.core.flows.LedgerRecoveryFlow.call","location":"docs/net.corda.core.flows/-ledger-recovery-flow/call.html","searchKeys":["call","open override fun call(): LedgerRecoveryResult","net.corda.core.flows.LedgerRecoveryFlow.call"]},{"name":"open override fun call(): List<StateAndRef<T>>","description":"net.corda.core.flows.ReceiveStateAndRefFlow.call","location":"docs/net.corda.core.flows/-receive-state-and-ref-flow/call.html","searchKeys":["call","open override fun call(): List<StateAndRef<T>>","net.corda.core.flows.ReceiveStateAndRefFlow.call"]},{"name":"open override fun call(): List<TransactionSignature>","description":"net.corda.core.flows.CollectSignatureFlow.call","location":"docs/net.corda.core.flows/-collect-signature-flow/call.html","searchKeys":["call","open override fun call(): List<TransactionSignature>","net.corda.core.flows.CollectSignatureFlow.call"]},{"name":"open override fun call(): List<TransactionSignature>","description":"net.corda.core.flows.NotaryFlow.Client.call","location":"docs/net.corda.core.flows/-notary-flow/-client/call.html","searchKeys":["call","open override fun call(): List<TransactionSignature>","net.corda.core.flows.NotaryFlow.Client.call"]},{"name":"open override fun call(): Map<FlowTransactionInfo, Boolean>","description":"net.corda.core.flows.FinalityRecoveryFlow.call","location":"docs/net.corda.core.flows/-finality-recovery-flow/call.html","searchKeys":["call","open override fun call(): Map<FlowTransactionInfo, Boolean>","net.corda.core.flows.FinalityRecoveryFlow.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.core.flows.CollectSignaturesFlow.call","location":"docs/net.corda.core.flows/-collect-signatures-flow/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.core.flows.CollectSignaturesFlow.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.core.flows.FinalityFlow.call","location":"docs/net.corda.core.flows/-finality-flow/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.core.flows.FinalityFlow.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.core.flows.ReceiveFinalityFlow.call","location":"docs/net.corda.core.flows/-receive-finality-flow/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.core.flows.ReceiveFinalityFlow.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.core.flows.ReceiveTransactionFlow.call","location":"docs/net.corda.core.flows/-receive-transaction-flow/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.core.flows.ReceiveTransactionFlow.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.core.flows.SignTransactionFlow.call","location":"docs/net.corda.core.flows/-sign-transaction-flow/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.core.flows.SignTransactionFlow.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.call","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.finance.flows.TwoPartyDealFlow.Primary.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.call","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.finance.flows.TwoPartyDealFlow.Secondary.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.call","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.call"]},{"name":"open override fun call(): SignedTransaction","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.call","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/call.html","searchKeys":["call","open override fun call(): SignedTransaction","net.corda.finance.flows.TwoPartyTradeFlow.Seller.call"]},{"name":"open override fun call(): StateAndRef<T>","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.call","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/call.html","searchKeys":["call","open override fun call(): StateAndRef<T>","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.call"]},{"name":"open override fun call(): T","description":"net.corda.core.flows.WithReferencedStatesFlow.call","location":"docs/net.corda.core.flows/-with-referenced-states-flow/call.html","searchKeys":["call","open override fun call(): T","net.corda.core.flows.WithReferencedStatesFlow.call"]},{"name":"open override fun call(): Void?","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.call","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/call.html","searchKeys":["call","open override fun call(): Void?","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.call"]},{"name":"open override fun call(): Void?","description":"net.corda.core.flows.ContractUpgradeFlow.Authorise.call","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-authorise/call.html","searchKeys":["call","open override fun call(): Void?","net.corda.core.flows.ContractUpgradeFlow.Authorise.call"]},{"name":"open override fun call(): Void?","description":"net.corda.core.flows.ContractUpgradeFlow.Deauthorise.call","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-deauthorise/call.html","searchKeys":["call","open override fun call(): Void?","net.corda.core.flows.ContractUpgradeFlow.Deauthorise.call"]},{"name":"open override fun call(): Void?","description":"net.corda.core.flows.DataVendingFlow.call","location":"docs/net.corda.core.flows/-data-vending-flow/call.html","searchKeys":["call","open override fun call(): Void?","net.corda.core.flows.DataVendingFlow.call"]},{"name":"open override fun call(): Void?","description":"net.corda.core.internal.notary.NotaryServiceFlow.call","location":"docs/net.corda.core.internal.notary/-notary-service-flow/call.html","searchKeys":["call","open override fun call(): Void?","net.corda.core.internal.notary.NotaryServiceFlow.call"]},{"name":"open override fun checkProposal(stx: SignedTransaction)","description":"net.corda.finance.flows.TwoPartyDealFlow.Instigator.checkProposal","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-instigator/check-proposal.html","searchKeys":["checkProposal","open override fun checkProposal(stx: SignedTransaction)","net.corda.finance.flows.TwoPartyDealFlow.Instigator.checkProposal"]},{"name":"open override fun childProgressTracker(): ProgressTracker","description":"net.corda.core.flows.FinalityFlow.Companion.NOTARISING.childProgressTracker","location":"docs/net.corda.core.flows/-finality-flow/-companion/-n-o-t-a-r-i-s-i-n-g/child-progress-tracker.html","searchKeys":["childProgressTracker","open override fun childProgressTracker(): ProgressTracker","net.corda.core.flows.FinalityFlow.Companion.NOTARISING.childProgressTracker"]},{"name":"open override fun childProgressTracker(): ProgressTracker","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.COLLECTING_SIGNATURES.childProgressTracker","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-c-o-l-l-e-c-t-i-n-g_-s-i-g-n-a-t-u-r-e-s/child-progress-tracker.html","searchKeys":["childProgressTracker","open override fun childProgressTracker(): ProgressTracker","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.COLLECTING_SIGNATURES.childProgressTracker"]},{"name":"open override fun childProgressTracker(): ProgressTracker","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.VERIFYING_AND_SIGNING.childProgressTracker","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/-companion/-v-e-r-i-f-y-i-n-g_-a-n-d_-s-i-g-n-i-n-g/child-progress-tracker.html","searchKeys":["childProgressTracker","open override fun childProgressTracker(): ProgressTracker","net.corda.finance.flows.TwoPartyTradeFlow.Seller.Companion.VERIFYING_AND_SIGNING.childProgressTracker"]},{"name":"open override fun choose(original: T, interned: T): T","description":"net.corda.core.internal.utilities.AlwaysInternableVerifier.choose","location":"docs/net.corda.core.internal.utilities/-always-internable-verifier/choose.html","searchKeys":["choose","open override fun choose(original: T, interned: T): T","net.corda.core.internal.utilities.AlwaysInternableVerifier.choose"]},{"name":"open override fun close()","description":"net.corda.client.rpc.RPCConnection.close","location":"docs/net.corda.client.rpc/-r-p-c-connection/close.html","searchKeys":["close","open override fun close()","net.corda.client.rpc.RPCConnection.close"]},{"name":"open override fun close()","description":"net.corda.client.rpc.ext.MultiRPCClient.close","location":"docs/net.corda.client.rpc.ext/-multi-r-p-c-client/close.html","searchKeys":["close","open override fun close()","net.corda.client.rpc.ext.MultiRPCClient.close"]},{"name":"open override fun close()","description":"net.corda.core.messaging.FlowHandleImpl.close","location":"docs/net.corda.core.messaging/-flow-handle-impl/close.html","searchKeys":["close","open override fun close()","net.corda.core.messaging.FlowHandleImpl.close"]},{"name":"open override fun close()","description":"net.corda.core.messaging.FlowHandleWithClientIdImpl.close","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id-impl/close.html","searchKeys":["close","open override fun close()","net.corda.core.messaging.FlowHandleWithClientIdImpl.close"]},{"name":"open override fun close()","description":"net.corda.core.messaging.FlowProgressHandleImpl.close","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/close.html","searchKeys":["close","open override fun close()","net.corda.core.messaging.FlowProgressHandleImpl.close"]},{"name":"open override fun close()","description":"net.corda.testing.driver.internal.InProcessImpl.close","location":"docs/net.corda.testing.driver.internal/-in-process-impl/close.html","searchKeys":["close","open override fun close()","net.corda.testing.driver.internal.InProcessImpl.close"]},{"name":"open override fun close()","description":"net.corda.testing.driver.internal.OutOfProcessImpl.close","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/close.html","searchKeys":["close","open override fun close()","net.corda.testing.driver.internal.OutOfProcessImpl.close"]},{"name":"open override fun close()","description":"net.corda.testing.node.internal.InternalMockNetwork.close","location":"docs/net.corda.testing.node.internal/-internal-mock-network/close.html","searchKeys":["close","open override fun close()","net.corda.testing.node.internal.InternalMockNetwork.close"]},{"name":"open override fun close()","description":"net.corda.testing.node.internal.network.CrlServer.close","location":"docs/net.corda.testing.node.internal.network/-crl-server/close.html","searchKeys":["close","open override fun close()","net.corda.testing.node.internal.network.CrlServer.close"]},{"name":"open override fun close()","description":"net.corda.testing.node.internal.network.NetworkMapServer.close","location":"docs/net.corda.testing.node.internal.network/-network-map-server/close.html","searchKeys":["close","open override fun close()","net.corda.testing.node.internal.network.NetworkMapServer.close"]},{"name":"open override fun command(signers: List<PublicKey>, commandData: CommandData)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.command","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/command.html","searchKeys":["command","open override fun command(signers: List<PublicKey>, commandData: CommandData)","net.corda.testing.dsl.TestTransactionDSLInterpreter.command"]},{"name":"open override fun computeIfAbsent(key: AttachmentsClassLoaderKey, mappingFunction: (AttachmentsClassLoaderKey) -> SerializationContext): SerializationContext","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderCacheImpl.computeIfAbsent","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-cache-impl/compute-if-absent.html","searchKeys":["computeIfAbsent","open override fun computeIfAbsent(key: AttachmentsClassLoaderKey, mappingFunction: (AttachmentsClassLoaderKey) -> SerializationContext): SerializationContext","net.corda.core.serialization.internal.AttachmentsClassLoaderCacheImpl.computeIfAbsent"]},{"name":"open override fun computeIfAbsent(key: AttachmentsClassLoaderKey, mappingFunction: (AttachmentsClassLoaderKey) -> SerializationContext): SerializationContext","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderSimpleCacheImpl.computeIfAbsent","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-simple-cache-impl/compute-if-absent.html","searchKeys":["computeIfAbsent","open override fun computeIfAbsent(key: AttachmentsClassLoaderKey, mappingFunction: (AttachmentsClassLoaderKey) -> SerializationContext): SerializationContext","net.corda.core.serialization.internal.AttachmentsClassLoaderSimpleCacheImpl.computeIfAbsent"]},{"name":"open override fun config(): <Error class: unknown class>","description":"net.corda.testing.node.internal.SharedCompatibilityZoneParams.config","location":"docs/net.corda.testing.node.internal/-shared-compatibility-zone-params/config.html","searchKeys":["config","open override fun config(): <Error class: unknown class>","net.corda.testing.node.internal.SharedCompatibilityZoneParams.config"]},{"name":"open override fun config(): <Error class: unknown class>","description":"net.corda.testing.node.internal.SplitCompatibilityZoneParams.config","location":"docs/net.corda.testing.node.internal/-split-compatibility-zone-params/config.html","searchKeys":["config","open override fun config(): <Error class: unknown class>","net.corda.testing.node.internal.SplitCompatibilityZoneParams.config"]},{"name":"open override fun createURLStreamHandler(protocol: String): URLStreamHandler?","description":"net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory.createURLStreamHandler","location":"docs/net.corda.core.serialization.internal/-attachment-u-r-l-stream-handler-factory/create-u-r-l-stream-handler.html","searchKeys":["createURLStreamHandler","open override fun createURLStreamHandler(protocol: String): URLStreamHandler?","net.corda.core.serialization.internal.AttachmentURLStreamHandlerFactory.createURLStreamHandler"]},{"name":"open override fun deriveState(txState: TransactionState<Cash.State>, amount: Amount<Issued<Currency>>, owner: AbstractParty): TransactionState<Cash.State>","description":"net.corda.finance.contracts.asset.Cash.deriveState","location":"docs/net.corda.finance.contracts.asset/-cash/derive-state.html","searchKeys":["deriveState","open override fun deriveState(txState: TransactionState<Cash.State>, amount: Amount<Issued<Currency>>, owner: AbstractParty): TransactionState<Cash.State>","net.corda.finance.contracts.asset.Cash.deriveState"]},{"name":"open override fun doormanURL(): URL","description":"net.corda.testing.node.internal.SharedCompatibilityZoneParams.doormanURL","location":"docs/net.corda.testing.node.internal/-shared-compatibility-zone-params/doorman-u-r-l.html","searchKeys":["doormanURL","open override fun doormanURL(): URL","net.corda.testing.node.internal.SharedCompatibilityZoneParams.doormanURL"]},{"name":"open override fun doormanURL(): URL","description":"net.corda.testing.node.internal.SplitCompatibilityZoneParams.doormanURL","location":"docs/net.corda.testing.node.internal/-split-compatibility-zone-params/doorman-u-r-l.html","searchKeys":["doormanURL","open override fun doormanURL(): URL","net.corda.testing.node.internal.SplitCompatibilityZoneParams.doormanURL"]},{"name":"open override fun enforceSuccess(): LedgerTransaction","description":"net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.enforceSuccess","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process-and-external/enforce-success.html","searchKeys":["enforceSuccess","open override fun enforceSuccess(): LedgerTransaction","net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.enforceSuccess"]},{"name":"open override fun enforceSuccess(): LedgerTransaction?","description":"net.corda.core.internal.verification.VerificationResult.External.enforceSuccess","location":"docs/net.corda.core.internal.verification/-verification-result/-external/enforce-success.html","searchKeys":["enforceSuccess","open override fun enforceSuccess(): LedgerTransaction?","net.corda.core.internal.verification.VerificationResult.External.enforceSuccess"]},{"name":"open override fun enforceSuccess(): LedgerTransaction?","description":"net.corda.core.internal.verification.VerificationResult.InProcess.enforceSuccess","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process/enforce-success.html","searchKeys":["enforceSuccess","open override fun enforceSuccess(): LedgerTransaction?","net.corda.core.internal.verification.VerificationResult.InProcess.enforceSuccess"]},{"name":"open override fun execute(deduplicationId: String): CompletableFuture<UniquenessProvider.Result>","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.execute","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/execute.html","searchKeys":["execute","open override fun execute(deduplicationId: String): CompletableFuture<UniquenessProvider.Result>","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.execute"]},{"name":"open override fun execute(deduplicationId: String): CordaFuture<Unit>","description":"net.corda.core.internal.WaitForStateConsumption.execute","location":"docs/net.corda.core.internal/-wait-for-state-consumption/execute.html","searchKeys":["execute","open override fun execute(deduplicationId: String): CordaFuture<Unit>","net.corda.core.internal.WaitForStateConsumption.execute"]},{"name":"open override fun extractCommands(commands: Collection<CommandWithParties<CommandData>>): List<CommandWithParties<Cash.Commands>>","description":"net.corda.finance.contracts.asset.Cash.extractCommands","location":"docs/net.corda.finance.contracts.asset/-cash/extract-commands.html","searchKeys":["extractCommands","open override fun extractCommands(commands: Collection<CommandWithParties<CommandData>>): List<CommandWithParties<Cash.Commands>>","net.corda.finance.contracts.asset.Cash.extractCommands"]},{"name":"open override fun fixupAttachmentIds(attachmentIds: Collection<SecureHash>): Set<SecureHash>","description":"net.corda.core.internal.verification.NodeVerificationSupport.fixupAttachmentIds","location":"docs/net.corda.core.internal.verification/-node-verification-support/fixup-attachment-ids.html","searchKeys":["fixupAttachmentIds","open override fun fixupAttachmentIds(attachmentIds: Collection<SecureHash>): Set<SecureHash>","net.corda.core.internal.verification.NodeVerificationSupport.fixupAttachmentIds"]},{"name":"open override fun forEach(action: Consumer<in T>)","description":"net.corda.core.utilities.NonEmptySet.forEach","location":"docs/net.corda.core.utilities/-non-empty-set/for-each.html","searchKeys":["forEach","open override fun forEach(action: Consumer<in T>)","net.corda.core.utilities.NonEmptySet.forEach"]},{"name":"open override fun forceClose()","description":"net.corda.client.rpc.CordaRPCConnection.forceClose","location":"docs/net.corda.client.rpc/-corda-r-p-c-connection/force-close.html","searchKeys":["forceClose","open override fun forceClose()","net.corda.client.rpc.CordaRPCConnection.forceClose"]},{"name":"open override fun forceClose()","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.forceClose","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/force-close.html","searchKeys":["forceClose","open override fun forceClose()","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.forceClose"]},{"name":"open override fun fromToken(context: SerializeAsTokenContext): SerializeAsToken","description":"net.corda.core.serialization.SingletonSerializationToken.fromToken","location":"docs/net.corda.core.serialization/-singleton-serialization-token/from-token.html","searchKeys":["fromToken","open override fun fromToken(context: SerializeAsTokenContext): SerializeAsToken","net.corda.core.serialization.SingletonSerializationToken.fromToken"]},{"name":"open override fun generateAgreement(notary: Party): TransactionBuilder","description":"net.corda.testing.internal.vault.DummyDealContract.State.generateAgreement","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/generate-agreement.html","searchKeys":["generateAgreement","open override fun generateAgreement(notary: Party): TransactionBuilder","net.corda.testing.internal.vault.DummyDealContract.State.generateAgreement"]},{"name":"open override fun generateExitCommand(amount: Amount<Issued<Currency>>): Cash.Commands.Exit","description":"net.corda.finance.contracts.asset.Cash.generateExitCommand","location":"docs/net.corda.finance.contracts.asset/-cash/generate-exit-command.html","searchKeys":["generateExitCommand","open override fun generateExitCommand(amount: Amount<Issued<Currency>>): Cash.Commands.Exit","net.corda.finance.contracts.asset.Cash.generateExitCommand"]},{"name":"open override fun generateKeyPair(): KeyPair","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.generateKeyPair","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-key-pair-generator-spi/generate-key-pair.html","searchKeys":["generateKeyPair","open override fun generateKeyPair(): KeyPair","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.generateKeyPair"]},{"name":"open override fun generateMappedObject(schema: MappedSchema): PersistentState","description":"net.corda.finance.contracts.CommercialPaper.State.generateMappedObject","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/generate-mapped-object.html","searchKeys":["generateMappedObject","open override fun generateMappedObject(schema: MappedSchema): PersistentState","net.corda.finance.contracts.CommercialPaper.State.generateMappedObject"]},{"name":"open override fun generateMappedObject(schema: MappedSchema): PersistentState","description":"net.corda.finance.contracts.asset.Cash.State.generateMappedObject","location":"docs/net.corda.finance.contracts.asset/-cash/-state/generate-mapped-object.html","searchKeys":["generateMappedObject","open override fun generateMappedObject(schema: MappedSchema): PersistentState","net.corda.finance.contracts.asset.Cash.State.generateMappedObject"]},{"name":"open override fun generateMappedObject(schema: MappedSchema): PersistentState","description":"net.corda.testing.internal.vault.DummyDealContract.State.generateMappedObject","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/generate-mapped-object.html","searchKeys":["generateMappedObject","open override fun generateMappedObject(schema: MappedSchema): PersistentState","net.corda.testing.internal.vault.DummyDealContract.State.generateMappedObject"]},{"name":"open override fun generateMappedObject(schema: MappedSchema): PersistentState","description":"net.corda.testing.internal.vault.DummyLinearContract.State.generateMappedObject","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/generate-mapped-object.html","searchKeys":["generateMappedObject","open override fun generateMappedObject(schema: MappedSchema): PersistentState","net.corda.testing.internal.vault.DummyLinearContract.State.generateMappedObject"]},{"name":"open override fun generateMappedObject(schema: MappedSchema): PersistentState","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.generateMappedObject","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/generate-mapped-object.html","searchKeys":["generateMappedObject","open override fun generateMappedObject(schema: MappedSchema): PersistentState","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.generateMappedObject"]},{"name":"open override fun generateMappedObject(schema: MappedSchema): PersistentState","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.State.generateMappedObject","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-state/generate-mapped-object.html","searchKeys":["generateMappedObject","open override fun generateMappedObject(schema: MappedSchema): PersistentState","net.corda.testing.internal.vault.UniqueDummyLinearContract.State.generateMappedObject"]},{"name":"open override fun generateMoveCommand(): Cash.Commands.Move","description":"net.corda.finance.contracts.asset.Cash.generateMoveCommand","location":"docs/net.corda.finance.contracts.asset/-cash/generate-move-command.html","searchKeys":["generateMoveCommand","open override fun generateMoveCommand(): Cash.Commands.Move","net.corda.finance.contracts.asset.Cash.generateMoveCommand"]},{"name":"open override fun get(): T?","description":"net.corda.core.internal.InheritableThreadLocalToggleField.get","location":"docs/net.corda.core.internal/-inheritable-thread-local-toggle-field/get.html","searchKeys":["get","open override fun get(): T?","net.corda.core.internal.InheritableThreadLocalToggleField.get"]},{"name":"open override fun get(): T?","description":"net.corda.core.internal.SimpleToggleField.get","location":"docs/net.corda.core.internal/-simple-toggle-field/get.html","searchKeys":["get","open override fun get(): T?","net.corda.core.internal.SimpleToggleField.get"]},{"name":"open override fun get(): T?","description":"net.corda.core.internal.ThreadLocalToggleField.get","location":"docs/net.corda.core.internal/-thread-local-toggle-field/get.html","searchKeys":["get","open override fun get(): T?","net.corda.core.internal.ThreadLocalToggleField.get"]},{"name":"open override fun getAlgorithm(): String","description":"net.corda.core.crypto.CompositeKey.getAlgorithm","location":"docs/net.corda.core.crypto/-composite-key/get-algorithm.html","searchKeys":["getAlgorithm","open override fun getAlgorithm(): String","net.corda.core.crypto.CompositeKey.getAlgorithm"]},{"name":"open override fun getAlgorithm(): String","description":"net.corda.core.crypto.NullKeys.NullPublicKey.getAlgorithm","location":"docs/net.corda.core.crypto/-null-keys/-null-public-key/get-algorithm.html","searchKeys":["getAlgorithm","open override fun getAlgorithm(): String","net.corda.core.crypto.NullKeys.NullPublicKey.getAlgorithm"]},{"name":"open override fun getAlgorithm(): String","description":"net.corda.core.crypto.internal.AliasPrivateKey.getAlgorithm","location":"docs/net.corda.core.crypto.internal/-alias-private-key/get-algorithm.html","searchKeys":["getAlgorithm","open override fun getAlgorithm(): String","net.corda.core.crypto.internal.AliasPrivateKey.getAlgorithm"]},{"name":"open override fun getAttachment(id: SecureHash): Attachment?","description":"net.corda.core.internal.verification.NodeVerificationSupport.getAttachment","location":"docs/net.corda.core.internal.verification/-node-verification-support/get-attachment.html","searchKeys":["getAttachment","open override fun getAttachment(id: SecureHash): Attachment?","net.corda.core.internal.verification.NodeVerificationSupport.getAttachment"]},{"name":"open override fun getCurrentBaggage(): Map<String, String>","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentBaggage","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/get-current-baggage.html","searchKeys":["getCurrentBaggage","open override fun getCurrentBaggage(): Map<String, String>","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentBaggage"]},{"name":"open override fun getCurrentSpanId(): String","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentSpanId","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/get-current-span-id.html","searchKeys":["getCurrentSpanId","open override fun getCurrentSpanId(): String","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentSpanId"]},{"name":"open override fun getCurrentTelemetryData(): SimpleLogContext","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentTelemetryData","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/get-current-telemetry-data.html","searchKeys":["getCurrentTelemetryData","open override fun getCurrentTelemetryData(): SimpleLogContext","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentTelemetryData"]},{"name":"open override fun getCurrentTelemetryId(): UUID","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentTelemetryId","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/get-current-telemetry-id.html","searchKeys":["getCurrentTelemetryId","open override fun getCurrentTelemetryId(): UUID","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentTelemetryId"]},{"name":"open override fun getCurrentTraceId(): String","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentTraceId","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/get-current-trace-id.html","searchKeys":["getCurrentTraceId","open override fun getCurrentTraceId(): String","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getCurrentTraceId"]},{"name":"open override fun getEncoded(): ByteArray","description":"net.corda.core.crypto.CompositeKey.getEncoded","location":"docs/net.corda.core.crypto/-composite-key/get-encoded.html","searchKeys":["getEncoded","open override fun getEncoded(): ByteArray","net.corda.core.crypto.CompositeKey.getEncoded"]},{"name":"open override fun getEncoded(): ByteArray","description":"net.corda.core.crypto.NullKeys.NullPublicKey.getEncoded","location":"docs/net.corda.core.crypto/-null-keys/-null-public-key/get-encoded.html","searchKeys":["getEncoded","open override fun getEncoded(): ByteArray","net.corda.core.crypto.NullKeys.NullPublicKey.getEncoded"]},{"name":"open override fun getEncoded(): ByteArray","description":"net.corda.core.crypto.internal.AliasPrivateKey.getEncoded","location":"docs/net.corda.core.crypto.internal/-alias-private-key/get-encoded.html","searchKeys":["getEncoded","open override fun getEncoded(): ByteArray","net.corda.core.crypto.internal.AliasPrivateKey.getEncoded"]},{"name":"open override fun getEpochFromHash(hash: SecureHash): Int?","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.getEpochFromHash","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/get-epoch-from-hash.html","searchKeys":["getEpochFromHash","open override fun getEpochFromHash(hash: SecureHash): Int?","net.corda.testing.node.internal.MockNetworkParametersStorage.getEpochFromHash"]},{"name":"open override fun getFormat(): <Error class: unknown class>","description":"net.corda.core.crypto.CompositeKey.getFormat","location":"docs/net.corda.core.crypto/-composite-key/get-format.html","searchKeys":["getFormat","open override fun getFormat(): <Error class: unknown class>","net.corda.core.crypto.CompositeKey.getFormat"]},{"name":"open override fun getFormat(): String","description":"net.corda.core.crypto.NullKeys.NullPublicKey.getFormat","location":"docs/net.corda.core.crypto/-null-keys/-null-public-key/get-format.html","searchKeys":["getFormat","open override fun getFormat(): String","net.corda.core.crypto.NullKeys.NullPublicKey.getFormat"]},{"name":"open override fun getFormat(): String","description":"net.corda.core.crypto.internal.AliasPrivateKey.getFormat","location":"docs/net.corda.core.crypto.internal/-alias-private-key/get-format.html","searchKeys":["getFormat","open override fun getFormat(): String","net.corda.core.crypto.internal.AliasPrivateKey.getFormat"]},{"name":"open override fun getHistoricNotary(party: Party): NotaryInfo?","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.getHistoricNotary","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/get-historic-notary.html","searchKeys":["getHistoricNotary","open override fun getHistoricNotary(party: Party): NotaryInfo?","net.corda.testing.node.internal.MockNetworkParametersStorage.getHistoricNotary"]},{"name":"open override fun getKeyDescriptions(keys: Set<PublicKey>): <Error class: unknown class><String>","description":"net.corda.core.transactions.SignedTransaction.getKeyDescriptions","location":"docs/net.corda.core.transactions/-signed-transaction/get-key-descriptions.html","searchKeys":["getKeyDescriptions","open override fun getKeyDescriptions(keys: Set<PublicKey>): <Error class: unknown class><String>","net.corda.core.transactions.SignedTransaction.getKeyDescriptions"]},{"name":"open override fun getKeyDescriptions(keys: Set<PublicKey>): List<String>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.getKeyDescriptions","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/get-key-descriptions.html","searchKeys":["getKeyDescriptions","open override fun getKeyDescriptions(keys: Set<PublicKey>): List<String>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.getKeyDescriptions"]},{"name":"open override fun getKeyDescriptions(keys: Set<PublicKey>): List<String>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.getKeyDescriptions","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/get-key-descriptions.html","searchKeys":["getKeyDescriptions","open override fun getKeyDescriptions(keys: Set<PublicKey>): List<String>","net.corda.core.transactions.NotaryChangeLedgerTransaction.getKeyDescriptions"]},{"name":"open override fun getLatestContractAttachments(contractClassName: String, minContractVersion: Int): List<AttachmentId>","description":"net.corda.testing.services.MockAttachmentStorage.getLatestContractAttachments","location":"docs/net.corda.testing.services/-mock-attachment-storage/get-latest-contract-attachments.html","searchKeys":["getLatestContractAttachments","open override fun getLatestContractAttachments(contractClassName: String, minContractVersion: Int): List<AttachmentId>","net.corda.testing.services.MockAttachmentStorage.getLatestContractAttachments"]},{"name":"open override fun getName(): String","description":"net.corda.core.flows.FlowInitiator.Peer.getName","location":"docs/net.corda.core.flows/-flow-initiator/-peer/get-name.html","searchKeys":["getName","open override fun getName(): String","net.corda.core.flows.FlowInitiator.Peer.getName"]},{"name":"open override fun getName(): String","description":"net.corda.core.flows.FlowInitiator.RPC.getName","location":"docs/net.corda.core.flows/-flow-initiator/-r-p-c/get-name.html","searchKeys":["getName","open override fun getName(): String","net.corda.core.flows.FlowInitiator.RPC.getName"]},{"name":"open override fun getName(): String","description":"net.corda.core.flows.FlowInitiator.Scheduled.getName","location":"docs/net.corda.core.flows/-flow-initiator/-scheduled/get-name.html","searchKeys":["getName","open override fun getName(): String","net.corda.core.flows.FlowInitiator.Scheduled.getName"]},{"name":"open override fun getName(): String","description":"net.corda.core.flows.FlowInitiator.Service.getName","location":"docs/net.corda.core.flows/-flow-initiator/-service/get-name.html","searchKeys":["getName","open override fun getName(): String","net.corda.core.flows.FlowInitiator.Service.getName"]},{"name":"open override fun getName(): String","description":"net.corda.core.flows.FlowInitiator.Shell.getName","location":"docs/net.corda.core.flows/-flow-initiator/-shell/get-name.html","searchKeys":["getName","open override fun getName(): String","net.corda.core.flows.FlowInitiator.Shell.getName"]},{"name":"open override fun getNetworkParameters(id: SecureHash?): NetworkParameters?","description":"net.corda.core.internal.verification.NodeVerificationSupport.getNetworkParameters","location":"docs/net.corda.core.internal.verification/-node-verification-support/get-network-parameters.html","searchKeys":["getNetworkParameters","open override fun getNetworkParameters(id: SecureHash?): NetworkParameters?","net.corda.core.internal.verification.NodeVerificationSupport.getNetworkParameters"]},{"name":"open override fun getOrThrow(): A","description":"net.corda.core.utilities.Try.Failure.getOrThrow","location":"docs/net.corda.core.utilities/-try/-failure/get-or-throw.html","searchKeys":["getOrThrow","open override fun getOrThrow(): A","net.corda.core.utilities.Try.Failure.getOrThrow"]},{"name":"open override fun getOrThrow(): A","description":"net.corda.core.utilities.Try.Success.getOrThrow","location":"docs/net.corda.core.utilities/-try/-success/get-or-throw.html","searchKeys":["getOrThrow","open override fun getOrThrow(): A","net.corda.core.utilities.Try.Success.getOrThrow"]},{"name":"open override fun getParties(keys: Collection<PublicKey>): List<Party?>","description":"net.corda.core.internal.verification.NodeVerificationSupport.getParties","location":"docs/net.corda.core.internal.verification/-node-verification-support/get-parties.html","searchKeys":["getParties","open override fun getParties(keys: Collection<PublicKey>): List<Party?>","net.corda.core.internal.verification.NodeVerificationSupport.getParties"]},{"name":"open override fun getSerializedState(stateRef: StateRef): SerializedTransactionState","description":"net.corda.core.internal.verification.NodeVerificationSupport.getSerializedState","location":"docs/net.corda.core.internal.verification/-node-verification-support/get-serialized-state.html","searchKeys":["getSerializedState","open override fun getSerializedState(stateRef: StateRef): SerializedTransactionState","net.corda.core.internal.verification.NodeVerificationSupport.getSerializedState"]},{"name":"open override fun getService(type: String, algorithm: String): Provider.Service?","description":"net.corda.core.crypto.CordaSecurityProvider.getService","location":"docs/net.corda.core.crypto/-corda-security-provider/get-service.html","searchKeys":["getService","open override fun getService(type: String, algorithm: String): Provider.Service?","net.corda.core.crypto.CordaSecurityProvider.getService"]},{"name":"open override fun getTelemetryHandles(): List<Any>","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getTelemetryHandles","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/get-telemetry-handles.html","searchKeys":["getTelemetryHandles","open override fun getTelemetryHandles(): List<Any>","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.getTelemetryHandles"]},{"name":"open override fun getTrustedClassAttachments(className: String): List<Attachment>","description":"net.corda.core.internal.verification.NodeVerificationSupport.getTrustedClassAttachments","location":"docs/net.corda.core.internal.verification/-node-verification-support/get-trusted-class-attachments.html","searchKeys":["getTrustedClassAttachments","open override fun getTrustedClassAttachments(className: String): List<Attachment>","net.corda.core.internal.verification.NodeVerificationSupport.getTrustedClassAttachments"]},{"name":"open override fun hasAttachment(attachmentId: AttachmentId): Boolean","description":"net.corda.testing.services.MockAttachmentStorage.hasAttachment","location":"docs/net.corda.testing.services/-mock-attachment-storage/has-attachment.html","searchKeys":["hasAttachment","open override fun hasAttachment(attachmentId: AttachmentId): Boolean","net.corda.testing.services.MockAttachmentStorage.hasAttachment"]},{"name":"open override fun hasParameters(hash: SecureHash): Boolean","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.hasParameters","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/has-parameters.html","searchKeys":["hasParameters","open override fun hasParameters(hash: SecureHash): Boolean","net.corda.testing.node.internal.MockNetworkParametersStorage.hasParameters"]},{"name":"open override fun hasUnknownFields(): Boolean","description":"net.corda.core.cordapp.Cordapp.Info.Contract.hasUnknownFields","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/has-unknown-fields.html","searchKeys":["hasUnknownFields","open override fun hasUnknownFields(): Boolean","net.corda.core.cordapp.Cordapp.Info.Contract.hasUnknownFields"]},{"name":"open override fun hasUnknownFields(): Boolean","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.hasUnknownFields","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/has-unknown-fields.html","searchKeys":["hasUnknownFields","open override fun hasUnknownFields(): Boolean","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.hasUnknownFields"]},{"name":"open override fun hasUnknownFields(): Boolean","description":"net.corda.core.cordapp.Cordapp.Info.Default.hasUnknownFields","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/has-unknown-fields.html","searchKeys":["hasUnknownFields","open override fun hasUnknownFields(): Boolean","net.corda.core.cordapp.Cordapp.Info.Default.hasUnknownFields"]},{"name":"open override fun hasUnknownFields(): Boolean","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.hasUnknownFields","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/has-unknown-fields.html","searchKeys":["hasUnknownFields","open override fun hasUnknownFields(): Boolean","net.corda.core.cordapp.Cordapp.Info.Workflow.hasUnknownFields"]},{"name":"open override fun hashCode(): <Error class: unknown class>","description":"net.corda.core.contracts.TypeOnlyCommandData.hashCode","location":"docs/net.corda.core.contracts/-type-only-command-data/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): <Error class: unknown class>","net.corda.core.contracts.TypeOnlyCommandData.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.client.rpc.CordaRPCClientConfiguration.hashCode","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.client.rpc.CordaRPCClientConfiguration.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.CordaException.hashCode","location":"docs/net.corda.core/-corda-exception/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.CordaException.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.CordaRuntimeException.hashCode","location":"docs/net.corda.core/-corda-runtime-exception/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.CordaRuntimeException.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.contracts.AmountTransfer.hashCode","location":"docs/net.corda.core.contracts/-amount-transfer/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.contracts.AmountTransfer.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.contracts.LinearPointer.hashCode","location":"docs/net.corda.core.contracts/-linear-pointer/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.contracts.LinearPointer.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.contracts.StaticPointer.hashCode","location":"docs/net.corda.core.contracts/-static-pointer/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.contracts.StaticPointer.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.contracts.UniqueIdentifier.hashCode","location":"docs/net.corda.core.contracts/-unique-identifier/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.contracts.UniqueIdentifier.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.crypto.CompositeKey.hashCode","location":"docs/net.corda.core.crypto/-composite-key/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.crypto.CompositeKey.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.crypto.SecureHash.HASH.hashCode","location":"docs/net.corda.core.crypto/-secure-hash/-h-a-s-h/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.crypto.SecureHash.HASH.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.crypto.SecureHash.SHA256.hashCode","location":"docs/net.corda.core.crypto/-secure-hash/-s-h-a256/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.crypto.SecureHash.SHA256.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.crypto.TransactionSignature.hashCode","location":"docs/net.corda.core.crypto/-transaction-signature/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.crypto.TransactionSignature.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.identity.AbstractParty.hashCode","location":"docs/net.corda.core.identity/-abstract-party/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.identity.AbstractParty.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.identity.PartyAndCertificate.hashCode","location":"docs/net.corda.core.identity/-party-and-certificate/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.identity.PartyAndCertificate.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.internal.AbstractAttachment.hashCode","location":"docs/net.corda.core.internal/-abstract-attachment/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.internal.AbstractAttachment.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations.hashCode","location":"docs/net.corda.core.internal/-flow-i-o-request/-wait-for-session-confirmations/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.internal.FlowIORequest.WaitForSessionConfirmations.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.internal.cordapp.CordappImpl.hashCode","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.internal.cordapp.CordappImpl.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.schemas.MappedSchema.hashCode","location":"docs/net.corda.core.schemas/-mapped-schema/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.schemas.MappedSchema.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.hashCode","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.transactions.ContractUpgradeLedgerTransaction.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.transactions.LedgerTransaction.hashCode","location":"docs/net.corda.core.transactions/-ledger-transaction/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.transactions.LedgerTransaction.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.hashCode","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.transactions.NotaryChangeLedgerTransaction.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.transactions.WireTransaction.hashCode","location":"docs/net.corda.core.transactions/-wire-transaction/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.transactions.WireTransaction.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.utilities.ByteSequence.hashCode","location":"docs/net.corda.core.utilities/-byte-sequence/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.utilities.ByteSequence.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.utilities.NonEmptySet.hashCode","location":"docs/net.corda.core.utilities/-non-empty-set/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.utilities.NonEmptySet.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.core.utilities.ProgressTracker.Step.hashCode","location":"docs/net.corda.core.utilities/-progress-tracker/-step/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.core.utilities.ProgressTracker.Step.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.finance.contracts.BusinessCalendar.hashCode","location":"docs/net.corda.finance.contracts/-business-calendar/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.finance.contracts.BusinessCalendar.hashCode"]},{"name":"open override fun hashCode(): Int","description":"net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.hashCode","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-peer-handle/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.hashCode"]},{"name":"open override fun importAttachment(jar: InputStream): AttachmentId","description":"net.corda.testing.services.MockAttachmentStorage.importAttachment","location":"docs/net.corda.testing.services/-mock-attachment-storage/import-attachment.html","searchKeys":["importAttachment","open override fun importAttachment(jar: InputStream): AttachmentId","net.corda.testing.services.MockAttachmentStorage.importAttachment"]},{"name":"open override fun importAttachment(jar: InputStream, uploader: String, filename: String?): AttachmentId","description":"net.corda.testing.services.MockAttachmentStorage.importAttachment","location":"docs/net.corda.testing.services/-mock-attachment-storage/import-attachment.html","searchKeys":["importAttachment","open override fun importAttachment(jar: InputStream, uploader: String, filename: String?): AttachmentId","net.corda.testing.services.MockAttachmentStorage.importAttachment"]},{"name":"open override fun importOrGetAttachment(jar: InputStream): AttachmentId","description":"net.corda.testing.services.MockAttachmentStorage.importOrGetAttachment","location":"docs/net.corda.testing.services/-mock-attachment-storage/import-or-get-attachment.html","searchKeys":["importOrGetAttachment","open override fun importOrGetAttachment(jar: InputStream): AttachmentId","net.corda.testing.services.MockAttachmentStorage.importOrGetAttachment"]},{"name":"open override fun initialize(keysize: Int, random: SecureRandom?)","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.initialize","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-key-pair-generator-spi/initialize.html","searchKeys":["initialize","open override fun initialize(keysize: Int, random: SecureRandom?)","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.initialize"]},{"name":"open override fun initialize(params: AlgorithmParameterSpec?, random: SecureRandom?)","description":"net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.initialize","location":"docs/net.corda.core.crypto.internal/-secp256k1-support-provider/-secp256k1-support-key-pair-generator-spi/initialize.html","searchKeys":["initialize","open override fun initialize(params: AlgorithmParameterSpec?, random: SecureRandom?)","net.corda.core.crypto.internal.Secp256k1SupportProvider.Secp256k1SupportKeyPairGeneratorSpi.initialize"]},{"name":"open override fun input(stateRef: StateRef)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.input","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/input.html","searchKeys":["input","open override fun input(stateRef: StateRef)","net.corda.testing.dsl.TestTransactionDSLInterpreter.input"]},{"name":"open override fun isAttachmentTrusted(attachment: Attachment): Boolean","description":"net.corda.core.internal.verification.NodeVerificationSupport.isAttachmentTrusted","location":"docs/net.corda.core.internal.verification/-node-verification-support/is-attachment-trusted.html","searchKeys":["isAttachmentTrusted","open override fun isAttachmentTrusted(attachment: Attachment): Boolean","net.corda.core.internal.verification.NodeVerificationSupport.isAttachmentTrusted"]},{"name":"open override fun isEmpty(): Boolean","description":"net.corda.core.utilities.NonEmptySet.isEmpty","location":"docs/net.corda.core.utilities/-non-empty-set/is-empty.html","searchKeys":["isEmpty","open override fun isEmpty(): Boolean","net.corda.core.utilities.NonEmptySet.isEmpty"]},{"name":"open override fun isEnabled(): Boolean","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.isEnabled","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/is-enabled.html","searchKeys":["isEnabled","open override fun isEnabled(): Boolean","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.isEnabled"]},{"name":"open override fun isSatisfiedBy(attachment: Attachment): Boolean","description":"net.corda.core.contracts.AlwaysAcceptAttachmentConstraint.isSatisfiedBy","location":"docs/net.corda.core.contracts/-always-accept-attachment-constraint/is-satisfied-by.html","searchKeys":["isSatisfiedBy","open override fun isSatisfiedBy(attachment: Attachment): Boolean","net.corda.core.contracts.AlwaysAcceptAttachmentConstraint.isSatisfiedBy"]},{"name":"open override fun isSatisfiedBy(attachment: Attachment): Boolean","description":"net.corda.core.contracts.AutomaticHashConstraint.isSatisfiedBy","location":"docs/net.corda.core.contracts/-automatic-hash-constraint/is-satisfied-by.html","searchKeys":["isSatisfiedBy","open override fun isSatisfiedBy(attachment: Attachment): Boolean","net.corda.core.contracts.AutomaticHashConstraint.isSatisfiedBy"]},{"name":"open override fun isSatisfiedBy(attachment: Attachment): Boolean","description":"net.corda.core.contracts.AutomaticPlaceholderConstraint.isSatisfiedBy","location":"docs/net.corda.core.contracts/-automatic-placeholder-constraint/is-satisfied-by.html","searchKeys":["isSatisfiedBy","open override fun isSatisfiedBy(attachment: Attachment): Boolean","net.corda.core.contracts.AutomaticPlaceholderConstraint.isSatisfiedBy"]},{"name":"open override fun isSatisfiedBy(attachment: Attachment): Boolean","description":"net.corda.core.contracts.HashAttachmentConstraint.isSatisfiedBy","location":"docs/net.corda.core.contracts/-hash-attachment-constraint/is-satisfied-by.html","searchKeys":["isSatisfiedBy","open override fun isSatisfiedBy(attachment: Attachment): Boolean","net.corda.core.contracts.HashAttachmentConstraint.isSatisfiedBy"]},{"name":"open override fun isSatisfiedBy(attachment: Attachment): Boolean","description":"net.corda.core.contracts.SignatureAttachmentConstraint.isSatisfiedBy","location":"docs/net.corda.core.contracts/-signature-attachment-constraint/is-satisfied-by.html","searchKeys":["isSatisfiedBy","open override fun isSatisfiedBy(attachment: Attachment): Boolean","net.corda.core.contracts.SignatureAttachmentConstraint.isSatisfiedBy"]},{"name":"open override fun isSatisfiedBy(attachment: Attachment): Boolean","description":"net.corda.core.contracts.WhitelistedByZoneAttachmentConstraint.isSatisfiedBy","location":"docs/net.corda.core.contracts/-whitelisted-by-zone-attachment-constraint/is-satisfied-by.html","searchKeys":["isSatisfiedBy","open override fun isSatisfiedBy(attachment: Attachment): Boolean","net.corda.core.contracts.WhitelistedByZoneAttachmentConstraint.isSatisfiedBy"]},{"name":"open override fun jdbcSession(): Connection","description":"net.corda.testing.node.MockServices.jdbcSession","location":"docs/net.corda.testing.node/-mock-services/jdbc-session.html","searchKeys":["jdbcSession","open override fun jdbcSession(): Connection","net.corda.testing.node.MockServices.jdbcSession"]},{"name":"open override fun loadContractAttachment(stateRef: StateRef): Attachment","description":"net.corda.core.internal.verification.VerifyingServiceHub.loadContractAttachment","location":"docs/net.corda.core.internal.verification/-verifying-service-hub/load-contract-attachment.html","searchKeys":["loadContractAttachment","open override fun loadContractAttachment(stateRef: StateRef): Attachment","net.corda.core.internal.verification.VerifyingServiceHub.loadContractAttachment"]},{"name":"open override fun loadContractAttachment(stateRef: StateRef): Attachment","description":"net.corda.testing.node.MockServices.loadContractAttachment","location":"docs/net.corda.testing.node/-mock-services/load-contract-attachment.html","searchKeys":["loadContractAttachment","open override fun loadContractAttachment(stateRef: StateRef): Attachment","net.corda.testing.node.MockServices.loadContractAttachment"]},{"name":"open override fun loadState(stateRef: StateRef): TransactionState<*>","description":"net.corda.core.internal.verification.VerifyingServiceHub.loadState","location":"docs/net.corda.core.internal.verification/-verifying-service-hub/load-state.html","searchKeys":["loadState","open override fun loadState(stateRef: StateRef): TransactionState<*>","net.corda.core.internal.verification.VerifyingServiceHub.loadState"]},{"name":"open override fun loadState(stateRef: StateRef): TransactionState<ContractState>","description":"net.corda.testing.node.MockServices.loadState","location":"docs/net.corda.testing.node/-mock-services/load-state.html","searchKeys":["loadState","open override fun loadState(stateRef: StateRef): TransactionState<ContractState>","net.corda.testing.node.MockServices.loadState"]},{"name":"open override fun loadStates(stateRefs: Set<StateRef>): Set<StateAndRef<ContractState>>","description":"net.corda.core.internal.verification.VerifyingServiceHub.loadStates","location":"docs/net.corda.core.internal.verification/-verifying-service-hub/load-states.html","searchKeys":["loadStates","open override fun loadStates(stateRefs: Set<StateRef>): Set<StateAndRef<ContractState>>","net.corda.core.internal.verification.VerifyingServiceHub.loadStates"]},{"name":"open override fun loadStates(stateRefs: Set<StateRef>): Set<StateAndRef<ContractState>>","description":"net.corda.testing.node.MockServices.loadStates","location":"docs/net.corda.testing.node/-mock-services/load-states.html","searchKeys":["loadStates","open override fun loadStates(stateRefs: Set<StateRef>): Set<StateAndRef<ContractState>>","net.corda.testing.node.MockServices.loadStates"]},{"name":"open override fun lookup(hash: SecureHash): NetworkParameters?","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.lookup","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/lookup.html","searchKeys":["lookup","open override fun lookup(hash: SecureHash): NetworkParameters?","net.corda.testing.node.internal.MockNetworkParametersStorage.lookup"]},{"name":"open override fun lookupSigned(hash: SecureHash): SignedDataWithCert<NetworkParameters>?","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.lookupSigned","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/lookup-signed.html","searchKeys":["lookupSigned","open override fun lookupSigned(hash: SecureHash): SignedDataWithCert<NetworkParameters>?","net.corda.testing.node.internal.MockNetworkParametersStorage.lookupSigned"]},{"name":"open override fun name(): String","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.name","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/name.html","searchKeys":["name","open override fun name(): String","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.name"]},{"name":"open override fun nameOrNull(): CordaX500Name","description":"net.corda.core.identity.Party.nameOrNull","location":"docs/net.corda.core.identity/-party/name-or-null.html","searchKeys":["nameOrNull","open override fun nameOrNull(): CordaX500Name","net.corda.core.identity.Party.nameOrNull"]},{"name":"open override fun nameOrNull(): CordaX500Name?","description":"net.corda.core.identity.AnonymousParty.nameOrNull","location":"docs/net.corda.core.identity/-anonymous-party/name-or-null.html","searchKeys":["nameOrNull","open override fun nameOrNull(): CordaX500Name?","net.corda.core.identity.AnonymousParty.nameOrNull"]},{"name":"open override fun net(other: Obligation.State<P>): Obligation.State<P>","description":"net.corda.finance.contracts.asset.Obligation.State.net","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/net.html","searchKeys":["net","open override fun net(other: Obligation.State<P>): Obligation.State<P>","net.corda.finance.contracts.asset.Obligation.State.net"]},{"name":"open override fun networkMapURL(): URL","description":"net.corda.testing.node.internal.SharedCompatibilityZoneParams.networkMapURL","location":"docs/net.corda.testing.node.internal/-shared-compatibility-zone-params/network-map-u-r-l.html","searchKeys":["networkMapURL","open override fun networkMapURL(): URL","net.corda.testing.node.internal.SharedCompatibilityZoneParams.networkMapURL"]},{"name":"open override fun networkMapURL(): URL","description":"net.corda.testing.node.internal.SplitCompatibilityZoneParams.networkMapURL","location":"docs/net.corda.testing.node.internal/-split-compatibility-zone-params/network-map-u-r-l.html","searchKeys":["networkMapURL","open override fun networkMapURL(): URL","net.corda.testing.node.internal.SplitCompatibilityZoneParams.networkMapURL"]},{"name":"open override fun newInstance(constructorParameter: Any?): SecureRandomSpi","description":"net.corda.core.crypto.internal.PlatformSecureRandomService.newInstance","location":"docs/net.corda.core.crypto.internal/-platform-secure-random-service/new-instance.html","searchKeys":["newInstance","open override fun newInstance(constructorParameter: Any?): SecureRandomSpi","net.corda.core.crypto.internal.PlatformSecureRandomService.newInstance"]},{"name":"open override fun nextPort(): Int","description":"net.corda.testing.driver.PortAllocation.Incremental.nextPort","location":"docs/net.corda.testing.driver/-port-allocation/-incremental/next-port.html","searchKeys":["nextPort","open override fun nextPort(): Int","net.corda.testing.driver.PortAllocation.Incremental.nextPort"]},{"name":"open override fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.nodeInfoFromParty","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/node-info-from-party.html","searchKeys":["nodeInfoFromParty","open override fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.nodeInfoFromParty"]},{"name":"open override fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","description":"net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.nodeInfoFromParty","location":"docs/net.corda.client.jackson/-jackson-support/-no-party-object-mapper/node-info-from-party.html","searchKeys":["nodeInfoFromParty","open override fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.nodeInfoFromParty"]},{"name":"open override fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.nodeInfoFromParty","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/node-info-from-party.html","searchKeys":["nodeInfoFromParty","open override fun nodeInfoFromParty(party: AbstractParty): NodeInfo?","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.nodeInfoFromParty"]},{"name":"open override fun notifyServerAndClose()","description":"net.corda.client.rpc.CordaRPCConnection.notifyServerAndClose","location":"docs/net.corda.client.rpc/-corda-r-p-c-connection/notify-server-and-close.html","searchKeys":["notifyServerAndClose","open override fun notifyServerAndClose()","net.corda.client.rpc.CordaRPCConnection.notifyServerAndClose"]},{"name":"open override fun notifyServerAndClose()","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.notifyServerAndClose","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/notify-server-and-close.html","searchKeys":["notifyServerAndClose","open override fun notifyServerAndClose()","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.notifyServerAndClose"]},{"name":"open override fun onTelemetryEvent(event: TelemetryEvent)","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.onTelemetryEvent","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/on-telemetry-event.html","searchKeys":["onTelemetryEvent","open override fun onTelemetryEvent(event: TelemetryEvent)","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.onTelemetryEvent"]},{"name":"open override fun open(): InputStream","description":"net.corda.core.internal.AbstractAttachment.open","location":"docs/net.corda.core.internal/-abstract-attachment/open.html","searchKeys":["open","open override fun open(): InputStream","net.corda.core.internal.AbstractAttachment.open"]},{"name":"open override fun openAttachment(id: SecureHash): Attachment?","description":"net.corda.testing.services.MockAttachmentStorage.openAttachment","location":"docs/net.corda.testing.services/-mock-attachment-storage/open-attachment.html","searchKeys":["openAttachment","open override fun openAttachment(id: SecureHash): Attachment?","net.corda.testing.services.MockAttachmentStorage.openAttachment"]},{"name":"open override fun output(contractClassName: ContractClassName, label: String?, notary: Party, encumbrance: Int?, attachmentConstraint: AttachmentConstraint, contractState: ContractState)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.output","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/output.html","searchKeys":["output","open override fun output(contractClassName: ContractClassName, label: String?, notary: Party, encumbrance: Int?, attachmentConstraint: AttachmentConstraint, contractState: ContractState)","net.corda.testing.dsl.TestTransactionDSLInterpreter.output"]},{"name":"open override fun parallelStream(): Stream<T>","description":"net.corda.core.utilities.NonEmptySet.parallelStream","location":"docs/net.corda.core.utilities/-non-empty-set/parallel-stream.html","searchKeys":["parallelStream","open override fun parallelStream(): Stream<T>","net.corda.core.utilities.NonEmptySet.parallelStream"]},{"name":"open override fun partiesFromName(query: String): Set<Party>","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.partiesFromName","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/parties-from-name.html","searchKeys":["partiesFromName","open override fun partiesFromName(query: String): Set<Party>","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.partiesFromName"]},{"name":"open override fun partiesFromName(query: String): Set<Party>","description":"net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.partiesFromName","location":"docs/net.corda.client.jackson/-jackson-support/-no-party-object-mapper/parties-from-name.html","searchKeys":["partiesFromName","open override fun partiesFromName(query: String): Set<Party>","net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.partiesFromName"]},{"name":"open override fun partiesFromName(query: String): Set<Party>","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.partiesFromName","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/parties-from-name.html","searchKeys":["partiesFromName","open override fun partiesFromName(query: String): Set<Party>","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.partiesFromName"]},{"name":"open override fun partyFromKey(owningKey: PublicKey): Party?","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.partyFromKey","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/party-from-key.html","searchKeys":["partyFromKey","open override fun partyFromKey(owningKey: PublicKey): Party?","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.partyFromKey"]},{"name":"open override fun partyFromKey(owningKey: PublicKey): Party?","description":"net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.partyFromKey","location":"docs/net.corda.client.jackson/-jackson-support/-no-party-object-mapper/party-from-key.html","searchKeys":["partyFromKey","open override fun partyFromKey(owningKey: PublicKey): Party?","net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.partyFromKey"]},{"name":"open override fun partyFromKey(owningKey: PublicKey): Party?","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.partyFromKey","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/party-from-key.html","searchKeys":["partyFromKey","open override fun partyFromKey(owningKey: PublicKey): Party?","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.partyFromKey"]},{"name":"open override fun principal(): Principal","description":"net.corda.core.context.InvocationOrigin.Peer.principal","location":"docs/net.corda.core.context/-invocation-origin/-peer/principal.html","searchKeys":["principal","open override fun principal(): Principal","net.corda.core.context.InvocationOrigin.Peer.principal"]},{"name":"open override fun principal(): Principal","description":"net.corda.core.context.InvocationOrigin.RPC.principal","location":"docs/net.corda.core.context/-invocation-origin/-r-p-c/principal.html","searchKeys":["principal","open override fun principal(): Principal","net.corda.core.context.InvocationOrigin.RPC.principal"]},{"name":"open override fun principal(): Principal","description":"net.corda.core.context.InvocationOrigin.Scheduled.principal","location":"docs/net.corda.core.context/-invocation-origin/-scheduled/principal.html","searchKeys":["principal","open override fun principal(): Principal","net.corda.core.context.InvocationOrigin.Scheduled.principal"]},{"name":"open override fun principal(): Principal","description":"net.corda.core.context.InvocationOrigin.Service.principal","location":"docs/net.corda.core.context/-invocation-origin/-service/principal.html","searchKeys":["principal","open override fun principal(): Principal","net.corda.core.context.InvocationOrigin.Service.principal"]},{"name":"open override fun principal(): Principal","description":"net.corda.core.context.InvocationOrigin.Shell.principal","location":"docs/net.corda.core.context/-invocation-origin/-shell/principal.html","searchKeys":["principal","open override fun principal(): Principal","net.corda.core.context.InvocationOrigin.Shell.principal"]},{"name":"open override fun queryAttachments(criteria: AttachmentQueryCriteria, sorting: AttachmentSort?): List<AttachmentId>","description":"net.corda.testing.services.MockAttachmentStorage.queryAttachments","location":"docs/net.corda.testing.services/-mock-attachment-storage/query-attachments.html","searchKeys":["queryAttachments","open override fun queryAttachments(criteria: AttachmentQueryCriteria, sorting: AttachmentSort?): List<AttachmentId>","net.corda.testing.services.MockAttachmentStorage.queryAttachments"]},{"name":"open override fun recordTransactions(statesToRecord: StatesToRecord, txs: Iterable<SignedTransaction>)","description":"net.corda.testing.node.MockServices.recordTransactions","location":"docs/net.corda.testing.node/-mock-services/record-transactions.html","searchKeys":["recordTransactions","open override fun recordTransactions(statesToRecord: StatesToRecord, txs: Iterable<SignedTransaction>)","net.corda.testing.node.MockServices.recordTransactions"]},{"name":"open override fun ref(bytes: OpaqueBytes): PartyAndReference","description":"net.corda.core.identity.AnonymousParty.ref","location":"docs/net.corda.core.identity/-anonymous-party/ref.html","searchKeys":["ref","open override fun ref(bytes: OpaqueBytes): PartyAndReference","net.corda.core.identity.AnonymousParty.ref"]},{"name":"open override fun ref(bytes: OpaqueBytes): PartyAndReference","description":"net.corda.core.identity.Party.ref","location":"docs/net.corda.core.identity/-party/ref.html","searchKeys":["ref","open override fun ref(bytes: OpaqueBytes): PartyAndReference","net.corda.core.identity.Party.ref"]},{"name":"open override fun reference(stateRef: StateRef)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.reference","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/reference.html","searchKeys":["reference","open override fun reference(stateRef: StateRef)","net.corda.testing.dsl.TestTransactionDSLInterpreter.reference"]},{"name":"open override fun registerUnloadHandler(runOnStop: () -> Unit): Nothing","description":"net.corda.testing.node.MockServices.registerUnloadHandler","location":"docs/net.corda.testing.node/-mock-services/register-unload-handler.html","searchKeys":["registerUnloadHandler","open override fun registerUnloadHandler(runOnStop: () -> Unit): Nothing","net.corda.testing.node.MockServices.registerUnloadHandler"]},{"name":"open override fun resolve(ltx: LedgerTransaction): StateAndRef<T>","description":"net.corda.core.contracts.LinearPointer.resolve","location":"docs/net.corda.core.contracts/-linear-pointer/resolve.html","searchKeys":["resolve","open override fun resolve(ltx: LedgerTransaction): StateAndRef<T>","net.corda.core.contracts.LinearPointer.resolve"]},{"name":"open override fun resolve(ltx: LedgerTransaction): StateAndRef<T>","description":"net.corda.core.contracts.StaticPointer.resolve","location":"docs/net.corda.core.contracts/-static-pointer/resolve.html","searchKeys":["resolve","open override fun resolve(ltx: LedgerTransaction): StateAndRef<T>","net.corda.core.contracts.StaticPointer.resolve"]},{"name":"open override fun resolve(services: ServiceHub): StateAndRef<T>","description":"net.corda.core.contracts.LinearPointer.resolve","location":"docs/net.corda.core.contracts/-linear-pointer/resolve.html","searchKeys":["resolve","open override fun resolve(services: ServiceHub): StateAndRef<T>","net.corda.core.contracts.LinearPointer.resolve"]},{"name":"open override fun resolve(services: ServiceHub): StateAndRef<T>","description":"net.corda.core.contracts.StaticPointer.resolve","location":"docs/net.corda.core.contracts/-static-pointer/resolve.html","searchKeys":["resolve","open override fun resolve(services: ServiceHub): StateAndRef<T>","net.corda.core.contracts.StaticPointer.resolve"]},{"name":"open override fun saveParameters(signedNetworkParameters: SignedDataWithCert<NetworkParameters>)","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.saveParameters","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/save-parameters.html","searchKeys":["saveParameters","open override fun saveParameters(signedNetworkParameters: SignedDataWithCert<NetworkParameters>)","net.corda.testing.node.internal.MockNetworkParametersStorage.saveParameters"]},{"name":"open override fun set(value: V): Boolean","description":"net.corda.core.internal.concurrent.CordaFutureImpl.set","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/set.html","searchKeys":["set","open override fun set(value: V): Boolean","net.corda.core.internal.concurrent.CordaFutureImpl.set"]},{"name":"open override fun setCause(cause: Throwable?)","description":"net.corda.core.CordaException.setCause","location":"docs/net.corda.core/-corda-exception/set-cause.html","searchKeys":["setCause","open override fun setCause(cause: Throwable?)","net.corda.core.CordaException.setCause"]},{"name":"open override fun setCause(cause: Throwable?)","description":"net.corda.core.CordaRuntimeException.setCause","location":"docs/net.corda.core/-corda-runtime-exception/set-cause.html","searchKeys":["setCause","open override fun setCause(cause: Throwable?)","net.corda.core.CordaRuntimeException.setCause"]},{"name":"open override fun setCurrentParameters(currentSignedParameters: SignedDataWithCert<NetworkParameters>, trustRoots: Set<X509Certificate>)","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.setCurrentParameters","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/set-current-parameters.html","searchKeys":["setCurrentParameters","open override fun setCurrentParameters(currentSignedParameters: SignedDataWithCert<NetworkParameters>, trustRoots: Set<X509Certificate>)","net.corda.testing.node.internal.MockNetworkParametersStorage.setCurrentParameters"]},{"name":"open override fun setCurrentTelemetryId(id: UUID)","description":"net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.setCurrentTelemetryId","location":"docs/net.corda.core.internal.telemetry/-simple-log-telemetry-component/set-current-telemetry-id.html","searchKeys":["setCurrentTelemetryId","open override fun setCurrentTelemetryId(id: UUID)","net.corda.core.internal.telemetry.SimpleLogTelemetryComponent.setCurrentTelemetryId"]},{"name":"open override fun setException(t: Throwable): Boolean","description":"net.corda.core.internal.concurrent.CordaFutureImpl.setException","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/set-exception.html","searchKeys":["setException","open override fun setException(t: Throwable): Boolean","net.corda.core.internal.concurrent.CordaFutureImpl.setException"]},{"name":"open override fun setMessage(message: String?)","description":"net.corda.core.CordaException.setMessage","location":"docs/net.corda.core/-corda-exception/set-message.html","searchKeys":["setMessage","open override fun setMessage(message: String?)","net.corda.core.CordaException.setMessage"]},{"name":"open override fun setMessage(message: String?)","description":"net.corda.core.CordaRuntimeException.setMessage","location":"docs/net.corda.core/-corda-runtime-exception/set-message.html","searchKeys":["setMessage","open override fun setMessage(message: String?)","net.corda.core.CordaRuntimeException.setMessage"]},{"name":"open override fun shutdown()","description":"net.corda.testing.node.internal.DriverDSLImpl.shutdown","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/shutdown.html","searchKeys":["shutdown","open override fun shutdown()","net.corda.testing.node.internal.DriverDSLImpl.shutdown"]},{"name":"open override fun spliterator(): Spliterator<T>","description":"net.corda.core.utilities.NonEmptySet.spliterator","location":"docs/net.corda.core.utilities/-non-empty-set/spliterator.html","searchKeys":["spliterator","open override fun spliterator(): Spliterator<T>","net.corda.core.utilities.NonEmptySet.spliterator"]},{"name":"open override fun start()","description":"net.corda.testing.node.internal.DriverDSLImpl.start","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/start.html","searchKeys":["start","open override fun start()","net.corda.testing.node.internal.DriverDSLImpl.start"]},{"name":"open override fun startNode(parameters: NodeParameters): CordaFuture<NodeHandle>","description":"net.corda.testing.node.internal.DriverDSLImpl.startNode","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/start-node.html","searchKeys":["startNode","open override fun startNode(parameters: NodeParameters): CordaFuture<NodeHandle>","net.corda.testing.node.internal.DriverDSLImpl.startNode"]},{"name":"open override fun startNode(parameters: NodeParameters, bytemanPort: Int?): CordaFuture<NodeHandle>","description":"net.corda.testing.node.internal.DriverDSLImpl.startNode","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/start-node.html","searchKeys":["startNode","open override fun startNode(parameters: NodeParameters, bytemanPort: Int?): CordaFuture<NodeHandle>","net.corda.testing.node.internal.DriverDSLImpl.startNode"]},{"name":"open override fun startWebserver(handle: NodeHandle, maximumHeapSize: String): CordaFuture<WebserverHandle>","description":"net.corda.testing.node.internal.DriverDSLImpl.startWebserver","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/start-webserver.html","searchKeys":["startWebserver","open override fun startWebserver(handle: NodeHandle, maximumHeapSize: String): CordaFuture<WebserverHandle>","net.corda.testing.node.internal.DriverDSLImpl.startWebserver"]},{"name":"open override fun stop()","description":"net.corda.testing.driver.internal.InProcessImpl.stop","location":"docs/net.corda.testing.driver.internal/-in-process-impl/stop.html","searchKeys":["stop","open override fun stop()","net.corda.testing.driver.internal.InProcessImpl.stop"]},{"name":"open override fun stop()","description":"net.corda.testing.driver.internal.OutOfProcessImpl.stop","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/stop.html","searchKeys":["stop","open override fun stop()","net.corda.testing.driver.internal.OutOfProcessImpl.stop"]},{"name":"open override fun stream(): Stream<T>","description":"net.corda.core.utilities.NonEmptySet.stream","location":"docs/net.corda.core.utilities/-non-empty-set/stream.html","searchKeys":["stream","open override fun stream(): Stream<T>","net.corda.core.utilities.NonEmptySet.stream"]},{"name":"open override fun supportedSchemas(): Iterable<MappedSchema>","description":"net.corda.finance.contracts.CommercialPaper.State.supportedSchemas","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/supported-schemas.html","searchKeys":["supportedSchemas","open override fun supportedSchemas(): Iterable<MappedSchema>","net.corda.finance.contracts.CommercialPaper.State.supportedSchemas"]},{"name":"open override fun supportedSchemas(): Iterable<MappedSchema>","description":"net.corda.finance.contracts.asset.Cash.State.supportedSchemas","location":"docs/net.corda.finance.contracts.asset/-cash/-state/supported-schemas.html","searchKeys":["supportedSchemas","open override fun supportedSchemas(): Iterable<MappedSchema>","net.corda.finance.contracts.asset.Cash.State.supportedSchemas"]},{"name":"open override fun supportedSchemas(): Iterable<MappedSchema>","description":"net.corda.testing.internal.vault.DummyDealContract.State.supportedSchemas","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/supported-schemas.html","searchKeys":["supportedSchemas","open override fun supportedSchemas(): Iterable<MappedSchema>","net.corda.testing.internal.vault.DummyDealContract.State.supportedSchemas"]},{"name":"open override fun supportedSchemas(): Iterable<MappedSchema>","description":"net.corda.testing.internal.vault.DummyLinearContract.State.supportedSchemas","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/supported-schemas.html","searchKeys":["supportedSchemas","open override fun supportedSchemas(): Iterable<MappedSchema>","net.corda.testing.internal.vault.DummyLinearContract.State.supportedSchemas"]},{"name":"open override fun supportedSchemas(): Iterable<MappedSchema>","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.supportedSchemas","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/supported-schemas.html","searchKeys":["supportedSchemas","open override fun supportedSchemas(): Iterable<MappedSchema>","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.supportedSchemas"]},{"name":"open override fun supportedSchemas(): Iterable<MappedSchema>","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.State.supportedSchemas","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-state/supported-schemas.html","searchKeys":["supportedSchemas","open override fun supportedSchemas(): Iterable<MappedSchema>","net.corda.testing.internal.vault.UniqueDummyLinearContract.State.supportedSchemas"]},{"name":"open override fun timeWindow(data: TimeWindow)","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.timeWindow","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/time-window.html","searchKeys":["timeWindow","open override fun timeWindow(data: TimeWindow)","net.corda.testing.dsl.TestTransactionDSLInterpreter.timeWindow"]},{"name":"open override fun toCompletableFuture(): <Error class: unknown class>","description":"net.corda.core.internal.concurrent.CordaFutureImpl.toCompletableFuture","location":"docs/net.corda.core.internal.concurrent/-corda-future-impl/to-completable-future.html","searchKeys":["toCompletableFuture","open override fun toCompletableFuture(): <Error class: unknown class>","net.corda.core.internal.concurrent.CordaFutureImpl.toCompletableFuture"]},{"name":"open override fun toString(): String","description":"net.corda.client.rpc.CordaRPCClientConfiguration.toString","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.client.rpc.CordaRPCClientConfiguration.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.contracts.Amount.toString","location":"docs/net.corda.core.contracts/-amount/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.contracts.Amount.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.contracts.Command.toString","location":"docs/net.corda.core.contracts/-command/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.contracts.Command.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.contracts.ContractAttachment.toString","location":"docs/net.corda.core.contracts/-contract-attachment/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.contracts.ContractAttachment.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.contracts.Issued.toString","location":"docs/net.corda.core.contracts/-issued/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.contracts.Issued.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.contracts.PartyAndReference.toString","location":"docs/net.corda.core.contracts/-party-and-reference/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.contracts.PartyAndReference.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.contracts.StateRef.toString","location":"docs/net.corda.core.contracts/-state-ref/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.contracts.StateRef.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.contracts.UniqueIdentifier.toString","location":"docs/net.corda.core.contracts/-unique-identifier/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.contracts.UniqueIdentifier.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.cordapp.Cordapp.Info.Contract.toString","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.cordapp.Cordapp.Info.Contract.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.toString","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.cordapp.Cordapp.Info.Default.toString","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.cordapp.Cordapp.Info.Default.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.toString","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.cordapp.Cordapp.Info.Workflow.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.crypto.CompositeKey.NodeAndWeight.toString","location":"docs/net.corda.core.crypto/-composite-key/-node-and-weight/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.crypto.CompositeKey.NodeAndWeight.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.crypto.CompositeKey.toString","location":"docs/net.corda.core.crypto/-composite-key/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.crypto.CompositeKey.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.crypto.NullKeys.NullPublicKey.toString","location":"docs/net.corda.core.crypto/-null-keys/-null-public-key/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.crypto.NullKeys.NullPublicKey.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.crypto.SecureHash.HASH.toString","location":"docs/net.corda.core.crypto/-secure-hash/-h-a-s-h/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.crypto.SecureHash.HASH.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.crypto.SecureHash.SHA256.toString","location":"docs/net.corda.core.crypto/-secure-hash/-s-h-a256/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.crypto.SecureHash.SHA256.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.crypto.SecureHash.toString","location":"docs/net.corda.core.crypto/-secure-hash/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.crypto.SecureHash.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.crypto.internal.Curve25519.ModP.toString","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.crypto.internal.Curve25519.ModP.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.FlowStackSnapshot.Frame.toString","location":"docs/net.corda.core.flows/-flow-stack-snapshot/-frame/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.FlowStackSnapshot.Frame.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.NotaryError.Conflict.toString","location":"docs/net.corda.core.flows/-notary-error/-conflict/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.NotaryError.Conflict.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.NotaryError.General.toString","location":"docs/net.corda.core.flows/-notary-error/-general/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.NotaryError.General.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.NotaryError.RequestSignatureInvalid.toString","location":"docs/net.corda.core.flows/-notary-error/-request-signature-invalid/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.NotaryError.RequestSignatureInvalid.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.NotaryError.TimeWindowInvalid.toString","location":"docs/net.corda.core.flows/-notary-error/-time-window-invalid/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.NotaryError.TimeWindowInvalid.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.NotaryError.TransactionInvalid.toString","location":"docs/net.corda.core.flows/-notary-error/-transaction-invalid/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.NotaryError.TransactionInvalid.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.ReceiverDistributionRecord.toString","location":"docs/net.corda.core.flows/-receiver-distribution-record/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.ReceiverDistributionRecord.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.flows.StateMachineRunId.toString","location":"docs/net.corda.core.flows/-state-machine-run-id/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.flows.StateMachineRunId.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.identity.AnonymousParty.toString","location":"docs/net.corda.core.identity/-anonymous-party/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.identity.AnonymousParty.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.identity.CordaX500Name.toString","location":"docs/net.corda.core.identity/-corda-x500-name/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.identity.CordaX500Name.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.identity.Party.toString","location":"docs/net.corda.core.identity/-party/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.identity.Party.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.identity.PartyAndCertificate.toString","location":"docs/net.corda.core.identity/-party-and-certificate/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.identity.PartyAndCertificate.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.internal.AbstractAttachment.toString","location":"docs/net.corda.core.internal/-abstract-attachment/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.internal.AbstractAttachment.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.internal.FlowIORequest.Send.toString","location":"docs/net.corda.core.internal/-flow-i-o-request/-send/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.internal.FlowIORequest.Send.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.internal.FlowIORequest.SendAndReceive.toString","location":"docs/net.corda.core.internal/-flow-i-o-request/-send-and-receive/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.internal.FlowIORequest.SendAndReceive.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.toString","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.internal.cordapp.KotlinMetadataVersion.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.internal.cordapp.LanguageVersion.Data.toString","location":"docs/net.corda.core.internal.cordapp/-language-version/-data/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.internal.cordapp.LanguageVersion.Data.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.messaging.StateMachineInfo.toString","location":"docs/net.corda.core.messaging/-state-machine-info/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.messaging.StateMachineInfo.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.node.NetworkParameters.toString","location":"docs/net.corda.core.node/-network-parameters/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.node.NetworkParameters.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.node.services.StatesNotAvailableException.toString","location":"docs/net.corda.core.node.services/-states-not-available-exception/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.node.services.StatesNotAvailableException.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.node.services.Vault.Update.toString","location":"docs/net.corda.core.node.services/-vault/-update/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.node.services.Vault.Update.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.schemas.MappedSchema.toString","location":"docs/net.corda.core.schemas/-mapped-schema/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.schemas.MappedSchema.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport.toString","location":"docs/net.corda.core.schemas/-mapped-schema-validator/-schema-cross-reference-report/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.schemas.MappedSchemaValidator.SchemaCrossReferenceReport.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.transactions.BaseTransaction.toString","location":"docs/net.corda.core.transactions/-base-transaction/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.transactions.BaseTransaction.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.toString","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.transactions.ContractUpgradeLedgerTransaction.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.transactions.LedgerTransaction.toString","location":"docs/net.corda.core.transactions/-ledger-transaction/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.transactions.LedgerTransaction.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.toString","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.transactions.NotaryChangeLedgerTransaction.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.transactions.SignedTransaction.toString","location":"docs/net.corda.core.transactions/-signed-transaction/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.transactions.SignedTransaction.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.transactions.WireTransaction.toString","location":"docs/net.corda.core.transactions/-wire-transaction/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.transactions.WireTransaction.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.ByteSequence.toString","location":"docs/net.corda.core.utilities/-byte-sequence/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.ByteSequence.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.NetworkHostAndPort.toString","location":"docs/net.corda.core.utilities/-network-host-and-port/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.NetworkHostAndPort.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.NonEmptySet.toString","location":"docs/net.corda.core.utilities/-non-empty-set/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.NonEmptySet.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.ProgressTracker.Change.Position.toString","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-position/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.ProgressTracker.Change.Position.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.ProgressTracker.Change.Rendering.toString","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-rendering/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.ProgressTracker.Change.Rendering.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.ProgressTracker.Change.Structural.toString","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-structural/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.ProgressTracker.Change.Structural.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.Try.Failure.toString","location":"docs/net.corda.core.utilities/-try/-failure/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.Try.Failure.toString"]},{"name":"open override fun toString(): String","description":"net.corda.core.utilities.Try.Success.toString","location":"docs/net.corda.core.utilities/-try/-success/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.core.utilities.Try.Success.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.contracts.BusinessCalendar.toString","location":"docs/net.corda.finance.contracts/-business-calendar/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.contracts.BusinessCalendar.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.contracts.CommercialPaper.State.toString","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.contracts.CommercialPaper.State.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.contracts.DayCountBasisDay.toString","location":"docs/net.corda.finance.contracts/-day-count-basis-day/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.contracts.DayCountBasisDay.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.contracts.DayCountBasisYear.toString","location":"docs/net.corda.finance.contracts/-day-count-basis-year/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.contracts.DayCountBasisYear.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.contracts.Tenor.toString","location":"docs/net.corda.finance.contracts/-tenor/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.contracts.Tenor.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.contracts.asset.Cash.State.toString","location":"docs/net.corda.finance.contracts.asset/-cash/-state/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.contracts.asset.Cash.State.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.contracts.asset.Obligation.State.toString","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.contracts.asset.Obligation.State.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.toString","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-asset-mismatch-exception/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.toString","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-h2-impl/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.workflows.asset.selection.CashSelectionH2Impl.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.toString","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-postgre-s-q-l-impl/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.workflows.asset.selection.CashSelectionPostgreSQLImpl.toString"]},{"name":"open override fun toString(): String","description":"net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.toString","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-s-q-l-server-impl/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.toString"]},{"name":"open override fun toString(): String","description":"net.corda.testing.internal.vault.CommodityState.toString","location":"docs/net.corda.testing.internal.vault/-commodity-state/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.testing.internal.vault.CommodityState.toString"]},{"name":"open override fun toString(): String","description":"net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle.toString","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-distributed-service-handle/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle.toString"]},{"name":"open override fun toString(): String","description":"net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.toString","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-message-transfer/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.toString"]},{"name":"open override fun toString(): String","description":"net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.toString","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-peer-handle/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.toString"]},{"name":"open override fun toString(): String","description":"net.corda.testing.node.internal.InMemoryMessage.toString","location":"docs/net.corda.testing.node.internal/-in-memory-message/to-string.html","searchKeys":["toString","open override fun toString(): String","net.corda.testing.node.internal.InMemoryMessage.toString"]},{"name":"open override fun toToken(context: SerializeAsTokenContext): <Error class: unknown class>","description":"net.corda.core.serialization.SingletonSerializeAsToken.toToken","location":"docs/net.corda.core.serialization/-singleton-serialize-as-token/to-token.html","searchKeys":["toToken","open override fun toToken(context: SerializeAsTokenContext): <Error class: unknown class>","net.corda.core.serialization.SingletonSerializeAsToken.toToken"]},{"name":"open override fun verifies(): EnforceVerifyOrFail","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.verifies","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/verifies.html","searchKeys":["verifies","open override fun verifies(): EnforceVerifyOrFail","net.corda.testing.dsl.TestLedgerDSLInterpreter.verifies"]},{"name":"open override fun verifies(): EnforceVerifyOrFail","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/verifies.html","searchKeys":["verifies","open override fun verifies(): EnforceVerifyOrFail","net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies"]},{"name":"open override fun verify(tx: LedgerTransaction)","description":"net.corda.finance.contracts.CommercialPaper.verify","location":"docs/net.corda.finance.contracts/-commercial-paper/verify.html","searchKeys":["verify","open override fun verify(tx: LedgerTransaction)","net.corda.finance.contracts.CommercialPaper.verify"]},{"name":"open override fun verify(tx: LedgerTransaction)","description":"net.corda.finance.contracts.asset.Cash.verify","location":"docs/net.corda.finance.contracts.asset/-cash/verify.html","searchKeys":["verify","open override fun verify(tx: LedgerTransaction)","net.corda.finance.contracts.asset.Cash.verify"]},{"name":"open override fun verify(tx: LedgerTransaction)","description":"net.corda.finance.contracts.asset.Obligation.verify","location":"docs/net.corda.finance.contracts.asset/-obligation/verify.html","searchKeys":["verify","open override fun verify(tx: LedgerTransaction)","net.corda.finance.contracts.asset.Obligation.verify"]},{"name":"open override fun verify(tx: LedgerTransaction)","description":"net.corda.testing.internal.vault.DummyDealContract.verify","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/verify.html","searchKeys":["verify","open override fun verify(tx: LedgerTransaction)","net.corda.testing.internal.vault.DummyDealContract.verify"]},{"name":"open override fun verify(tx: LedgerTransaction)","description":"net.corda.testing.internal.vault.DummyLinearContract.verify","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/verify.html","searchKeys":["verify","open override fun verify(tx: LedgerTransaction)","net.corda.testing.internal.vault.DummyLinearContract.verify"]},{"name":"open override fun verify(tx: LedgerTransaction)","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.verify","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/verify.html","searchKeys":["verify","open override fun verify(tx: LedgerTransaction)","net.corda.testing.internal.vault.UniqueDummyFungibleContract.verify"]},{"name":"open override fun verify(tx: LedgerTransaction)","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.verify","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/verify.html","searchKeys":["verify","open override fun verify(tx: LedgerTransaction)","net.corda.testing.internal.vault.UniqueDummyLinearContract.verify"]},{"name":"open override fun visit(parser: AttachmentsQueryCriteriaParser): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/visit.html","searchKeys":["visit","open override fun visit(parser: AttachmentsQueryCriteriaParser): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.visit"]},{"name":"open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/visit.html","searchKeys":["visit","open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.visit"]},{"name":"open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/visit.html","searchKeys":["visit","open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.visit"]},{"name":"open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/visit.html","searchKeys":["visit","open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.visit"]},{"name":"open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/visit.html","searchKeys":["visit","open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.visit"]},{"name":"open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/visit.html","searchKeys":["visit","open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.visit"]},{"name":"open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.visit","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/visit.html","searchKeys":["visit","open override fun visit(parser: IQueryCriteriaParser): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.visit"]},{"name":"open override fun visit(parser: P): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor.visit","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-and-visitor/visit.html","searchKeys":["visit","open override fun visit(parser: P): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.AndVisitor.visit"]},{"name":"open override fun visit(parser: P): Collection<<Error class: unknown class>>","description":"net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor.visit","location":"docs/net.corda.core.node.services.vault/-generic-query-criteria/-chainable-query-criteria/-or-visitor/visit.html","searchKeys":["visit","open override fun visit(parser: P): Collection<<Error class: unknown class>>","net.corda.core.node.services.vault.GenericQueryCriteria.ChainableQueryCriteria.OrVisitor.visit"]},{"name":"open override fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.wellKnownPartyFromX500Name","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/well-known-party-from-x500-name.html","searchKeys":["wellKnownPartyFromX500Name","open override fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.wellKnownPartyFromX500Name"]},{"name":"open override fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","description":"net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.wellKnownPartyFromX500Name","location":"docs/net.corda.client.jackson/-jackson-support/-no-party-object-mapper/well-known-party-from-x500-name.html","searchKeys":["wellKnownPartyFromX500Name","open override fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.wellKnownPartyFromX500Name"]},{"name":"open override fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.wellKnownPartyFromX500Name","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/well-known-party-from-x500-name.html","searchKeys":["wellKnownPartyFromX500Name","open override fun wellKnownPartyFromX500Name(name: CordaX500Name): Party?","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.wellKnownPartyFromX500Name"]},{"name":"open override fun withConfig(config: Map<String, Any>): CustomCordapp","description":"net.corda.testing.node.internal.CustomCordapp.withConfig","location":"docs/net.corda.testing.node.internal/-custom-cordapp/with-config.html","searchKeys":["withConfig","open override fun withConfig(config: Map<String, Any>): CustomCordapp","net.corda.testing.node.internal.CustomCordapp.withConfig"]},{"name":"open override fun withConfig(config: Map<String, Any>): ScanPackageTestCordapp","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.withConfig","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/with-config.html","searchKeys":["withConfig","open override fun withConfig(config: Map<String, Any>): ScanPackageTestCordapp","net.corda.testing.node.internal.ScanPackageTestCordapp.withConfig"]},{"name":"open override fun withConfig(config: Map<String, Any>): TestCordapp","description":"net.corda.testing.node.internal.UriTestCordapp.withConfig","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/with-config.html","searchKeys":["withConfig","open override fun withConfig(config: Map<String, Any>): TestCordapp","net.corda.testing.node.internal.UriTestCordapp.withConfig"]},{"name":"open override fun withEntityManager(block: Consumer<<Error class: unknown class>>)","description":"net.corda.testing.node.MockServices.withEntityManager","location":"docs/net.corda.testing.node/-mock-services/with-entity-manager.html","searchKeys":["withEntityManager","open override fun withEntityManager(block: Consumer<<Error class: unknown class>>)","net.corda.testing.node.MockServices.withEntityManager"]},{"name":"open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","description":"net.corda.finance.contracts.CommercialPaper.State.withNewOwner","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/with-new-owner.html","searchKeys":["withNewOwner","open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","net.corda.finance.contracts.CommercialPaper.State.withNewOwner"]},{"name":"open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","description":"net.corda.finance.contracts.asset.Cash.State.withNewOwner","location":"docs/net.corda.finance.contracts.asset/-cash/-state/with-new-owner.html","searchKeys":["withNewOwner","open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","net.corda.finance.contracts.asset.Cash.State.withNewOwner"]},{"name":"open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","description":"net.corda.finance.contracts.asset.Obligation.State.withNewOwner","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/with-new-owner.html","searchKeys":["withNewOwner","open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","net.corda.finance.contracts.asset.Obligation.State.withNewOwner"]},{"name":"open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","description":"net.corda.testing.internal.vault.CommodityState.withNewOwner","location":"docs/net.corda.testing.internal.vault/-commodity-state/with-new-owner.html","searchKeys":["withNewOwner","open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","net.corda.testing.internal.vault.CommodityState.withNewOwner"]},{"name":"open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.withNewOwner","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/with-new-owner.html","searchKeys":["withNewOwner","open override fun withNewOwner(newOwner: AbstractParty): CommandAndState","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.withNewOwner"]},{"name":"open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Commodity>>, newOwner: AbstractParty): FungibleAsset<Commodity>","description":"net.corda.testing.internal.vault.CommodityState.withNewOwnerAndAmount","location":"docs/net.corda.testing.internal.vault/-commodity-state/with-new-owner-and-amount.html","searchKeys":["withNewOwnerAndAmount","open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Commodity>>, newOwner: AbstractParty): FungibleAsset<Commodity>","net.corda.testing.internal.vault.CommodityState.withNewOwnerAndAmount"]},{"name":"open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Currency>>, newOwner: AbstractParty): FungibleAsset<Currency>","description":"net.corda.finance.contracts.asset.Cash.State.withNewOwnerAndAmount","location":"docs/net.corda.finance.contracts.asset/-cash/-state/with-new-owner-and-amount.html","searchKeys":["withNewOwnerAndAmount","open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Currency>>, newOwner: AbstractParty): FungibleAsset<Currency>","net.corda.finance.contracts.asset.Cash.State.withNewOwnerAndAmount"]},{"name":"open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Currency>>, newOwner: AbstractParty): FungibleAsset<Currency>","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.withNewOwnerAndAmount","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/with-new-owner-and-amount.html","searchKeys":["withNewOwnerAndAmount","open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Currency>>, newOwner: AbstractParty): FungibleAsset<Currency>","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.withNewOwnerAndAmount"]},{"name":"open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Obligation.Terms<P>>>, newOwner: AbstractParty): Obligation.State<P>","description":"net.corda.finance.contracts.asset.Obligation.State.withNewOwnerAndAmount","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/with-new-owner-and-amount.html","searchKeys":["withNewOwnerAndAmount","open override fun withNewOwnerAndAmount(newAmount: Amount<Issued<Obligation.Terms<P>>>, newOwner: AbstractParty): Obligation.State<P>","net.corda.finance.contracts.asset.Obligation.State.withNewOwnerAndAmount"]},{"name":"open override fun withOnlyJarContents(): CustomCordapp","description":"net.corda.testing.node.internal.CustomCordapp.withOnlyJarContents","location":"docs/net.corda.testing.node.internal/-custom-cordapp/with-only-jar-contents.html","searchKeys":["withOnlyJarContents","open override fun withOnlyJarContents(): CustomCordapp","net.corda.testing.node.internal.CustomCordapp.withOnlyJarContents"]},{"name":"open override fun withOnlyJarContents(): ScanPackageTestCordapp","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.withOnlyJarContents","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/with-only-jar-contents.html","searchKeys":["withOnlyJarContents","open override fun withOnlyJarContents(): ScanPackageTestCordapp","net.corda.testing.node.internal.ScanPackageTestCordapp.withOnlyJarContents"]},{"name":"open override fun withOnlyJarContents(): TestCordappInternal","description":"net.corda.testing.node.internal.UriTestCordapp.withOnlyJarContents","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/with-only-jar-contents.html","searchKeys":["withOnlyJarContents","open override fun withOnlyJarContents(): TestCordappInternal","net.corda.testing.node.internal.UriTestCordapp.withOnlyJarContents"]},{"name":"open override val a: AttachmentQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition.a","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-and-composition/a.html","searchKeys":["a","open override val a: AttachmentQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition.a"]},{"name":"open override val a: AttachmentQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition.a","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-or-composition/a.html","searchKeys":["a","open override val a: AttachmentQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition.a"]},{"name":"open override val a: QueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.AndComposition.a","location":"docs/net.corda.core.node.services.vault/-query-criteria/-and-composition/a.html","searchKeys":["a","open override val a: QueryCriteria","net.corda.core.node.services.vault.QueryCriteria.AndComposition.a"]},{"name":"open override val a: QueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.OrComposition.a","location":"docs/net.corda.core.node.services.vault/-query-criteria/-or-composition/a.html","searchKeys":["a","open override val a: QueryCriteria","net.corda.core.node.services.vault.QueryCriteria.OrComposition.a"]},{"name":"open override val allFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.internal.cordapp.CordappImpl.allFlows","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/all-flows.html","searchKeys":["allFlows","open override val allFlows: List<Class<out FlowLogic<*>>>","net.corda.core.internal.cordapp.CordappImpl.allFlows"]},{"name":"open override val amount: Amount<Issued<Commodity>>","description":"net.corda.testing.internal.vault.CommodityState.amount","location":"docs/net.corda.testing.internal.vault/-commodity-state/amount.html","searchKeys":["amount","open override val amount: Amount<Issued<Commodity>>","net.corda.testing.internal.vault.CommodityState.amount"]},{"name":"open override val amount: Amount<Issued<Currency>>","description":"net.corda.finance.contracts.asset.Cash.State.amount","location":"docs/net.corda.finance.contracts.asset/-cash/-state/amount.html","searchKeys":["amount","open override val amount: Amount<Issued<Currency>>","net.corda.finance.contracts.asset.Cash.State.amount"]},{"name":"open override val amount: Amount<Issued<Currency>>","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.amount","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/amount.html","searchKeys":["amount","open override val amount: Amount<Issued<Currency>>","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.amount"]},{"name":"open override val amount: Amount<Issued<Obligation.Terms<P>>>","description":"net.corda.finance.contracts.asset.Obligation.State.amount","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/amount.html","searchKeys":["amount","open override val amount: Amount<Issued<Obligation.Terms<P>>>","net.corda.finance.contracts.asset.Obligation.State.amount"]},{"name":"open override val appClassLoader: ClassLoader","description":"net.corda.core.internal.verification.NodeVerificationSupport.appClassLoader","location":"docs/net.corda.core.internal.verification/-node-verification-support/app-class-loader.html","searchKeys":["appClassLoader","open override val appClassLoader: ClassLoader","net.corda.core.internal.verification.NodeVerificationSupport.appClassLoader"]},{"name":"open override val b: AttachmentQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition.b","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-and-composition/b.html","searchKeys":["b","open override val b: AttachmentQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.AndComposition.b"]},{"name":"open override val b: AttachmentQueryCriteria","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition.b","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-or-composition/b.html","searchKeys":["b","open override val b: AttachmentQueryCriteria","net.corda.core.node.services.vault.AttachmentQueryCriteria.OrComposition.b"]},{"name":"open override val b: QueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.AndComposition.b","location":"docs/net.corda.core.node.services.vault/-query-criteria/-and-composition/b.html","searchKeys":["b","open override val b: QueryCriteria","net.corda.core.node.services.vault.QueryCriteria.AndComposition.b"]},{"name":"open override val b: QueryCriteria","description":"net.corda.core.node.services.vault.QueryCriteria.OrComposition.b","location":"docs/net.corda.core.node.services.vault/-query-criteria/-or-composition/b.html","searchKeys":["b","open override val b: QueryCriteria","net.corda.core.node.services.vault.QueryCriteria.OrComposition.b"]},{"name":"open override val baseDirectory: Path","description":"net.corda.testing.driver.internal.NodeHandleInternal.baseDirectory","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/base-directory.html","searchKeys":["baseDirectory","open override val baseDirectory: Path","net.corda.testing.driver.internal.NodeHandleInternal.baseDirectory"]},{"name":"open override val bilateralNetState: BilateralNetState<P>","description":"net.corda.finance.contracts.asset.Obligation.State.bilateralNetState","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/bilateral-net-state.html","searchKeys":["bilateralNetState","open override val bilateralNetState: BilateralNetState<P>","net.corda.finance.contracts.asset.Obligation.State.bilateralNetState"]},{"name":"open override val bytes: ByteArray","description":"net.corda.core.utilities.OpaqueBytesSubSequence.bytes","location":"docs/net.corda.core.utilities/-opaque-bytes-sub-sequence/bytes.html","searchKeys":["bytes","open override val bytes: ByteArray","net.corda.core.utilities.OpaqueBytesSubSequence.bytes"]},{"name":"open override val cause: Throwable?","description":"net.corda.core.CordaException.cause","location":"docs/net.corda.core/-corda-exception/cause.html","searchKeys":["cause","open override val cause: Throwable?","net.corda.core.CordaException.cause"]},{"name":"open override val cause: Throwable?","description":"net.corda.core.CordaRuntimeException.cause","location":"docs/net.corda.core/-corda-runtime-exception/cause.html","searchKeys":["cause","open override val cause: Throwable?","net.corda.core.CordaRuntimeException.cause"]},{"name":"open override val cause: Throwable? = null","description":"net.corda.core.node.services.StatesNotAvailableException.cause","location":"docs/net.corda.core.node.services/-states-not-available-exception/cause.html","searchKeys":["cause","open override val cause: Throwable? = null","net.corda.core.node.services.StatesNotAvailableException.cause"]},{"name":"open override val checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>","description":"net.corda.core.internal.cordapp.CordappImpl.checkpointCustomSerializers","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/checkpoint-custom-serializers.html","searchKeys":["checkpointCustomSerializers","open override val checkpointCustomSerializers: List<CheckpointCustomSerializer<*, *>>","net.corda.core.internal.cordapp.CordappImpl.checkpointCustomSerializers"]},{"name":"open override val clientId: String","description":"net.corda.core.messaging.FlowHandleWithClientIdImpl.clientId","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id-impl/client-id.html","searchKeys":["clientId","open override val clientId: String","net.corda.core.messaging.FlowHandleWithClientIdImpl.clientId"]},{"name":"open override val clock: TestClock","description":"net.corda.testing.node.MockServices.clock","location":"docs/net.corda.testing.node/-mock-services/clock.html","searchKeys":["clock","open override val clock: TestClock","net.corda.testing.node.MockServices.clock"]},{"name":"open override val clusterSize: Int","description":"net.corda.testing.node.ClusterSpec.Raft.clusterSize","location":"docs/net.corda.testing.node/-cluster-spec/-raft/cluster-size.html","searchKeys":["clusterSize","open override val clusterSize: Int","net.corda.testing.node.ClusterSpec.Raft.clusterSize"]},{"name":"open override val clusterSize: Int","description":"net.corda.testing.node.internal.DummyClusterSpec.clusterSize","location":"docs/net.corda.testing.node.internal/-dummy-cluster-spec/cluster-size.html","searchKeys":["clusterSize","open override val clusterSize: Int","net.corda.testing.node.internal.DummyClusterSpec.clusterSize"]},{"name":"open override val components: List<OpaqueBytes>","description":"net.corda.core.transactions.FilteredComponentGroup.components","location":"docs/net.corda.core.transactions/-filtered-component-group/components.html","searchKeys":["components","open override val components: List<OpaqueBytes>","net.corda.core.transactions.FilteredComponentGroup.components"]},{"name":"open override val config: Map<String, Any>","description":"net.corda.testing.node.internal.CustomCordapp.config","location":"docs/net.corda.testing.node.internal/-custom-cordapp/config.html","searchKeys":["config","open override val config: Map<String, Any>","net.corda.testing.node.internal.CustomCordapp.config"]},{"name":"open override val config: Map<String, Any>","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.config","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/config.html","searchKeys":["config","open override val config: Map<String, Any>","net.corda.testing.node.internal.ScanPackageTestCordapp.config"]},{"name":"open override val config: Map<String, Any>","description":"net.corda.testing.node.internal.UriTestCordapp.config","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/config.html","searchKeys":["config","open override val config: Map<String, Any>","net.corda.testing.node.internal.UriTestCordapp.config"]},{"name":"open override val configuration: <Error class: unknown class>","description":"net.corda.testing.driver.internal.InProcessImpl.configuration","location":"docs/net.corda.testing.driver.internal/-in-process-impl/configuration.html","searchKeys":["configuration","open override val configuration: <Error class: unknown class>","net.corda.testing.driver.internal.InProcessImpl.configuration"]},{"name":"open override val configuration: <Error class: unknown class>","description":"net.corda.testing.driver.internal.OutOfProcessImpl.configuration","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/configuration.html","searchKeys":["configuration","open override val configuration: <Error class: unknown class>","net.corda.testing.driver.internal.OutOfProcessImpl.configuration"]},{"name":"open override val constraintTypes: Set<Vault.ConstraintInfo.Type>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.constraintTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/constraint-types.html","searchKeys":["constraintTypes","open override val constraintTypes: Set<Vault.ConstraintInfo.Type>","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.constraintTypes"]},{"name":"open override val constraints: Set<Vault.ConstraintInfo>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.constraints","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/constraints.html","searchKeys":["constraints","open override val constraints: Set<Vault.ConstraintInfo>","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.constraints"]},{"name":"open override val contract: Class<out Contract>? = null","description":"net.corda.finance.contracts.asset.Cash.Commands.Move.contract","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-move/contract.html","searchKeys":["contract","open override val contract: Class<out Contract>? = null","net.corda.finance.contracts.asset.Cash.Commands.Move.contract"]},{"name":"open override val contract: Class<out Contract>? = null","description":"net.corda.finance.contracts.asset.Obligation.Commands.Move.contract","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-move/contract.html","searchKeys":["contract","open override val contract: Class<out Contract>? = null","net.corda.finance.contracts.asset.Obligation.Commands.Move.contract"]},{"name":"open override val contractClassNames: List<String>","description":"net.corda.core.internal.cordapp.CordappImpl.contractClassNames","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/contract-class-names.html","searchKeys":["contractClassNames","open override val contractClassNames: List<String>","net.corda.core.internal.cordapp.CordappImpl.contractClassNames"]},{"name":"open override val contractStateTypes: Set<Class<out ContractState>>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.contractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/contract-state-types.html","searchKeys":["contractStateTypes","open override val contractStateTypes: Set<Class<out ContractState>>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.contractStateTypes"]},{"name":"open override val contractStateTypes: Set<Class<out ContractState>>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.contractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/contract-state-types.html","searchKeys":["contractStateTypes","open override val contractStateTypes: Set<Class<out ContractState>>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.contractStateTypes"]},{"name":"open override val contractStateTypes: Set<Class<out ContractState>>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.contractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/contract-state-types.html","searchKeys":["contractStateTypes","open override val contractStateTypes: Set<Class<out ContractState>>? = null","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.contractStateTypes"]},{"name":"open override val contractStateTypes: Set<Class<out ContractState>>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.contractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/contract-state-types.html","searchKeys":["contractStateTypes","open override val contractStateTypes: Set<Class<out ContractState>>? = null","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.contractStateTypes"]},{"name":"open override val contractStateTypes: Set<Class<out ContractState>>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.contractStateTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/contract-state-types.html","searchKeys":["contractStateTypes","open override val contractStateTypes: Set<Class<out ContractState>>? = null","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.contractStateTypes"]},{"name":"open override val contractUpgradeService: ContractUpgradeService","description":"net.corda.testing.node.MockServices.contractUpgradeService","location":"docs/net.corda.testing.node/-mock-services/contract-upgrade-service.html","searchKeys":["contractUpgradeService","open override val contractUpgradeService: ContractUpgradeService","net.corda.testing.node.MockServices.contractUpgradeService"]},{"name":"open override val cordappClasses: List<String>","description":"net.corda.core.internal.cordapp.CordappImpl.cordappClasses","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/cordapp-classes.html","searchKeys":["cordappClasses","open override val cordappClasses: List<String>","net.corda.core.internal.cordapp.CordappImpl.cordappClasses"]},{"name":"open override val cordappProvider: CordappProvider","description":"net.corda.testing.node.MockServices.cordappProvider","location":"docs/net.corda.testing.node/-mock-services/cordapp-provider.html","searchKeys":["cordappProvider","open override val cordappProvider: CordappProvider","net.corda.testing.node.MockServices.cordappProvider"]},{"name":"open override val cordappsClassLoader: URLClassLoader?","description":"net.corda.testing.node.internal.DriverDSLImpl.cordappsClassLoader","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/cordapps-class-loader.html","searchKeys":["cordappsClassLoader","open override val cordappsClassLoader: URLClassLoader?","net.corda.testing.node.internal.DriverDSLImpl.cordappsClassLoader"]},{"name":"open override val customSchemas: Set<MappedSchema>","description":"net.corda.core.internal.cordapp.CordappImpl.customSchemas","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/custom-schemas.html","searchKeys":["customSchemas","open override val customSchemas: Set<MappedSchema>","net.corda.core.internal.cordapp.CordappImpl.customSchemas"]},{"name":"open override val defaultHash: SecureHash","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.defaultHash","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/default-hash.html","searchKeys":["defaultHash","open override val defaultHash: SecureHash","net.corda.testing.node.internal.MockNetworkParametersStorage.defaultHash"]},{"name":"open override val diagnosticsService: DiagnosticsService","description":"net.corda.testing.node.MockServices.diagnosticsService","location":"docs/net.corda.testing.node/-mock-services/diagnostics-service.html","searchKeys":["diagnosticsService","open override val diagnosticsService: DiagnosticsService","net.corda.testing.node.MockServices.diagnosticsService"]},{"name":"open override val displayTokenSize: BigDecimal","description":"net.corda.finance.contracts.Commodity.displayTokenSize","location":"docs/net.corda.finance.contracts/-commodity/display-token-size.html","searchKeys":["displayTokenSize","open override val displayTokenSize: BigDecimal","net.corda.finance.contracts.Commodity.displayTokenSize"]},{"name":"open override val exactParticipants: List<AbstractParty>?","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.exactParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/exact-participants.html","searchKeys":["exactParticipants","open override val exactParticipants: List<AbstractParty>?","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.exactParticipants"]},{"name":"open override val exactParticipants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.exactParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/exact-participants.html","searchKeys":["exactParticipants","open override val exactParticipants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.exactParticipants"]},{"name":"open override val exactParticipants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.exactParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/exact-participants.html","searchKeys":["exactParticipants","open override val exactParticipants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.exactParticipants"]},{"name":"open override val exitKeys: <Error class: unknown class>","description":"net.corda.finance.contracts.asset.Cash.State.exitKeys","location":"docs/net.corda.finance.contracts.asset/-cash/-state/exit-keys.html","searchKeys":["exitKeys","open override val exitKeys: <Error class: unknown class>","net.corda.finance.contracts.asset.Cash.State.exitKeys"]},{"name":"open override val exitKeys: <Error class: unknown class>","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.exitKeys","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/exit-keys.html","searchKeys":["exitKeys","open override val exitKeys: <Error class: unknown class>","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.exitKeys"]},{"name":"open override val exitKeys: Collection<PublicKey>","description":"net.corda.finance.contracts.asset.Obligation.State.exitKeys","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/exit-keys.html","searchKeys":["exitKeys","open override val exitKeys: Collection<PublicKey>","net.corda.finance.contracts.asset.Obligation.State.exitKeys"]},{"name":"open override val exitKeys: Set<PublicKey>","description":"net.corda.testing.internal.vault.CommodityState.exitKeys","location":"docs/net.corda.testing.internal.vault/-commodity-state/exit-keys.html","searchKeys":["exitKeys","open override val exitKeys: Set<PublicKey>","net.corda.testing.internal.vault.CommodityState.exitKeys"]},{"name":"open override val externalIds: List<UUID>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.externalIds","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/external-ids.html","searchKeys":["externalIds","open override val externalIds: List<UUID>","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.externalIds"]},{"name":"open override val externalResult: Try<Unit>","description":"net.corda.core.internal.verification.VerificationResult.External.externalResult","location":"docs/net.corda.core.internal.verification/-verification-result/-external/external-result.html","searchKeys":["externalResult","open override val externalResult: Try<Unit>","net.corda.core.internal.verification.VerificationResult.External.externalResult"]},{"name":"open override val externalResult: Try<Unit>","description":"net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.externalResult","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process-and-external/external-result.html","searchKeys":["externalResult","open override val externalResult: Try<Unit>","net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.externalResult"]},{"name":"open override val externalResult: Try<Unit>?","description":"net.corda.core.internal.verification.VerificationResult.InProcess.externalResult","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process/external-result.html","searchKeys":["externalResult","open override val externalResult: Try<Unit>?","net.corda.core.internal.verification.VerificationResult.InProcess.externalResult"]},{"name":"open override val groupIndex: Int","description":"net.corda.core.transactions.FilteredComponentGroup.groupIndex","location":"docs/net.corda.core.transactions/-filtered-component-group/group-index.html","searchKeys":["groupIndex","open override val groupIndex: Int","net.corda.core.transactions.FilteredComponentGroup.groupIndex"]},{"name":"open override val hash: SecureHash","description":"net.corda.core.crypto.MerkleTree.Leaf.hash","location":"docs/net.corda.core.crypto/-merkle-tree/-leaf/hash.html","searchKeys":["hash","open override val hash: SecureHash","net.corda.core.crypto.MerkleTree.Leaf.hash"]},{"name":"open override val hash: SecureHash","description":"net.corda.core.crypto.MerkleTree.Node.hash","location":"docs/net.corda.core.crypto/-merkle-tree/-node/hash.html","searchKeys":["hash","open override val hash: SecureHash","net.corda.core.crypto.MerkleTree.Node.hash"]},{"name":"open override val id: SecureHash","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.id","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.flows.MaybeSerializedSignedTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.flows.ReceiverDistributionRecord.id","location":"docs/net.corda.core.flows/-receiver-distribution-record/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.flows.ReceiverDistributionRecord.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.flows.SenderDistributionRecord.id","location":"docs/net.corda.core.flows/-sender-distribution-record/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.flows.SenderDistributionRecord.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.internal.SignedDataWithCert.id","location":"docs/net.corda.core.internal/-signed-data-with-cert/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.internal.SignedDataWithCert.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.node.services.SignedTransactionWithStatus.id","location":"docs/net.corda.core.node.services/-signed-transaction-with-status/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.node.services.SignedTransactionWithStatus.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.id","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.ContractUpgradeFilteredTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.id","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.ContractUpgradeLedgerTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.id","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.ContractUpgradeWireTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.FilteredTransaction.id","location":"docs/net.corda.core.transactions/-filtered-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.FilteredTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.LedgerTransaction.id","location":"docs/net.corda.core.transactions/-ledger-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.LedgerTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.id","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.NotaryChangeLedgerTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.NotaryChangeWireTransaction.id","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.NotaryChangeWireTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.SignedTransaction.SignaturesMissingException.id","location":"docs/net.corda.core.transactions/-signed-transaction/-signatures-missing-exception/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.SignedTransaction.SignaturesMissingException.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.SignedTransaction.id","location":"docs/net.corda.core.transactions/-signed-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.SignedTransaction.id"]},{"name":"open override val id: SecureHash","description":"net.corda.core.transactions.WireTransaction.id","location":"docs/net.corda.core.transactions/-wire-transaction/id.html","searchKeys":["id","open override val id: SecureHash","net.corda.core.transactions.WireTransaction.id"]},{"name":"open override val id: StateMachineRunId","description":"net.corda.core.messaging.FlowHandleImpl.id","location":"docs/net.corda.core.messaging/-flow-handle-impl/id.html","searchKeys":["id","open override val id: StateMachineRunId","net.corda.core.messaging.FlowHandleImpl.id"]},{"name":"open override val id: StateMachineRunId","description":"net.corda.core.messaging.FlowHandleWithClientIdImpl.id","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id-impl/id.html","searchKeys":["id","open override val id: StateMachineRunId","net.corda.core.messaging.FlowHandleWithClientIdImpl.id"]},{"name":"open override val id: StateMachineRunId","description":"net.corda.core.messaging.FlowProgressHandleImpl.id","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/id.html","searchKeys":["id","open override val id: StateMachineRunId","net.corda.core.messaging.FlowProgressHandleImpl.id"]},{"name":"open override val id: StateMachineRunId","description":"net.corda.core.messaging.StateMachineUpdate.Added.id","location":"docs/net.corda.core.messaging/-state-machine-update/-added/id.html","searchKeys":["id","open override val id: StateMachineRunId","net.corda.core.messaging.StateMachineUpdate.Added.id"]},{"name":"open override val id: StateMachineRunId","description":"net.corda.core.messaging.StateMachineUpdate.Removed.id","location":"docs/net.corda.core.messaging/-state-machine-update/-removed/id.html","searchKeys":["id","open override val id: StateMachineRunId","net.corda.core.messaging.StateMachineUpdate.Removed.id"]},{"name":"open override val identityService: IdentityService","description":"net.corda.testing.node.MockServices.identityService","location":"docs/net.corda.testing.node/-mock-services/identity-service.html","searchKeys":["identityService","open override val identityService: IdentityService","net.corda.testing.node.MockServices.identityService"]},{"name":"open override val inProcessResult: Try<LedgerTransaction>","description":"net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.inProcessResult","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process-and-external/in-process-result.html","searchKeys":["inProcessResult","open override val inProcessResult: Try<LedgerTransaction>","net.corda.core.internal.verification.VerificationResult.InProcessAndExternal.inProcessResult"]},{"name":"open override val inProcessResult: Try<LedgerTransaction?>","description":"net.corda.core.internal.verification.VerificationResult.InProcess.inProcessResult","location":"docs/net.corda.core.internal.verification/-verification-result/-in-process/in-process-result.html","searchKeys":["inProcessResult","open override val inProcessResult: Try<LedgerTransaction?>","net.corda.core.internal.verification.VerificationResult.InProcess.inProcessResult"]},{"name":"open override val inProcessResult: Try<LedgerTransaction?>?","description":"net.corda.core.internal.verification.VerificationResult.External.inProcessResult","location":"docs/net.corda.core.internal.verification/-verification-result/-external/in-process-result.html","searchKeys":["inProcessResult","open override val inProcessResult: Try<LedgerTransaction?>?","net.corda.core.internal.verification.VerificationResult.External.inProcessResult"]},{"name":"open override val info: Cordapp.Info","description":"net.corda.core.internal.cordapp.CordappImpl.info","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/info.html","searchKeys":["info","open override val info: Cordapp.Info","net.corda.core.internal.cordapp.CordappImpl.info"]},{"name":"open override val initiatedFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.internal.cordapp.CordappImpl.initiatedFlows","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/initiated-flows.html","searchKeys":["initiatedFlows","open override val initiatedFlows: List<Class<out FlowLogic<*>>>","net.corda.core.internal.cordapp.CordappImpl.initiatedFlows"]},{"name":"open override val inputs: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.inputs","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/inputs.html","searchKeys":["inputs","open override val inputs: List<StateAndRef<ContractState>>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.inputs"]},{"name":"open override val inputs: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.LedgerTransaction.inputs","location":"docs/net.corda.core.transactions/-ledger-transaction/inputs.html","searchKeys":["inputs","open override val inputs: List<StateAndRef<ContractState>>","net.corda.core.transactions.LedgerTransaction.inputs"]},{"name":"open override val inputs: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.inputs","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/inputs.html","searchKeys":["inputs","open override val inputs: List<StateAndRef<ContractState>>","net.corda.core.transactions.NotaryChangeLedgerTransaction.inputs"]},{"name":"open override val inputs: List<StateRef>","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.inputs","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/inputs.html","searchKeys":["inputs","open override val inputs: List<StateRef>","net.corda.core.transactions.ContractUpgradeFilteredTransaction.inputs"]},{"name":"open override val inputs: List<StateRef>","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.inputs","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/inputs.html","searchKeys":["inputs","open override val inputs: List<StateRef>","net.corda.core.transactions.ContractUpgradeWireTransaction.inputs"]},{"name":"open override val inputs: List<StateRef>","description":"net.corda.core.transactions.NotaryChangeWireTransaction.inputs","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/inputs.html","searchKeys":["inputs","open override val inputs: List<StateRef>","net.corda.core.transactions.NotaryChangeWireTransaction.inputs"]},{"name":"open override val inputs: List<StateRef>","description":"net.corda.core.transactions.TraversableTransaction.inputs","location":"docs/net.corda.core.transactions/-traversable-transaction/inputs.html","searchKeys":["inputs","open override val inputs: List<StateRef>","net.corda.core.transactions.TraversableTransaction.inputs"]},{"name":"open override val interner: PrivateInterner<AbstractParty>","description":"net.corda.core.identity.AbstractParty.Companion.interner","location":"docs/net.corda.core.identity/-abstract-party/-companion/interner.html","searchKeys":["interner","open override val interner: PrivateInterner<AbstractParty>","net.corda.core.identity.AbstractParty.Companion.interner"]},{"name":"open override val interner: PrivateInterner<CordaX500Name>","description":"net.corda.core.identity.CordaX500Name.Companion.interner","location":"docs/net.corda.core.identity/-corda-x500-name/-companion/interner.html","searchKeys":["interner","open override val interner: PrivateInterner<CordaX500Name>","net.corda.core.identity.CordaX500Name.Companion.interner"]},{"name":"open override val interner: PrivateInterner<SecureHash>","description":"net.corda.core.crypto.SecureHash.Companion.interner","location":"docs/net.corda.core.crypto/-secure-hash/-companion/interner.html","searchKeys":["interner","open override val interner: PrivateInterner<SecureHash>","net.corda.core.crypto.SecureHash.Companion.interner"]},{"name":"open override val interner: PrivateInterner<SignatureAttachmentConstraint>","description":"net.corda.core.contracts.SignatureAttachmentConstraint.Companion.interner","location":"docs/net.corda.core.contracts/-signature-attachment-constraint/-companion/interner.html","searchKeys":["interner","open override val interner: PrivateInterner<SignatureAttachmentConstraint>","net.corda.core.contracts.SignatureAttachmentConstraint.Companion.interner"]},{"name":"open override val isFailure: Boolean","description":"net.corda.core.utilities.Try.Failure.isFailure","location":"docs/net.corda.core.utilities/-try/-failure/is-failure.html","searchKeys":["isFailure","open override val isFailure: Boolean","net.corda.core.utilities.Try.Failure.isFailure"]},{"name":"open override val isFailure: Boolean","description":"net.corda.core.utilities.Try.Success.isFailure","location":"docs/net.corda.core.utilities/-try/-success/is-failure.html","searchKeys":["isFailure","open override val isFailure: Boolean","net.corda.core.utilities.Try.Success.isFailure"]},{"name":"open override val isFullParties: Boolean = false","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.isFullParties","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/is-full-parties.html","searchKeys":["isFullParties","open override val isFullParties: Boolean = false","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.isFullParties"]},{"name":"open override val isFullParties: Boolean = false","description":"net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.isFullParties","location":"docs/net.corda.client.jackson/-jackson-support/-no-party-object-mapper/is-full-parties.html","searchKeys":["isFullParties","open override val isFullParties: Boolean = false","net.corda.client.jackson.JacksonSupport.NoPartyObjectMapper.isFullParties"]},{"name":"open override val isFullParties: Boolean = false","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.isFullParties","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/is-full-parties.html","searchKeys":["isFullParties","open override val isFullParties: Boolean = false","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.isFullParties"]},{"name":"open override val isLegacyCompatible: Boolean","description":"net.corda.core.internal.cordapp.LanguageVersion.Bytecode.isLegacyCompatible","location":"docs/net.corda.core.internal.cordapp/-language-version/-bytecode/is-legacy-compatible.html","searchKeys":["isLegacyCompatible","open override val isLegacyCompatible: Boolean","net.corda.core.internal.cordapp.LanguageVersion.Bytecode.isLegacyCompatible"]},{"name":"open override val isLegacyCompatible: Boolean","description":"net.corda.core.internal.cordapp.LanguageVersion.Data.isLegacyCompatible","location":"docs/net.corda.core.internal.cordapp/-language-version/-data/is-legacy-compatible.html","searchKeys":["isLegacyCompatible","open override val isLegacyCompatible: Boolean","net.corda.core.internal.cordapp.LanguageVersion.Data.isLegacyCompatible"]},{"name":"open override val isNonLegacyCompatible: Boolean","description":"net.corda.core.internal.cordapp.LanguageVersion.Bytecode.isNonLegacyCompatible","location":"docs/net.corda.core.internal.cordapp/-language-version/-bytecode/is-non-legacy-compatible.html","searchKeys":["isNonLegacyCompatible","open override val isNonLegacyCompatible: Boolean","net.corda.core.internal.cordapp.LanguageVersion.Bytecode.isNonLegacyCompatible"]},{"name":"open override val isNonLegacyCompatible: Boolean","description":"net.corda.core.internal.cordapp.LanguageVersion.Data.isNonLegacyCompatible","location":"docs/net.corda.core.internal.cordapp/-language-version/-data/is-non-legacy-compatible.html","searchKeys":["isNonLegacyCompatible","open override val isNonLegacyCompatible: Boolean","net.corda.core.internal.cordapp.LanguageVersion.Data.isNonLegacyCompatible"]},{"name":"open override val isResolved: Boolean = false","description":"net.corda.core.contracts.StaticPointer.isResolved","location":"docs/net.corda.core.contracts/-static-pointer/is-resolved.html","searchKeys":["isResolved","open override val isResolved: Boolean = false","net.corda.core.contracts.StaticPointer.isResolved"]},{"name":"open override val isResolved: Boolean = true","description":"net.corda.core.contracts.LinearPointer.isResolved","location":"docs/net.corda.core.contracts/-linear-pointer/is-resolved.html","searchKeys":["isResolved","open override val isResolved: Boolean = true","net.corda.core.contracts.LinearPointer.isResolved"]},{"name":"open override val isSuccess: Boolean","description":"net.corda.core.utilities.Try.Failure.isSuccess","location":"docs/net.corda.core.utilities/-try/-failure/is-success.html","searchKeys":["isSuccess","open override val isSuccess: Boolean","net.corda.core.utilities.Try.Failure.isSuccess"]},{"name":"open override val isSuccess: Boolean","description":"net.corda.core.utilities.Try.Success.isSuccess","location":"docs/net.corda.core.utilities/-try/-success/is-success.html","searchKeys":["isSuccess","open override val isSuccess: Boolean","net.corda.core.utilities.Try.Success.isSuccess"]},{"name":"open override val isTimeoutEnabled: Boolean","description":"net.corda.core.flows.NotaryFlow.Client.isTimeoutEnabled","location":"docs/net.corda.core.flows/-notary-flow/-client/is-timeout-enabled.html","searchKeys":["isTimeoutEnabled","open override val isTimeoutEnabled: Boolean","net.corda.core.flows.NotaryFlow.Client.isTimeoutEnabled"]},{"name":"open override val jarFile: Path","description":"net.corda.testing.node.internal.CustomCordapp.jarFile","location":"docs/net.corda.testing.node.internal/-custom-cordapp/jar-file.html","searchKeys":["jarFile","open override val jarFile: Path","net.corda.testing.node.internal.CustomCordapp.jarFile"]},{"name":"open override val jarFile: Path","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.jarFile","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/jar-file.html","searchKeys":["jarFile","open override val jarFile: Path","net.corda.testing.node.internal.ScanPackageTestCordapp.jarFile"]},{"name":"open override val jarFile: Path","description":"net.corda.testing.node.internal.UriTestCordapp.jarFile","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/jar-file.html","searchKeys":["jarFile","open override val jarFile: Path","net.corda.testing.node.internal.UriTestCordapp.jarFile"]},{"name":"open override val jarHash: SecureHash.SHA256","description":"net.corda.core.internal.cordapp.CordappImpl.jarHash","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/jar-hash.html","searchKeys":["jarHash","open override val jarHash: SecureHash.SHA256","net.corda.core.internal.cordapp.CordappImpl.jarHash"]},{"name":"open override val jarPath: URL","description":"net.corda.core.internal.cordapp.CordappImpl.jarPath","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/jar-path.html","searchKeys":["jarPath","open override val jarPath: URL","net.corda.core.internal.cordapp.CordappImpl.jarPath"]},{"name":"open override val jmxAddress: NetworkHostAndPort?","description":"net.corda.testing.driver.internal.NodeHandleInternal.jmxAddress","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/jmx-address.html","searchKeys":["jmxAddress","open override val jmxAddress: NetworkHostAndPort?","net.corda.testing.driver.internal.NodeHandleInternal.jmxAddress"]},{"name":"open override val keyManagementService: KeyManagementService","description":"net.corda.testing.node.MockServices.keyManagementService","location":"docs/net.corda.testing.node/-mock-services/key-management-service.html","searchKeys":["keyManagementService","open override val keyManagementService: KeyManagementService","net.corda.testing.node.MockServices.keyManagementService"]},{"name":"open override val ledgerInterpreter: TestLedgerDSLInterpreter","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.ledgerInterpreter","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/ledger-interpreter.html","searchKeys":["ledgerInterpreter","open override val ledgerInterpreter: TestLedgerDSLInterpreter","net.corda.testing.dsl.TestTransactionDSLInterpreter.ledgerInterpreter"]},{"name":"open override val licence: String","description":"net.corda.core.cordapp.Cordapp.Info.Contract.licence","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/licence.html","searchKeys":["licence","open override val licence: String","net.corda.core.cordapp.Cordapp.Info.Contract.licence"]},{"name":"open override val licence: String","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.licence","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/licence.html","searchKeys":["licence","open override val licence: String","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.licence"]},{"name":"open override val licence: String","description":"net.corda.core.cordapp.Cordapp.Info.Default.licence","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/licence.html","searchKeys":["licence","open override val licence: String","net.corda.core.cordapp.Cordapp.Info.Default.licence"]},{"name":"open override val licence: String","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.licence","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/licence.html","searchKeys":["licence","open override val licence: String","net.corda.core.cordapp.Cordapp.Info.Workflow.licence"]},{"name":"open override val linearId: UniqueIdentifier","description":"net.corda.testing.internal.vault.DummyDealContract.State.linearId","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/linear-id.html","searchKeys":["linearId","open override val linearId: UniqueIdentifier","net.corda.testing.internal.vault.DummyDealContract.State.linearId"]},{"name":"open override val linearId: UniqueIdentifier","description":"net.corda.testing.internal.vault.DummyLinearContract.State.linearId","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/linear-id.html","searchKeys":["linearId","open override val linearId: UniqueIdentifier","net.corda.testing.internal.vault.DummyLinearContract.State.linearId"]},{"name":"open override val linearId: UniqueIdentifier","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.State.linearId","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-state/linear-id.html","searchKeys":["linearId","open override val linearId: UniqueIdentifier","net.corda.testing.internal.vault.UniqueDummyLinearContract.State.linearId"]},{"name":"open override val message: String?","description":"net.corda.core.CordaException.message","location":"docs/net.corda.core/-corda-exception/message.html","searchKeys":["message","open override val message: String?","net.corda.core.CordaException.message"]},{"name":"open override val message: String?","description":"net.corda.core.CordaRuntimeException.message","location":"docs/net.corda.core/-corda-runtime-exception/message.html","searchKeys":["message","open override val message: String?","net.corda.core.CordaRuntimeException.message"]},{"name":"open override val message: String?","description":"net.corda.core.node.services.StatesNotAvailableException.message","location":"docs/net.corda.core.node.services/-states-not-available-exception/message.html","searchKeys":["message","open override val message: String?","net.corda.core.node.services.StatesNotAvailableException.message"]},{"name":"open override val migrationResource: String","description":"net.corda.core.schemas.CommonSchemaV1.migrationResource","location":"docs/net.corda.core.schemas/-common-schema-v1/migration-resource.html","searchKeys":["migrationResource","open override val migrationResource: String","net.corda.core.schemas.CommonSchemaV1.migrationResource"]},{"name":"open override val migrationResource: String","description":"net.corda.finance.schemas.CashSchemaV1.migrationResource","location":"docs/net.corda.finance.schemas/-cash-schema-v1/migration-resource.html","searchKeys":["migrationResource","open override val migrationResource: String","net.corda.finance.schemas.CashSchemaV1.migrationResource"]},{"name":"open override val migrationResource: String","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.migrationResource","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/migration-resource.html","searchKeys":["migrationResource","open override val migrationResource: String","net.corda.finance.schemas.CommercialPaperSchemaV1.migrationResource"]},{"name":"open override val minimumPlatformVersion: Int","description":"net.corda.core.internal.cordapp.CordappImpl.minimumPlatformVersion","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/minimum-platform-version.html","searchKeys":["minimumPlatformVersion","open override val minimumPlatformVersion: Int","net.corda.core.internal.cordapp.CordappImpl.minimumPlatformVersion"]},{"name":"open override val multilateralNetState: MultilateralNetState<P>","description":"net.corda.finance.contracts.asset.Obligation.State.multilateralNetState","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/multilateral-net-state.html","searchKeys":["multilateralNetState","open override val multilateralNetState: MultilateralNetState<P>","net.corda.finance.contracts.asset.Obligation.State.multilateralNetState"]},{"name":"open override val myInfo: NodeInfo","description":"net.corda.testing.node.MockServices.myInfo","location":"docs/net.corda.testing.node/-mock-services/my-info.html","searchKeys":["myInfo","open override val myInfo: NodeInfo","net.corda.testing.node.MockServices.myInfo"]},{"name":"open override val name: String","description":"net.corda.core.internal.cordapp.CordappImpl.name","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/name.html","searchKeys":["name","open override val name: String","net.corda.core.internal.cordapp.CordappImpl.name"]},{"name":"open override val networkMapCache: NetworkMapCache","description":"net.corda.testing.node.MockServices.networkMapCache","location":"docs/net.corda.testing.node/-mock-services/network-map-cache.html","searchKeys":["networkMapCache","open override val networkMapCache: NetworkMapCache","net.corda.testing.node.MockServices.networkMapCache"]},{"name":"open override val networkParameters: NetworkParameters","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.networkParameters","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/network-parameters.html","searchKeys":["networkParameters","open override val networkParameters: NetworkParameters","net.corda.core.transactions.ContractUpgradeLedgerTransaction.networkParameters"]},{"name":"open override val networkParameters: NetworkParameters","description":"net.corda.testing.node.MockServices.networkParameters","location":"docs/net.corda.testing.node/-mock-services/network-parameters.html","searchKeys":["networkParameters","open override val networkParameters: NetworkParameters","net.corda.testing.node.MockServices.networkParameters"]},{"name":"open override val networkParameters: NetworkParameters?","description":"net.corda.core.transactions.LedgerTransaction.networkParameters","location":"docs/net.corda.core.transactions/-ledger-transaction/network-parameters.html","searchKeys":["networkParameters","open override val networkParameters: NetworkParameters?","net.corda.core.transactions.LedgerTransaction.networkParameters"]},{"name":"open override val networkParameters: NetworkParameters?","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.networkParameters","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/network-parameters.html","searchKeys":["networkParameters","open override val networkParameters: NetworkParameters?","net.corda.core.transactions.NotaryChangeLedgerTransaction.networkParameters"]},{"name":"open override val networkParametersHash: SecureHash?","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.networkParametersHash","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/network-parameters-hash.html","searchKeys":["networkParametersHash","open override val networkParametersHash: SecureHash?","net.corda.core.transactions.ContractUpgradeFilteredTransaction.networkParametersHash"]},{"name":"open override val networkParametersHash: SecureHash?","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.networkParametersHash","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/network-parameters-hash.html","searchKeys":["networkParametersHash","open override val networkParametersHash: SecureHash?","net.corda.core.transactions.ContractUpgradeWireTransaction.networkParametersHash"]},{"name":"open override val networkParametersHash: SecureHash?","description":"net.corda.core.transactions.NotaryChangeWireTransaction.networkParametersHash","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/network-parameters-hash.html","searchKeys":["networkParametersHash","open override val networkParametersHash: SecureHash?","net.corda.core.transactions.NotaryChangeWireTransaction.networkParametersHash"]},{"name":"open override val networkParametersHash: SecureHash?","description":"net.corda.core.transactions.TraversableTransaction.networkParametersHash","location":"docs/net.corda.core.transactions/-traversable-transaction/network-parameters-hash.html","searchKeys":["networkParametersHash","open override val networkParametersHash: SecureHash?","net.corda.core.transactions.TraversableTransaction.networkParametersHash"]},{"name":"open override val node: NodeInfo","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Added.node","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-added/node.html","searchKeys":["node","open override val node: NodeInfo","net.corda.core.node.services.NetworkMapCache.MapChange.Added.node"]},{"name":"open override val node: NodeInfo","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Modified.node","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-modified/node.html","searchKeys":["node","open override val node: NodeInfo","net.corda.core.node.services.NetworkMapCache.MapChange.Modified.node"]},{"name":"open override val node: NodeInfo","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Removed.node","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-removed/node.html","searchKeys":["node","open override val node: NodeInfo","net.corda.core.node.services.NetworkMapCache.MapChange.Removed.node"]},{"name":"open override val nodeInfo: NodeInfo","description":"net.corda.testing.driver.internal.InProcessImpl.nodeInfo","location":"docs/net.corda.testing.driver.internal/-in-process-impl/node-info.html","searchKeys":["nodeInfo","open override val nodeInfo: NodeInfo","net.corda.testing.driver.internal.InProcessImpl.nodeInfo"]},{"name":"open override val nodeInfo: NodeInfo","description":"net.corda.testing.driver.internal.OutOfProcessImpl.nodeInfo","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/node-info.html","searchKeys":["nodeInfo","open override val nodeInfo: NodeInfo","net.corda.testing.driver.internal.OutOfProcessImpl.nodeInfo"]},{"name":"open override val notary: Party","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.notary","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/notary.html","searchKeys":["notary","open override val notary: Party","net.corda.core.transactions.ContractUpgradeFilteredTransaction.notary"]},{"name":"open override val notary: Party","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.notary","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/notary.html","searchKeys":["notary","open override val notary: Party","net.corda.core.transactions.ContractUpgradeLedgerTransaction.notary"]},{"name":"open override val notary: Party","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.notary","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/notary.html","searchKeys":["notary","open override val notary: Party","net.corda.core.transactions.ContractUpgradeWireTransaction.notary"]},{"name":"open override val notary: Party","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.notary","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/notary.html","searchKeys":["notary","open override val notary: Party","net.corda.core.transactions.NotaryChangeLedgerTransaction.notary"]},{"name":"open override val notary: Party","description":"net.corda.core.transactions.NotaryChangeWireTransaction.notary","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/notary.html","searchKeys":["notary","open override val notary: Party","net.corda.core.transactions.NotaryChangeWireTransaction.notary"]},{"name":"open override val notary: Party?","description":"net.corda.core.transactions.LedgerTransaction.notary","location":"docs/net.corda.core.transactions/-ledger-transaction/notary.html","searchKeys":["notary","open override val notary: Party?","net.corda.core.transactions.LedgerTransaction.notary"]},{"name":"open override val notary: Party?","description":"net.corda.core.transactions.TraversableTransaction.notary","location":"docs/net.corda.core.transactions/-traversable-transaction/notary.html","searchKeys":["notary","open override val notary: Party?","net.corda.core.transactions.TraversableTransaction.notary"]},{"name":"open override val notaryHandles: List<NotaryHandle>","description":"net.corda.testing.node.internal.DriverDSLImpl.notaryHandles","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/notary-handles.html","searchKeys":["notaryHandles","open override val notaryHandles: List<NotaryHandle>","net.corda.testing.node.internal.DriverDSLImpl.notaryHandles"]},{"name":"open override val notaryParty: Party","description":"net.corda.finance.flows.TwoPartyDealFlow.Instigator.notaryParty","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-instigator/notary-party.html","searchKeys":["notaryParty","open override val notaryParty: Party","net.corda.finance.flows.TwoPartyDealFlow.Instigator.notaryParty"]},{"name":"open override val originalMessage: String?","description":"net.corda.core.CordaException.originalMessage","location":"docs/net.corda.core/-corda-exception/original-message.html","searchKeys":["originalMessage","open override val originalMessage: String?","net.corda.core.CordaException.originalMessage"]},{"name":"open override val originalMessage: String?","description":"net.corda.core.CordaRuntimeException.originalMessage","location":"docs/net.corda.core/-corda-runtime-exception/original-message.html","searchKeys":["originalMessage","open override val originalMessage: String?","net.corda.core.CordaRuntimeException.originalMessage"]},{"name":"open override val otherSideSession: FlowSession","description":"net.corda.finance.flows.TwoPartyDealFlow.Acceptor.otherSideSession","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-acceptor/other-side-session.html","searchKeys":["otherSideSession","open override val otherSideSession: FlowSession","net.corda.finance.flows.TwoPartyDealFlow.Acceptor.otherSideSession"]},{"name":"open override val otherSideSession: FlowSession","description":"net.corda.finance.flows.TwoPartyDealFlow.Instigator.otherSideSession","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-instigator/other-side-session.html","searchKeys":["otherSideSession","open override val otherSideSession: FlowSession","net.corda.finance.flows.TwoPartyDealFlow.Instigator.otherSideSession"]},{"name":"open override val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.outputs","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/outputs.html","searchKeys":["outputs","open override val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.ContractUpgradeFilteredTransaction.outputs"]},{"name":"open override val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.outputs","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/outputs.html","searchKeys":["outputs","open override val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.outputs"]},{"name":"open override val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.outputs","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/outputs.html","searchKeys":["outputs","open override val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.ContractUpgradeWireTransaction.outputs"]},{"name":"open override val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.LedgerTransaction.outputs","location":"docs/net.corda.core.transactions/-ledger-transaction/outputs.html","searchKeys":["outputs","open override val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.LedgerTransaction.outputs"]},{"name":"open override val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.outputs","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/outputs.html","searchKeys":["outputs","open override val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.NotaryChangeLedgerTransaction.outputs"]},{"name":"open override val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.NotaryChangeWireTransaction.outputs","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/outputs.html","searchKeys":["outputs","open override val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.NotaryChangeWireTransaction.outputs"]},{"name":"open override val outputs: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.TraversableTransaction.outputs","location":"docs/net.corda.core.transactions/-traversable-transaction/outputs.html","searchKeys":["outputs","open override val outputs: List<TransactionState<ContractState>>","net.corda.core.transactions.TraversableTransaction.outputs"]},{"name":"open override val owner: AbstractParty","description":"net.corda.finance.contracts.CommercialPaper.State.owner","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/owner.html","searchKeys":["owner","open override val owner: AbstractParty","net.corda.finance.contracts.CommercialPaper.State.owner"]},{"name":"open override val owner: AbstractParty","description":"net.corda.finance.contracts.asset.Cash.State.owner","location":"docs/net.corda.finance.contracts.asset/-cash/-state/owner.html","searchKeys":["owner","open override val owner: AbstractParty","net.corda.finance.contracts.asset.Cash.State.owner"]},{"name":"open override val owner: AbstractParty","description":"net.corda.finance.contracts.asset.Obligation.State.owner","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/owner.html","searchKeys":["owner","open override val owner: AbstractParty","net.corda.finance.contracts.asset.Obligation.State.owner"]},{"name":"open override val owner: AbstractParty","description":"net.corda.testing.internal.vault.CommodityState.owner","location":"docs/net.corda.testing.internal.vault/-commodity-state/owner.html","searchKeys":["owner","open override val owner: AbstractParty","net.corda.testing.internal.vault.CommodityState.owner"]},{"name":"open override val owner: AbstractParty","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.owner","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/owner.html","searchKeys":["owner","open override val owner: AbstractParty","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.owner"]},{"name":"open override val p2pAddress: NetworkHostAndPort","description":"net.corda.testing.driver.internal.NodeHandleInternal.p2pAddress","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/p2p-address.html","searchKeys":["p2pAddress","open override val p2pAddress: NetworkHostAndPort","net.corda.testing.driver.internal.NodeHandleInternal.p2pAddress"]},{"name":"open override val participants: <Error class: unknown class>","description":"net.corda.finance.contracts.CommercialPaper.State.participants","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/participants.html","searchKeys":["participants","open override val participants: <Error class: unknown class>","net.corda.finance.contracts.CommercialPaper.State.participants"]},{"name":"open override val participants: <Error class: unknown class>","description":"net.corda.finance.contracts.asset.Cash.State.participants","location":"docs/net.corda.finance.contracts.asset/-cash/-state/participants.html","searchKeys":["participants","open override val participants: <Error class: unknown class>","net.corda.finance.contracts.asset.Cash.State.participants"]},{"name":"open override val participants: <Error class: unknown class>","description":"net.corda.testing.internal.vault.CommodityState.participants","location":"docs/net.corda.testing.internal.vault/-commodity-state/participants.html","searchKeys":["participants","open override val participants: <Error class: unknown class>","net.corda.testing.internal.vault.CommodityState.participants"]},{"name":"open override val participants: <Error class: unknown class>","description":"net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.participants","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-contract/-state/participants.html","searchKeys":["participants","open override val participants: <Error class: unknown class>","net.corda.testing.internal.vault.UniqueDummyFungibleContract.State.participants"]},{"name":"open override val participants: List<AbstractParty>","description":"net.corda.finance.contracts.asset.Obligation.State.participants","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>","net.corda.finance.contracts.asset.Obligation.State.participants"]},{"name":"open override val participants: List<AbstractParty>","description":"net.corda.testing.internal.vault.DummyDealContract.State.participants","location":"docs/net.corda.testing.internal.vault/-dummy-deal-contract/-state/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>","net.corda.testing.internal.vault.DummyDealContract.State.participants"]},{"name":"open override val participants: List<AbstractParty>","description":"net.corda.testing.internal.vault.DummyLinearContract.State.participants","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>","net.corda.testing.internal.vault.DummyLinearContract.State.participants"]},{"name":"open override val participants: List<AbstractParty>","description":"net.corda.testing.internal.vault.UniqueDummyLinearContract.State.participants","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-contract/-state/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>","net.corda.testing.internal.vault.UniqueDummyLinearContract.State.participants"]},{"name":"open override val participants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.participants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.participants"]},{"name":"open override val participants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.participants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.participants"]},{"name":"open override val participants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.participants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.participants"]},{"name":"open override val participants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.participants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/participants.html","searchKeys":["participants","open override val participants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.participants"]},{"name":"open override val party: Party","description":"net.corda.core.node.services.PartyInfo.DistributedNode.party","location":"docs/net.corda.core.node.services/-party-info/-distributed-node/party.html","searchKeys":["party","open override val party: Party","net.corda.core.node.services.PartyInfo.DistributedNode.party"]},{"name":"open override val party: Party","description":"net.corda.core.node.services.PartyInfo.SingleNode.party","location":"docs/net.corda.core.node.services/-party-info/-single-node/party.html","searchKeys":["party","open override val party: Party","net.corda.core.node.services.PartyInfo.SingleNode.party"]},{"name":"open override val payload: TwoPartyDealFlow.AutoOffer","description":"net.corda.finance.flows.TwoPartyDealFlow.Instigator.payload","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-instigator/payload.html","searchKeys":["payload","open override val payload: TwoPartyDealFlow.AutoOffer","net.corda.finance.flows.TwoPartyDealFlow.Instigator.payload"]},{"name":"open override val peerPartyId: SecureHash","description":"net.corda.core.flows.ReceiverDistributionRecord.peerPartyId","location":"docs/net.corda.core.flows/-receiver-distribution-record/peer-party-id.html","searchKeys":["peerPartyId","open override val peerPartyId: SecureHash","net.corda.core.flows.ReceiverDistributionRecord.peerPartyId"]},{"name":"open override val peerPartyId: SecureHash","description":"net.corda.core.flows.SenderDistributionRecord.peerPartyId","location":"docs/net.corda.core.flows/-sender-distribution-record/peer-party-id.html","searchKeys":["peerPartyId","open override val peerPartyId: SecureHash","net.corda.core.flows.SenderDistributionRecord.peerPartyId"]},{"name":"open override val pointer: StateRef","description":"net.corda.core.contracts.StaticPointer.pointer","location":"docs/net.corda.core.contracts/-static-pointer/pointer.html","searchKeys":["pointer","open override val pointer: StateRef","net.corda.core.contracts.StaticPointer.pointer"]},{"name":"open override val pointer: UniqueIdentifier","description":"net.corda.core.contracts.LinearPointer.pointer","location":"docs/net.corda.core.contracts/-linear-pointer/pointer.html","searchKeys":["pointer","open override val pointer: UniqueIdentifier","net.corda.core.contracts.LinearPointer.pointer"]},{"name":"open override val process: Process","description":"net.corda.testing.driver.internal.OutOfProcessImpl.process","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/process.html","searchKeys":["process","open override val process: Process","net.corda.testing.driver.internal.OutOfProcessImpl.process"]},{"name":"open override val progress: <Error class: unknown class><String>","description":"net.corda.core.messaging.FlowProgressHandleImpl.progress","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/progress.html","searchKeys":["progress","open override val progress: <Error class: unknown class><String>","net.corda.core.messaging.FlowProgressHandleImpl.progress"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.progressTracker","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.progressTracker","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.CollectSignaturesFlow.progressTracker","location":"docs/net.corda.core.flows/-collect-signatures-flow/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.CollectSignaturesFlow.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.FinalityFlow.progressTracker","location":"docs/net.corda.core.flows/-finality-flow/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.FinalityFlow.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.FinalityRecoveryFlow.progressTracker","location":"docs/net.corda.core.flows/-finality-recovery-flow/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.FinalityRecoveryFlow.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.LedgerRecoveryFlow.progressTracker","location":"docs/net.corda.core.flows/-ledger-recovery-flow/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.LedgerRecoveryFlow.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.NotaryFlow.Client.progressTracker","location":"docs/net.corda.core.flows/-notary-flow/-client/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.NotaryFlow.Client.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.SignTransactionFlow.progressTracker","location":"docs/net.corda.core.flows/-sign-transaction-flow/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.SignTransactionFlow.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.core.flows.WithReferencedStatesFlow.progressTracker","location":"docs/net.corda.core.flows/-with-referenced-states-flow/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.core.flows.WithReferencedStatesFlow.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.finance.flows.AbstractCashFlow.progressTracker","location":"docs/net.corda.finance.flows/-abstract-cash-flow/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.finance.flows.AbstractCashFlow.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.finance.flows.TwoPartyDealFlow.Acceptor.progressTracker","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-acceptor/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.finance.flows.TwoPartyDealFlow.Acceptor.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.finance.flows.TwoPartyDealFlow.Instigator.progressTracker","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-instigator/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.finance.flows.TwoPartyDealFlow.Instigator.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.finance.flows.TwoPartyDealFlow.Primary.progressTracker","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-primary/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.finance.flows.TwoPartyDealFlow.Primary.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.finance.flows.TwoPartyDealFlow.Secondary.progressTracker","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-secondary/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.finance.flows.TwoPartyDealFlow.Secondary.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.progressTracker","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.progressTracker"]},{"name":"open override val progressTracker: ProgressTracker","description":"net.corda.finance.flows.TwoPartyTradeFlow.Seller.progressTracker","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller/progress-tracker.html","searchKeys":["progressTracker","open override val progressTracker: ProgressTracker","net.corda.finance.flows.TwoPartyTradeFlow.Seller.progressTracker"]},{"name":"open override val proxy: CordaRPCOps","description":"net.corda.client.rpc.CordaRPCConnection.proxy","location":"docs/net.corda.client.rpc/-corda-r-p-c-connection/proxy.html","searchKeys":["proxy","open override val proxy: CordaRPCOps","net.corda.client.rpc.CordaRPCConnection.proxy"]},{"name":"open override val proxy: CordaRPCOps","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.proxy","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/proxy.html","searchKeys":["proxy","open override val proxy: CordaRPCOps","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.proxy"]},{"name":"open override val references: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.references","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/references.html","searchKeys":["references","open override val references: List<StateAndRef<ContractState>>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.references"]},{"name":"open override val references: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.LedgerTransaction.references","location":"docs/net.corda.core.transactions/-ledger-transaction/references.html","searchKeys":["references","open override val references: List<StateAndRef<ContractState>>","net.corda.core.transactions.LedgerTransaction.references"]},{"name":"open override val references: List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.references","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/references.html","searchKeys":["references","open override val references: List<StateAndRef<ContractState>>","net.corda.core.transactions.NotaryChangeLedgerTransaction.references"]},{"name":"open override val references: List<StateRef>","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.references","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/references.html","searchKeys":["references","open override val references: List<StateRef>","net.corda.core.transactions.ContractUpgradeFilteredTransaction.references"]},{"name":"open override val references: List<StateRef>","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.references","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/references.html","searchKeys":["references","open override val references: List<StateRef>","net.corda.core.transactions.ContractUpgradeWireTransaction.references"]},{"name":"open override val references: List<StateRef>","description":"net.corda.core.transactions.NotaryChangeWireTransaction.references","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/references.html","searchKeys":["references","open override val references: List<StateRef>","net.corda.core.transactions.NotaryChangeWireTransaction.references"]},{"name":"open override val references: List<StateRef>","description":"net.corda.core.transactions.TraversableTransaction.references","location":"docs/net.corda.core.transactions/-traversable-transaction/references.html","searchKeys":["references","open override val references: List<StateRef>","net.corda.core.transactions.TraversableTransaction.references"]},{"name":"open override val relevancyStatus: Vault.RelevancyStatus","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.relevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/relevancy-status.html","searchKeys":["relevancyStatus","open override val relevancyStatus: Vault.RelevancyStatus","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.relevancyStatus"]},{"name":"open override val relevancyStatus: Vault.RelevancyStatus","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.relevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/relevancy-status.html","searchKeys":["relevancyStatus","open override val relevancyStatus: Vault.RelevancyStatus","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.relevancyStatus"]},{"name":"open override val relevancyStatus: Vault.RelevancyStatus","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.relevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/relevancy-status.html","searchKeys":["relevancyStatus","open override val relevancyStatus: Vault.RelevancyStatus","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.relevancyStatus"]},{"name":"open override val relevancyStatus: Vault.RelevancyStatus","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.relevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/relevancy-status.html","searchKeys":["relevancyStatus","open override val relevancyStatus: Vault.RelevancyStatus","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.relevancyStatus"]},{"name":"open override val relevancyStatus: Vault.RelevancyStatus","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.relevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/relevancy-status.html","searchKeys":["relevancyStatus","open override val relevancyStatus: Vault.RelevancyStatus","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.relevancyStatus"]},{"name":"open override val requiredSigningKeys: Set<PublicKey>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.requiredSigningKeys","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/required-signing-keys.html","searchKeys":["requiredSigningKeys","open override val requiredSigningKeys: Set<PublicKey>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.requiredSigningKeys"]},{"name":"open override val requiredSigningKeys: Set<PublicKey>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.requiredSigningKeys","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/required-signing-keys.html","searchKeys":["requiredSigningKeys","open override val requiredSigningKeys: Set<PublicKey>","net.corda.core.transactions.NotaryChangeLedgerTransaction.requiredSigningKeys"]},{"name":"open override val requiredSigningKeys: Set<PublicKey>","description":"net.corda.core.transactions.SignedTransaction.requiredSigningKeys","location":"docs/net.corda.core.transactions/-signed-transaction/required-signing-keys.html","searchKeys":["requiredSigningKeys","open override val requiredSigningKeys: Set<PublicKey>","net.corda.core.transactions.SignedTransaction.requiredSigningKeys"]},{"name":"open override val returnValue: CordaFuture<A>","description":"net.corda.core.messaging.FlowHandleImpl.returnValue","location":"docs/net.corda.core.messaging/-flow-handle-impl/return-value.html","searchKeys":["returnValue","open override val returnValue: CordaFuture<A>","net.corda.core.messaging.FlowHandleImpl.returnValue"]},{"name":"open override val returnValue: CordaFuture<A>","description":"net.corda.core.messaging.FlowHandleWithClientIdImpl.returnValue","location":"docs/net.corda.core.messaging/-flow-handle-with-client-id-impl/return-value.html","searchKeys":["returnValue","open override val returnValue: CordaFuture<A>","net.corda.core.messaging.FlowHandleWithClientIdImpl.returnValue"]},{"name":"open override val returnValue: CordaFuture<A>","description":"net.corda.core.messaging.FlowProgressHandleImpl.returnValue","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/return-value.html","searchKeys":["returnValue","open override val returnValue: CordaFuture<A>","net.corda.core.messaging.FlowProgressHandleImpl.returnValue"]},{"name":"open override val rpc: CordaRPCOps","description":"net.corda.testing.driver.internal.InProcessImpl.rpc","location":"docs/net.corda.testing.driver.internal/-in-process-impl/rpc.html","searchKeys":["rpc","open override val rpc: CordaRPCOps","net.corda.testing.driver.internal.InProcessImpl.rpc"]},{"name":"open override val rpc: CordaRPCOps","description":"net.corda.testing.driver.internal.OutOfProcessImpl.rpc","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/rpc.html","searchKeys":["rpc","open override val rpc: CordaRPCOps","net.corda.testing.driver.internal.OutOfProcessImpl.rpc"]},{"name":"open override val rpcAddress: NetworkHostAndPort","description":"net.corda.testing.driver.internal.NodeHandleInternal.rpcAddress","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/rpc-address.html","searchKeys":["rpcAddress","open override val rpcAddress: NetworkHostAndPort","net.corda.testing.driver.internal.NodeHandleInternal.rpcAddress"]},{"name":"open override val rpcAdminAddress: NetworkHostAndPort","description":"net.corda.testing.driver.internal.NodeHandleInternal.rpcAdminAddress","location":"docs/net.corda.testing.driver.internal/-node-handle-internal/rpc-admin-address.html","searchKeys":["rpcAdminAddress","open override val rpcAdminAddress: NetworkHostAndPort","net.corda.testing.driver.internal.NodeHandleInternal.rpcAdminAddress"]},{"name":"open override val rpcFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.internal.cordapp.CordappImpl.rpcFlows","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/rpc-flows.html","searchKeys":["rpcFlows","open override val rpcFlows: List<Class<out FlowLogic<*>>>","net.corda.core.internal.cordapp.CordappImpl.rpcFlows"]},{"name":"open override val rpcUsers: List<User>","description":"net.corda.testing.driver.internal.InProcessImpl.rpcUsers","location":"docs/net.corda.testing.driver.internal/-in-process-impl/rpc-users.html","searchKeys":["rpcUsers","open override val rpcUsers: List<User>","net.corda.testing.driver.internal.InProcessImpl.rpcUsers"]},{"name":"open override val rpcUsers: List<User>","description":"net.corda.testing.driver.internal.OutOfProcessImpl.rpcUsers","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/rpc-users.html","searchKeys":["rpcUsers","open override val rpcUsers: List<User>","net.corda.testing.driver.internal.OutOfProcessImpl.rpcUsers"]},{"name":"open override val schedulableFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.internal.cordapp.CordappImpl.schedulableFlows","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/schedulable-flows.html","searchKeys":["schedulableFlows","open override val schedulableFlows: List<Class<out FlowLogic<*>>>","net.corda.core.internal.cordapp.CordappImpl.schedulableFlows"]},{"name":"open override val scheduledAt: Instant","description":"net.corda.core.contracts.ScheduledActivity.scheduledAt","location":"docs/net.corda.core.contracts/-scheduled-activity/scheduled-at.html","searchKeys":["scheduledAt","open override val scheduledAt: Instant","net.corda.core.contracts.ScheduledActivity.scheduledAt"]},{"name":"open override val scheduledAt: Instant","description":"net.corda.core.contracts.ScheduledStateRef.scheduledAt","location":"docs/net.corda.core.contracts/-scheduled-state-ref/scheduled-at.html","searchKeys":["scheduledAt","open override val scheduledAt: Instant","net.corda.core.contracts.ScheduledStateRef.scheduledAt"]},{"name":"open override val serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>","description":"net.corda.core.internal.cordapp.CordappImpl.serializationCustomSerializers","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/serialization-custom-serializers.html","searchKeys":["serializationCustomSerializers","open override val serializationCustomSerializers: List<SerializationCustomSerializer<*, *>>","net.corda.core.internal.cordapp.CordappImpl.serializationCustomSerializers"]},{"name":"open override val serializationWhitelists: List<SerializationWhitelist>","description":"net.corda.core.internal.cordapp.CordappImpl.serializationWhitelists","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/serialization-whitelists.html","searchKeys":["serializationWhitelists","open override val serializationWhitelists: List<SerializationWhitelist>","net.corda.core.internal.cordapp.CordappImpl.serializationWhitelists"]},{"name":"open override val serverProtocolVersion: Int","description":"net.corda.client.rpc.CordaRPCConnection.serverProtocolVersion","location":"docs/net.corda.client.rpc/-corda-r-p-c-connection/server-protocol-version.html","searchKeys":["serverProtocolVersion","open override val serverProtocolVersion: Int","net.corda.client.rpc.CordaRPCConnection.serverProtocolVersion"]},{"name":"open override val serverProtocolVersion: Int","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.serverProtocolVersion","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/server-protocol-version.html","searchKeys":["serverProtocolVersion","open override val serverProtocolVersion: Int","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.serverProtocolVersion"]},{"name":"open override val serviceFlows: List<Class<out FlowLogic<*>>>","description":"net.corda.core.internal.cordapp.CordappImpl.serviceFlows","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/service-flows.html","searchKeys":["serviceFlows","open override val serviceFlows: List<Class<out FlowLogic<*>>>","net.corda.core.internal.cordapp.CordappImpl.serviceFlows"]},{"name":"open override val services: <Error class: unknown class>","description":"net.corda.testing.driver.internal.InProcessImpl.services","location":"docs/net.corda.testing.driver.internal/-in-process-impl/services.html","searchKeys":["services","open override val services: <Error class: unknown class>","net.corda.testing.driver.internal.InProcessImpl.services"]},{"name":"open override val services: List<Class<out SerializeAsToken>>","description":"net.corda.core.internal.cordapp.CordappImpl.services","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/services.html","searchKeys":["services","open override val services: List<Class<out SerializeAsToken>>","net.corda.core.internal.cordapp.CordappImpl.services"]},{"name":"open override val shortName: String","description":"net.corda.core.cordapp.Cordapp.Info.Contract.shortName","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/short-name.html","searchKeys":["shortName","open override val shortName: String","net.corda.core.cordapp.Cordapp.Info.Contract.shortName"]},{"name":"open override val shortName: String","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.shortName","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/short-name.html","searchKeys":["shortName","open override val shortName: String","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.shortName"]},{"name":"open override val shortName: String","description":"net.corda.core.cordapp.Cordapp.Info.Default.shortName","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/short-name.html","searchKeys":["shortName","open override val shortName: String","net.corda.core.cordapp.Cordapp.Info.Default.shortName"]},{"name":"open override val shortName: String","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.shortName","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/short-name.html","searchKeys":["shortName","open override val shortName: String","net.corda.core.cordapp.Cordapp.Info.Workflow.shortName"]},{"name":"open override val shutdownManager: ShutdownManager","description":"net.corda.testing.node.internal.DriverDSLImpl.shutdownManager","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/shutdown-manager.html","searchKeys":["shutdownManager","open override val shutdownManager: ShutdownManager","net.corda.testing.node.internal.DriverDSLImpl.shutdownManager"]},{"name":"open override val signerKeys: List<PublicKey>","description":"net.corda.core.contracts.ContractAttachment.signerKeys","location":"docs/net.corda.core.contracts/-contract-attachment/signer-keys.html","searchKeys":["signerKeys","open override val signerKeys: List<PublicKey>","net.corda.core.contracts.ContractAttachment.signerKeys"]},{"name":"open override val signerKeys: List<PublicKey>","description":"net.corda.core.internal.AbstractAttachment.signerKeys","location":"docs/net.corda.core.internal/-abstract-attachment/signer-keys.html","searchKeys":["signerKeys","open override val signerKeys: List<PublicKey>","net.corda.core.internal.AbstractAttachment.signerKeys"]},{"name":"open override val signers: List<Party>","description":"net.corda.core.internal.AbstractAttachment.signers","location":"docs/net.corda.core.internal/-abstract-attachment/signers.html","searchKeys":["signers","open override val signers: List<Party>","net.corda.core.internal.AbstractAttachment.signers"]},{"name":"open override val sigs: List<TransactionSignature>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.sigs","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/sigs.html","searchKeys":["sigs","open override val sigs: List<TransactionSignature>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.sigs"]},{"name":"open override val sigs: List<TransactionSignature>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.sigs","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/sigs.html","searchKeys":["sigs","open override val sigs: List<TransactionSignature>","net.corda.core.transactions.NotaryChangeLedgerTransaction.sigs"]},{"name":"open override val sigs: List<TransactionSignature>","description":"net.corda.core.transactions.SignedTransaction.sigs","location":"docs/net.corda.core.transactions/-signed-transaction/sigs.html","searchKeys":["sigs","open override val sigs: List<TransactionSignature>","net.corda.core.transactions.SignedTransaction.sigs"]},{"name":"open override val size: Int","description":"net.corda.core.internal.AbstractAttachment.size","location":"docs/net.corda.core.internal/-abstract-attachment/size.html","searchKeys":["size","open override val size: Int","net.corda.core.internal.AbstractAttachment.size"]},{"name":"open override val status: Vault.StateStatus","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.status","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/status.html","searchKeys":["status","open override val status: Vault.StateStatus","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.status"]},{"name":"open override val status: Vault.StateStatus","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.status","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/status.html","searchKeys":["status","open override val status: Vault.StateStatus","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.status"]},{"name":"open override val status: Vault.StateStatus","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.status","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/status.html","searchKeys":["status","open override val status: Vault.StateStatus","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.status"]},{"name":"open override val status: Vault.StateStatus","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.status","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/status.html","searchKeys":["status","open override val status: Vault.StateStatus","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.status"]},{"name":"open override val status: Vault.StateStatus","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.status","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/status.html","searchKeys":["status","open override val status: Vault.StateStatus","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.status"]},{"name":"open override val stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>? = null","description":"net.corda.core.messaging.FlowProgressHandleImpl.stepsTreeFeed","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/steps-tree-feed.html","searchKeys":["stepsTreeFeed","open override val stepsTreeFeed: DataFeed<List<<Error class: unknown class><Int, String>>, List<<Error class: unknown class><Int, String>>>? = null","net.corda.core.messaging.FlowProgressHandleImpl.stepsTreeFeed"]},{"name":"open override val stepsTreeIndexFeed: DataFeed<Int, Int>? = null","description":"net.corda.core.messaging.FlowProgressHandleImpl.stepsTreeIndexFeed","location":"docs/net.corda.core.messaging/-flow-progress-handle-impl/steps-tree-index-feed.html","searchKeys":["stepsTreeIndexFeed","open override val stepsTreeIndexFeed: DataFeed<Int, Int>? = null","net.corda.core.messaging.FlowProgressHandleImpl.stepsTreeIndexFeed"]},{"name":"open override val targetPlatformVersion: Int","description":"net.corda.core.internal.cordapp.CordappImpl.targetPlatformVersion","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/target-platform-version.html","searchKeys":["targetPlatformVersion","open override val targetPlatformVersion: Int","net.corda.core.internal.cordapp.CordappImpl.targetPlatformVersion"]},{"name":"open override val telemetryComponents: List<Class<out TelemetryComponent>>","description":"net.corda.core.internal.cordapp.CordappImpl.telemetryComponents","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/telemetry-components.html","searchKeys":["telemetryComponents","open override val telemetryComponents: List<Class<out TelemetryComponent>>","net.corda.core.internal.cordapp.CordappImpl.telemetryComponents"]},{"name":"open override val telemetryService: TelemetryServiceImpl","description":"net.corda.testing.node.MockServices.telemetryService","location":"docs/net.corda.testing.node/-mock-services/telemetry-service.html","searchKeys":["telemetryService","open override val telemetryService: TelemetryServiceImpl","net.corda.testing.node.MockServices.telemetryService"]},{"name":"open override val template: Obligation.Terms<P>","description":"net.corda.finance.contracts.asset.BilateralNetState.template","location":"docs/net.corda.finance.contracts.asset/-bilateral-net-state/template.html","searchKeys":["template","open override val template: Obligation.Terms<P>","net.corda.finance.contracts.asset.BilateralNetState.template"]},{"name":"open override val template: Obligation.Terms<P>","description":"net.corda.finance.contracts.asset.MultilateralNetState.template","location":"docs/net.corda.finance.contracts.asset/-multilateral-net-state/template.html","searchKeys":["template","open override val template: Obligation.Terms<P>","net.corda.finance.contracts.asset.MultilateralNetState.template"]},{"name":"open override val timestamp: Instant","description":"net.corda.core.flows.ReceiverDistributionRecord.timestamp","location":"docs/net.corda.core.flows/-receiver-distribution-record/timestamp.html","searchKeys":["timestamp","open override val timestamp: Instant","net.corda.core.flows.ReceiverDistributionRecord.timestamp"]},{"name":"open override val timestamp: Instant","description":"net.corda.core.flows.SenderDistributionRecord.timestamp","location":"docs/net.corda.core.flows/-sender-distribution-record/timestamp.html","searchKeys":["timestamp","open override val timestamp: Instant","net.corda.core.flows.SenderDistributionRecord.timestamp"]},{"name":"open override val timestampDiscriminator: Int","description":"net.corda.core.flows.ReceiverDistributionRecord.timestampDiscriminator","location":"docs/net.corda.core.flows/-receiver-distribution-record/timestamp-discriminator.html","searchKeys":["timestampDiscriminator","open override val timestampDiscriminator: Int","net.corda.core.flows.ReceiverDistributionRecord.timestampDiscriminator"]},{"name":"open override val timestampDiscriminator: Int","description":"net.corda.core.flows.SenderDistributionRecord.timestampDiscriminator","location":"docs/net.corda.core.flows/-sender-distribution-record/timestamp-discriminator.html","searchKeys":["timestampDiscriminator","open override val timestampDiscriminator: Int","net.corda.core.flows.SenderDistributionRecord.timestampDiscriminator"]},{"name":"open override val txId: SecureHash","description":"net.corda.core.flows.ReceiverDistributionRecord.txId","location":"docs/net.corda.core.flows/-receiver-distribution-record/tx-id.html","searchKeys":["txId","open override val txId: SecureHash","net.corda.core.flows.ReceiverDistributionRecord.txId"]},{"name":"open override val txId: SecureHash","description":"net.corda.core.flows.SenderDistributionRecord.txId","location":"docs/net.corda.core.flows/-sender-distribution-record/tx-id.html","searchKeys":["txId","open override val txId: SecureHash","net.corda.core.flows.SenderDistributionRecord.txId"]},{"name":"open override val type: Class<T>","description":"net.corda.core.contracts.LinearPointer.type","location":"docs/net.corda.core.contracts/-linear-pointer/type.html","searchKeys":["type","open override val type: Class<T>","net.corda.core.contracts.LinearPointer.type"]},{"name":"open override val type: Class<T>","description":"net.corda.core.contracts.StaticPointer.type","location":"docs/net.corda.core.contracts/-static-pointer/type.html","searchKeys":["type","open override val type: Class<T>","net.corda.core.contracts.StaticPointer.type"]},{"name":"open override val type: NetType","description":"net.corda.finance.contracts.asset.Obligation.Commands.Net.type","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-net/type.html","searchKeys":["type","open override val type: NetType","net.corda.finance.contracts.asset.Obligation.Commands.Net.type"]},{"name":"open override val useHTTPS: Boolean","description":"net.corda.testing.driver.internal.InProcessImpl.useHTTPS","location":"docs/net.corda.testing.driver.internal/-in-process-impl/use-h-t-t-p-s.html","searchKeys":["useHTTPS","open override val useHTTPS: Boolean","net.corda.testing.driver.internal.InProcessImpl.useHTTPS"]},{"name":"open override val useHTTPS: Boolean","description":"net.corda.testing.driver.internal.OutOfProcessImpl.useHTTPS","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/use-h-t-t-p-s.html","searchKeys":["useHTTPS","open override val useHTTPS: Boolean","net.corda.testing.driver.internal.OutOfProcessImpl.useHTTPS"]},{"name":"open override val validatedTransactions: TransactionStorage","description":"net.corda.testing.node.MockServices.validatedTransactions","location":"docs/net.corda.testing.node/-mock-services/validated-transactions.html","searchKeys":["validatedTransactions","open override val validatedTransactions: TransactionStorage","net.corda.testing.node.MockServices.validatedTransactions"]},{"name":"open override val vaultService: VaultService","description":"net.corda.testing.node.MockServices.vaultService","location":"docs/net.corda.testing.node/-mock-services/vault-service.html","searchKeys":["vaultService","open override val vaultService: VaultService","net.corda.testing.node.MockServices.vaultService"]},{"name":"open override val vendor: String","description":"net.corda.core.cordapp.Cordapp.Info.Contract.vendor","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/vendor.html","searchKeys":["vendor","open override val vendor: String","net.corda.core.cordapp.Cordapp.Info.Contract.vendor"]},{"name":"open override val vendor: String","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.vendor","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/vendor.html","searchKeys":["vendor","open override val vendor: String","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.vendor"]},{"name":"open override val vendor: String","description":"net.corda.core.cordapp.Cordapp.Info.Default.vendor","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/vendor.html","searchKeys":["vendor","open override val vendor: String","net.corda.core.cordapp.Cordapp.Info.Default.vendor"]},{"name":"open override val vendor: String","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.vendor","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/vendor.html","searchKeys":["vendor","open override val vendor: String","net.corda.core.cordapp.Cordapp.Info.Workflow.vendor"]},{"name":"open override val version: String","description":"net.corda.core.cordapp.Cordapp.Info.Contract.version","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/version.html","searchKeys":["version","open override val version: String","net.corda.core.cordapp.Cordapp.Info.Contract.version"]},{"name":"open override val version: String","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.version","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/version.html","searchKeys":["version","open override val version: String","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.version"]},{"name":"open override val version: String","description":"net.corda.core.cordapp.Cordapp.Info.Default.version","location":"docs/net.corda.core.cordapp/-cordapp/-info/-default/version.html","searchKeys":["version","open override val version: String","net.corda.core.cordapp.Cordapp.Info.Default.version"]},{"name":"open override val version: String","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.version","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/version.html","searchKeys":["version","open override val version: String","net.corda.core.cordapp.Cordapp.Info.Workflow.version"]},{"name":"open override val webAddress: NetworkHostAndPort","description":"net.corda.testing.driver.internal.InProcessImpl.webAddress","location":"docs/net.corda.testing.driver.internal/-in-process-impl/web-address.html","searchKeys":["webAddress","open override val webAddress: NetworkHostAndPort","net.corda.testing.driver.internal.InProcessImpl.webAddress"]},{"name":"open override val webAddress: NetworkHostAndPort","description":"net.corda.testing.driver.internal.OutOfProcessImpl.webAddress","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/web-address.html","searchKeys":["webAddress","open override val webAddress: NetworkHostAndPort","net.corda.testing.driver.internal.OutOfProcessImpl.webAddress"]},{"name":"open override var currentHash: SecureHash","description":"net.corda.testing.node.internal.MockNetworkParametersStorage.currentHash","location":"docs/net.corda.testing.node.internal/-mock-network-parameters-storage/current-hash.html","searchKeys":["currentHash","open override var currentHash: SecureHash","net.corda.testing.node.internal.MockNetworkParametersStorage.currentHash"]},{"name":"open override var networkParametersService: NetworkParametersService","description":"net.corda.testing.node.MockServices.networkParametersService","location":"docs/net.corda.testing.node/-mock-services/network-parameters-service.html","searchKeys":["networkParametersService","open override var networkParametersService: NetworkParametersService","net.corda.testing.node.MockServices.networkParametersService"]},{"name":"open override var originalExceptionClassName: String?","description":"net.corda.core.CordaException.originalExceptionClassName","location":"docs/net.corda.core/-corda-exception/original-exception-class-name.html","searchKeys":["originalExceptionClassName","open override var originalExceptionClassName: String?","net.corda.core.CordaException.originalExceptionClassName"]},{"name":"open override var originalExceptionClassName: String?","description":"net.corda.core.CordaRuntimeException.originalExceptionClassName","location":"docs/net.corda.core/-corda-runtime-exception/original-exception-class-name.html","searchKeys":["originalExceptionClassName","open override var originalExceptionClassName: String?","net.corda.core.CordaRuntimeException.originalExceptionClassName"]},{"name":"open override var participants: MutableSet<AbstractParty>?","description":"net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState.participants","location":"docs/net.corda.testing.internal.vault/-dummy-deal-state-schema-v1/-persistent-dummy-deal-state/participants.html","searchKeys":["participants","open override var participants: MutableSet<AbstractParty>?","net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState.participants"]},{"name":"open override var participants: MutableSet<AbstractParty>?","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.participants","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/participants.html","searchKeys":["participants","open override var participants: MutableSet<AbstractParty>?","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.participants"]},{"name":"open override var participants: MutableSet<AbstractParty?>?","description":"net.corda.finance.test.SampleCashSchemaV2.PersistentCashState.participants","location":"docs/net.corda.finance.test/-sample-cash-schema-v2/-persistent-cash-state/participants.html","searchKeys":["participants","open override var participants: MutableSet<AbstractParty?>?","net.corda.finance.test.SampleCashSchemaV2.PersistentCashState.participants"]},{"name":"open override var stateRef: PersistentStateRef?","description":"net.corda.core.schemas.PersistentState.stateRef","location":"docs/net.corda.core.schemas/-persistent-state/state-ref.html","searchKeys":["stateRef","open override var stateRef: PersistentStateRef?","net.corda.core.schemas.PersistentState.stateRef"]},{"name":"open val additionalHeaders: Map<String, String>","description":"net.corda.testing.node.internal.InMemoryMessage.additionalHeaders","location":"docs/net.corda.testing.node.internal/-in-memory-message/additional-headers.html","searchKeys":["additionalHeaders","open val additionalHeaders: Map<String, String>","net.corda.testing.node.internal.InMemoryMessage.additionalHeaders"]},{"name":"open val attachmentsClassLoaderCache: AttachmentsClassLoaderCache?","description":"net.corda.core.internal.verification.VerificationSupport.attachmentsClassLoaderCache","location":"docs/net.corda.core.internal.verification/-verification-support/attachments-class-loader-cache.html","searchKeys":["attachmentsClassLoaderCache","open val attachmentsClassLoaderCache: AttachmentsClassLoaderCache?","net.corda.core.internal.verification.VerificationSupport.attachmentsClassLoaderCache"]},{"name":"open val changes: <Error class: unknown class><ProgressTracker.Change>","description":"net.corda.core.utilities.ProgressTracker.Step.changes","location":"docs/net.corda.core.utilities/-progress-tracker/-step/changes.html","searchKeys":["changes","open val changes: <Error class: unknown class><ProgressTracker.Change>","net.corda.core.utilities.ProgressTracker.Step.changes"]},{"name":"open val componentGroups: List<ComponentGroup>","description":"net.corda.core.transactions.TraversableTransaction.componentGroups","location":"docs/net.corda.core.transactions/-traversable-transaction/component-groups.html","searchKeys":["componentGroups","open val componentGroups: List<ComponentGroup>","net.corda.core.transactions.TraversableTransaction.componentGroups"]},{"name":"open val components: List<OpaqueBytes>","description":"net.corda.core.transactions.ComponentGroup.components","location":"docs/net.corda.core.transactions/-component-group/components.html","searchKeys":["components","open val components: List<OpaqueBytes>","net.corda.core.transactions.ComponentGroup.components"]},{"name":"open val connectionMaxRetryInterval: Duration","description":"net.corda.client.rpc.CordaRPCClientConfiguration.connectionMaxRetryInterval","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/connection-max-retry-interval.html","searchKeys":["connectionMaxRetryInterval","open val connectionMaxRetryInterval: Duration","net.corda.client.rpc.CordaRPCClientConfiguration.connectionMaxRetryInterval"]},{"name":"open val connectionRetryInterval: Duration","description":"net.corda.client.rpc.CordaRPCClientConfiguration.connectionRetryInterval","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/connection-retry-interval.html","searchKeys":["connectionRetryInterval","open val connectionRetryInterval: Duration","net.corda.client.rpc.CordaRPCClientConfiguration.connectionRetryInterval"]},{"name":"open val connectionRetryIntervalMultiplier: Double = 1.5","description":"net.corda.client.rpc.CordaRPCClientConfiguration.connectionRetryIntervalMultiplier","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/connection-retry-interval-multiplier.html","searchKeys":["connectionRetryIntervalMultiplier","open val connectionRetryIntervalMultiplier: Double = 1.5","net.corda.client.rpc.CordaRPCClientConfiguration.connectionRetryIntervalMultiplier"]},{"name":"open val constraintTypes: Set<Vault.ConstraintInfo.Type>","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.constraintTypes","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/constraint-types.html","searchKeys":["constraintTypes","open val constraintTypes: Set<Vault.ConstraintInfo.Type>","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.constraintTypes"]},{"name":"open val constraints: Set<Vault.ConstraintInfo>","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.constraints","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/constraints.html","searchKeys":["constraints","open val constraints: Set<Vault.ConstraintInfo>","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.constraints"]},{"name":"open val copyBaggageToTags: Boolean = false","description":"net.corda.client.rpc.CordaRPCClientConfiguration.copyBaggageToTags","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/copy-baggage-to-tags.html","searchKeys":["copyBaggageToTags","open val copyBaggageToTags: Boolean = false","net.corda.client.rpc.CordaRPCClientConfiguration.copyBaggageToTags"]},{"name":"open val cordaRPCOps: CordaRPCOps","description":"net.corda.testing.node.internal.TestStartedNode.cordaRPCOps","location":"docs/net.corda.testing.node.internal/-test-started-node/corda-r-p-c-ops.html","searchKeys":["cordaRPCOps","open val cordaRPCOps: CordaRPCOps","net.corda.testing.node.internal.TestStartedNode.cordaRPCOps"]},{"name":"open val data: ByteSequence","description":"net.corda.testing.node.internal.InMemoryMessage.data","location":"docs/net.corda.testing.node.internal/-in-memory-message/data.html","searchKeys":["data","open val data: ByteSequence","net.corda.testing.node.internal.InMemoryMessage.data"]},{"name":"open val debugTimestamp: Instant","description":"net.corda.testing.node.internal.InMemoryMessage.debugTimestamp","location":"docs/net.corda.testing.node.internal/-in-memory-message/debug-timestamp.html","searchKeys":["debugTimestamp","open val debugTimestamp: Instant","net.corda.testing.node.internal.InMemoryMessage.debugTimestamp"]},{"name":"open val deduplicationCacheExpiry: Duration","description":"net.corda.client.rpc.CordaRPCClientConfiguration.deduplicationCacheExpiry","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/deduplication-cache-expiry.html","searchKeys":["deduplicationCacheExpiry","open val deduplicationCacheExpiry: Duration","net.corda.client.rpc.CordaRPCClientConfiguration.deduplicationCacheExpiry"]},{"name":"open val defaultNotaryHandle: NotaryHandle","description":"net.corda.testing.driver.DriverDSL.defaultNotaryHandle","location":"docs/net.corda.testing.driver/-driver-d-s-l/default-notary-handle.html","searchKeys":["defaultNotaryHandle","open val defaultNotaryHandle: NotaryHandle","net.corda.testing.driver.DriverDSL.defaultNotaryHandle"]},{"name":"open val defaultNotaryIdentity: Party","description":"net.corda.testing.driver.DriverDSL.defaultNotaryIdentity","location":"docs/net.corda.testing.driver/-driver-d-s-l/default-notary-identity.html","searchKeys":["defaultNotaryIdentity","open val defaultNotaryIdentity: Party","net.corda.testing.driver.DriverDSL.defaultNotaryIdentity"]},{"name":"open val defaultNotaryNode: CordaFuture<NodeHandle>","description":"net.corda.testing.driver.DriverDSL.defaultNotaryNode","location":"docs/net.corda.testing.driver/-driver-d-s-l/default-notary-node.html","searchKeys":["defaultNotaryNode","open val defaultNotaryNode: CordaFuture<NodeHandle>","net.corda.testing.driver.DriverDSL.defaultNotaryNode"]},{"name":"open val exactParticipants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.exactParticipants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/exact-participants.html","searchKeys":["exactParticipants","open val exactParticipants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.exactParticipants"]},{"name":"open val externalIds: List<UUID>","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.externalIds","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/external-ids.html","searchKeys":["externalIds","open val externalIds: List<UUID>","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.externalIds"]},{"name":"open val extraAuditData: Map<String, String>","description":"net.corda.core.utilities.ProgressTracker.Step.extraAuditData","location":"docs/net.corda.core.utilities/-progress-tracker/-step/extra-audit-data.html","searchKeys":["extraAuditData","open val extraAuditData: Map<String, String>","net.corda.core.utilities.ProgressTracker.Step.extraAuditData"]},{"name":"open val groupIndex: Int","description":"net.corda.core.transactions.ComponentGroup.groupIndex","location":"docs/net.corda.core.transactions/-component-group/group-index.html","searchKeys":["groupIndex","open val groupIndex: Int","net.corda.core.transactions.ComponentGroup.groupIndex"]},{"name":"open val identityService: IdentityService","description":"net.corda.testing.node.internal.MockKeyManagementService.identityService","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/identity-service.html","searchKeys":["identityService","open val identityService: IdentityService","net.corda.testing.node.internal.MockKeyManagementService.identityService"]},{"name":"open val initiatingFlows: <Error class: unknown class>","description":"net.corda.core.internal.notary.NotaryService.initiatingFlows","location":"docs/net.corda.core.internal.notary/-notary-service/initiating-flows.html","searchKeys":["initiatingFlows","open val initiatingFlows: <Error class: unknown class>","net.corda.core.internal.notary.NotaryService.initiatingFlows"]},{"name":"open val isInProcess: Boolean","description":"net.corda.core.internal.verification.VerificationSupport.isInProcess","location":"docs/net.corda.core.internal.verification/-verification-support/is-in-process.html","searchKeys":["isInProcess","open val isInProcess: Boolean","net.corda.core.internal.verification.VerificationSupport.isInProcess"]},{"name":"open val journalBufferTimeout: Int = 0","description":"net.corda.testing.node.internal.InProcessNode.journalBufferTimeout","location":"docs/net.corda.testing.node.internal/-in-process-node/journal-buffer-timeout.html","searchKeys":["journalBufferTimeout","open val journalBufferTimeout: Int = 0","net.corda.testing.node.internal.InProcessNode.journalBufferTimeout"]},{"name":"open val keys: Set<PublicKey>","description":"net.corda.testing.node.internal.MockKeyManagementService.keys","location":"docs/net.corda.testing.node.internal/-mock-key-management-service/keys.html","searchKeys":["keys","open val keys: Set<PublicKey>","net.corda.testing.node.internal.MockKeyManagementService.keys"]},{"name":"open val label: String","description":"net.corda.core.utilities.ProgressTracker.Step.label","location":"docs/net.corda.core.utilities/-progress-tracker/-step/label.html","searchKeys":["label","open val label: String","net.corda.core.utilities.ProgressTracker.Step.label"]},{"name":"open val log: <Error class: unknown class>","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.log","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/log.html","searchKeys":["log","open val log: <Error class: unknown class>","net.corda.testing.node.internal.InternalMockNetwork.MockNode.log"]},{"name":"open val maxFileSize: Int = 10485760","description":"net.corda.client.rpc.CordaRPCClientConfiguration.maxFileSize","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/max-file-size.html","searchKeys":["maxFileSize","open val maxFileSize: Int = 10485760","net.corda.client.rpc.CordaRPCClientConfiguration.maxFileSize"]},{"name":"open val maxReconnectAttempts: Int","description":"net.corda.client.rpc.CordaRPCClientConfiguration.maxReconnectAttempts","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/max-reconnect-attempts.html","searchKeys":["maxReconnectAttempts","open val maxReconnectAttempts: Int","net.corda.client.rpc.CordaRPCClientConfiguration.maxReconnectAttempts"]},{"name":"open val migrationResource: String? = null","description":"net.corda.core.schemas.MappedSchema.migrationResource","location":"docs/net.corda.core.schemas/-mapped-schema/migration-resource.html","searchKeys":["migrationResource","open val migrationResource: String? = null","net.corda.core.schemas.MappedSchema.migrationResource"]},{"name":"open val minimumServerProtocolVersion: Int","description":"net.corda.client.rpc.CordaRPCClientConfiguration.minimumServerProtocolVersion","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/minimum-server-protocol-version.html","searchKeys":["minimumServerProtocolVersion","open val minimumServerProtocolVersion: Int","net.corda.client.rpc.CordaRPCClientConfiguration.minimumServerProtocolVersion"]},{"name":"open val myAddress: InMemoryMessagingNetwork.PeerHandle","description":"net.corda.testing.node.internal.MockNodeMessagingService.myAddress","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/my-address.html","searchKeys":["myAddress","open val myAddress: InMemoryMessagingNetwork.PeerHandle","net.corda.testing.node.internal.MockNodeMessagingService.myAddress"]},{"name":"open val observationExecutorPoolSize: Int = 4","description":"net.corda.client.rpc.CordaRPCClientConfiguration.observationExecutorPoolSize","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/observation-executor-pool-size.html","searchKeys":["observationExecutorPoolSize","open val observationExecutorPoolSize: Int = 4","net.corda.client.rpc.CordaRPCClientConfiguration.observationExecutorPoolSize"]},{"name":"open val openTelemetryEnabled: Boolean = true","description":"net.corda.client.rpc.CordaRPCClientConfiguration.openTelemetryEnabled","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/open-telemetry-enabled.html","searchKeys":["openTelemetryEnabled","open val openTelemetryEnabled: Boolean = true","net.corda.client.rpc.CordaRPCClientConfiguration.openTelemetryEnabled"]},{"name":"open val ourSenderUUID: String","description":"net.corda.testing.node.internal.MockNodeMessagingService.ourSenderUUID","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/our-sender-u-u-i-d.html","searchKeys":["ourSenderUUID","open val ourSenderUUID: String","net.corda.testing.node.internal.MockNodeMessagingService.ourSenderUUID"]},{"name":"open val participants: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.participants","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/participants.html","searchKeys":["participants","open val participants: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.participants"]},{"name":"open val progressTracker: ProgressTracker?","description":"net.corda.core.flows.FlowLogic.progressTracker","location":"docs/net.corda.core.flows/-flow-logic/progress-tracker.html","searchKeys":["progressTracker","open val progressTracker: ProgressTracker?","net.corda.core.flows.FlowLogic.progressTracker"]},{"name":"open val reapInterval: Duration","description":"net.corda.client.rpc.CordaRPCClientConfiguration.reapInterval","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/reap-interval.html","searchKeys":["reapInterval","open val reapInterval: Duration","net.corda.client.rpc.CordaRPCClientConfiguration.reapInterval"]},{"name":"open val relevancyStatus: Vault.RelevancyStatus","description":"net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.relevancyStatus","location":"docs/net.corda.core.node.services.vault/-query-criteria/-common-query-criteria/relevancy-status.html","searchKeys":["relevancyStatus","open val relevancyStatus: Vault.RelevancyStatus","net.corda.core.node.services.vault.QueryCriteria.CommonQueryCriteria.relevancyStatus"]},{"name":"open val runMigrationScripts: Boolean = true","description":"net.corda.testing.node.internal.InProcessNode.runMigrationScripts","location":"docs/net.corda.testing.node.internal/-in-process-node/run-migration-scripts.html","searchKeys":["runMigrationScripts","open val runMigrationScripts: Boolean = true","net.corda.testing.node.internal.InProcessNode.runMigrationScripts"]},{"name":"open val runMigrationScripts: Boolean = true","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.runMigrationScripts","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/run-migration-scripts.html","searchKeys":["runMigrationScripts","open val runMigrationScripts: Boolean = true","net.corda.testing.node.internal.InternalMockNetwork.MockNode.runMigrationScripts"]},{"name":"open val rxIoScheduler: <Error class: unknown class>","description":"net.corda.testing.node.internal.InProcessNode.rxIoScheduler","location":"docs/net.corda.testing.node.internal/-in-process-node/rx-io-scheduler.html","searchKeys":["rxIoScheduler","open val rxIoScheduler: <Error class: unknown class>","net.corda.testing.node.internal.InProcessNode.rxIoScheduler"]},{"name":"open val rxIoScheduler: <Error class: unknown class>","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.rxIoScheduler","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/rx-io-scheduler.html","searchKeys":["rxIoScheduler","open val rxIoScheduler: <Error class: unknown class>","net.corda.testing.node.internal.InternalMockNetwork.MockNode.rxIoScheduler"]},{"name":"open val senderUUID: String? = null","description":"net.corda.testing.node.internal.InMemoryMessage.senderUUID","location":"docs/net.corda.testing.node.internal/-in-memory-message/sender-u-u-i-d.html","searchKeys":["senderUUID","open val senderUUID: String? = null","net.corda.testing.node.internal.InMemoryMessage.senderUUID"]},{"name":"open val serializationWhitelists: List<SerializationWhitelist>","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.serializationWhitelists","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/serialization-whitelists.html","searchKeys":["serializationWhitelists","open val serializationWhitelists: List<SerializationWhitelist>","net.corda.testing.node.internal.InternalMockNetwork.MockNode.serializationWhitelists"]},{"name":"open val simpleLogTelemetryEnabled: Boolean = false","description":"net.corda.client.rpc.CordaRPCClientConfiguration.simpleLogTelemetryEnabled","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/simple-log-telemetry-enabled.html","searchKeys":["simpleLogTelemetryEnabled","open val simpleLogTelemetryEnabled: Boolean = false","net.corda.client.rpc.CordaRPCClientConfiguration.simpleLogTelemetryEnabled"]},{"name":"open val size: Int","description":"net.corda.core.internal.LazyMappedList.size","location":"docs/net.corda.core.internal/-lazy-mapped-list/size.html","searchKeys":["size","open val size: Int","net.corda.core.internal.LazyMappedList.size"]},{"name":"open val spanStartEndEventsEnabled: Boolean = false","description":"net.corda.client.rpc.CordaRPCClientConfiguration.spanStartEndEventsEnabled","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/span-start-end-events-enabled.html","searchKeys":["spanStartEndEventsEnabled","open val spanStartEndEventsEnabled: Boolean = false","net.corda.client.rpc.CordaRPCClientConfiguration.spanStartEndEventsEnabled"]},{"name":"open val started: TestStartedNode?","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.started","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/started.html","searchKeys":["started","open val started: TestStartedNode?","net.corda.testing.node.internal.InternalMockNetwork.MockNode.started"]},{"name":"open val topic: String","description":"net.corda.testing.node.internal.InMemoryMessage.topic","location":"docs/net.corda.testing.node.internal/-in-memory-message/topic.html","searchKeys":["topic","open val topic: String","net.corda.testing.node.internal.InMemoryMessage.topic"]},{"name":"open val trackRpcCallSites: Boolean","description":"net.corda.client.rpc.CordaRPCClientConfiguration.trackRpcCallSites","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/track-rpc-call-sites.html","searchKeys":["trackRpcCallSites","open val trackRpcCallSites: Boolean","net.corda.client.rpc.CordaRPCClientConfiguration.trackRpcCallSites"]},{"name":"open val uniqueMessageId: <Error class: unknown class>","description":"net.corda.testing.node.internal.InMemoryMessage.uniqueMessageId","location":"docs/net.corda.testing.node.internal/-in-memory-message/unique-message-id.html","searchKeys":["uniqueMessageId","open val uniqueMessageId: <Error class: unknown class>","net.corda.testing.node.internal.InMemoryMessage.uniqueMessageId"]},{"name":"open val updates: <Error class: unknown class><SignedTransaction>","description":"net.corda.testing.node.internal.MockTransactionStorage.updates","location":"docs/net.corda.testing.node.internal/-mock-transaction-storage/updates.html","searchKeys":["updates","open val updates: <Error class: unknown class><SignedTransaction>","net.corda.testing.node.internal.MockTransactionStorage.updates"]},{"name":"operator fun Duration.div(divider: Long): Duration","description":"net.corda.core.internal.div","location":"docs/net.corda.core.internal/div.html","searchKeys":["div","operator fun Duration.div(divider: Long): Duration","net.corda.core.internal.div"]},{"name":"operator fun Duration.times(multiplicand: Double): Duration","description":"net.corda.core.internal.times","location":"docs/net.corda.core.internal/times.html","searchKeys":["times","operator fun Duration.times(multiplicand: Double): Duration","net.corda.core.internal.times"]},{"name":"operator fun Duration.times(multiplicand: Long): Duration","description":"net.corda.core.internal.times","location":"docs/net.corda.core.internal/times.html","searchKeys":["times","operator fun Duration.times(multiplicand: Long): Duration","net.corda.core.internal.times"]},{"name":"operator fun KeyPair.component1(): PrivateKey","description":"net.corda.core.crypto.component1","location":"docs/net.corda.core.crypto/component1.html","searchKeys":["component1","operator fun KeyPair.component1(): PrivateKey","net.corda.core.crypto.component1"]},{"name":"operator fun KeyPair.component2(): PublicKey","description":"net.corda.core.crypto.component2","location":"docs/net.corda.core.crypto/component2.html","searchKeys":["component2","operator fun KeyPair.component2(): PublicKey","net.corda.core.crypto.component2"]},{"name":"operator fun Manifest.get(key: String): String?","description":"net.corda.core.internal.cordapp.get","location":"docs/net.corda.core.internal.cordapp/get.html","searchKeys":["get","operator fun Manifest.get(key: String): String?","net.corda.core.internal.cordapp.get"]},{"name":"operator fun Manifest.set(key: Attributes.Name, value: String): Any?","description":"net.corda.core.internal.cordapp.set","location":"docs/net.corda.core.internal.cordapp/set.html","searchKeys":["set","operator fun Manifest.set(key: Attributes.Name, value: String): Any?","net.corda.core.internal.cordapp.set"]},{"name":"operator fun Manifest.set(key: String, value: String): String?","description":"net.corda.core.internal.cordapp.set","location":"docs/net.corda.core.internal.cordapp/set.html","searchKeys":["set","operator fun Manifest.set(key: String, value: String): String?","net.corda.core.internal.cordapp.set"]},{"name":"operator fun component1(): Duration","description":"net.corda.client.rpc.CordaRPCClientConfiguration.component1","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/component1.html","searchKeys":["component1","operator fun component1(): Duration","net.corda.client.rpc.CordaRPCClientConfiguration.component1"]},{"name":"operator fun component1(): List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component1","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component1.html","searchKeys":["component1","operator fun component1(): List<StateAndRef<ContractState>>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component1"]},{"name":"operator fun component1(): List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.LedgerTransaction.component1","location":"docs/net.corda.core.transactions/-ledger-transaction/component1.html","searchKeys":["component1","operator fun component1(): List<StateAndRef<ContractState>>","net.corda.core.transactions.LedgerTransaction.component1"]},{"name":"operator fun component1(): List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.component1","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/component1.html","searchKeys":["component1","operator fun component1(): List<StateAndRef<ContractState>>","net.corda.core.transactions.NotaryChangeLedgerTransaction.component1"]},{"name":"operator fun component1(): Party","description":"net.corda.core.identity.PartyAndCertificate.component1","location":"docs/net.corda.core.identity/-party-and-certificate/component1.html","searchKeys":["component1","operator fun component1(): Party","net.corda.core.identity.PartyAndCertificate.component1"]},{"name":"operator fun component10(): List<StateAndRef<ContractState>>","description":"net.corda.core.transactions.LedgerTransaction.component10","location":"docs/net.corda.core.transactions/-ledger-transaction/component10.html","searchKeys":["component10","operator fun component10(): List<StateAndRef<ContractState>>","net.corda.core.transactions.LedgerTransaction.component10"]},{"name":"operator fun component2(): List<TransactionState<ContractState>>","description":"net.corda.core.transactions.LedgerTransaction.component2","location":"docs/net.corda.core.transactions/-ledger-transaction/component2.html","searchKeys":["component2","operator fun component2(): List<TransactionState<ContractState>>","net.corda.core.transactions.LedgerTransaction.component2"]},{"name":"operator fun component2(): Party","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component2","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component2.html","searchKeys":["component2","operator fun component2(): Party","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component2"]},{"name":"operator fun component2(): Party","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.component2","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/component2.html","searchKeys":["component2","operator fun component2(): Party","net.corda.core.transactions.NotaryChangeLedgerTransaction.component2"]},{"name":"operator fun component2(): X509Certificate","description":"net.corda.core.identity.PartyAndCertificate.component2","location":"docs/net.corda.core.identity/-party-and-certificate/component2.html","searchKeys":["component2","operator fun component2(): X509Certificate","net.corda.core.identity.PartyAndCertificate.component2"]},{"name":"operator fun component3(): Attachment","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component3","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component3.html","searchKeys":["component3","operator fun component3(): Attachment","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component3"]},{"name":"operator fun component3(): List<CommandWithParties<CommandData>>","description":"net.corda.core.transactions.LedgerTransaction.component3","location":"docs/net.corda.core.transactions/-ledger-transaction/component3.html","searchKeys":["component3","operator fun component3(): List<CommandWithParties<CommandData>>","net.corda.core.transactions.LedgerTransaction.component3"]},{"name":"operator fun component3(): Party","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.component3","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/component3.html","searchKeys":["component3","operator fun component3(): Party","net.corda.core.transactions.NotaryChangeLedgerTransaction.component3"]},{"name":"operator fun component4(): ContractClassName","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component4","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component4.html","searchKeys":["component4","operator fun component4(): ContractClassName","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component4"]},{"name":"operator fun component4(): List<Attachment>","description":"net.corda.core.transactions.LedgerTransaction.component4","location":"docs/net.corda.core.transactions/-ledger-transaction/component4.html","searchKeys":["component4","operator fun component4(): List<Attachment>","net.corda.core.transactions.LedgerTransaction.component4"]},{"name":"operator fun component4(): SecureHash","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.component4","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/component4.html","searchKeys":["component4","operator fun component4(): SecureHash","net.corda.core.transactions.NotaryChangeLedgerTransaction.component4"]},{"name":"operator fun component5(): Attachment","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component5","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component5.html","searchKeys":["component5","operator fun component5(): Attachment","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component5"]},{"name":"operator fun component5(): List<TransactionSignature>","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.component5","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/component5.html","searchKeys":["component5","operator fun component5(): List<TransactionSignature>","net.corda.core.transactions.NotaryChangeLedgerTransaction.component5"]},{"name":"operator fun component5(): SecureHash","description":"net.corda.core.transactions.LedgerTransaction.component5","location":"docs/net.corda.core.transactions/-ledger-transaction/component5.html","searchKeys":["component5","operator fun component5(): SecureHash","net.corda.core.transactions.LedgerTransaction.component5"]},{"name":"operator fun component6(): NetworkParameters?","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.component6","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/component6.html","searchKeys":["component6","operator fun component6(): NetworkParameters?","net.corda.core.transactions.NotaryChangeLedgerTransaction.component6"]},{"name":"operator fun component6(): Party?","description":"net.corda.core.transactions.LedgerTransaction.component6","location":"docs/net.corda.core.transactions/-ledger-transaction/component6.html","searchKeys":["component6","operator fun component6(): Party?","net.corda.core.transactions.LedgerTransaction.component6"]},{"name":"operator fun component6(): SecureHash","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component6","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component6.html","searchKeys":["component6","operator fun component6(): SecureHash","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component6"]},{"name":"operator fun component7(): PrivacySalt","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component7","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component7.html","searchKeys":["component7","operator fun component7(): PrivacySalt","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component7"]},{"name":"operator fun component7(): TimeWindow?","description":"net.corda.core.transactions.LedgerTransaction.component7","location":"docs/net.corda.core.transactions/-ledger-transaction/component7.html","searchKeys":["component7","operator fun component7(): TimeWindow?","net.corda.core.transactions.LedgerTransaction.component7"]},{"name":"operator fun component8(): List<TransactionSignature>","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component8","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component8.html","searchKeys":["component8","operator fun component8(): List<TransactionSignature>","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component8"]},{"name":"operator fun component8(): PrivacySalt","description":"net.corda.core.transactions.LedgerTransaction.component8","location":"docs/net.corda.core.transactions/-ledger-transaction/component8.html","searchKeys":["component8","operator fun component8(): PrivacySalt","net.corda.core.transactions.LedgerTransaction.component8"]},{"name":"operator fun component9(): NetworkParameters","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.component9","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/component9.html","searchKeys":["component9","operator fun component9(): NetworkParameters","net.corda.core.transactions.ContractUpgradeLedgerTransaction.component9"]},{"name":"operator fun component9(): NetworkParameters?","description":"net.corda.core.transactions.LedgerTransaction.component9","location":"docs/net.corda.core.transactions/-ledger-transaction/component9.html","searchKeys":["component9","operator fun component9(): NetworkParameters?","net.corda.core.transactions.LedgerTransaction.component9"]},{"name":"operator fun div(other: Curve25519.ModP): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.div","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/div.html","searchKeys":["div","operator fun div(other: Curve25519.ModP): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.div"]},{"name":"operator fun getValue(thisRef: Any?, property: KProperty<*>): T?","description":"net.corda.core.internal.ToggleField.getValue","location":"docs/net.corda.core.internal/-toggle-field/get-value.html","searchKeys":["getValue","operator fun getValue(thisRef: Any?, property: KProperty<*>): T?","net.corda.core.internal.ToggleField.getValue"]},{"name":"operator fun invoke(): Any?","description":"net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.invoke","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-parsed-method-call/invoke.html","searchKeys":["invoke","operator fun invoke(): Any?","net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.invoke"]},{"name":"operator fun minus(other: Amount<T>): Amount<T>","description":"net.corda.core.contracts.Amount.minus","location":"docs/net.corda.core.contracts/-amount/minus.html","searchKeys":["minus","operator fun minus(other: Amount<T>): Amount<T>","net.corda.core.contracts.Amount.minus"]},{"name":"operator fun minus(other: Curve25519.ModP): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.minus","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/minus.html","searchKeys":["minus","operator fun minus(other: Curve25519.ModP): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.minus"]},{"name":"operator fun minus(other: Int): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.minus","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/minus.html","searchKeys":["minus","operator fun minus(other: Int): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.minus"]},{"name":"operator fun plus(other: Amount<T>): Amount<T>","description":"net.corda.core.contracts.Amount.plus","location":"docs/net.corda.core.contracts/-amount/plus.html","searchKeys":["plus","operator fun plus(other: Amount<T>): Amount<T>","net.corda.core.contracts.Amount.plus"]},{"name":"operator fun plus(other: AmountTransfer<T, P>): AmountTransfer<T, P>","description":"net.corda.core.contracts.AmountTransfer.plus","location":"docs/net.corda.core.contracts/-amount-transfer/plus.html","searchKeys":["plus","operator fun plus(other: AmountTransfer<T, P>): AmountTransfer<T, P>","net.corda.core.contracts.AmountTransfer.plus"]},{"name":"operator fun plus(other: BusinessCalendar): BusinessCalendar","description":"net.corda.finance.contracts.BusinessCalendar.plus","location":"docs/net.corda.finance.contracts/-business-calendar/plus.html","searchKeys":["plus","operator fun plus(other: BusinessCalendar): BusinessCalendar","net.corda.finance.contracts.BusinessCalendar.plus"]},{"name":"operator fun plus(other: Curve25519.ModP): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.plus","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/plus.html","searchKeys":["plus","operator fun plus(other: Curve25519.ModP): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.plus"]},{"name":"operator fun plus(other: Int): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.plus","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/plus.html","searchKeys":["plus","operator fun plus(other: Int): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.plus"]},{"name":"operator fun plus(rhs: Vault.Update<U>): Vault.Update<U>","description":"net.corda.core.node.services.Vault.Update.plus","location":"docs/net.corda.core.node.services/-vault/-update/plus.html","searchKeys":["plus","operator fun plus(rhs: Vault.Update<U>): Vault.Update<U>","net.corda.core.node.services.Vault.Update.plus"]},{"name":"operator fun plus(sig: TransactionSignature): SignedTransaction","description":"net.corda.core.transactions.SignedTransaction.plus","location":"docs/net.corda.core.transactions/-signed-transaction/plus.html","searchKeys":["plus","operator fun plus(sig: TransactionSignature): SignedTransaction","net.corda.core.transactions.SignedTransaction.plus"]},{"name":"operator fun plus(sigList: Collection<TransactionSignature>): SignedTransaction","description":"net.corda.core.transactions.SignedTransaction.plus","location":"docs/net.corda.core.transactions/-signed-transaction/plus.html","searchKeys":["plus","operator fun plus(sigList: Collection<TransactionSignature>): SignedTransaction","net.corda.core.transactions.SignedTransaction.plus"]},{"name":"operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T?): <Error class: unknown class>","description":"net.corda.core.internal.ToggleField.setValue","location":"docs/net.corda.core.internal/-toggle-field/set-value.html","searchKeys":["setValue","operator fun setValue(thisRef: Any?, property: KProperty<*>, value: T?): <Error class: unknown class>","net.corda.core.internal.ToggleField.setValue"]},{"name":"operator fun times(other: Curve25519.ModP): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.times","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/times.html","searchKeys":["times","operator fun times(other: Curve25519.ModP): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.times"]},{"name":"operator fun times(other: Int): Amount<T>","description":"net.corda.core.contracts.Amount.times","location":"docs/net.corda.core.contracts/-amount/times.html","searchKeys":["times","operator fun times(other: Int): Amount<T>","net.corda.core.contracts.Amount.times"]},{"name":"operator fun times(other: Long): Amount<T>","description":"net.corda.core.contracts.Amount.times","location":"docs/net.corda.core.contracts/-amount/times.html","searchKeys":["times","operator fun times(other: Long): Amount<T>","net.corda.core.contracts.Amount.times"]},{"name":"operator fun unaryMinus(): Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.ModP.unaryMinus","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/unary-minus.html","searchKeys":["unaryMinus","operator fun unaryMinus(): Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.ModP.unaryMinus"]},{"name":"operator override fun equals(other: Any?): Boolean","description":"net.corda.core.utilities.Id.equals","location":"docs/net.corda.core.utilities/-id/equals.html","searchKeys":["equals","operator override fun equals(other: Any?): Boolean","net.corda.core.utilities.Id.equals"]},{"name":"override fun hashCode(): Int","description":"net.corda.core.utilities.Id.hashCode","location":"docs/net.corda.core.utilities/-id/hash-code.html","searchKeys":["hashCode","override fun hashCode(): Int","net.corda.core.utilities.Id.hashCode"]},{"name":"override fun toString(): String","description":"net.corda.core.utilities.Id.toString","location":"docs/net.corda.core.utilities/-id/to-string.html","searchKeys":["toString","override fun toString(): String","net.corda.core.utilities.Id.toString"]},{"name":"override fun verify()","description":"net.corda.core.internal.verification.AbstractVerifier.verify","location":"docs/net.corda.core.internal.verification/-abstract-verifier/verify.html","searchKeys":["verify","override fun verify()","net.corda.core.internal.verification.AbstractVerifier.verify"]},{"name":"override val attachments: MockAttachmentStorage","description":"net.corda.testing.node.MockServices.attachments","location":"docs/net.corda.testing.node/-mock-services/attachments.html","searchKeys":["attachments","override val attachments: MockAttachmentStorage","net.corda.testing.node.MockServices.attachments"]},{"name":"override val bytes: ByteArray","description":"net.corda.core.utilities.OpaqueBytes.bytes","location":"docs/net.corda.core.utilities/-opaque-bytes/bytes.html","searchKeys":["bytes","override val bytes: ByteArray","net.corda.core.utilities.OpaqueBytes.bytes"]},{"name":"sealed class AttachmentQueryCriteria : GenericQueryCriteria<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser> , GenericQueryCriteria.ChainableQueryCriteria<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser> ","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/index.html","searchKeys":["AttachmentQueryCriteria","sealed class AttachmentQueryCriteria : GenericQueryCriteria<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser> , GenericQueryCriteria.ChainableQueryCriteria<AttachmentQueryCriteria, AttachmentsQueryCriteriaParser> ","net.corda.core.node.services.vault.AttachmentQueryCriteria"]},{"name":"sealed class ByteSequence : Comparable<ByteSequence> ","description":"net.corda.core.utilities.ByteSequence","location":"docs/net.corda.core.utilities/-byte-sequence/index.html","searchKeys":["ByteSequence","sealed class ByteSequence : Comparable<ByteSequence> ","net.corda.core.utilities.ByteSequence"]},{"name":"sealed class Change","description":"net.corda.core.utilities.ProgressTracker.Change","location":"docs/net.corda.core.utilities/-progress-tracker/-change/index.html","searchKeys":["Change","sealed class Change","net.corda.core.utilities.ProgressTracker.Change"]},{"name":"sealed class ColumnPredicate<C>","description":"net.corda.core.node.services.vault.ColumnPredicate","location":"docs/net.corda.core.node.services.vault/-column-predicate/index.html","searchKeys":["ColumnPredicate","sealed class ColumnPredicate<C>","net.corda.core.node.services.vault.ColumnPredicate"]},{"name":"sealed class CompatibilityZoneParams","description":"net.corda.testing.node.internal.CompatibilityZoneParams","location":"docs/net.corda.testing.node.internal/-compatibility-zone-params/index.html","searchKeys":["CompatibilityZoneParams","sealed class CompatibilityZoneParams","net.corda.testing.node.internal.CompatibilityZoneParams"]},{"name":"sealed class CriteriaExpression<O, out T>","description":"net.corda.core.node.services.vault.CriteriaExpression","location":"docs/net.corda.core.node.services.vault/-criteria-expression/index.html","searchKeys":["CriteriaExpression","sealed class CriteriaExpression<O, out T>","net.corda.core.node.services.vault.CriteriaExpression"]},{"name":"sealed class DigestAlgorithmFactory","description":"net.corda.core.crypto.internal.DigestAlgorithmFactory","location":"docs/net.corda.core.crypto.internal/-digest-algorithm-factory/index.html","searchKeys":["DigestAlgorithmFactory","sealed class DigestAlgorithmFactory","net.corda.core.crypto.internal.DigestAlgorithmFactory"]},{"name":"sealed class DistributionList","description":"net.corda.core.flows.DistributionList","location":"docs/net.corda.core.flows/-distribution-list/index.html","searchKeys":["DistributionList","sealed class DistributionList","net.corda.core.flows.DistributionList"]},{"name":"sealed class EnforceVerifyOrFail","description":"net.corda.testing.dsl.EnforceVerifyOrFail","location":"docs/net.corda.testing.dsl/-enforce-verify-or-fail/index.html","searchKeys":["EnforceVerifyOrFail","sealed class EnforceVerifyOrFail","net.corda.testing.dsl.EnforceVerifyOrFail"]},{"name":"sealed class FetchDataFlow<T : NamedByHash, in W : Any> : FlowLogic<FetchDataFlow.Result<T>> ","description":"net.corda.core.internal.FetchDataFlow","location":"docs/net.corda.core.internal/-fetch-data-flow/index.html","searchKeys":["FetchDataFlow","sealed class FetchDataFlow<T : NamedByHash, in W : Any> : FlowLogic<FetchDataFlow.Result<T>> ","net.corda.core.internal.FetchDataFlow"]},{"name":"sealed class FlowIORequest<out R : Any>","description":"net.corda.core.internal.FlowIORequest","location":"docs/net.corda.core.internal/-flow-i-o-request/index.html","searchKeys":["FlowIORequest","sealed class FlowIORequest<out R : Any>","net.corda.core.internal.FlowIORequest"]},{"name":"sealed class FlowInitiator : Principal","description":"net.corda.core.flows.FlowInitiator","location":"docs/net.corda.core.flows/-flow-initiator/index.html","searchKeys":["FlowInitiator","sealed class FlowInitiator : Principal","net.corda.core.flows.FlowInitiator"]},{"name":"sealed class InvocationOrigin","description":"net.corda.core.context.InvocationOrigin","location":"docs/net.corda.core.context/-invocation-origin/index.html","searchKeys":["InvocationOrigin","sealed class InvocationOrigin","net.corda.core.context.InvocationOrigin"]},{"name":"sealed class LanguageVersion","description":"net.corda.core.internal.cordapp.LanguageVersion","location":"docs/net.corda.core.internal.cordapp/-language-version/index.html","searchKeys":["LanguageVersion","sealed class LanguageVersion","net.corda.core.internal.cordapp.LanguageVersion"]},{"name":"sealed class MapChange","description":"net.corda.core.node.services.NetworkMapCache.MapChange","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/index.html","searchKeys":["MapChange","sealed class MapChange","net.corda.core.node.services.NetworkMapCache.MapChange"]},{"name":"sealed class MerkleTree","description":"net.corda.core.crypto.MerkleTree","location":"docs/net.corda.core.crypto/-merkle-tree/index.html","searchKeys":["MerkleTree","sealed class MerkleTree","net.corda.core.crypto.MerkleTree"]},{"name":"sealed class NotaryError","description":"net.corda.core.flows.NotaryError","location":"docs/net.corda.core.flows/-notary-error/index.html","searchKeys":["NotaryError","sealed class NotaryError","net.corda.core.flows.NotaryError"]},{"name":"sealed class PartialTree","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/index.html","searchKeys":["PartialTree","sealed class PartialTree","net.corda.core.crypto.PartialMerkleTree.PartialTree"]},{"name":"sealed class PartyInfo","description":"net.corda.core.node.services.PartyInfo","location":"docs/net.corda.core.node.services/-party-info/index.html","searchKeys":["PartyInfo","sealed class PartyInfo","net.corda.core.node.services.PartyInfo"]},{"name":"sealed class QueryCriteria : GenericQueryCriteria<QueryCriteria, IQueryCriteriaParser> , GenericQueryCriteria.ChainableQueryCriteria<QueryCriteria, IQueryCriteriaParser> ","description":"net.corda.core.node.services.vault.QueryCriteria","location":"docs/net.corda.core.node.services.vault/-query-criteria/index.html","searchKeys":["QueryCriteria","sealed class QueryCriteria : GenericQueryCriteria<QueryCriteria, IQueryCriteriaParser> , GenericQueryCriteria.ChainableQueryCriteria<QueryCriteria, IQueryCriteriaParser> ","net.corda.core.node.services.vault.QueryCriteria"]},{"name":"sealed class Request","description":"net.corda.core.internal.FetchDataFlow.Request","location":"docs/net.corda.core.internal/-fetch-data-flow/-request/index.html","searchKeys":["Request","sealed class Request","net.corda.core.internal.FetchDataFlow.Request"]},{"name":"sealed class Result","description":"net.corda.core.internal.notary.UniquenessProvider.Result","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/-result/index.html","searchKeys":["Result","sealed class Result","net.corda.core.internal.notary.UniquenessProvider.Result"]},{"name":"sealed class Rule<in T>","description":"net.corda.core.internal.LegalNameValidator.Rule","location":"docs/net.corda.core.internal/-legal-name-validator/-rule/index.html","searchKeys":["Rule","sealed class Rule<in T>","net.corda.core.internal.LegalNameValidator.Rule"]},{"name":"sealed class SecureHash : OpaqueBytes","description":"net.corda.core.crypto.SecureHash","location":"docs/net.corda.core.crypto/-secure-hash/index.html","searchKeys":["SecureHash","sealed class SecureHash : OpaqueBytes","net.corda.core.crypto.SecureHash"]},{"name":"sealed class ServicePeerAllocationStrategy","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/index.html","searchKeys":["ServicePeerAllocationStrategy","sealed class ServicePeerAllocationStrategy","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy"]},{"name":"sealed class SortAttribute","description":"net.corda.core.node.services.vault.SortAttribute","location":"docs/net.corda.core.node.services.vault/-sort-attribute/index.html","searchKeys":["SortAttribute","sealed class SortAttribute","net.corda.core.node.services.vault.SortAttribute"]},{"name":"sealed class StateMachineUpdate","description":"net.corda.core.messaging.StateMachineUpdate","location":"docs/net.corda.core.messaging/-state-machine-update/index.html","searchKeys":["StateMachineUpdate","sealed class StateMachineUpdate","net.corda.core.messaging.StateMachineUpdate"]},{"name":"sealed class StatePointer<T : ContractState>","description":"net.corda.core.contracts.StatePointer","location":"docs/net.corda.core.contracts/-state-pointer/index.html","searchKeys":["StatePointer","sealed class StatePointer<T : ContractState>","net.corda.core.contracts.StatePointer"]},{"name":"sealed class Try<out A>","description":"net.corda.core.utilities.Try","location":"docs/net.corda.core.utilities/-try/index.html","searchKeys":["Try","sealed class Try<out A>","net.corda.core.utilities.Try"]},{"name":"sealed class VerificationResult","description":"net.corda.core.internal.verification.VerificationResult","location":"docs/net.corda.core.internal.verification/-verification-result/index.html","searchKeys":["VerificationResult","sealed class VerificationResult","net.corda.core.internal.verification.VerificationResult"]},{"name":"val <Error class: unknown class>.level: <Error class: unknown class>","description":"net.corda.core.internal.level","location":"docs/net.corda.core.internal/level.html","searchKeys":["level","val <Error class: unknown class>.level: <Error class: unknown class>","net.corda.core.internal.level"]},{"name":"val <T : Any> Class<T>.kotlinObjectInstance: T?","description":"net.corda.core.internal.kotlinObjectInstance","location":"docs/net.corda.core.internal/kotlin-object-instance.html","searchKeys":["kotlinObjectInstance","val <T : Any> Class<T>.kotlinObjectInstance: T?","net.corda.core.internal.kotlinObjectInstance"]},{"name":"val AlgorithmParameterSpec?.isSecp256k1: Boolean","description":"net.corda.core.crypto.internal.isSecp256k1","location":"docs/net.corda.core.crypto.internal/is-secp256k1.html","searchKeys":["isSecp256k1","val AlgorithmParameterSpec?.isSecp256k1: Boolean","net.corda.core.crypto.internal.isSecp256k1"]},{"name":"val Amount<Currency>.CASH: Cash.State","description":"net.corda.finance.contracts.asset.CASH","location":"docs/net.corda.finance.contracts.asset/-c-a-s-h.html","searchKeys":["CASH","val Amount<Currency>.CASH: Cash.State","net.corda.finance.contracts.asset.CASH"]},{"name":"val Amount<Issued<Currency>>.STATE: Cash.State","description":"net.corda.finance.contracts.asset.STATE","location":"docs/net.corda.finance.contracts.asset/-s-t-a-t-e.html","searchKeys":["STATE","val Amount<Issued<Currency>>.STATE: Cash.State","net.corda.finance.contracts.asset.STATE"]},{"name":"val Attachment.contractVersion: Version","description":"net.corda.core.internal.contractVersion","location":"docs/net.corda.core.internal/contract-version.html","searchKeys":["contractVersion","val Attachment.contractVersion: Version","net.corda.core.internal.contractVersion"]},{"name":"val CHECKPOINT_CONTEXT: CheckpointSerializationContext","description":"net.corda.core.serialization.internal.CheckpointSerializationDefaults.CHECKPOINT_CONTEXT","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-defaults/-c-h-e-c-k-p-o-i-n-t_-c-o-n-t-e-x-t.html","searchKeys":["CHECKPOINT_CONTEXT","val CHECKPOINT_CONTEXT: CheckpointSerializationContext","net.corda.core.serialization.internal.CheckpointSerializationDefaults.CHECKPOINT_CONTEXT"]},{"name":"val CHECKPOINT_SERIALIZER: CheckpointSerializer","description":"net.corda.core.serialization.internal.CheckpointSerializationDefaults.CHECKPOINT_SERIALIZER","location":"docs/net.corda.core.serialization.internal/-checkpoint-serialization-defaults/-c-h-e-c-k-p-o-i-n-t_-s-e-r-i-a-l-i-z-e-r.html","searchKeys":["CHECKPOINT_SERIALIZER","val CHECKPOINT_SERIALIZER: CheckpointSerializer","net.corda.core.serialization.internal.CheckpointSerializationDefaults.CHECKPOINT_SERIALIZER"]},{"name":"val CHF: Currency","description":"net.corda.finance.CHF","location":"docs/net.corda.finance/-c-h-f.html","searchKeys":["CHF","val CHF: Currency","net.corda.finance.CHF"]},{"name":"val CODE_BAG_OF_CASH: String","description":"net.corda.core.internal.Emoji.CODE_BAG_OF_CASH","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-b-a-g_-o-f_-c-a-s-h.html","searchKeys":["CODE_BAG_OF_CASH","val CODE_BAG_OF_CASH: String","net.corda.core.internal.Emoji.CODE_BAG_OF_CASH"]},{"name":"val CODE_BOOKS: String","description":"net.corda.core.internal.Emoji.CODE_BOOKS","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-b-o-o-k-s.html","searchKeys":["CODE_BOOKS","val CODE_BOOKS: String","net.corda.core.internal.Emoji.CODE_BOOKS"]},{"name":"val CODE_COOL_GUY: String","description":"net.corda.core.internal.Emoji.CODE_COOL_GUY","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-c-o-o-l_-g-u-y.html","searchKeys":["CODE_COOL_GUY","val CODE_COOL_GUY: String","net.corda.core.internal.Emoji.CODE_COOL_GUY"]},{"name":"val CODE_DEVELOPER: String","description":"net.corda.core.internal.Emoji.CODE_DEVELOPER","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-d-e-v-e-l-o-p-e-r.html","searchKeys":["CODE_DEVELOPER","val CODE_DEVELOPER: String","net.corda.core.internal.Emoji.CODE_DEVELOPER"]},{"name":"val CODE_DIAMOND: String","description":"net.corda.core.internal.Emoji.CODE_DIAMOND","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-d-i-a-m-o-n-d.html","searchKeys":["CODE_DIAMOND","val CODE_DIAMOND: String","net.corda.core.internal.Emoji.CODE_DIAMOND"]},{"name":"val CODE_FREE: String","description":"net.corda.core.internal.Emoji.CODE_FREE","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-f-r-e-e.html","searchKeys":["CODE_FREE","val CODE_FREE: String","net.corda.core.internal.Emoji.CODE_FREE"]},{"name":"val CODE_GREEN_TICK: String","description":"net.corda.core.internal.Emoji.CODE_GREEN_TICK","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-g-r-e-e-n_-t-i-c-k.html","searchKeys":["CODE_GREEN_TICK","val CODE_GREEN_TICK: String","net.corda.core.internal.Emoji.CODE_GREEN_TICK"]},{"name":"val CODE_LEFT_ARROW: String","description":"net.corda.core.internal.Emoji.CODE_LEFT_ARROW","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-l-e-f-t_-a-r-r-o-w.html","searchKeys":["CODE_LEFT_ARROW","val CODE_LEFT_ARROW: String","net.corda.core.internal.Emoji.CODE_LEFT_ARROW"]},{"name":"val CODE_LIGHTBULB: String","description":"net.corda.core.internal.Emoji.CODE_LIGHTBULB","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-l-i-g-h-t-b-u-l-b.html","searchKeys":["CODE_LIGHTBULB","val CODE_LIGHTBULB: String","net.corda.core.internal.Emoji.CODE_LIGHTBULB"]},{"name":"val CODE_NEWSPAPER: String","description":"net.corda.core.internal.Emoji.CODE_NEWSPAPER","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-n-e-w-s-p-a-p-e-r.html","searchKeys":["CODE_NEWSPAPER","val CODE_NEWSPAPER: String","net.corda.core.internal.Emoji.CODE_NEWSPAPER"]},{"name":"val CODE_NO_ENTRY: String","description":"net.corda.core.internal.Emoji.CODE_NO_ENTRY","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-n-o_-e-n-t-r-y.html","searchKeys":["CODE_NO_ENTRY","val CODE_NO_ENTRY: String","net.corda.core.internal.Emoji.CODE_NO_ENTRY"]},{"name":"val CODE_PAPERCLIP: String","description":"net.corda.core.internal.Emoji.CODE_PAPERCLIP","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-p-a-p-e-r-c-l-i-p.html","searchKeys":["CODE_PAPERCLIP","val CODE_PAPERCLIP: String","net.corda.core.internal.Emoji.CODE_PAPERCLIP"]},{"name":"val CODE_RIGHT_ARROW: String","description":"net.corda.core.internal.Emoji.CODE_RIGHT_ARROW","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-r-i-g-h-t_-a-r-r-o-w.html","searchKeys":["CODE_RIGHT_ARROW","val CODE_RIGHT_ARROW: String","net.corda.core.internal.Emoji.CODE_RIGHT_ARROW"]},{"name":"val CODE_SANTA_CLAUS: String","description":"net.corda.core.internal.Emoji.CODE_SANTA_CLAUS","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-s-a-n-t-a_-c-l-a-u-s.html","searchKeys":["CODE_SANTA_CLAUS","val CODE_SANTA_CLAUS: String","net.corda.core.internal.Emoji.CODE_SANTA_CLAUS"]},{"name":"val CODE_SKULL_AND_CROSSBONES: String","description":"net.corda.core.internal.Emoji.CODE_SKULL_AND_CROSSBONES","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-s-k-u-l-l_-a-n-d_-c-r-o-s-s-b-o-n-e-s.html","searchKeys":["CODE_SKULL_AND_CROSSBONES","val CODE_SKULL_AND_CROSSBONES: String","net.corda.core.internal.Emoji.CODE_SKULL_AND_CROSSBONES"]},{"name":"val CODE_SLEEPING_FACE: String","description":"net.corda.core.internal.Emoji.CODE_SLEEPING_FACE","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-s-l-e-e-p-i-n-g_-f-a-c-e.html","searchKeys":["CODE_SLEEPING_FACE","val CODE_SLEEPING_FACE: String","net.corda.core.internal.Emoji.CODE_SLEEPING_FACE"]},{"name":"val CODE_SOON: String","description":"net.corda.core.internal.Emoji.CODE_SOON","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-s-o-o-n.html","searchKeys":["CODE_SOON","val CODE_SOON: String","net.corda.core.internal.Emoji.CODE_SOON"]},{"name":"val CODE_WARNING_SIGN: String","description":"net.corda.core.internal.Emoji.CODE_WARNING_SIGN","location":"docs/net.corda.core.internal/-emoji/-c-o-d-e_-w-a-r-n-i-n-g_-s-i-g-n.html","searchKeys":["CODE_WARNING_SIGN","val CODE_WARNING_SIGN: String","net.corda.core.internal.Emoji.CODE_WARNING_SIGN"]},{"name":"val COMPOSITE_KEY: <Error class: unknown class>","description":"net.corda.core.crypto.CordaObjectIdentifier.COMPOSITE_KEY","location":"docs/net.corda.core.crypto/-corda-object-identifier/-c-o-m-p-o-s-i-t-e_-k-e-y.html","searchKeys":["COMPOSITE_KEY","val COMPOSITE_KEY: <Error class: unknown class>","net.corda.core.crypto.CordaObjectIdentifier.COMPOSITE_KEY"]},{"name":"val COMPOSITE_KEY: SignatureScheme","description":"net.corda.core.crypto.Crypto.COMPOSITE_KEY","location":"docs/net.corda.core.crypto/-crypto/-c-o-m-p-o-s-i-t-e_-k-e-y.html","searchKeys":["COMPOSITE_KEY","val COMPOSITE_KEY: SignatureScheme","net.corda.core.crypto.Crypto.COMPOSITE_KEY"]},{"name":"val COMPOSITE_SIGNATURE: <Error class: unknown class>","description":"net.corda.core.crypto.CordaObjectIdentifier.COMPOSITE_SIGNATURE","location":"docs/net.corda.core.crypto/-corda-object-identifier/-c-o-m-p-o-s-i-t-e_-s-i-g-n-a-t-u-r-e.html","searchKeys":["COMPOSITE_SIGNATURE","val COMPOSITE_SIGNATURE: <Error class: unknown class>","net.corda.core.crypto.CordaObjectIdentifier.COMPOSITE_SIGNATURE"]},{"name":"val Class<*>.isAbstractClass: Boolean","description":"net.corda.core.internal.isAbstractClass","location":"docs/net.corda.core.internal/is-abstract-class.html","searchKeys":["isAbstractClass","val Class<*>.isAbstractClass: Boolean","net.corda.core.internal.isAbstractClass"]},{"name":"val Class<*>.isConcreteClass: Boolean","description":"net.corda.core.internal.isConcreteClass","location":"docs/net.corda.core.internal/is-concrete-class.html","searchKeys":["isConcreteClass","val Class<*>.isConcreteClass: Boolean","net.corda.core.internal.isConcreteClass"]},{"name":"val Class<*>.isJdkClass: Boolean","description":"net.corda.core.internal.isJdkClass","location":"docs/net.corda.core.internal/is-jdk-class.html","searchKeys":["isJdkClass","val Class<*>.isJdkClass: Boolean","net.corda.core.internal.isJdkClass"]},{"name":"val Class<*>.location: URL","description":"net.corda.core.internal.location","location":"docs/net.corda.core.internal/location.html","searchKeys":["location","val Class<*>.location: URL","net.corda.core.internal.location"]},{"name":"val Class<*>.packageNameOrNull: String?","description":"net.corda.core.internal.packageNameOrNull","location":"docs/net.corda.core.internal/package-name-or-null.html","searchKeys":["packageNameOrNull","val Class<*>.packageNameOrNull: String?","net.corda.core.internal.packageNameOrNull"]},{"name":"val Class<*>.packageName_: String","description":"net.corda.core.internal.packageName_","location":"docs/net.corda.core.internal/package-name_.html","searchKeys":["packageName_","val Class<*>.packageName_: String","net.corda.core.internal.packageName_"]},{"name":"val ContractState.requiredContractClassName: String?","description":"net.corda.core.internal.requiredContractClassName","location":"docs/net.corda.core.internal/required-contract-class-name.html","searchKeys":["requiredContractClassName","val ContractState.requiredContractClassName: String?","net.corda.core.internal.requiredContractClassName"]},{"name":"val CordaX500Name.Companion.unspecifiedCountry: String","description":"net.corda.core.internal.unspecifiedCountry","location":"docs/net.corda.core.internal/unspecified-country.html","searchKeys":["unspecifiedCountry","val CordaX500Name.Companion.unspecifiedCountry: String","net.corda.core.internal.unspecifiedCountry"]},{"name":"val DEFAULT: CordaRPCClientConfiguration","description":"net.corda.client.rpc.CordaRPCClientConfiguration.Companion.DEFAULT","location":"docs/net.corda.client.rpc/-corda-r-p-c-client-configuration/-companion/-d-e-f-a-u-l-t.html","searchKeys":["DEFAULT","val DEFAULT: CordaRPCClientConfiguration","net.corda.client.rpc.CordaRPCClientConfiguration.Companion.DEFAULT"]},{"name":"val DEFAULT_HTTP_CONNECT_TIMEOUT: Long","description":"net.corda.core.internal.DEFAULT_HTTP_CONNECT_TIMEOUT","location":"docs/net.corda.core.internal/-d-e-f-a-u-l-t_-h-t-t-p_-c-o-n-n-e-c-t_-t-i-m-e-o-u-t.html","searchKeys":["DEFAULT_HTTP_CONNECT_TIMEOUT","val DEFAULT_HTTP_CONNECT_TIMEOUT: Long","net.corda.core.internal.DEFAULT_HTTP_CONNECT_TIMEOUT"]},{"name":"val DEFAULT_HTTP_READ_TIMEOUT: Long","description":"net.corda.core.internal.DEFAULT_HTTP_READ_TIMEOUT","location":"docs/net.corda.core.internal/-d-e-f-a-u-l-t_-h-t-t-p_-r-e-a-d_-t-i-m-e-o-u-t.html","searchKeys":["DEFAULT_HTTP_READ_TIMEOUT","val DEFAULT_HTTP_READ_TIMEOUT: Long","net.corda.core.internal.DEFAULT_HTTP_READ_TIMEOUT"]},{"name":"val DEFAULT_SIGNATURE_SCHEME: SignatureScheme","description":"net.corda.core.crypto.Crypto.DEFAULT_SIGNATURE_SCHEME","location":"docs/net.corda.core.crypto/-crypto/-d-e-f-a-u-l-t_-s-i-g-n-a-t-u-r-e_-s-c-h-e-m-e.html","searchKeys":["DEFAULT_SIGNATURE_SCHEME","val DEFAULT_SIGNATURE_SCHEME: SignatureScheme","net.corda.core.crypto.Crypto.DEFAULT_SIGNATURE_SCHEME"]},{"name":"val DIRECTORY_TIMESTAMP_FORMAT: DateTimeFormatter","description":"net.corda.testing.node.internal.DIRECTORY_TIMESTAMP_FORMAT","location":"docs/net.corda.testing.node.internal/-d-i-r-e-c-t-o-r-y_-t-i-m-e-s-t-a-m-p_-f-o-r-m-a-t.html","searchKeys":["DIRECTORY_TIMESTAMP_FORMAT","val DIRECTORY_TIMESTAMP_FORMAT: DateTimeFormatter","net.corda.testing.node.internal.DIRECTORY_TIMESTAMP_FORMAT"]},{"name":"val DUMMY_CONTRACTS_CORDAPP: CustomCordapp","description":"net.corda.testing.node.internal.DUMMY_CONTRACTS_CORDAPP","location":"docs/net.corda.testing.node.internal/-d-u-m-m-y_-c-o-n-t-r-a-c-t-s_-c-o-r-d-a-p-p.html","searchKeys":["DUMMY_CONTRACTS_CORDAPP","val DUMMY_CONTRACTS_CORDAPP: CustomCordapp","net.corda.testing.node.internal.DUMMY_CONTRACTS_CORDAPP"]},{"name":"val DUMMY_PARTICIPANT_NAME: CordaX500Name","description":"net.corda.core.flows.SendTransactionFlow.Companion.DUMMY_PARTICIPANT_NAME","location":"docs/net.corda.core.flows/-send-transaction-flow/-companion/-d-u-m-m-y_-p-a-r-t-i-c-i-p-a-n-t_-n-a-m-e.html","searchKeys":["DUMMY_PARTICIPANT_NAME","val DUMMY_PARTICIPANT_NAME: CordaX500Name","net.corda.core.flows.SendTransactionFlow.Companion.DUMMY_PARTICIPANT_NAME"]},{"name":"val Double.DOLLARS: Amount<Currency>","description":"net.corda.finance.DOLLARS","location":"docs/net.corda.finance/-d-o-l-l-a-r-s.html","searchKeys":["DOLLARS","val Double.DOLLARS: Amount<Currency>","net.corda.finance.DOLLARS"]},{"name":"val Double.POUNDS: Amount<Currency>","description":"net.corda.finance.POUNDS","location":"docs/net.corda.finance/-p-o-u-n-d-s.html","searchKeys":["POUNDS","val Double.POUNDS: Amount<Currency>","net.corda.finance.POUNDS"]},{"name":"val Double.SWISS_FRANCS: Amount<Currency>","description":"net.corda.finance.SWISS_FRANCS","location":"docs/net.corda.finance/-s-w-i-s-s_-f-r-a-n-c-s.html","searchKeys":["SWISS_FRANCS","val Double.SWISS_FRANCS: Amount<Currency>","net.corda.finance.SWISS_FRANCS"]},{"name":"val ECDSA_SECP256K1_SHA256: SignatureScheme","description":"net.corda.core.crypto.Crypto.ECDSA_SECP256K1_SHA256","location":"docs/net.corda.core.crypto/-crypto/-e-c-d-s-a_-s-e-c-p256-k1_-s-h-a256.html","searchKeys":["ECDSA_SECP256K1_SHA256","val ECDSA_SECP256K1_SHA256: SignatureScheme","net.corda.core.crypto.Crypto.ECDSA_SECP256K1_SHA256"]},{"name":"val ECDSA_SECP256R1_SHA256: SignatureScheme","description":"net.corda.core.crypto.Crypto.ECDSA_SECP256R1_SHA256","location":"docs/net.corda.core.crypto/-crypto/-e-c-d-s-a_-s-e-c-p256-r1_-s-h-a256.html","searchKeys":["ECDSA_SECP256R1_SHA256","val ECDSA_SECP256R1_SHA256: SignatureScheme","net.corda.core.crypto.Crypto.ECDSA_SECP256R1_SHA256"]},{"name":"val EDDSA_ED25519_SHA512: SignatureScheme","description":"net.corda.core.crypto.Crypto.EDDSA_ED25519_SHA512","location":"docs/net.corda.core.crypto/-crypto/-e-d-d-s-a_-e-d25519_-s-h-a512.html","searchKeys":["EDDSA_ED25519_SHA512","val EDDSA_ED25519_SHA512: SignatureScheme","net.corda.core.crypto.Crypto.EDDSA_ED25519_SHA512"]},{"name":"val EMPTY: BusinessCalendar","description":"net.corda.finance.contracts.BusinessCalendar.Companion.EMPTY","location":"docs/net.corda.finance.contracts/-business-calendar/-companion/-e-m-p-t-y.html","searchKeys":["EMPTY","val EMPTY: BusinessCalendar","net.corda.finance.contracts.BusinessCalendar.Companion.EMPTY"]},{"name":"val EMPTY: CompositeSignaturesWithKeys","description":"net.corda.core.crypto.CompositeSignaturesWithKeys.Companion.EMPTY","location":"docs/net.corda.core.crypto/-composite-signatures-with-keys/-companion/-e-m-p-t-y.html","searchKeys":["EMPTY","val EMPTY: CompositeSignaturesWithKeys","net.corda.core.crypto.CompositeSignaturesWithKeys.Companion.EMPTY"]},{"name":"val EUR: Currency","description":"net.corda.finance.EUR","location":"docs/net.corda.finance/-e-u-r.html","searchKeys":["EUR","val EUR: Currency","net.corda.finance.EUR"]},{"name":"val EdECPoint.isOnCurve25519: Boolean","description":"net.corda.core.crypto.internal.Curve25519.isOnCurve25519","location":"docs/net.corda.core.crypto.internal/-curve25519/is-on-curve25519.html","searchKeys":["isOnCurve25519","val EdECPoint.isOnCurve25519: Boolean","net.corda.core.crypto.internal.Curve25519.isOnCurve25519"]},{"name":"val FINANCE_CONTRACTS_CORDAPP: ScanPackageTestCordapp","description":"net.corda.testing.node.internal.FINANCE_CONTRACTS_CORDAPP","location":"docs/net.corda.testing.node.internal/-f-i-n-a-n-c-e_-c-o-n-t-r-a-c-t-s_-c-o-r-d-a-p-p.html","searchKeys":["FINANCE_CONTRACTS_CORDAPP","val FINANCE_CONTRACTS_CORDAPP: ScanPackageTestCordapp","net.corda.testing.node.internal.FINANCE_CONTRACTS_CORDAPP"]},{"name":"val FINANCE_CORDAPPS: Set<ScanPackageTestCordapp>","description":"net.corda.testing.node.internal.FINANCE_CORDAPPS","location":"docs/net.corda.testing.node.internal/-f-i-n-a-n-c-e_-c-o-r-d-a-p-p-s.html","searchKeys":["FINANCE_CORDAPPS","val FINANCE_CORDAPPS: Set<ScanPackageTestCordapp>","net.corda.testing.node.internal.FINANCE_CORDAPPS"]},{"name":"val FINANCE_WORKFLOWS_CORDAPP: ScanPackageTestCordapp","description":"net.corda.testing.node.internal.FINANCE_WORKFLOWS_CORDAPP","location":"docs/net.corda.testing.node.internal/-f-i-n-a-n-c-e_-w-o-r-k-f-l-o-w-s_-c-o-r-d-a-p-p.html","searchKeys":["FINANCE_WORKFLOWS_CORDAPP","val FINANCE_WORKFLOWS_CORDAPP: ScanPackageTestCordapp","net.corda.testing.node.internal.FINANCE_WORKFLOWS_CORDAPP"]},{"name":"val FlowAsyncOperation<*>.externalOperationImplName: String","description":"net.corda.core.internal.externalOperationImplName","location":"docs/net.corda.core.internal/external-operation-impl-name.html","searchKeys":["externalOperationImplName","val FlowAsyncOperation<*>.externalOperationImplName: String","net.corda.core.internal.externalOperationImplName"]},{"name":"val GBP: Currency","description":"net.corda.finance.GBP","location":"docs/net.corda.finance/-g-b-p.html","searchKeys":["GBP","val GBP: Currency","net.corda.finance.GBP"]},{"name":"val HttpURLConnection.errorMessage: String?","description":"net.corda.core.internal.errorMessage","location":"docs/net.corda.core.internal/error-message.html","searchKeys":["errorMessage","val HttpURLConnection.errorMessage: String?","net.corda.core.internal.errorMessage"]},{"name":"val INSTANCE: NotaryError.TimeWindowInvalid","description":"net.corda.core.flows.NotaryError.TimeWindowInvalid.Companion.INSTANCE","location":"docs/net.corda.core.flows/-notary-error/-time-window-invalid/-companion/-i-n-s-t-a-n-c-e.html","searchKeys":["INSTANCE","val INSTANCE: NotaryError.TimeWindowInvalid","net.corda.core.flows.NotaryError.TimeWindowInvalid.Companion.INSTANCE"]},{"name":"val ISSUING_CASH: ProgressTracker.Step","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.Companion.ISSUING_CASH","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-companion/-i-s-s-u-i-n-g_-c-a-s-h.html","searchKeys":["ISSUING_CASH","val ISSUING_CASH: ProgressTracker.Step","net.corda.finance.flows.CashIssueAndPaymentFlow.Companion.ISSUING_CASH"]},{"name":"val IS_S390X: Boolean","description":"net.corda.testing.internal.IS_S390X","location":"docs/net.corda.testing.internal/-i-s_-s390-x.html","searchKeys":["IS_S390X","val IS_S390X: Boolean","net.corda.testing.internal.IS_S390X"]},{"name":"val InProcess.internalServices: <Error class: unknown class>","description":"net.corda.testing.driver.internal.internalServices","location":"docs/net.corda.testing.driver.internal/internal-services.html","searchKeys":["internalServices","val InProcess.internalServices: <Error class: unknown class>","net.corda.testing.driver.internal.internalServices"]},{"name":"val Int.DOLLARS: Amount<Currency>","description":"net.corda.finance.DOLLARS","location":"docs/net.corda.finance/-d-o-l-l-a-r-s.html","searchKeys":["DOLLARS","val Int.DOLLARS: Amount<Currency>","net.corda.finance.DOLLARS"]},{"name":"val Int.POUNDS: Amount<Currency>","description":"net.corda.finance.POUNDS","location":"docs/net.corda.finance/-p-o-u-n-d-s.html","searchKeys":["POUNDS","val Int.POUNDS: Amount<Currency>","net.corda.finance.POUNDS"]},{"name":"val Int.SWISS_FRANCS: Amount<Currency>","description":"net.corda.finance.SWISS_FRANCS","location":"docs/net.corda.finance/-s-w-i-s-s_-f-r-a-n-c-s.html","searchKeys":["SWISS_FRANCS","val Int.SWISS_FRANCS: Amount<Currency>","net.corda.finance.SWISS_FRANCS"]},{"name":"val Int.days: Duration","description":"net.corda.core.utilities.days","location":"docs/net.corda.core.utilities/days.html","searchKeys":["days","val Int.days: Duration","net.corda.core.utilities.days"]},{"name":"val Int.hours: Duration","description":"net.corda.core.utilities.hours","location":"docs/net.corda.core.utilities/hours.html","searchKeys":["hours","val Int.hours: Duration","net.corda.core.utilities.hours"]},{"name":"val Int.millis: Duration","description":"net.corda.core.utilities.millis","location":"docs/net.corda.core.utilities/millis.html","searchKeys":["millis","val Int.millis: Duration","net.corda.core.utilities.millis"]},{"name":"val Int.minutes: Duration","description":"net.corda.core.utilities.minutes","location":"docs/net.corda.core.utilities/minutes.html","searchKeys":["minutes","val Int.minutes: Duration","net.corda.core.utilities.minutes"]},{"name":"val Int.seconds: Duration","description":"net.corda.core.utilities.seconds","location":"docs/net.corda.core.utilities/seconds.html","searchKeys":["seconds","val Int.seconds: Duration","net.corda.core.utilities.seconds"]},{"name":"val JDBC_DRIVER_NAME_REGEX: <Error class: unknown class>","description":"net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.Companion.JDBC_DRIVER_NAME_REGEX","location":"docs/net.corda.finance.workflows.asset.selection/-cash-selection-s-q-l-server-impl/-companion/-j-d-b-c_-d-r-i-v-e-r_-n-a-m-e_-r-e-g-e-x.html","searchKeys":["JDBC_DRIVER_NAME_REGEX","val JDBC_DRIVER_NAME_REGEX: <Error class: unknown class>","net.corda.finance.workflows.asset.selection.CashSelectionSQLServerImpl.Companion.JDBC_DRIVER_NAME_REGEX"]},{"name":"val JPY: Currency","description":"net.corda.finance.JPY","location":"docs/net.corda.finance/-j-p-y.html","searchKeys":["JPY","val JPY: Currency","net.corda.finance.JPY"]},{"name":"val KClass<*>.packageName: String","description":"net.corda.core.internal.packageName","location":"docs/net.corda.core.internal/package-name.html","searchKeys":["packageName","val KClass<*>.packageName: String","net.corda.core.internal.packageName"]},{"name":"val Long.DOLLARS: Amount<Currency>","description":"net.corda.finance.DOLLARS","location":"docs/net.corda.finance/-d-o-l-l-a-r-s.html","searchKeys":["DOLLARS","val Long.DOLLARS: Amount<Currency>","net.corda.finance.DOLLARS"]},{"name":"val Long.POUNDS: Amount<Currency>","description":"net.corda.finance.POUNDS","location":"docs/net.corda.finance/-p-o-u-n-d-s.html","searchKeys":["POUNDS","val Long.POUNDS: Amount<Currency>","net.corda.finance.POUNDS"]},{"name":"val Long.SWISS_FRANCS: Amount<Currency>","description":"net.corda.finance.SWISS_FRANCS","location":"docs/net.corda.finance/-s-w-i-s-s_-f-r-a-n-c-s.html","searchKeys":["SWISS_FRANCS","val Long.SWISS_FRANCS: Amount<Currency>","net.corda.finance.SWISS_FRANCS"]},{"name":"val MOCK_VERSION_INFO: <Error class: unknown class>","description":"net.corda.testing.node.internal.MOCK_VERSION_INFO","location":"docs/net.corda.testing.node.internal/-m-o-c-k_-v-e-r-s-i-o-n_-i-n-f-o.html","searchKeys":["MOCK_VERSION_INFO","val MOCK_VERSION_INFO: <Error class: unknown class>","net.corda.testing.node.internal.MOCK_VERSION_INFO"]},{"name":"val Manifest.targetPlatformVersion: Int","description":"net.corda.core.internal.cordapp.targetPlatformVersion","location":"docs/net.corda.core.internal.cordapp/target-platform-version.html","searchKeys":["targetPlatformVersion","val Manifest.targetPlatformVersion: Int","net.corda.core.internal.cordapp.targetPlatformVersion"]},{"name":"val Member.isFinal: Boolean","description":"net.corda.core.internal.isFinal","location":"docs/net.corda.core.internal/is-final.html","searchKeys":["isFinal","val Member.isFinal: Boolean","net.corda.core.internal.isFinal"]},{"name":"val Member.isPublic: Boolean","description":"net.corda.core.internal.isPublic","location":"docs/net.corda.core.internal/is-public.html","searchKeys":["isPublic","val Member.isPublic: Boolean","net.corda.core.internal.isPublic"]},{"name":"val Member.isStatic: Boolean","description":"net.corda.core.internal.isStatic","location":"docs/net.corda.core.internal/is-static.html","searchKeys":["isStatic","val Member.isStatic: Boolean","net.corda.core.internal.isStatic"]},{"name":"val NULL_PARTY: AnonymousParty","description":"net.corda.core.crypto.NullKeys.NULL_PARTY","location":"docs/net.corda.core.crypto/-null-keys/-n-u-l-l_-p-a-r-t-y.html","searchKeys":["NULL_PARTY","val NULL_PARTY: AnonymousParty","net.corda.core.crypto.NullKeys.NULL_PARTY"]},{"name":"val NULL_SIGNATURE: TransactionSignature","description":"net.corda.core.crypto.NullKeys.NULL_SIGNATURE","location":"docs/net.corda.core.crypto/-null-keys/-n-u-l-l_-s-i-g-n-a-t-u-r-e.html","searchKeys":["NULL_SIGNATURE","val NULL_SIGNATURE: TransactionSignature","net.corda.core.crypto.NullKeys.NULL_SIGNATURE"]},{"name":"val NoNotaryUpdate: Vault.Update<ContractState>","description":"net.corda.core.node.services.Vault.Companion.NoNotaryUpdate","location":"docs/net.corda.core.node.services/-vault/-companion/-no-notary-update.html","searchKeys":["NoNotaryUpdate","val NoNotaryUpdate: Vault.Update<ContractState>","net.corda.core.node.services.Vault.Companion.NoNotaryUpdate"]},{"name":"val NoUpdate: Vault.Update<ContractState>","description":"net.corda.core.node.services.Vault.Companion.NoUpdate","location":"docs/net.corda.core.node.services/-vault/-companion/-no-update.html","searchKeys":["NoUpdate","val NoUpdate: Vault.Update<ContractState>","net.corda.core.node.services.Vault.Companion.NoUpdate"]},{"name":"val NodeHandle.checkpointsRpc: CheckpointRpcHelper.CloseableFlowManagerRPCOps","description":"net.corda.testing.driver.internal.checkpoint.CheckpointRpcHelper.checkpointsRpc","location":"docs/net.corda.testing.driver.internal.checkpoint/-checkpoint-rpc-helper/checkpoints-rpc.html","searchKeys":["checkpointsRpc","val NodeHandle.checkpointsRpc: CheckpointRpcHelper.CloseableFlowManagerRPCOps","net.corda.testing.driver.internal.checkpoint.CheckpointRpcHelper.checkpointsRpc"]},{"name":"val OpaqueBytes.isZero: Boolean","description":"net.corda.core.crypto.isZero","location":"docs/net.corda.core.crypto/is-zero.html","searchKeys":["isZero","val OpaqueBytes.isZero: Boolean","net.corda.core.crypto.isZero"]},{"name":"val P2P_CONTEXT: SerializationContext","description":"net.corda.core.serialization.SerializationDefaults.P2P_CONTEXT","location":"docs/net.corda.core.serialization/-serialization-defaults/-p2-p_-c-o-n-t-e-x-t.html","searchKeys":["P2P_CONTEXT","val P2P_CONTEXT: SerializationContext","net.corda.core.serialization.SerializationDefaults.P2P_CONTEXT"]},{"name":"val PAYING_RECIPIENT: ProgressTracker.Step","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.Companion.PAYING_RECIPIENT","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-companion/-p-a-y-i-n-g_-r-e-c-i-p-i-e-n-t.html","searchKeys":["PAYING_RECIPIENT","val PAYING_RECIPIENT: ProgressTracker.Step","net.corda.finance.flows.CashIssueAndPaymentFlow.Companion.PAYING_RECIPIENT"]},{"name":"val Path.hash: SecureHash.SHA256","description":"net.corda.core.internal.hash","location":"docs/net.corda.core.internal/hash.html","searchKeys":["hash","val Path.hash: SecureHash.SHA256","net.corda.core.internal.hash"]},{"name":"val PublicKey.hash: SecureHash","description":"net.corda.core.internal.hash","location":"docs/net.corda.core.internal/hash.html","searchKeys":["hash","val PublicKey.hash: SecureHash","net.corda.core.internal.hash"]},{"name":"val PublicKey.keys: Set<PublicKey>","description":"net.corda.core.crypto.keys","location":"docs/net.corda.core.crypto/keys.html","searchKeys":["keys","val PublicKey.keys: Set<PublicKey>","net.corda.core.crypto.keys"]},{"name":"val RPC_CLIENT_CONTEXT: SerializationContext","description":"net.corda.core.serialization.SerializationDefaults.RPC_CLIENT_CONTEXT","location":"docs/net.corda.core.serialization/-serialization-defaults/-r-p-c_-c-l-i-e-n-t_-c-o-n-t-e-x-t.html","searchKeys":["RPC_CLIENT_CONTEXT","val RPC_CLIENT_CONTEXT: SerializationContext","net.corda.core.serialization.SerializationDefaults.RPC_CLIENT_CONTEXT"]},{"name":"val RPC_SERVER_CONTEXT: SerializationContext","description":"net.corda.core.serialization.SerializationDefaults.RPC_SERVER_CONTEXT","location":"docs/net.corda.core.serialization/-serialization-defaults/-r-p-c_-s-e-r-v-e-r_-c-o-n-t-e-x-t.html","searchKeys":["RPC_SERVER_CONTEXT","val RPC_SERVER_CONTEXT: SerializationContext","net.corda.core.serialization.SerializationDefaults.RPC_SERVER_CONTEXT"]},{"name":"val RSA_SHA256: SignatureScheme","description":"net.corda.core.crypto.Crypto.RSA_SHA256","location":"docs/net.corda.core.crypto/-crypto/-r-s-a_-s-h-a256.html","searchKeys":["RSA_SHA256","val RSA_SHA256: SignatureScheme","net.corda.core.crypto.Crypto.RSA_SHA256"]},{"name":"val RUB: Currency","description":"net.corda.finance.RUB","location":"docs/net.corda.finance/-r-u-b.html","searchKeys":["RUB","val RUB: Currency","net.corda.finance.RUB"]},{"name":"val SERIALIZATION_FACTORY: SerializationFactory","description":"net.corda.core.serialization.SerializationDefaults.SERIALIZATION_FACTORY","location":"docs/net.corda.core.serialization/-serialization-defaults/-s-e-r-i-a-l-i-z-a-t-i-o-n_-f-a-c-t-o-r-y.html","searchKeys":["SERIALIZATION_FACTORY","val SERIALIZATION_FACTORY: SerializationFactory","net.corda.core.serialization.SerializationDefaults.SERIALIZATION_FACTORY"]},{"name":"val SHA512_256: <Error class: unknown class>","description":"net.corda.core.crypto.Crypto.SHA512_256","location":"docs/net.corda.core.crypto/-crypto/-s-h-a512_256.html","searchKeys":["SHA512_256","val SHA512_256: <Error class: unknown class>","net.corda.core.crypto.Crypto.SHA512_256"]},{"name":"val STORAGE_CONTEXT: SerializationContext","description":"net.corda.core.serialization.SerializationDefaults.STORAGE_CONTEXT","location":"docs/net.corda.core.serialization/-serialization-defaults/-s-t-o-r-a-g-e_-c-o-n-t-e-x-t.html","searchKeys":["STORAGE_CONTEXT","val STORAGE_CONTEXT: SerializationContext","net.corda.core.serialization.SerializationDefaults.STORAGE_CONTEXT"]},{"name":"val SecureHash.algorithm: String","description":"net.corda.core.crypto.algorithm","location":"docs/net.corda.core.crypto/algorithm.html","searchKeys":["algorithm","val SecureHash.algorithm: String","net.corda.core.crypto.algorithm"]},{"name":"val ServiceHub.telemetryServiceInternal: TelemetryServiceImpl","description":"net.corda.core.internal.telemetry.telemetryServiceInternal","location":"docs/net.corda.core.internal.telemetry/telemetry-service-internal.html","searchKeys":["telemetryServiceInternal","val ServiceHub.telemetryServiceInternal: TelemetryServiceImpl","net.corda.core.internal.telemetry.telemetryServiceInternal"]},{"name":"val ServicesForResolution.digestService: DigestService","description":"net.corda.core.internal.digestService","location":"docs/net.corda.core.internal/digest-service.html","searchKeys":["digestService","val ServicesForResolution.digestService: DigestService","net.corda.core.internal.digestService"]},{"name":"val SignedTransaction.dependencies: Set<SecureHash>","description":"net.corda.core.internal.dependencies","location":"docs/net.corda.core.internal/dependencies.html","searchKeys":["dependencies","val SignedTransaction.dependencies: Set<SecureHash>","net.corda.core.internal.dependencies"]},{"name":"val TEST_CALENDAR_NAMES: <Error class: unknown class>","description":"net.corda.finance.workflows.utils.TEST_CALENDAR_NAMES","location":"docs/net.corda.finance.workflows.utils/-t-e-s-t_-c-a-l-e-n-d-a-r_-n-a-m-e-s.html","searchKeys":["TEST_CALENDAR_NAMES","val TEST_CALENDAR_NAMES: <Error class: unknown class>","net.corda.finance.workflows.utils.TEST_CALENDAR_NAMES"]},{"name":"val TEST_INSTANCE: CordappImpl","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.TEST_INSTANCE","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-t-e-s-t_-i-n-s-t-a-n-c-e.html","searchKeys":["TEST_INSTANCE","val TEST_INSTANCE: CordappImpl","net.corda.core.internal.cordapp.CordappImpl.Companion.TEST_INSTANCE"]},{"name":"val TRUSTED_UPLOADERS: <Error class: unknown class>","description":"net.corda.core.internal.TRUSTED_UPLOADERS","location":"docs/net.corda.core.internal/-t-r-u-s-t-e-d_-u-p-l-o-a-d-e-r-s.html","searchKeys":["TRUSTED_UPLOADERS","val TRUSTED_UPLOADERS: <Error class: unknown class>","net.corda.core.internal.TRUSTED_UPLOADERS"]},{"name":"val Throwable.rootCause: Throwable","description":"net.corda.core.internal.rootCause","location":"docs/net.corda.core.internal/root-cause.html","searchKeys":["rootCause","val Throwable.rootCause: Throwable","net.corda.core.internal.rootCause"]},{"name":"val Throwable.rootMessage: String?","description":"net.corda.core.internal.rootMessage","location":"docs/net.corda.core.internal/root-message.html","searchKeys":["rootMessage","val Throwable.rootMessage: String?","net.corda.core.internal.rootMessage"]},{"name":"val UNKNOWN_INFO: Cordapp.Info.Default","description":"net.corda.core.internal.cordapp.CordappImpl.Companion.UNKNOWN_INFO","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/-companion/-u-n-k-n-o-w-n_-i-n-f-o.html","searchKeys":["UNKNOWN_INFO","val UNKNOWN_INFO: Cordapp.Info.Default","net.corda.core.internal.cordapp.CordappImpl.Companion.UNKNOWN_INFO"]},{"name":"val USD: Currency","description":"net.corda.finance.USD","location":"docs/net.corda.finance/-u-s-d.html","searchKeys":["USD","val USD: Currency","net.corda.finance.USD"]},{"name":"val WHITESPACE: <Error class: unknown class>","description":"net.corda.core.internal.LegalNameValidator.WHITESPACE","location":"docs/net.corda.core.internal/-legal-name-validator/-w-h-i-t-e-s-p-a-c-e.html","searchKeys":["WHITESPACE","val WHITESPACE: <Error class: unknown class>","net.corda.core.internal.LegalNameValidator.WHITESPACE"]},{"name":"val _allEnabledSerializationEnvs: List<<Error class: unknown class><String, SerializationEnvironment>>","description":"net.corda.core.serialization.internal._allEnabledSerializationEnvs","location":"docs/net.corda.core.serialization.internal/_all-enabled-serialization-envs.html","searchKeys":["_allEnabledSerializationEnvs","val _allEnabledSerializationEnvs: List<<Error class: unknown class><String, SerializationEnvironment>>","net.corda.core.serialization.internal._allEnabledSerializationEnvs"]},{"name":"val _contextSerializationEnv: ThreadLocalToggleField<SerializationEnvironment>","description":"net.corda.core.serialization.internal._contextSerializationEnv","location":"docs/net.corda.core.serialization.internal/_context-serialization-env.html","searchKeys":["_contextSerializationEnv","val _contextSerializationEnv: ThreadLocalToggleField<SerializationEnvironment>","net.corda.core.serialization.internal._contextSerializationEnv"]},{"name":"val _driverSerializationEnv: SimpleToggleField<SerializationEnvironment>","description":"net.corda.core.serialization.internal._driverSerializationEnv","location":"docs/net.corda.core.serialization.internal/_driver-serialization-env.html","searchKeys":["_driverSerializationEnv","val _driverSerializationEnv: SimpleToggleField<SerializationEnvironment>","net.corda.core.serialization.internal._driverSerializationEnv"]},{"name":"val _inheritableContextSerializationEnv: InheritableThreadLocalToggleField<SerializationEnvironment>","description":"net.corda.core.serialization.internal._inheritableContextSerializationEnv","location":"docs/net.corda.core.serialization.internal/_inheritable-context-serialization-env.html","searchKeys":["_inheritableContextSerializationEnv","val _inheritableContextSerializationEnv: InheritableThreadLocalToggleField<SerializationEnvironment>","net.corda.core.serialization.internal._inheritableContextSerializationEnv"]},{"name":"val _rpcClientSerializationEnv: SimpleToggleField<SerializationEnvironment>","description":"net.corda.core.serialization.internal._rpcClientSerializationEnv","location":"docs/net.corda.core.serialization.internal/_rpc-client-serialization-env.html","searchKeys":["_rpcClientSerializationEnv","val _rpcClientSerializationEnv: SimpleToggleField<SerializationEnvironment>","net.corda.core.serialization.internal._rpcClientSerializationEnv"]},{"name":"val acceptableContracts: NonEmptySet<SecureHash>","description":"net.corda.finance.contracts.asset.Obligation.Terms.acceptableContracts","location":"docs/net.corda.finance.contracts.asset/-obligation/-terms/acceptable-contracts.html","searchKeys":["acceptableContracts","val acceptableContracts: NonEmptySet<SecureHash>","net.corda.finance.contracts.asset.Obligation.Terms.acceptableContracts"]},{"name":"val acceptableIssuedProducts: NonEmptySet<Issued<P>>","description":"net.corda.finance.contracts.asset.Obligation.Terms.acceptableIssuedProducts","location":"docs/net.corda.finance.contracts.asset/-obligation/-terms/acceptable-issued-products.html","searchKeys":["acceptableIssuedProducts","val acceptableIssuedProducts: NonEmptySet<Issued<P>>","net.corda.finance.contracts.asset.Obligation.Terms.acceptableIssuedProducts"]},{"name":"val actor: Actor","description":"net.corda.core.context.InvocationOrigin.RPC.actor","location":"docs/net.corda.core.context/-invocation-origin/-r-p-c/actor.html","searchKeys":["actor","val actor: Actor","net.corda.core.context.InvocationOrigin.RPC.actor"]},{"name":"val actor: Actor?","description":"net.corda.core.context.InvocationContext.actor","location":"docs/net.corda.core.context/-invocation-context/actor.html","searchKeys":["actor","val actor: Actor?","net.corda.core.context.InvocationContext.actor"]},{"name":"val additionalContracts: Set<ContractClassName>","description":"net.corda.core.contracts.ContractAttachment.additionalContracts","location":"docs/net.corda.core.contracts/-contract-attachment/additional-contracts.html","searchKeys":["additionalContracts","val additionalContracts: Set<ContractClassName>","net.corda.core.contracts.ContractAttachment.additionalContracts"]},{"name":"val additionalCordapps: Collection<TestCordapp>","description":"net.corda.testing.driver.NodeParameters.additionalCordapps","location":"docs/net.corda.testing.driver/-node-parameters/additional-cordapps.html","searchKeys":["additionalCordapps","val additionalCordapps: Collection<TestCordapp>","net.corda.testing.driver.NodeParameters.additionalCordapps"]},{"name":"val additionalCordapps: Collection<TestCordapp>","description":"net.corda.testing.node.MockNodeParameters.additionalCordapps","location":"docs/net.corda.testing.node/-mock-node-parameters/additional-cordapps.html","searchKeys":["additionalCordapps","val additionalCordapps: Collection<TestCordapp>","net.corda.testing.node.MockNodeParameters.additionalCordapps"]},{"name":"val additionalCordapps: Collection<TestCordappInternal>","description":"net.corda.testing.node.internal.InternalMockNodeParameters.additionalCordapps","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/additional-cordapps.html","searchKeys":["additionalCordapps","val additionalCordapps: Collection<TestCordappInternal>","net.corda.testing.node.internal.InternalMockNodeParameters.additionalCordapps"]},{"name":"val addresses: List<NetworkHostAndPort>","description":"net.corda.core.node.NodeInfo.addresses","location":"docs/net.corda.core.node/-node-info/addresses.html","searchKeys":["addresses","val addresses: List<NetworkHostAndPort>","net.corda.core.node.NodeInfo.addresses"]},{"name":"val addresses: List<NetworkHostAndPort>","description":"net.corda.core.node.services.PartyInfo.SingleNode.addresses","location":"docs/net.corda.core.node.services/-party-info/-single-node/addresses.html","searchKeys":["addresses","val addresses: List<NetworkHostAndPort>","net.corda.core.node.services.PartyInfo.SingleNode.addresses"]},{"name":"val addresses: Set<NetworkHostAndPort>","description":"net.corda.core.internal.errors.AddressBindingException.addresses","location":"docs/net.corda.core.internal.errors/-address-binding-exception/addresses.html","searchKeys":["addresses","val addresses: Set<NetworkHostAndPort>","net.corda.core.internal.errors.AddressBindingException.addresses"]},{"name":"val algSpec: AlgorithmParameterSpec?","description":"net.corda.core.crypto.SignatureScheme.algSpec","location":"docs/net.corda.core.crypto/-signature-scheme/alg-spec.html","searchKeys":["algSpec","val algSpec: AlgorithmParameterSpec?","net.corda.core.crypto.SignatureScheme.algSpec"]},{"name":"val algorithm: String","description":"net.corda.core.crypto.SecureHash.HASH.algorithm","location":"docs/net.corda.core.crypto/-secure-hash/-h-a-s-h/algorithm.html","searchKeys":["algorithm","val algorithm: String","net.corda.core.crypto.SecureHash.HASH.algorithm"]},{"name":"val algorithm: String","description":"net.corda.testing.node.internal.CustomCordapp.SigningInfo.algorithm","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-signing-info/algorithm.html","searchKeys":["algorithm","val algorithm: String","net.corda.testing.node.internal.CustomCordapp.SigningInfo.algorithm"]},{"name":"val algorithmName: String","description":"net.corda.core.crypto.SignatureScheme.algorithmName","location":"docs/net.corda.core.crypto/-signature-scheme/algorithm-name.html","searchKeys":["algorithmName","val algorithmName: String","net.corda.core.crypto.SignatureScheme.algorithmName"]},{"name":"val alias: String","description":"net.corda.core.crypto.internal.AliasPrivateKey.alias","location":"docs/net.corda.core.crypto.internal/-alias-private-key/alias.html","searchKeys":["alias","val alias: String","net.corda.core.crypto.internal.AliasPrivateKey.alias"]},{"name":"val allContracts: Set<ContractClassName>","description":"net.corda.core.contracts.ContractAttachment.allContracts","location":"docs/net.corda.core.contracts/-contract-attachment/all-contracts.html","searchKeys":["allContracts","val allContracts: Set<ContractClassName>","net.corda.core.contracts.ContractAttachment.allContracts"]},{"name":"val allOnesHash: SecureHash","description":"net.corda.core.crypto.DigestService.allOnesHash","location":"docs/net.corda.core.crypto/-digest-service/all-ones-hash.html","searchKeys":["allOnesHash","val allOnesHash: SecureHash","net.corda.core.crypto.DigestService.allOnesHash"]},{"name":"val allOnesHash: SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.allOnesHash","location":"docs/net.corda.core.crypto/-secure-hash/-companion/all-ones-hash.html","searchKeys":["allOnesHash","val allOnesHash: SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.allOnesHash"]},{"name":"val allSteps: List<<Error class: unknown class><Int, ProgressTracker.Step>>","description":"net.corda.core.utilities.ProgressTracker.allSteps","location":"docs/net.corda.core.utilities/-progress-tracker/all-steps.html","searchKeys":["allSteps","val allSteps: List<<Error class: unknown class><Int, ProgressTracker.Step>>","net.corda.core.utilities.ProgressTracker.allSteps"]},{"name":"val allStepsLabels: List<<Error class: unknown class><Int, String>>","description":"net.corda.core.utilities.ProgressTracker.allStepsLabels","location":"docs/net.corda.core.utilities/-progress-tracker/all-steps-labels.html","searchKeys":["allStepsLabels","val allStepsLabels: List<<Error class: unknown class><Int, String>>","net.corda.core.utilities.ProgressTracker.allStepsLabels"]},{"name":"val allowHibernateToManageAppSchema: Boolean = true","description":"net.corda.testing.driver.DriverParameters.allowHibernateToManageAppSchema","location":"docs/net.corda.testing.driver/-driver-parameters/allow-hibernate-to-manage-app-schema.html","searchKeys":["allowHibernateToManageAppSchema","val allowHibernateToManageAppSchema: Boolean = true","net.corda.testing.driver.DriverParameters.allowHibernateToManageAppSchema"]},{"name":"val allowHibernateToManageAppSchema: Boolean = true","description":"net.corda.testing.node.internal.DriverDSLImpl.allowHibernateToManageAppSchema","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/allow-hibernate-to-manage-app-schema.html","searchKeys":["allowHibernateToManageAppSchema","val allowHibernateToManageAppSchema: Boolean = true","net.corda.testing.node.internal.DriverDSLImpl.allowHibernateToManageAppSchema"]},{"name":"val alsoFinalize: Boolean = false","description":"net.corda.core.flows.LedgerRecoveryParameters.alsoFinalize","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/also-finalize.html","searchKeys":["alsoFinalize","val alsoFinalize: Boolean = false","net.corda.core.flows.LedgerRecoveryParameters.alsoFinalize"]},{"name":"val alternativeOIDs: List<<Error class: unknown class>>","description":"net.corda.core.crypto.SignatureScheme.alternativeOIDs","location":"docs/net.corda.core.crypto/-signature-scheme/alternative-o-i-ds.html","searchKeys":["alternativeOIDs","val alternativeOIDs: List<<Error class: unknown class>>","net.corda.core.crypto.SignatureScheme.alternativeOIDs"]},{"name":"val amount: Amount<Currency>","description":"net.corda.finance.flows.AbstractCashFlow.AbstractRequest.amount","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-abstract-request/amount.html","searchKeys":["amount","val amount: Amount<Currency>","net.corda.finance.flows.AbstractCashFlow.AbstractRequest.amount"]},{"name":"val amount: Amount<Currency>","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.amount","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/amount.html","searchKeys":["amount","val amount: Amount<Currency>","net.corda.finance.flows.CashIssueAndPaymentFlow.amount"]},{"name":"val amount: Amount<Currency>","description":"net.corda.finance.flows.CashPaymentFlow.amount","location":"docs/net.corda.finance.flows/-cash-payment-flow/amount.html","searchKeys":["amount","val amount: Amount<Currency>","net.corda.finance.flows.CashPaymentFlow.amount"]},{"name":"val amount: Amount<Issued<Currency>>","description":"net.corda.finance.contracts.asset.Cash.Commands.Exit.amount","location":"docs/net.corda.finance.contracts.asset/-cash/-commands/-exit/amount.html","searchKeys":["amount","val amount: Amount<Issued<Currency>>","net.corda.finance.contracts.asset.Cash.Commands.Exit.amount"]},{"name":"val amount: Amount<Issued<Obligation.Terms<P>>>","description":"net.corda.finance.contracts.asset.Obligation.Commands.Exit.amount","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-exit/amount.html","searchKeys":["amount","val amount: Amount<Issued<Obligation.Terms<P>>>","net.corda.finance.contracts.asset.Obligation.Commands.Exit.amount"]},{"name":"val amount: Amount<Issued<Obligation.Terms<P>>>","description":"net.corda.finance.contracts.asset.Obligation.Commands.Settle.amount","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-settle/amount.html","searchKeys":["amount","val amount: Amount<Issued<Obligation.Terms<P>>>","net.corda.finance.contracts.asset.Obligation.Commands.Settle.amount"]},{"name":"val amount: Amount<T>","description":"net.corda.core.contracts.SourceAndAmount.amount","location":"docs/net.corda.core.contracts/-source-and-amount/amount.html","searchKeys":["amount","val amount: Amount<T>","net.corda.core.contracts.SourceAndAmount.amount"]},{"name":"val amount: Amount<T>","description":"net.corda.finance.contracts.asset.PartyAndAmount.amount","location":"docs/net.corda.finance.contracts.asset/-party-and-amount/amount.html","searchKeys":["amount","val amount: Amount<T>","net.corda.finance.contracts.asset.PartyAndAmount.amount"]},{"name":"val amountMissing: Amount<*>","description":"net.corda.core.contracts.InsufficientBalanceException.amountMissing","location":"docs/net.corda.core.contracts/-insufficient-balance-exception/amount-missing.html","searchKeys":["amountMissing","val amountMissing: Amount<*>","net.corda.core.contracts.InsufficientBalanceException.amountMissing"]},{"name":"val annualCompoundCount: Int","description":"net.corda.finance.contracts.Frequency.annualCompoundCount","location":"docs/net.corda.finance.contracts/-frequency/annual-compound-count.html","searchKeys":["annualCompoundCount","val annualCompoundCount: Int","net.corda.finance.contracts.Frequency.annualCompoundCount"]},{"name":"val anonymous: Boolean","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.anonymous","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-issue-and-payment-request/anonymous.html","searchKeys":["anonymous","val anonymous: Boolean","net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.anonymous"]},{"name":"val anonymous: Boolean","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.anonymous","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/anonymous.html","searchKeys":["anonymous","val anonymous: Boolean","net.corda.finance.flows.CashIssueAndPaymentFlow.anonymous"]},{"name":"val anonymous: Boolean","description":"net.corda.finance.flows.CashPaymentFlow.PaymentRequest.anonymous","location":"docs/net.corda.finance.flows/-cash-payment-flow/-payment-request/anonymous.html","searchKeys":["anonymous","val anonymous: Boolean","net.corda.finance.flows.CashPaymentFlow.PaymentRequest.anonymous"]},{"name":"val anonymous: Boolean","description":"net.corda.finance.flows.CashPaymentFlow.anonymous","location":"docs/net.corda.finance.flows/-cash-payment-flow/anonymous.html","searchKeys":["anonymous","val anonymous: Boolean","net.corda.finance.flows.CashPaymentFlow.anonymous"]},{"name":"val appName: String","description":"net.corda.core.flows.FlowInfo.appName","location":"docs/net.corda.core.flows/-flow-info/app-name.html","searchKeys":["appName","val appName: String","net.corda.core.flows.FlowInfo.appName"]},{"name":"val args: Array<Any?>","description":"net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.args","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-parsed-method-call/args.html","searchKeys":["args","val args: Array<Any?>","net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.args"]},{"name":"val arguments: List<Any?>?","description":"net.corda.core.context.InvocationContext.arguments","location":"docs/net.corda.core.context/-invocation-context/arguments.html","searchKeys":["arguments","val arguments: List<Any?>?","net.corda.core.context.InvocationContext.arguments"]},{"name":"val attachment: Attachment","description":"net.corda.core.contracts.ContractAttachment.attachment","location":"docs/net.corda.core.contracts/-contract-attachment/attachment.html","searchKeys":["attachment","val attachment: Attachment","net.corda.core.contracts.ContractAttachment.attachment"]},{"name":"val attachmentHash: AttachmentId","description":"net.corda.core.contracts.TransactionVerificationException.InvalidAttachmentException.attachmentHash","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-invalid-attachment-exception/attachment-hash.html","searchKeys":["attachmentHash","val attachmentHash: AttachmentId","net.corda.core.contracts.TransactionVerificationException.InvalidAttachmentException.attachmentHash"]},{"name":"val attachmentHash: AttachmentId","description":"net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.attachmentHash","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-package-ownership-exception/attachment-hash.html","searchKeys":["attachmentHash","val attachmentHash: AttachmentId","net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.attachmentHash"]},{"name":"val attachmentId: Attachment","description":"net.corda.core.contracts.TransactionVerificationException.DuplicateAttachmentsRejection.attachmentId","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-duplicate-attachments-rejection/attachment-id.html","searchKeys":["attachmentId","val attachmentId: Attachment","net.corda.core.contracts.TransactionVerificationException.DuplicateAttachmentsRejection.attachmentId"]},{"name":"val attachmentId: AttachmentId","description":"net.corda.core.contracts.BrokenAttachmentException.attachmentId","location":"docs/net.corda.core.contracts/-broken-attachment-exception/attachment-id.html","searchKeys":["attachmentId","val attachmentId: AttachmentId","net.corda.core.contracts.BrokenAttachmentException.attachmentId"]},{"name":"val attachmentId: AttachmentId","description":"net.corda.core.internal.AttachmentTrustInfo.attachmentId","location":"docs/net.corda.core.internal/-attachment-trust-info/attachment-id.html","searchKeys":["attachmentId","val attachmentId: AttachmentId","net.corda.core.internal.AttachmentTrustInfo.attachmentId"]},{"name":"val attachmentId: SecureHash","description":"net.corda.core.contracts.HashAttachmentConstraint.attachmentId","location":"docs/net.corda.core.contracts/-hash-attachment-constraint/attachment-id.html","searchKeys":["attachmentId","val attachmentId: SecureHash","net.corda.core.contracts.HashAttachmentConstraint.attachmentId"]},{"name":"val attachmentId: SecureHash?","description":"net.corda.core.cordapp.CordappContext.attachmentId","location":"docs/net.corda.core.cordapp/-cordapp-context/attachment-id.html","searchKeys":["attachmentId","val attachmentId: SecureHash?","net.corda.core.cordapp.CordappContext.attachmentId"]},{"name":"val attachments: List<Attachment>","description":"net.corda.core.transactions.LedgerTransaction.attachments","location":"docs/net.corda.core.transactions/-ledger-transaction/attachments.html","searchKeys":["attachments","val attachments: List<Attachment>","net.corda.core.transactions.LedgerTransaction.attachments"]},{"name":"val attachments: List<SecureHash>","description":"net.corda.core.transactions.TraversableTransaction.attachments","location":"docs/net.corda.core.transactions/-traversable-transaction/attachments.html","searchKeys":["attachments","val attachments: List<SecureHash>","net.corda.core.transactions.TraversableTransaction.attachments"]},{"name":"val attribute: Sort.Attribute","description":"net.corda.core.node.services.vault.SortAttribute.Standard.attribute","location":"docs/net.corda.core.node.services.vault/-sort-attribute/-standard/attribute.html","searchKeys":["attribute","val attribute: Sort.Attribute","net.corda.core.node.services.vault.SortAttribute.Standard.attribute"]},{"name":"val attributeChild: String?","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute.attributeChild","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/attribute-child.html","searchKeys":["attributeChild","val attributeChild: String?","net.corda.core.node.services.vault.Sort.CommonStateAttribute.attributeChild"]},{"name":"val attributeFullRules: List<LegalNameValidator.Rule<String>>","description":"net.corda.core.internal.LegalNameValidator.Rule.Companion.attributeFullRules","location":"docs/net.corda.core.internal/-legal-name-validator/-rule/-companion/attribute-full-rules.html","searchKeys":["attributeFullRules","val attributeFullRules: List<LegalNameValidator.Rule<String>>","net.corda.core.internal.LegalNameValidator.Rule.Companion.attributeFullRules"]},{"name":"val attributeName: String","description":"net.corda.core.node.services.vault.Sort.FungibleStateAttribute.attributeName","location":"docs/net.corda.core.node.services.vault/-sort/-fungible-state-attribute/attribute-name.html","searchKeys":["attributeName","val attributeName: String","net.corda.core.node.services.vault.Sort.FungibleStateAttribute.attributeName"]},{"name":"val attributeName: String","description":"net.corda.core.node.services.vault.Sort.LinearStateAttribute.attributeName","location":"docs/net.corda.core.node.services.vault/-sort/-linear-state-attribute/attribute-name.html","searchKeys":["attributeName","val attributeName: String","net.corda.core.node.services.vault.Sort.LinearStateAttribute.attributeName"]},{"name":"val attributeName: String","description":"net.corda.core.node.services.vault.Sort.VaultStateAttribute.attributeName","location":"docs/net.corda.core.node.services.vault/-sort/-vault-state-attribute/attribute-name.html","searchKeys":["attributeName","val attributeName: String","net.corda.core.node.services.vault.Sort.VaultStateAttribute.attributeName"]},{"name":"val attributeParent: String","description":"net.corda.core.node.services.vault.Sort.CommonStateAttribute.attributeParent","location":"docs/net.corda.core.node.services.vault/-sort/-common-state-attribute/attribute-parent.html","searchKeys":["attributeParent","val attributeParent: String","net.corda.core.node.services.vault.Sort.CommonStateAttribute.attributeParent"]},{"name":"val attributeRules: List<LegalNameValidator.Rule<String>>","description":"net.corda.core.internal.LegalNameValidator.Rule.Companion.attributeRules","location":"docs/net.corda.core.internal/-legal-name-validator/-rule/-companion/attribute-rules.html","searchKeys":["attributeRules","val attributeRules: List<LegalNameValidator.Rule<String>>","net.corda.core.internal.LegalNameValidator.Rule.Companion.attributeRules"]},{"name":"val attributes: Map<String, String>","description":"net.corda.core.internal.telemetry.StartSpanEvent.attributes","location":"docs/net.corda.core.internal.telemetry/-start-span-event/attributes.html","searchKeys":["attributes","val attributes: Map<String, String>","net.corda.core.internal.telemetry.StartSpanEvent.attributes"]},{"name":"val attributes: Map<String, String>","description":"net.corda.core.internal.telemetry.StartSpanForFlowEvent.attributes","location":"docs/net.corda.core.internal.telemetry/-start-span-for-flow-event/attributes.html","searchKeys":["attributes","val attributes: Map<String, String>","net.corda.core.internal.telemetry.StartSpanForFlowEvent.attributes"]},{"name":"val autoVisibleNodes: Boolean = true","description":"net.corda.testing.node.internal.InternalMockNetwork.autoVisibleNodes","location":"docs/net.corda.testing.node.internal/-internal-mock-network/auto-visible-nodes.html","searchKeys":["autoVisibleNodes","val autoVisibleNodes: Boolean = true","net.corda.testing.node.internal.InternalMockNetwork.autoVisibleNodes"]},{"name":"val availableCommands: Map<String, String>","description":"net.corda.client.jackson.StringToMethodCallParser.availableCommands","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/available-commands.html","searchKeys":["availableCommands","val availableCommands: Map<String, String>","net.corda.client.jackson.StringToMethodCallParser.availableCommands"]},{"name":"val availableComponentGroups: List<List<Any>>","description":"net.corda.core.transactions.TraversableTransaction.availableComponentGroups","location":"docs/net.corda.core.transactions/-traversable-transaction/available-component-groups.html","searchKeys":["availableComponentGroups","val availableComponentGroups: List<List<Any>>","net.corda.core.transactions.TraversableTransaction.availableComponentGroups"]},{"name":"val backoffBase: Double","description":"net.corda.testing.node.MockNetFlowTimeOut.backoffBase","location":"docs/net.corda.testing.node/-mock-net-flow-time-out/backoff-base.html","searchKeys":["backoffBase","val backoffBase: Double","net.corda.testing.node.MockNetFlowTimeOut.backoffBase"]},{"name":"val bagOfCash: String","description":"net.corda.core.internal.Emoji.bagOfCash","location":"docs/net.corda.core.internal/-emoji/bag-of-cash.html","searchKeys":["bagOfCash","val bagOfCash: String","net.corda.core.internal.Emoji.bagOfCash"]},{"name":"val baggage: Map<String, String>","description":"net.corda.core.internal.telemetry.SimpleLogContext.baggage","location":"docs/net.corda.core.internal.telemetry/-simple-log-context/baggage.html","searchKeys":["baggage","val baggage: Map<String, String>","net.corda.core.internal.telemetry.SimpleLogContext.baggage"]},{"name":"val beneficiary: AbstractParty","description":"net.corda.finance.contracts.asset.Obligation.State.beneficiary","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/beneficiary.html","searchKeys":["beneficiary","val beneficiary: AbstractParty","net.corda.finance.contracts.asset.Obligation.State.beneficiary"]},{"name":"val books: String","description":"net.corda.core.internal.Emoji.books","location":"docs/net.corda.core.internal/-emoji/books.html","searchKeys":["books","val books: String","net.corda.core.internal.Emoji.books"]},{"name":"val broker: RpcBrokerHandle","description":"net.corda.testing.node.internal.RpcServerHandle.broker","location":"docs/net.corda.testing.node.internal/-rpc-server-handle/broker.html","searchKeys":["broker","val broker: RpcBrokerHandle","net.corda.testing.node.internal.RpcServerHandle.broker"]},{"name":"val buffer: ByteArrayOutputStream","description":"net.corda.core.crypto.CompositeSignature.State.buffer","location":"docs/net.corda.core.crypto/-composite-signature/-state/buffer.html","searchKeys":["buffer","val buffer: ByteArrayOutputStream","net.corda.core.crypto.CompositeSignature.State.buffer"]},{"name":"val by: PublicKey","description":"net.corda.core.crypto.DigitalSignature.WithKey.by","location":"docs/net.corda.core.crypto/-digital-signature/-with-key/by.html","searchKeys":["by","val by: PublicKey","net.corda.core.crypto.DigitalSignature.WithKey.by"]},{"name":"val by: PublicKey","description":"net.corda.core.crypto.TransactionSignature.by","location":"docs/net.corda.core.crypto/-transaction-signature/by.html","searchKeys":["by","val by: PublicKey","net.corda.core.crypto.TransactionSignature.by"]},{"name":"val by: X509Certificate","description":"net.corda.core.internal.DigitalSignatureWithCert.by","location":"docs/net.corda.core.internal/-digital-signature-with-cert/by.html","searchKeys":["by","val by: X509Certificate","net.corda.core.internal.DigitalSignatureWithCert.by"]},{"name":"val call: () -> Any?","description":"net.corda.testing.node.internal.RandomRpcUser.Companion.Call.call","location":"docs/net.corda.testing.node.internal/-random-rpc-user/-companion/-call/call.html","searchKeys":["call","val call: () -> Any?","net.corda.testing.node.internal.RandomRpcUser.Companion.Call.call"]},{"name":"val caller: Party","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.caller","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/caller.html","searchKeys":["caller","val caller: Party","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.caller"]},{"name":"val cashSigningPubKeys: List<PublicKey>","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx.cashSigningPubKeys","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-shared-tx/cash-signing-pub-keys.html","searchKeys":["cashSigningPubKeys","val cashSigningPubKeys: List<PublicKey>","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx.cashSigningPubKeys"]},{"name":"val cause: Throwable","description":"net.corda.core.flows.NotaryError.General.cause","location":"docs/net.corda.core.flows/-notary-error/-general/cause.html","searchKeys":["cause","val cause: Throwable","net.corda.core.flows.NotaryError.General.cause"]},{"name":"val cause: Throwable","description":"net.corda.core.flows.NotaryError.RequestSignatureInvalid.cause","location":"docs/net.corda.core.flows/-notary-error/-request-signature-invalid/cause.html","searchKeys":["cause","val cause: Throwable","net.corda.core.flows.NotaryError.RequestSignatureInvalid.cause"]},{"name":"val cause: Throwable","description":"net.corda.core.flows.NotaryError.TransactionInvalid.cause","location":"docs/net.corda.core.flows/-notary-error/-transaction-invalid/cause.html","searchKeys":["cause","val cause: Throwable","net.corda.core.flows.NotaryError.TransactionInvalid.cause"]},{"name":"val causeFromStdError: String","description":"net.corda.testing.node.internal.NodeListenProcessDeathException.causeFromStdError","location":"docs/net.corda.testing.node.internal/-node-listen-process-death-exception/cause-from-std-error.html","searchKeys":["causeFromStdError","val causeFromStdError: String","net.corda.testing.node.internal.NodeListenProcessDeathException.causeFromStdError"]},{"name":"val certPath: CertPath","description":"net.corda.core.identity.PartyAndCertificate.certPath","location":"docs/net.corda.core.identity/-party-and-certificate/cert-path.html","searchKeys":["certPath","val certPath: CertPath","net.corda.core.identity.PartyAndCertificate.certPath"]},{"name":"val certificate: X509Certificate","description":"net.corda.core.identity.PartyAndCertificate.certificate","location":"docs/net.corda.core.identity/-party-and-certificate/certificate.html","searchKeys":["certificate","val certificate: X509Certificate","net.corda.core.identity.PartyAndCertificate.certificate"]},{"name":"val changes: <Error class: unknown class><ProgressTracker.Change>","description":"net.corda.core.utilities.ProgressTracker.changes","location":"docs/net.corda.core.utilities/-progress-tracker/changes.html","searchKeys":["changes","val changes: <Error class: unknown class><ProgressTracker.Change>","net.corda.core.utilities.ProgressTracker.changes"]},{"name":"val children: List<CompositeKey.NodeAndWeight>","description":"net.corda.core.crypto.CompositeKey.children","location":"docs/net.corda.core.crypto/-composite-key/children.html","searchKeys":["children","val children: List<CompositeKey.NodeAndWeight>","net.corda.core.crypto.CompositeKey.children"]},{"name":"val classFileMajorVersion: Int","description":"net.corda.core.internal.cordapp.LanguageVersion.Bytecode.classFileMajorVersion","location":"docs/net.corda.core.internal.cordapp/-language-version/-bytecode/class-file-major-version.html","searchKeys":["classFileMajorVersion","val classFileMajorVersion: Int","net.corda.core.internal.cordapp.LanguageVersion.Bytecode.classFileMajorVersion"]},{"name":"val classLoader: ClassLoader","description":"net.corda.core.cordapp.CordappContext.classLoader","location":"docs/net.corda.core.cordapp/-cordapp-context/class-loader.html","searchKeys":["classLoader","val classLoader: ClassLoader","net.corda.core.cordapp.CordappContext.classLoader"]},{"name":"val classLoader: ClassLoader?","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.classLoader","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/class-loader.html","searchKeys":["classLoader","val classLoader: ClassLoader?","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.classLoader"]},{"name":"val className: String","description":"net.corda.core.flows.StackFrameDataToken.className","location":"docs/net.corda.core.flows/-stack-frame-data-token/class-name.html","searchKeys":["className","val className: String","net.corda.core.flows.StackFrameDataToken.className"]},{"name":"val className: String? = null","description":"net.corda.testing.node.MockNetNotaryConfig.className","location":"docs/net.corda.testing.node/-mock-net-notary-config/class-name.html","searchKeys":["className","val className: String? = null","net.corda.testing.node.MockNetNotaryConfig.className"]},{"name":"val classes: Set<Class<*>>","description":"net.corda.testing.node.internal.CustomCordapp.classes","location":"docs/net.corda.testing.node.internal/-custom-cordapp/classes.html","searchKeys":["classes","val classes: Set<Class<*>>","net.corda.testing.node.internal.CustomCordapp.classes"]},{"name":"val clientId: String? = null","description":"net.corda.core.context.InvocationContext.clientId","location":"docs/net.corda.core.context/-invocation-context/client-id.html","searchKeys":["clientId","val clientId: String? = null","net.corda.core.context.InvocationContext.clientId"]},{"name":"val clientTransportConfiguration: <Error class: unknown class>","description":"net.corda.testing.node.internal.RpcBrokerHandle.clientTransportConfiguration","location":"docs/net.corda.testing.node.internal/-rpc-broker-handle/client-transport-configuration.html","searchKeys":["clientTransportConfiguration","val clientTransportConfiguration: <Error class: unknown class>","net.corda.testing.node.internal.RpcBrokerHandle.clientTransportConfiguration"]},{"name":"val clock: Clock","description":"net.corda.core.node.services.TimeWindowChecker.clock","location":"docs/net.corda.core.node.services/-time-window-checker/clock.html","searchKeys":["clock","val clock: Clock","net.corda.core.node.services.TimeWindowChecker.clock"]},{"name":"val cluster: ClusterSpec? = null","description":"net.corda.testing.node.NotarySpec.cluster","location":"docs/net.corda.testing.node/-notary-spec/cluster.html","searchKeys":["cluster","val cluster: ClusterSpec? = null","net.corda.testing.node.NotarySpec.cluster"]},{"name":"val code: String","description":"net.corda.finance.contracts.Tenor.TimeUnit.code","location":"docs/net.corda.finance.contracts/-tenor/-time-unit/code.html","searchKeys":["code","val code: String","net.corda.finance.contracts.Tenor.TimeUnit.code"]},{"name":"val column: Column<O, C>","description":"net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.column","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-aggregate-function-expression/column.html","searchKeys":["column","val column: Column<O, C>","net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.column"]},{"name":"val column: Column<O, C>","description":"net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression.column","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-column-predicate-expression/column.html","searchKeys":["column","val column: Column<O, C>","net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression.column"]},{"name":"val columnName: String","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.columnName","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-attribute/column-name.html","searchKeys":["columnName","val columnName: String","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortAttribute.columnName"]},{"name":"val columns: Collection<AttachmentSort.AttachmentSortColumn>","description":"net.corda.core.node.services.vault.AttachmentSort.columns","location":"docs/net.corda.core.node.services.vault/-attachment-sort/columns.html","searchKeys":["columns","val columns: Collection<AttachmentSort.AttachmentSortColumn>","net.corda.core.node.services.vault.AttachmentSort.columns"]},{"name":"val columns: Collection<Sort.SortColumn>","description":"net.corda.core.node.services.vault.Sort.columns","location":"docs/net.corda.core.node.services.vault/-sort/columns.html","searchKeys":["columns","val columns: Collection<Sort.SortColumn>","net.corda.core.node.services.vault.Sort.columns"]},{"name":"val command: CommandData","description":"net.corda.core.contracts.CommandAndState.command","location":"docs/net.corda.core.contracts/-command-and-state/command.html","searchKeys":["command","val command: CommandData","net.corda.core.contracts.CommandAndState.command"]},{"name":"val commands: List<Command<*>>","description":"net.corda.core.transactions.TraversableTransaction.commands","location":"docs/net.corda.core.transactions/-traversable-transaction/commands.html","searchKeys":["commands","val commands: List<Command<*>>","net.corda.core.transactions.TraversableTransaction.commands"]},{"name":"val commands: List<CommandWithParties<CommandData>>","description":"net.corda.core.transactions.LedgerTransaction.commands","location":"docs/net.corda.core.transactions/-ledger-transaction/commands.html","searchKeys":["commands","val commands: List<CommandWithParties<CommandData>>","net.corda.core.transactions.LedgerTransaction.commands"]},{"name":"val commodityCode: String","description":"net.corda.finance.contracts.Commodity.commodityCode","location":"docs/net.corda.finance.contracts/-commodity/commodity-code.html","searchKeys":["commodityCode","val commodityCode: String","net.corda.finance.contracts.Commodity.commodityCode"]},{"name":"val commonName: String?","description":"net.corda.core.identity.CordaX500Name.commonName","location":"docs/net.corda.core.identity/-corda-x500-name/common-name.html","searchKeys":["commonName","val commonName: String?","net.corda.core.identity.CordaX500Name.commonName"]},{"name":"val compatibilityZone: CompatibilityZoneParams?","description":"net.corda.testing.node.internal.DriverDSLImpl.compatibilityZone","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/compatibility-zone.html","searchKeys":["compatibilityZone","val compatibilityZone: CompatibilityZoneParams?","net.corda.testing.node.internal.DriverDSLImpl.compatibilityZone"]},{"name":"val component: OpaqueBytes","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent.component","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/-filtered-component/component.html","searchKeys":["component","val component: OpaqueBytes","net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent.component"]},{"name":"val componentTelemetryIds: Map<String, UUID>","description":"net.corda.core.internal.telemetry.ComponentTelemetryIds.componentTelemetryIds","location":"docs/net.corda.core.internal.telemetry/-component-telemetry-ids/component-telemetry-ids.html","searchKeys":["componentTelemetryIds","val componentTelemetryIds: Map<String, UUID>","net.corda.core.internal.telemetry.ComponentTelemetryIds.componentTelemetryIds"]},{"name":"val compositeServiceIdentity: Boolean = false","description":"net.corda.testing.node.internal.DummyClusterSpec.compositeServiceIdentity","location":"docs/net.corda.testing.node.internal/-dummy-cluster-spec/composite-service-identity.html","searchKeys":["compositeServiceIdentity","val compositeServiceIdentity: Boolean = false","net.corda.testing.node.internal.DummyClusterSpec.compositeServiceIdentity"]},{"name":"val confidentialIdentityMinimumBackupInterval: Duration? = null","description":"net.corda.core.node.NetworkParameters.confidentialIdentityMinimumBackupInterval","location":"docs/net.corda.core.node/-network-parameters/confidential-identity-minimum-backup-interval.html","searchKeys":["confidentialIdentityMinimumBackupInterval","val confidentialIdentityMinimumBackupInterval: Duration? = null","net.corda.core.node.NetworkParameters.confidentialIdentityMinimumBackupInterval"]},{"name":"val config: <Error class: unknown class>","description":"net.corda.testing.node.internal.MockNodeArgs.config","location":"docs/net.corda.testing.node.internal/-mock-node-args/config.html","searchKeys":["config","val config: <Error class: unknown class>","net.corda.testing.node.internal.MockNodeArgs.config"]},{"name":"val config: CordappConfig","description":"net.corda.core.cordapp.CordappContext.config","location":"docs/net.corda.core.cordapp/-cordapp-context/config.html","searchKeys":["config","val config: CordappConfig","net.corda.core.cordapp.CordappContext.config"]},{"name":"val configOverrides: (<Error class: unknown class>) -> Any?","description":"net.corda.testing.node.internal.InternalMockNodeParameters.configOverrides","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/config-overrides.html","searchKeys":["configOverrides","val configOverrides: (<Error class: unknown class>) -> Any?","net.corda.testing.node.internal.InternalMockNodeParameters.configOverrides"]},{"name":"val configOverrides: MockNodeConfigOverrides? = null","description":"net.corda.testing.node.MockNodeParameters.configOverrides","location":"docs/net.corda.testing.node/-mock-node-parameters/config-overrides.html","searchKeys":["configOverrides","val configOverrides: MockNodeConfigOverrides? = null","net.corda.testing.node.MockNodeParameters.configOverrides"]},{"name":"val constraint: AttachmentConstraint","description":"net.corda.core.contracts.TransactionState.constraint","location":"docs/net.corda.core.contracts/-transaction-state/constraint.html","searchKeys":["constraint","val constraint: AttachmentConstraint","net.corda.core.contracts.TransactionState.constraint"]},{"name":"val constraint: AttachmentConstraint","description":"net.corda.core.node.services.Vault.ConstraintInfo.constraint","location":"docs/net.corda.core.node.services/-vault/-constraint-info/constraint.html","searchKeys":["constraint","val constraint: AttachmentConstraint","net.corda.core.node.services.Vault.ConstraintInfo.constraint"]},{"name":"val constraintInfo: Vault.ConstraintInfo? = null","description":"net.corda.core.node.services.Vault.StateMetadata.constraintInfo","location":"docs/net.corda.core.node.services/-vault/-state-metadata/constraint-info.html","searchKeys":["constraintInfo","val constraintInfo: Vault.ConstraintInfo? = null","net.corda.core.node.services.Vault.StateMetadata.constraintInfo"]},{"name":"val consumed: Set<StateAndRef<U>>","description":"net.corda.core.node.services.Vault.Update.consumed","location":"docs/net.corda.core.node.services/-vault/-update/consumed.html","searchKeys":["consumed","val consumed: Set<StateAndRef<U>>","net.corda.core.node.services.Vault.Update.consumed"]},{"name":"val consumedStates: Map<StateRef, StateConsumptionDetails>","description":"net.corda.core.flows.NotaryError.Conflict.consumedStates","location":"docs/net.corda.core.flows/-notary-error/-conflict/consumed-states.html","searchKeys":["consumedStates","val consumedStates: Map<StateRef, StateConsumptionDetails>","net.corda.core.flows.NotaryError.Conflict.consumedStates"]},{"name":"val consumedTime: Instant?","description":"net.corda.core.node.services.Vault.StateMetadata.consumedTime","location":"docs/net.corda.core.node.services/-vault/-state-metadata/consumed-time.html","searchKeys":["consumedTime","val consumedTime: Instant?","net.corda.core.node.services.Vault.StateMetadata.consumedTime"]},{"name":"val consumingTxIds: Map<StateRef, SecureHash>","description":"net.corda.core.node.services.Vault.Update.consumingTxIds","location":"docs/net.corda.core.node.services/-vault/-update/consuming-tx-ids.html","searchKeys":["consumingTxIds","val consumingTxIds: Map<StateRef, SecureHash>","net.corda.core.node.services.Vault.Update.consumingTxIds"]},{"name":"val content: T","description":"net.corda.core.internal.ThreadBox.content","location":"docs/net.corda.core.internal/-thread-box/content.html","searchKeys":["content","val content: T","net.corda.core.internal.ThreadBox.content"]},{"name":"val context: SerializationContext","description":"net.corda.core.serialization.ObjectWithCompatibleContext.context","location":"docs/net.corda.core.serialization/-object-with-compatible-context/context.html","searchKeys":["context","val context: SerializationContext","net.corda.core.serialization.ObjectWithCompatibleContext.context"]},{"name":"val contract: ContractClassName","description":"net.corda.core.contracts.ContractAttachment.contract","location":"docs/net.corda.core.contracts/-contract-attachment/contract.html","searchKeys":["contract","val contract: ContractClassName","net.corda.core.contracts.ContractAttachment.contract"]},{"name":"val contract: ContractClassName","description":"net.corda.core.contracts.StateAndContract.contract","location":"docs/net.corda.core.contracts/-state-and-contract/contract.html","searchKeys":["contract","val contract: ContractClassName","net.corda.core.contracts.StateAndContract.contract"]},{"name":"val contract: ContractClassName","description":"net.corda.core.contracts.TransactionState.contract","location":"docs/net.corda.core.contracts/-transaction-state/contract.html","searchKeys":["contract","val contract: ContractClassName","net.corda.core.contracts.TransactionState.contract"]},{"name":"val contract: ContractClassName","description":"net.corda.core.internal.AttachmentWithContext.contract","location":"docs/net.corda.core.internal/-attachment-with-context/contract.html","searchKeys":["contract","val contract: ContractClassName","net.corda.core.internal.AttachmentWithContext.contract"]},{"name":"val contract: Cordapp.Info.Contract","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.contract","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/contract.html","searchKeys":["contract","val contract: Cordapp.Info.Contract","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.contract"]},{"name":"val contractAttachment: ContractAttachment","description":"net.corda.core.internal.AttachmentWithContext.contractAttachment","location":"docs/net.corda.core.internal/-attachment-with-context/contract-attachment.html","searchKeys":["contractAttachment","val contractAttachment: ContractAttachment","net.corda.core.internal.AttachmentWithContext.contractAttachment"]},{"name":"val contractClass: String","description":"net.corda.core.contracts.TransactionVerificationException.ConflictingAttachmentsRejection.contractClass","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-conflicting-attachments-rejection/contract-class.html","searchKeys":["contractClass","val contractClass: String","net.corda.core.contracts.TransactionVerificationException.ConflictingAttachmentsRejection.contractClass"]},{"name":"val contractClass: String","description":"net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection.contractClass","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-constraint-propagation-rejection/contract-class.html","searchKeys":["contractClass","val contractClass: String","net.corda.core.contracts.TransactionVerificationException.ConstraintPropagationRejection.contractClass"]},{"name":"val contractClass: String","description":"net.corda.core.contracts.TransactionVerificationException.ContractConstraintRejection.contractClass","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-contract-constraint-rejection/contract-class.html","searchKeys":["contractClass","val contractClass: String","net.corda.core.contracts.TransactionVerificationException.ContractConstraintRejection.contractClass"]},{"name":"val contractClass: String","description":"net.corda.core.contracts.TransactionVerificationException.ContractCreationError.contractClass","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-contract-creation-error/contract-class.html","searchKeys":["contractClass","val contractClass: String","net.corda.core.contracts.TransactionVerificationException.ContractCreationError.contractClass"]},{"name":"val contractClass: String","description":"net.corda.core.contracts.TransactionVerificationException.ContractRejection.contractClass","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-contract-rejection/contract-class.html","searchKeys":["contractClass","val contractClass: String","net.corda.core.contracts.TransactionVerificationException.ContractRejection.contractClass"]},{"name":"val contractClass: String","description":"net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection.contractClass","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-invalid-constraint-rejection/contract-class.html","searchKeys":["contractClass","val contractClass: String","net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection.contractClass"]},{"name":"val contractClass: String","description":"net.corda.core.contracts.TransactionVerificationException.MissingAttachmentRejection.contractClass","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-missing-attachment-rejection/contract-class.html","searchKeys":["contractClass","val contractClass: String","net.corda.core.contracts.TransactionVerificationException.MissingAttachmentRejection.contractClass"]},{"name":"val contractClassNamesCondition: ColumnPredicate<List<ContractClassName>>? = null","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.contractClassNamesCondition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/contract-class-names-condition.html","searchKeys":["contractClassNamesCondition","val contractClassNamesCondition: ColumnPredicate<List<ContractClassName>>? = null","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.contractClassNamesCondition"]},{"name":"val contractStateClassName: String","description":"net.corda.core.node.services.Vault.StateMetadata.contractStateClassName","location":"docs/net.corda.core.node.services/-vault/-state-metadata/contract-state-class-name.html","searchKeys":["contractStateClassName","val contractStateClassName: String","net.corda.core.node.services.Vault.StateMetadata.contractStateClassName"]},{"name":"val coolGuy: String","description":"net.corda.core.internal.Emoji.coolGuy","location":"docs/net.corda.core.internal/-emoji/cool-guy.html","searchKeys":["coolGuy","val coolGuy: String","net.corda.core.internal.Emoji.coolGuy"]},{"name":"val copyBaggageToTags: Boolean","description":"net.corda.client.rpc.internal.RPCClientTelemetry.copyBaggageToTags","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/copy-baggage-to-tags.html","searchKeys":["copyBaggageToTags","val copyBaggageToTags: Boolean","net.corda.client.rpc.internal.RPCClientTelemetry.copyBaggageToTags"]},{"name":"val cordaBouncyCastleProvider: <Error class: unknown class>","description":"net.corda.core.crypto.internal.cordaBouncyCastleProvider","location":"docs/net.corda.core.crypto.internal/corda-bouncy-castle-provider.html","searchKeys":["cordaBouncyCastleProvider","val cordaBouncyCastleProvider: <Error class: unknown class>","net.corda.core.crypto.internal.cordaBouncyCastleProvider"]},{"name":"val cordaModule: Module","description":"net.corda.client.jackson.JacksonSupport.cordaModule","location":"docs/net.corda.client.jackson/-jackson-support/corda-module.html","searchKeys":["cordaModule","val cordaModule: Module","net.corda.client.jackson.JacksonSupport.cordaModule"]},{"name":"val cordaSecurityProvider: <Error class: unknown class>","description":"net.corda.core.crypto.internal.cordaSecurityProvider","location":"docs/net.corda.core.crypto.internal/corda-security-provider.html","searchKeys":["cordaSecurityProvider","val cordaSecurityProvider: <Error class: unknown class>","net.corda.core.crypto.internal.cordaSecurityProvider"]},{"name":"val cordapp: Cordapp","description":"net.corda.core.cordapp.CordappContext.cordapp","location":"docs/net.corda.core.cordapp/-cordapp-context/cordapp.html","searchKeys":["cordapp","val cordapp: Cordapp","net.corda.core.cordapp.CordappContext.cordapp"]},{"name":"val cordappClassloader: ClassLoader","description":"net.corda.testing.node.MockServices.cordappClassloader","location":"docs/net.corda.testing.node/-mock-services/cordapp-classloader.html","searchKeys":["cordappClassloader","val cordappClassloader: ClassLoader","net.corda.testing.node.MockServices.cordappClassloader"]},{"name":"val cordappConfigs: <Error class: unknown class>","description":"net.corda.testing.internal.MockCordappConfigProvider.cordappConfigs","location":"docs/net.corda.testing.internal/-mock-cordapp-config-provider/cordapp-configs.html","searchKeys":["cordappConfigs","val cordappConfigs: <Error class: unknown class>","net.corda.testing.internal.MockCordappConfigProvider.cordappConfigs"]},{"name":"val cordappPackages: List<String>","description":"net.corda.testing.node.MockNetwork.cordappPackages","location":"docs/net.corda.testing.node/-mock-network/cordapp-packages.html","searchKeys":["cordappPackages","val cordappPackages: List<String>","net.corda.testing.node.MockNetwork.cordappPackages"]},{"name":"val cordapps: List<CordappInfo>","description":"net.corda.core.node.NodeDiagnosticInfo.cordapps","location":"docs/net.corda.core.node/-node-diagnostic-info/cordapps.html","searchKeys":["cordapps","val cordapps: List<CordappInfo>","net.corda.core.node.NodeDiagnosticInfo.cordapps"]},{"name":"val cordappsForAllNodes: Collection<TestCordapp>","description":"net.corda.testing.node.MockNetworkParameters.cordappsForAllNodes","location":"docs/net.corda.testing.node/-mock-network-parameters/cordapps-for-all-nodes.html","searchKeys":["cordappsForAllNodes","val cordappsForAllNodes: Collection<TestCordapp>","net.corda.testing.node.MockNetworkParameters.cordappsForAllNodes"]},{"name":"val cordappsForAllNodes: Collection<TestCordapp>? = null","description":"net.corda.testing.driver.DriverParameters.cordappsForAllNodes","location":"docs/net.corda.testing.driver/-driver-parameters/cordapps-for-all-nodes.html","searchKeys":["cordappsForAllNodes","val cordappsForAllNodes: Collection<TestCordapp>? = null","net.corda.testing.driver.DriverParameters.cordappsForAllNodes"]},{"name":"val cordappsForAllNodes: Collection<TestCordappInternal>?","description":"net.corda.testing.node.internal.DriverDSLImpl.cordappsForAllNodes","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/cordapps-for-all-nodes.html","searchKeys":["cordappsForAllNodes","val cordappsForAllNodes: Collection<TestCordappInternal>?","net.corda.testing.node.internal.DriverDSLImpl.cordappsForAllNodes"]},{"name":"val coreTransaction: CoreTransaction","description":"net.corda.core.flows.NotarisationPayload.coreTransaction","location":"docs/net.corda.core.flows/-notarisation-payload/core-transaction.html","searchKeys":["coreTransaction","val coreTransaction: CoreTransaction","net.corda.core.flows.NotarisationPayload.coreTransaction"]},{"name":"val coreTransaction: CoreTransaction","description":"net.corda.core.transactions.SignedTransaction.coreTransaction","location":"docs/net.corda.core.transactions/-signed-transaction/core-transaction.html","searchKeys":["coreTransaction","val coreTransaction: CoreTransaction","net.corda.core.transactions.SignedTransaction.coreTransaction"]},{"name":"val counterParties: List<CordaX500Name>? = null","description":"net.corda.core.flows.FlowRecoveryQuery.counterParties","location":"docs/net.corda.core.flows/-flow-recovery-query/counter-parties.html","searchKeys":["counterParties","val counterParties: List<CordaX500Name>? = null","net.corda.core.flows.FlowRecoveryQuery.counterParties"]},{"name":"val country: String","description":"net.corda.core.identity.CordaX500Name.country","location":"docs/net.corda.core.identity/-corda-x500-name/country.html","searchKeys":["country","val country: String","net.corda.core.identity.CordaX500Name.country"]},{"name":"val currency: String","description":"net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema.UniquePersistentDummyFungibleState.currency","location":"docs/net.corda.testing.internal.vault/-unique-dummy-fungible-state-schema/-unique-persistent-dummy-fungible-state/currency.html","searchKeys":["currency","val currency: String","net.corda.testing.internal.vault.UniqueDummyFungibleStateSchema.UniquePersistentDummyFungibleState.currency"]},{"name":"val currentAttachment: ContractAttachment","description":"net.corda.core.internal.cordapp.ContractAttachmentWithLegacy.currentAttachment","location":"docs/net.corda.core.internal.cordapp/-contract-attachment-with-legacy/current-attachment.html","searchKeys":["currentAttachment","val currentAttachment: ContractAttachment","net.corda.core.internal.cordapp.ContractAttachmentWithLegacy.currentAttachment"]},{"name":"val currentContext: SerializationContext?","description":"net.corda.core.serialization.SerializationFactory.currentContext","location":"docs/net.corda.core.serialization/-serialization-factory/current-context.html","searchKeys":["currentContext","val currentContext: SerializationContext?","net.corda.core.serialization.SerializationFactory.currentContext"]},{"name":"val currentFactory: SerializationFactory?","description":"net.corda.core.serialization.SerializationFactory.Companion.currentFactory","location":"docs/net.corda.core.serialization/-serialization-factory/-companion/current-factory.html","searchKeys":["currentFactory","val currentFactory: SerializationFactory?","net.corda.core.serialization.SerializationFactory.Companion.currentFactory"]},{"name":"val currentStepRecursive: ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.currentStepRecursive","location":"docs/net.corda.core.utilities/-progress-tracker/current-step-recursive.html","searchKeys":["currentStepRecursive","val currentStepRecursive: ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.currentStepRecursive"]},{"name":"val currentTime: Instant","description":"net.corda.core.flows.NotaryError.TimeWindowInvalid.currentTime","location":"docs/net.corda.core.flows/-notary-error/-time-window-invalid/current-time.html","searchKeys":["currentTime","val currentTime: Instant","net.corda.core.flows.NotaryError.TimeWindowInvalid.currentTime"]},{"name":"val currentTopLevel: FlowLogic<*>?","description":"net.corda.core.flows.FlowLogic.Companion.currentTopLevel","location":"docs/net.corda.core.flows/-flow-logic/-companion/current-top-level.html","searchKeys":["currentTopLevel","val currentTopLevel: FlowLogic<*>?","net.corda.core.flows.FlowLogic.Companion.currentTopLevel"]},{"name":"val customOverrides: Map<String, Any?>","description":"net.corda.testing.driver.NodeParameters.customOverrides","location":"docs/net.corda.testing.driver/-node-parameters/custom-overrides.html","searchKeys":["customOverrides","val customOverrides: Map<String, Any?>","net.corda.testing.driver.NodeParameters.customOverrides"]},{"name":"val d: Curve25519.ModP","description":"net.corda.core.crypto.internal.Curve25519.d","location":"docs/net.corda.core.crypto.internal/-curve25519/d.html","searchKeys":["d","val d: Curve25519.ModP","net.corda.core.crypto.internal.Curve25519.d"]},{"name":"val data: T","description":"net.corda.core.contracts.TransactionState.data","location":"docs/net.corda.core.contracts/-transaction-state/data.html","searchKeys":["data","val data: T","net.corda.core.contracts.TransactionState.data"]},{"name":"val dataType: FetchDataFlow.DataType","description":"net.corda.core.internal.FetchDataFlow.Request.Data.dataType","location":"docs/net.corda.core.internal/-fetch-data-flow/-request/-data/data-type.html","searchKeys":["dataType","val dataType: FetchDataFlow.DataType","net.corda.core.internal.FetchDataFlow.Request.Data.dataType"]},{"name":"val database: <Error class: unknown class>","description":"net.corda.testing.driver.internal.InProcessImpl.database","location":"docs/net.corda.testing.driver.internal/-in-process-impl/database.html","searchKeys":["database","val database: <Error class: unknown class>","net.corda.testing.driver.internal.InProcessImpl.database"]},{"name":"val dealBeingOffered: DealState","description":"net.corda.finance.flows.TwoPartyDealFlow.AutoOffer.dealBeingOffered","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-auto-offer/deal-being-offered.html","searchKeys":["dealBeingOffered","val dealBeingOffered: DealState","net.corda.finance.flows.TwoPartyDealFlow.AutoOffer.dealBeingOffered"]},{"name":"val debugPort: Int?","description":"net.corda.testing.driver.internal.OutOfProcessImpl.debugPort","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/debug-port.html","searchKeys":["debugPort","val debugPort: Int?","net.corda.testing.driver.internal.OutOfProcessImpl.debugPort"]},{"name":"val debugPortAllocation: PortAllocation","description":"net.corda.testing.driver.DriverParameters.debugPortAllocation","location":"docs/net.corda.testing.driver/-driver-parameters/debug-port-allocation.html","searchKeys":["debugPortAllocation","val debugPortAllocation: PortAllocation","net.corda.testing.driver.DriverParameters.debugPortAllocation"]},{"name":"val debugPortAllocation: PortAllocation","description":"net.corda.testing.node.internal.DriverDSLImpl.debugPortAllocation","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/debug-port-allocation.html","searchKeys":["debugPortAllocation","val debugPortAllocation: PortAllocation","net.corda.testing.node.internal.DriverDSLImpl.debugPortAllocation"]},{"name":"val declaringClass: Class<*>","description":"net.corda.core.node.services.vault.Column.declaringClass","location":"docs/net.corda.core.node.services.vault/-column/declaring-class.html","searchKeys":["declaringClass","val declaringClass: Class<*>","net.corda.core.node.services.vault.Column.declaringClass"]},{"name":"val default: DigestService","description":"net.corda.core.crypto.DigestService.Companion.default","location":"docs/net.corda.core.crypto/-digest-service/-companion/default.html","searchKeys":["default","val default: DigestService","net.corda.core.crypto.DigestService.Companion.default"]},{"name":"val defaultAllocator: PortAllocation","description":"net.corda.testing.driver.PortAllocation.Companion.defaultAllocator","location":"docs/net.corda.testing.driver/-port-allocation/-companion/default-allocator.html","searchKeys":["defaultAllocator","val defaultAllocator: PortAllocation","net.corda.testing.driver.PortAllocation.Companion.defaultAllocator"]},{"name":"val defaultClassPath: List<String>","description":"net.corda.testing.node.internal.ProcessUtilities.defaultClassPath","location":"docs/net.corda.testing.node.internal/-process-utilities/default-class-path.html","searchKeys":["defaultClassPath","val defaultClassPath: List<String>","net.corda.testing.node.internal.ProcessUtilities.defaultClassPath"]},{"name":"val defaultContext: SerializationContext","description":"net.corda.core.serialization.SerializationFactory.defaultContext","location":"docs/net.corda.core.serialization/-serialization-factory/default-context.html","searchKeys":["defaultContext","val defaultContext: SerializationContext","net.corda.core.serialization.SerializationFactory.defaultContext"]},{"name":"val defaultEstimatedWaitTime: Duration","description":"net.corda.core.internal.notary.NotaryServiceFlow.Companion.defaultEstimatedWaitTime","location":"docs/net.corda.core.internal.notary/-notary-service-flow/-companion/default-estimated-wait-time.html","searchKeys":["defaultEstimatedWaitTime","val defaultEstimatedWaitTime: Duration","net.corda.core.internal.notary.NotaryServiceFlow.Companion.defaultEstimatedWaitTime"]},{"name":"val defaultFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode","description":"net.corda.testing.node.internal.InternalMockNetwork.defaultFactory","location":"docs/net.corda.testing.node.internal/-internal-mock-network/default-factory.html","searchKeys":["defaultFactory","val defaultFactory: (MockNodeArgs) -> InternalMockNetwork.MockNode","net.corda.testing.node.internal.InternalMockNetwork.defaultFactory"]},{"name":"val defaultFactory: SerializationFactory","description":"net.corda.core.serialization.SerializationFactory.Companion.defaultFactory","location":"docs/net.corda.core.serialization/-serialization-factory/-companion/default-factory.html","searchKeys":["defaultFactory","val defaultFactory: SerializationFactory","net.corda.core.serialization.SerializationFactory.Companion.defaultFactory"]},{"name":"val defaultFractionDigits: Int = 0","description":"net.corda.finance.contracts.Commodity.defaultFractionDigits","location":"docs/net.corda.finance.contracts/-commodity/default-fraction-digits.html","searchKeys":["defaultFractionDigits","val defaultFractionDigits: Int = 0","net.corda.finance.contracts.Commodity.defaultFractionDigits"]},{"name":"val defaultMapper: <Error class: unknown class>","description":"net.corda.testing.http.HttpUtils.defaultMapper","location":"docs/net.corda.testing.http/-http-utils/default-mapper.html","searchKeys":["defaultMapper","val defaultMapper: <Error class: unknown class>","net.corda.testing.http.HttpUtils.defaultMapper"]},{"name":"val defaultNotaryIdentity: Party","description":"net.corda.testing.node.MockNetwork.defaultNotaryIdentity","location":"docs/net.corda.testing.node/-mock-network/default-notary-identity.html","searchKeys":["defaultNotaryIdentity","val defaultNotaryIdentity: Party","net.corda.testing.node.MockNetwork.defaultNotaryIdentity"]},{"name":"val defaultNotaryIdentity: Party","description":"net.corda.testing.node.internal.InternalMockNetwork.defaultNotaryIdentity","location":"docs/net.corda.testing.node.internal/-internal-mock-network/default-notary-identity.html","searchKeys":["defaultNotaryIdentity","val defaultNotaryIdentity: Party","net.corda.testing.node.internal.InternalMockNetwork.defaultNotaryIdentity"]},{"name":"val defaultNotaryNode: StartedMockNode","description":"net.corda.testing.node.MockNetwork.defaultNotaryNode","location":"docs/net.corda.testing.node/-mock-network/default-notary-node.html","searchKeys":["defaultNotaryNode","val defaultNotaryNode: StartedMockNode","net.corda.testing.node.MockNetwork.defaultNotaryNode"]},{"name":"val defaultNotaryNode: TestStartedNode","description":"net.corda.testing.node.internal.InternalMockNetwork.defaultNotaryNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/default-notary-node.html","searchKeys":["defaultNotaryNode","val defaultNotaryNode: TestStartedNode","net.corda.testing.node.internal.InternalMockNetwork.defaultNotaryNode"]},{"name":"val defaultParameters: MockNetworkParameters","description":"net.corda.testing.node.MockNetwork.defaultParameters","location":"docs/net.corda.testing.node/-mock-network/default-parameters.html","searchKeys":["defaultParameters","val defaultParameters: MockNetworkParameters","net.corda.testing.node.MockNetwork.defaultParameters"]},{"name":"val deferredAck: Boolean = false","description":"net.corda.core.internal.ResolveTransactionsFlow.deferredAck","location":"docs/net.corda.core.internal/-resolve-transactions-flow/deferred-ack.html","searchKeys":["deferredAck","val deferredAck: Boolean = false","net.corda.core.internal.ResolveTransactionsFlow.deferredAck"]},{"name":"val desc: String","description":"net.corda.core.crypto.SignatureScheme.desc","location":"docs/net.corda.core.crypto/-signature-scheme/desc.html","searchKeys":["desc","val desc: String","net.corda.core.crypto.SignatureScheme.desc"]},{"name":"val description: String","description":"net.corda.core.messaging.ParametersUpdateInfo.description","location":"docs/net.corda.core.messaging/-parameters-update-info/description.html","searchKeys":["description","val description: String","net.corda.core.messaging.ParametersUpdateInfo.description"]},{"name":"val descriptions: List<String>","description":"net.corda.core.transactions.SignedTransaction.SignaturesMissingException.descriptions","location":"docs/net.corda.core.transactions/-signed-transaction/-signatures-missing-exception/descriptions.html","searchKeys":["descriptions","val descriptions: List<String>","net.corda.core.transactions.SignedTransaction.SignaturesMissingException.descriptions"]},{"name":"val destination: P","description":"net.corda.core.contracts.AmountTransfer.destination","location":"docs/net.corda.core.contracts/-amount-transfer/destination.html","searchKeys":["destination","val destination: P","net.corda.core.contracts.AmountTransfer.destination"]},{"name":"val developer: String","description":"net.corda.core.internal.Emoji.developer","location":"docs/net.corda.core.internal/-emoji/developer.html","searchKeys":["developer","val developer: String","net.corda.core.internal.Emoji.developer"]},{"name":"val diamond: String","description":"net.corda.core.internal.Emoji.diamond","location":"docs/net.corda.core.internal/-emoji/diamond.html","searchKeys":["diamond","val diamond: String","net.corda.core.internal.Emoji.diamond"]},{"name":"val digestLength: Int","description":"net.corda.core.crypto.DigestService.digestLength","location":"docs/net.corda.core.crypto/-digest-service/digest-length.html","searchKeys":["digestLength","val digestLength: Int","net.corda.core.crypto.DigestService.digestLength"]},{"name":"val digestService: DigestService","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.digestService","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/digest-service.html","searchKeys":["digestService","val digestService: DigestService","net.corda.core.internal.ContractUpgradeTransactionBuilder.digestService"]},{"name":"val digestService: DigestService","description":"net.corda.core.internal.NotaryChangeTransactionBuilder.digestService","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/digest-service.html","searchKeys":["digestService","val digestService: DigestService","net.corda.core.internal.NotaryChangeTransactionBuilder.digestService"]},{"name":"val digestService: DigestService","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.digestService","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/digest-service.html","searchKeys":["digestService","val digestService: DigestService","net.corda.core.transactions.ContractUpgradeFilteredTransaction.digestService"]},{"name":"val digestService: DigestService","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.digestService","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/digest-service.html","searchKeys":["digestService","val digestService: DigestService","net.corda.core.transactions.ContractUpgradeWireTransaction.digestService"]},{"name":"val digestService: DigestService","description":"net.corda.core.transactions.LedgerTransaction.digestService","location":"docs/net.corda.core.transactions/-ledger-transaction/digest-service.html","searchKeys":["digestService","val digestService: DigestService","net.corda.core.transactions.LedgerTransaction.digestService"]},{"name":"val digestService: DigestService","description":"net.corda.core.transactions.NotaryChangeWireTransaction.digestService","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/digest-service.html","searchKeys":["digestService","val digestService: DigestService","net.corda.core.transactions.NotaryChangeWireTransaction.digestService"]},{"name":"val digestService: DigestService","description":"net.corda.core.transactions.TraversableTransaction.digestService","location":"docs/net.corda.core.transactions/-traversable-transaction/digest-service.html","searchKeys":["digestService","val digestService: DigestService","net.corda.core.transactions.TraversableTransaction.digestService"]},{"name":"val digitalSignature: DigitalSignature.WithKey","description":"net.corda.core.flows.NotarisationRequestSignature.digitalSignature","location":"docs/net.corda.core.flows/-notarisation-request-signature/digital-signature.html","searchKeys":["digitalSignature","val digitalSignature: DigitalSignature.WithKey","net.corda.core.flows.NotarisationRequestSignature.digitalSignature"]},{"name":"val direction: () -> DateRollDirection","description":"net.corda.finance.contracts.DateRollConvention.direction","location":"docs/net.corda.finance.contracts/-date-roll-convention/direction.html","searchKeys":["direction","val direction: () -> DateRollDirection","net.corda.finance.contracts.DateRollConvention.direction"]},{"name":"val direction: Sort.Direction","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn.direction","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-column/direction.html","searchKeys":["direction","val direction: Sort.Direction","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn.direction"]},{"name":"val direction: Sort.Direction","description":"net.corda.core.node.services.vault.Sort.SortColumn.direction","location":"docs/net.corda.core.node.services.vault/-sort/-sort-column/direction.html","searchKeys":["direction","val direction: Sort.Direction","net.corda.core.node.services.vault.Sort.SortColumn.direction"]},{"name":"val disableHashConstraints: Boolean","description":"net.corda.core.contracts.HashAttachmentConstraint.Companion.disableHashConstraints","location":"docs/net.corda.core.contracts/-hash-attachment-constraint/-companion/disable-hash-constraints.html","searchKeys":["disableHashConstraints","val disableHashConstraints: Boolean","net.corda.core.contracts.HashAttachmentConstraint.Companion.disableHashConstraints"]},{"name":"val displayName: String","description":"net.corda.finance.contracts.Commodity.displayName","location":"docs/net.corda.finance.contracts/-commodity/display-name.html","searchKeys":["displayName","val displayName: String","net.corda.finance.contracts.Commodity.displayName"]},{"name":"val displayTokenSize: BigDecimal","description":"net.corda.core.contracts.Amount.displayTokenSize","location":"docs/net.corda.core.contracts/-amount/display-token-size.html","searchKeys":["displayTokenSize","val displayTokenSize: BigDecimal","net.corda.core.contracts.Amount.displayTokenSize"]},{"name":"val distributionList: ByteArray","description":"net.corda.core.flows.SignedTransactionWithDistributionList.distributionList","location":"docs/net.corda.core.flows/-signed-transaction-with-distribution-list/distribution-list.html","searchKeys":["distributionList","val distributionList: ByteArray","net.corda.core.flows.SignedTransactionWithDistributionList.distributionList"]},{"name":"val distributionList: DistributionList","description":"net.corda.core.flows.TransactionMetadata.distributionList","location":"docs/net.corda.core.flows/-transaction-metadata/distribution-list.html","searchKeys":["distributionList","val distributionList: DistributionList","net.corda.core.flows.TransactionMetadata.distributionList"]},{"name":"val downloaded: List<T>","description":"net.corda.core.internal.FetchDataFlow.Result.downloaded","location":"docs/net.corda.core.internal/-fetch-data-flow/-result/downloaded.html","searchKeys":["downloaded","val downloaded: List<T>","net.corda.core.internal.FetchDataFlow.Result.downloaded"]},{"name":"val downloadedDependencyCount: Long = 0","description":"net.corda.core.internal.ResolveTransactionsFlowStats.downloadedDependencyCount","location":"docs/net.corda.core.internal/-resolve-transactions-flow-stats/downloaded-dependency-count.html","searchKeys":["downloadedDependencyCount","val downloadedDependencyCount: Long = 0","net.corda.core.internal.ResolveTransactionsFlowStats.downloadedDependencyCount"]},{"name":"val driverDirectory: Path","description":"net.corda.testing.driver.DriverParameters.driverDirectory","location":"docs/net.corda.testing.driver/-driver-parameters/driver-directory.html","searchKeys":["driverDirectory","val driverDirectory: Path","net.corda.testing.driver.DriverParameters.driverDirectory"]},{"name":"val driverDirectory: Path","description":"net.corda.testing.node.internal.DriverDSLImpl.driverDirectory","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/driver-directory.html","searchKeys":["driverDirectory","val driverDirectory: Path","net.corda.testing.node.internal.DriverDSLImpl.driverDirectory"]},{"name":"val dryRun: Boolean = false","description":"net.corda.core.flows.LedgerRecoveryParameters.dryRun","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/dry-run.html","searchKeys":["dryRun","val dryRun: Boolean = false","net.corda.core.flows.LedgerRecoveryParameters.dryRun"]},{"name":"val dueBefore: Instant","description":"net.corda.finance.contracts.asset.Obligation.State.dueBefore","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/due-before.html","searchKeys":["dueBefore","val dueBefore: Instant","net.corda.finance.contracts.asset.Obligation.State.dueBefore"]},{"name":"val dueBefore: Instant","description":"net.corda.finance.contracts.asset.Obligation.Terms.dueBefore","location":"docs/net.corda.finance.contracts.asset/-obligation/-terms/due-before.html","searchKeys":["dueBefore","val dueBefore: Instant","net.corda.finance.contracts.asset.Obligation.Terms.dueBefore"]},{"name":"val effectiveSerializationEnv: SerializationEnvironment","description":"net.corda.core.serialization.internal.effectiveSerializationEnv","location":"docs/net.corda.core.serialization.internal/effective-serialization-env.html","searchKeys":["effectiveSerializationEnv","val effectiveSerializationEnv: SerializationEnvironment","net.corda.core.serialization.internal.effectiveSerializationEnv"]},{"name":"val emojiMode: ThreadLocal<Any>","description":"net.corda.core.internal.Emoji.emojiMode","location":"docs/net.corda.core.internal/-emoji/emoji-mode.html","searchKeys":["emojiMode","val emojiMode: ThreadLocal<Any>","net.corda.core.internal.Emoji.emojiMode"]},{"name":"val encryptedDistributionList: OpaqueBytes","description":"net.corda.core.flows.ReceiverDistributionRecord.encryptedDistributionList","location":"docs/net.corda.core.flows/-receiver-distribution-record/encrypted-distribution-list.html","searchKeys":["encryptedDistributionList","val encryptedDistributionList: OpaqueBytes","net.corda.core.flows.ReceiverDistributionRecord.encryptedDistributionList"]},{"name":"val encumbrance: Int? = null","description":"net.corda.core.contracts.TransactionState.encumbrance","location":"docs/net.corda.core.contracts/-transaction-state/encumbrance.html","searchKeys":["encumbrance","val encumbrance: Int? = null","net.corda.core.contracts.TransactionState.encumbrance"]},{"name":"val endpointsExternal: List<InMemoryMessagingNetwork.MockMessagingService>","description":"net.corda.testing.node.InMemoryMessagingNetwork.endpointsExternal","location":"docs/net.corda.testing.node/-in-memory-messaging-network/endpoints-external.html","searchKeys":["endpointsExternal","val endpointsExternal: List<InMemoryMessagingNetwork.MockMessagingService>","net.corda.testing.node.InMemoryMessagingNetwork.endpointsExternal"]},{"name":"val entityClass: Class<*>","description":"net.corda.core.node.services.vault.FieldInfo.entityClass","location":"docs/net.corda.core.node.services.vault/-field-info/entity-class.html","searchKeys":["entityClass","val entityClass: Class<*>","net.corda.core.node.services.vault.FieldInfo.entityClass"]},{"name":"val entityStateClass: Class<out StatePersistable>","description":"net.corda.core.node.services.vault.SortAttribute.Custom.entityStateClass","location":"docs/net.corda.core.node.services.vault/-sort-attribute/-custom/entity-state-class.html","searchKeys":["entityStateClass","val entityStateClass: Class<out StatePersistable>","net.corda.core.node.services.vault.SortAttribute.Custom.entityStateClass"]},{"name":"val entityStateColumnName: String","description":"net.corda.core.node.services.vault.SortAttribute.Custom.entityStateColumnName","location":"docs/net.corda.core.node.services.vault/-sort-attribute/-custom/entity-state-column-name.html","searchKeys":["entityStateColumnName","val entityStateColumnName: String","net.corda.core.node.services.vault.SortAttribute.Custom.entityStateColumnName"]},{"name":"val entityType: String?","description":"net.corda.core.utilities.Id.entityType","location":"docs/net.corda.core.utilities/-id/entity-type.html","searchKeys":["entityType","val entityType: String?","net.corda.core.utilities.Id.entityType"]},{"name":"val entropyRoot: BigInteger","description":"net.corda.testing.node.MockNodeParameters.entropyRoot","location":"docs/net.corda.testing.node/-mock-node-parameters/entropy-root.html","searchKeys":["entropyRoot","val entropyRoot: BigInteger","net.corda.testing.node.MockNodeParameters.entropyRoot"]},{"name":"val entropyRoot: BigInteger","description":"net.corda.testing.node.internal.InternalMockNodeParameters.entropyRoot","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/entropy-root.html","searchKeys":["entropyRoot","val entropyRoot: BigInteger","net.corda.testing.node.internal.InternalMockNodeParameters.entropyRoot"]},{"name":"val entropyRoot: BigInteger","description":"net.corda.testing.node.internal.MockNodeArgs.entropyRoot","location":"docs/net.corda.testing.node.internal/-mock-node-args/entropy-root.html","searchKeys":["entropyRoot","val entropyRoot: BigInteger","net.corda.testing.node.internal.MockNodeArgs.entropyRoot"]},{"name":"val environmentVariables: Map<String, String>","description":"net.corda.testing.driver.DriverParameters.environmentVariables","location":"docs/net.corda.testing.driver/-driver-parameters/environment-variables.html","searchKeys":["environmentVariables","val environmentVariables: Map<String, String>","net.corda.testing.driver.DriverParameters.environmentVariables"]},{"name":"val environmentVariables: Map<String, String>","description":"net.corda.testing.node.internal.DriverDSLImpl.environmentVariables","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/environment-variables.html","searchKeys":["environmentVariables","val environmentVariables: Map<String, String>","net.corda.testing.node.internal.DriverDSLImpl.environmentVariables"]},{"name":"val epoch: Int","description":"net.corda.core.node.NetworkParameters.epoch","location":"docs/net.corda.core.node/-network-parameters/epoch.html","searchKeys":["epoch","val epoch: Int","net.corda.core.node.NetworkParameters.epoch"]},{"name":"val error: NotaryError","description":"net.corda.core.flows.NotaryException.error","location":"docs/net.corda.core.flows/-notary-exception/error.html","searchKeys":["error","val error: NotaryError","net.corda.core.flows.NotaryException.error"]},{"name":"val error: NotaryError","description":"net.corda.core.internal.notary.NotaryInternalException.error","location":"docs/net.corda.core.internal.notary/-notary-internal-exception/error.html","searchKeys":["error","val error: NotaryError","net.corda.core.internal.notary.NotaryInternalException.error"]},{"name":"val error: NotaryError","description":"net.corda.core.internal.notary.UniquenessProvider.Result.Failure.error","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/-result/-failure/error.html","searchKeys":["error","val error: NotaryError","net.corda.core.internal.notary.UniquenessProvider.Result.Failure.error"]},{"name":"val eventHorizon: Duration","description":"net.corda.core.node.NetworkParameters.eventHorizon","location":"docs/net.corda.core.node/-network-parameters/event-horizon.html","searchKeys":["eventHorizon","val eventHorizon: Duration","net.corda.core.node.NetworkParameters.eventHorizon"]},{"name":"val exception: Throwable","description":"net.corda.core.utilities.Try.Failure.exception","location":"docs/net.corda.core.utilities/-try/-failure/exception.html","searchKeys":["exception","val exception: Throwable","net.corda.core.utilities.Try.Failure.exception"]},{"name":"val executorService: ScheduledExecutorService","description":"net.corda.testing.node.internal.DriverDSLImpl.executorService","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/executor-service.html","searchKeys":["executorService","val executorService: ScheduledExecutorService","net.corda.testing.node.internal.DriverDSLImpl.executorService"]},{"name":"val expectedTypeName: String","description":"net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.expectedTypeName","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-asset-mismatch-exception/expected-type-name.html","searchKeys":["expectedTypeName","val expectedTypeName: String","net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.expectedTypeName"]},{"name":"val expr: String","description":"net.corda.finance.contracts.Expression.expr","location":"docs/net.corda.finance.contracts/-expression/expr.html","searchKeys":["expr","val expr: String","net.corda.finance.contracts.Expression.expr"]},{"name":"val expression: CriteriaExpression<L, Boolean>","description":"net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.expression","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-custom-query-criteria/expression.html","searchKeys":["expression","val expression: CriteriaExpression<L, Boolean>","net.corda.core.node.services.vault.QueryCriteria.VaultCustomQueryCriteria.expression"]},{"name":"val expression: CriteriaExpression<O, Boolean>","description":"net.corda.core.node.services.vault.CriteriaExpression.Not.expression","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-not/expression.html","searchKeys":["expression","val expression: CriteriaExpression<O, Boolean>","net.corda.core.node.services.vault.CriteriaExpression.Not.expression"]},{"name":"val externalId: List<String>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.externalId","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/external-id.html","searchKeys":["externalId","val externalId: List<String>? = null","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.externalId"]},{"name":"val externalId: String? = null","description":"net.corda.core.contracts.UniqueIdentifier.externalId","location":"docs/net.corda.core.contracts/-unique-identifier/external-id.html","searchKeys":["externalId","val externalId: String? = null","net.corda.core.contracts.UniqueIdentifier.externalId"]},{"name":"val externalTrace: Trace? = null","description":"net.corda.core.context.InvocationContext.externalTrace","location":"docs/net.corda.core.context/-invocation-context/external-trace.html","searchKeys":["externalTrace","val externalTrace: Trace? = null","net.corda.core.context.InvocationContext.externalTrace"]},{"name":"val extraConfig: <Error class: unknown class>? = null","description":"net.corda.testing.node.MockNetNotaryConfig.extraConfig","location":"docs/net.corda.testing.node/-mock-net-notary-config/extra-config.html","searchKeys":["extraConfig","val extraConfig: <Error class: unknown class>? = null","net.corda.testing.node.MockNetNotaryConfig.extraConfig"]},{"name":"val extraCordappPackagesToScan: List<String>","description":"net.corda.testing.driver.DriverParameters.extraCordappPackagesToScan","location":"docs/net.corda.testing.driver/-driver-parameters/extra-cordapp-packages-to-scan.html","searchKeys":["extraCordappPackagesToScan","val extraCordappPackagesToScan: List<String>","net.corda.testing.driver.DriverParameters.extraCordappPackagesToScan"]},{"name":"val extraCordappPackagesToScan: List<String>","description":"net.corda.testing.node.internal.DriverDSLImpl.extraCordappPackagesToScan","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/extra-cordapp-packages-to-scan.html","searchKeys":["extraCordappPackagesToScan","val extraCordappPackagesToScan: List<String>","net.corda.testing.node.internal.DriverDSLImpl.extraCordappPackagesToScan"]},{"name":"val extraDataSourceProperties: Map<String, String>? = null","description":"net.corda.testing.node.MockNodeConfigOverrides.extraDataSourceProperties","location":"docs/net.corda.testing.node/-mock-node-config-overrides/extra-data-source-properties.html","searchKeys":["extraDataSourceProperties","val extraDataSourceProperties: Map<String, String>? = null","net.corda.testing.node.MockNodeConfigOverrides.extraDataSourceProperties"]},{"name":"val faceValue: Amount<Issued<Currency>>","description":"net.corda.finance.contracts.CommercialPaper.State.faceValue","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/face-value.html","searchKeys":["faceValue","val faceValue: Amount<Issued<Currency>>","net.corda.finance.contracts.CommercialPaper.State.faceValue"]},{"name":"val fakeNodeLegalName: CordaX500Name","description":"net.corda.testing.node.internal.fakeNodeLegalName","location":"docs/net.corda.testing.node.internal/fake-node-legal-name.html","searchKeys":["fakeNodeLegalName","val fakeNodeLegalName: CordaX500Name","net.corda.testing.node.internal.fakeNodeLegalName"]},{"name":"val fileName: String?","description":"net.corda.core.internal.AttachmentTrustInfo.fileName","location":"docs/net.corda.core.internal/-attachment-trust-info/file-name.html","searchKeys":["fileName","val fileName: String?","net.corda.core.internal.AttachmentTrustInfo.fileName"]},{"name":"val filenameCondition: ColumnPredicate<String>? = null","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.filenameCondition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/filename-condition.html","searchKeys":["filenameCondition","val filenameCondition: ColumnPredicate<String>? = null","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.filenameCondition"]},{"name":"val files: Map<SecureHash, <Error class: unknown class><Attachment, ByteArray>>","description":"net.corda.testing.services.MockAttachmentStorage.files","location":"docs/net.corda.testing.services/-mock-attachment-storage/files.html","searchKeys":["files","val files: Map<SecureHash, <Error class: unknown class><Attachment, ByteArray>>","net.corda.testing.services.MockAttachmentStorage.files"]},{"name":"val filteredComponentGroups: List<FilteredComponentGroup>","description":"net.corda.core.transactions.FilteredTransaction.filteredComponentGroups","location":"docs/net.corda.core.transactions/-filtered-transaction/filtered-component-groups.html","searchKeys":["filteredComponentGroups","val filteredComponentGroups: List<FilteredComponentGroup>","net.corda.core.transactions.FilteredTransaction.filteredComponentGroups"]},{"name":"val fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>>","description":"net.corda.testing.node.internal.CustomCordapp.fixups","location":"docs/net.corda.testing.node.internal/-custom-cordapp/fixups.html","searchKeys":["fixups","val fixups: List<<Error class: unknown class><Set<AttachmentId>, Set<AttachmentId>>>","net.corda.testing.node.internal.CustomCordapp.fixups"]},{"name":"val flowClass: String","description":"net.corda.core.flows.FlowStackSnapshot.flowClass","location":"docs/net.corda.core.flows/-flow-stack-snapshot/flow-class.html","searchKeys":["flowClass","val flowClass: String","net.corda.core.flows.FlowStackSnapshot.flowClass"]},{"name":"val flowId: UUID? = null","description":"net.corda.core.node.services.Vault.Update.flowId","location":"docs/net.corda.core.node.services/-vault/-update/flow-id.html","searchKeys":["flowId","val flowId: UUID? = null","net.corda.core.node.services.Vault.Update.flowId"]},{"name":"val flowIds: Collection<StateMachineRunId>","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.flowIds","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/flow-ids.html","searchKeys":["flowIds","val flowIds: Collection<StateMachineRunId>","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.flowIds"]},{"name":"val flowLogic: FlowLogic<*>?","description":"net.corda.core.internal.telemetry.StartSpanEvent.flowLogic","location":"docs/net.corda.core.internal.telemetry/-start-span-event/flow-logic.html","searchKeys":["flowLogic","val flowLogic: FlowLogic<*>?","net.corda.core.internal.telemetry.StartSpanEvent.flowLogic"]},{"name":"val flowLogic: FlowLogic<*>?","description":"net.corda.core.internal.telemetry.StartSpanForFlowEvent.flowLogic","location":"docs/net.corda.core.internal.telemetry/-start-span-for-flow-event/flow-logic.html","searchKeys":["flowLogic","val flowLogic: FlowLogic<*>?","net.corda.core.internal.telemetry.StartSpanForFlowEvent.flowLogic"]},{"name":"val flowLogicClassName: String","description":"net.corda.core.messaging.StateMachineInfo.flowLogicClassName","location":"docs/net.corda.core.messaging/-state-machine-info/flow-logic-class-name.html","searchKeys":["flowLogicClassName","val flowLogicClassName: String","net.corda.core.messaging.StateMachineInfo.flowLogicClassName"]},{"name":"val flowManager: MockNodeFlowManager","description":"net.corda.testing.node.internal.InternalMockNodeParameters.flowManager","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/flow-manager.html","searchKeys":["flowManager","val flowManager: MockNodeFlowManager","net.corda.testing.node.internal.InternalMockNodeParameters.flowManager"]},{"name":"val flowManager: MockNodeFlowManager","description":"net.corda.testing.node.internal.MockNodeArgs.flowManager","location":"docs/net.corda.testing.node.internal/-mock-node-args/flow-manager.html","searchKeys":["flowManager","val flowManager: MockNodeFlowManager","net.corda.testing.node.internal.MockNodeArgs.flowManager"]},{"name":"val flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>","description":"net.corda.testing.driver.NodeParameters.flowOverrides","location":"docs/net.corda.testing.driver/-node-parameters/flow-overrides.html","searchKeys":["flowOverrides","val flowOverrides: Map<out Class<out FlowLogic<*>>, Class<out FlowLogic<*>>>","net.corda.testing.driver.NodeParameters.flowOverrides"]},{"name":"val flowTimeout: MockNetFlowTimeOut? = null","description":"net.corda.testing.node.MockNodeConfigOverrides.flowTimeout","location":"docs/net.corda.testing.node/-mock-node-config-overrides/flow-timeout.html","searchKeys":["flowTimeout","val flowTimeout: MockNetFlowTimeOut? = null","net.corda.testing.node.MockNodeConfigOverrides.flowTimeout"]},{"name":"val flowVersion: Int","description":"net.corda.core.flows.FlowInfo.flowVersion","location":"docs/net.corda.core.flows/-flow-info/flow-version.html","searchKeys":["flowVersion","val flowVersion: Int","net.corda.core.flows.FlowInfo.flowVersion"]},{"name":"val forDay: LocalDate","description":"net.corda.finance.contracts.FixOf.forDay","location":"docs/net.corda.finance.contracts/-fix-of/for-day.html","searchKeys":["forDay","val forDay: LocalDate","net.corda.finance.contracts.FixOf.forDay"]},{"name":"val forceRecover: Boolean","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.forceRecover","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/force-recover.html","searchKeys":["forceRecover","val forceRecover: Boolean","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.forceRecover"]},{"name":"val forceRecoverFlowIds: Collection<StateMachineRunId>","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.forceRecoverFlowIds","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/force-recover-flow-ids.html","searchKeys":["forceRecoverFlowIds","val forceRecoverFlowIds: Collection<StateMachineRunId>","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.forceRecoverFlowIds"]},{"name":"val forcedID: Int? = null","description":"net.corda.testing.node.MockNodeParameters.forcedID","location":"docs/net.corda.testing.node/-mock-node-parameters/forced-i-d.html","searchKeys":["forcedID","val forcedID: Int? = null","net.corda.testing.node.MockNodeParameters.forcedID"]},{"name":"val forcedID: Int? = null","description":"net.corda.testing.node.internal.InternalMockNodeParameters.forcedID","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/forced-i-d.html","searchKeys":["forcedID","val forcedID: Int? = null","net.corda.testing.node.internal.InternalMockNodeParameters.forcedID"]},{"name":"val free: String","description":"net.corda.core.internal.Emoji.free","location":"docs/net.corda.core.internal/-emoji/free.html","searchKeys":["free","val free: String","net.corda.core.internal.Emoji.free"]},{"name":"val from: String","description":"net.corda.core.serialization.CordaSerializationTransformRename.from","location":"docs/net.corda.core.serialization/-corda-serialization-transform-rename/from.html","searchKeys":["from","val from: String","net.corda.core.serialization.CordaSerializationTransformRename.from"]},{"name":"val fromDisk: List<T>","description":"net.corda.core.internal.FetchDataFlow.Result.fromDisk","location":"docs/net.corda.core.internal/-fetch-data-flow/-result/from-disk.html","searchKeys":["fromDisk","val fromDisk: List<T>","net.corda.core.internal.FetchDataFlow.Result.fromDisk"]},{"name":"val fromTime: Instant","description":"net.corda.core.flows.ComparableRecoveryTimeWindow.fromTime","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/from-time.html","searchKeys":["fromTime","val fromTime: Instant","net.corda.core.flows.ComparableRecoveryTimeWindow.fromTime"]},{"name":"val fromTime: Instant","description":"net.corda.core.flows.RecoveryTimeWindow.fromTime","location":"docs/net.corda.core.flows/-recovery-time-window/from-time.html","searchKeys":["fromTime","val fromTime: Instant","net.corda.core.flows.RecoveryTimeWindow.fromTime"]},{"name":"val fromTime: Instant? = null","description":"net.corda.core.flows.FlowTimeWindow.fromTime","location":"docs/net.corda.core.flows/-flow-time-window/from-time.html","searchKeys":["fromTime","val fromTime: Instant? = null","net.corda.core.flows.FlowTimeWindow.fromTime"]},{"name":"val fromTimestampDiscriminator: Int","description":"net.corda.core.flows.ComparableRecoveryTimeWindow.fromTimestampDiscriminator","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/from-timestamp-discriminator.html","searchKeys":["fromTimestampDiscriminator","val fromTimestampDiscriminator: Int","net.corda.core.flows.ComparableRecoveryTimeWindow.fromTimestampDiscriminator"]},{"name":"val fullCertChain: List<X509Certificate>","description":"net.corda.core.internal.DigitalSignatureWithCert.fullCertChain","location":"docs/net.corda.core.internal/-digital-signature-with-cert/full-cert-chain.html","searchKeys":["fullCertChain","val fullCertChain: List<X509Certificate>","net.corda.core.internal.DigitalSignatureWithCert.fullCertChain"]},{"name":"val fullCertPath: CertPath","description":"net.corda.core.internal.DigitalSignatureWithCert.fullCertPath","location":"docs/net.corda.core.internal/-digital-signature-with-cert/full-cert-path.html","searchKeys":["fullCertPath","val fullCertPath: CertPath","net.corda.core.internal.DigitalSignatureWithCert.fullCertPath"]},{"name":"val fuzzyIdentityMatch: Boolean","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.fuzzyIdentityMatch","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/fuzzy-identity-match.html","searchKeys":["fuzzyIdentityMatch","val fuzzyIdentityMatch: Boolean","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.fuzzyIdentityMatch"]},{"name":"val fuzzyIdentityMatch: Boolean","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.fuzzyIdentityMatch","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/fuzzy-identity-match.html","searchKeys":["fuzzyIdentityMatch","val fuzzyIdentityMatch: Boolean","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.fuzzyIdentityMatch"]},{"name":"val got: Int","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch.got","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-size-mismatch/got.html","searchKeys":["got","val got: Int","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch.got"]},{"name":"val got: SecureHash","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch.got","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-data-mismatch/got.html","searchKeys":["got","val got: SecureHash","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch.got"]},{"name":"val gracefulReconnect: GracefulReconnect","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.gracefulReconnect","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/graceful-reconnect.html","searchKeys":["gracefulReconnect","val gracefulReconnect: GracefulReconnect","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.gracefulReconnect"]},{"name":"val greenTick: String","description":"net.corda.core.internal.Emoji.greenTick","location":"docs/net.corda.core.internal/-emoji/green-tick.html","searchKeys":["greenTick","val greenTick: String","net.corda.core.internal.Emoji.greenTick"]},{"name":"val groupByColumns: List<Column<O, C>>?","description":"net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.groupByColumns","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-aggregate-function-expression/group-by-columns.html","searchKeys":["groupByColumns","val groupByColumns: List<Column<O, C>>?","net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.groupByColumns"]},{"name":"val groupHashes: List<SecureHash>","description":"net.corda.core.transactions.FilteredTransaction.groupHashes","location":"docs/net.corda.core.transactions/-filtered-transaction/group-hashes.html","searchKeys":["groupHashes","val groupHashes: List<SecureHash>","net.corda.core.transactions.FilteredTransaction.groupHashes"]},{"name":"val groupingKey: K","description":"net.corda.core.transactions.LedgerTransaction.InOutGroup.groupingKey","location":"docs/net.corda.core.transactions/-ledger-transaction/-in-out-group/grouping-key.html","searchKeys":["groupingKey","val groupingKey: K","net.corda.core.transactions.LedgerTransaction.InOutGroup.groupingKey"]},{"name":"val hasEmojiTerminal: <Error class: unknown class>","description":"net.corda.core.internal.Emoji.hasEmojiTerminal","location":"docs/net.corda.core.internal/-emoji/has-emoji-terminal.html","searchKeys":["hasEmojiTerminal","val hasEmojiTerminal: <Error class: unknown class>","net.corda.core.internal.Emoji.hasEmojiTerminal"]},{"name":"val hasEnded: Boolean","description":"net.corda.core.utilities.ProgressTracker.hasEnded","location":"docs/net.corda.core.utilities/-progress-tracker/has-ended.html","searchKeys":["hasEnded","val hasEnded: Boolean","net.corda.core.utilities.ProgressTracker.hasEnded"]},{"name":"val hash: AttachmentId","description":"net.corda.core.contracts.AttachmentResolutionException.hash","location":"docs/net.corda.core.contracts/-attachment-resolution-exception/hash.html","searchKeys":["hash","val hash: AttachmentId","net.corda.core.contracts.AttachmentResolutionException.hash"]},{"name":"val hash: SecureHash","description":"net.corda.core.contracts.TransactionResolutionException.hash","location":"docs/net.corda.core.contracts/-transaction-resolution-exception/hash.html","searchKeys":["hash","val hash: SecureHash","net.corda.core.contracts.TransactionResolutionException.hash"]},{"name":"val hash: SecureHash","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.IncludedLeaf.hash","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-included-leaf/hash.html","searchKeys":["hash","val hash: SecureHash","net.corda.core.crypto.PartialMerkleTree.PartialTree.IncludedLeaf.hash"]},{"name":"val hash: SecureHash","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Leaf.hash","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-leaf/hash.html","searchKeys":["hash","val hash: SecureHash","net.corda.core.crypto.PartialMerkleTree.PartialTree.Leaf.hash"]},{"name":"val hash: SecureHash","description":"net.corda.core.internal.FlowIORequest.WaitForLedgerCommit.hash","location":"docs/net.corda.core.internal/-flow-i-o-request/-wait-for-ledger-commit/hash.html","searchKeys":["hash","val hash: SecureHash","net.corda.core.internal.FlowIORequest.WaitForLedgerCommit.hash"]},{"name":"val hash: SecureHash","description":"net.corda.core.messaging.ParametersUpdateInfo.hash","location":"docs/net.corda.core.messaging/-parameters-update-info/hash.html","searchKeys":["hash","val hash: SecureHash","net.corda.core.messaging.ParametersUpdateInfo.hash"]},{"name":"val hash: SecureHash","description":"net.corda.core.serialization.SerializedBytes.hash","location":"docs/net.corda.core.serialization/-serialized-bytes/hash.html","searchKeys":["hash","val hash: SecureHash","net.corda.core.serialization.SerializedBytes.hash"]},{"name":"val hash: SecureHash","description":"net.corda.core.transactions.NetworkParametersHash.hash","location":"docs/net.corda.core.transactions/-network-parameters-hash/hash.html","searchKeys":["hash","val hash: SecureHash","net.corda.core.transactions.NetworkParametersHash.hash"]},{"name":"val hashAlgorithm: String","description":"net.corda.core.crypto.DigestService.hashAlgorithm","location":"docs/net.corda.core.crypto/-digest-service/hash-algorithm.html","searchKeys":["hashAlgorithm","val hashAlgorithm: String","net.corda.core.crypto.DigestService.hashAlgorithm"]},{"name":"val hashAlgorithm: String?","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.hashAlgorithm","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-node/hash-algorithm.html","searchKeys":["hashAlgorithm","val hashAlgorithm: String?","net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.hashAlgorithm"]},{"name":"val hashOfTransactionId: SecureHash","description":"net.corda.core.flows.StateConsumptionDetails.hashOfTransactionId","location":"docs/net.corda.core.flows/-state-consumption-details/hash-of-transaction-id.html","searchKeys":["hashOfTransactionId","val hashOfTransactionId: SecureHash","net.corda.core.flows.StateConsumptionDetails.hashOfTransactionId"]},{"name":"val hashes: NonEmptySet<SecureHash>","description":"net.corda.core.internal.FetchDataFlow.Request.Data.hashes","location":"docs/net.corda.core.internal/-fetch-data-flow/-request/-data/hashes.html","searchKeys":["hashes","val hashes: NonEmptySet<SecureHash>","net.corda.core.internal.FetchDataFlow.Request.Data.hashes"]},{"name":"val hashes: Set<SecureHash>","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderKey.hashes","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-key/hashes.html","searchKeys":["hashes","val hashes: Set<SecureHash>","net.corda.core.serialization.internal.AttachmentsClassLoaderKey.hashes"]},{"name":"val hiddenComponents: Map<Int, SecureHash>","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.hiddenComponents","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/hidden-components.html","searchKeys":["hiddenComponents","val hiddenComponents: Map<Int, SecureHash>","net.corda.core.transactions.ContractUpgradeFilteredTransaction.hiddenComponents"]},{"name":"val holidayDates: SortedSet<LocalDate>","description":"net.corda.finance.contracts.BusinessCalendar.holidayDates","location":"docs/net.corda.finance.contracts/-business-calendar/holiday-dates.html","searchKeys":["holidayDates","val holidayDates: SortedSet<LocalDate>","net.corda.finance.contracts.BusinessCalendar.holidayDates"]},{"name":"val host: String","description":"net.corda.core.utilities.NetworkHostAndPort.host","location":"docs/net.corda.core.utilities/-network-host-and-port/host.html","searchKeys":["host","val host: String","net.corda.core.utilities.NetworkHostAndPort.host"]},{"name":"val hostAndPort: NetworkHostAndPort","description":"net.corda.testing.node.internal.network.CrlServer.hostAndPort","location":"docs/net.corda.testing.node.internal.network/-crl-server/host-and-port.html","searchKeys":["hostAndPort","val hostAndPort: NetworkHostAndPort","net.corda.testing.node.internal.network.CrlServer.hostAndPort"]},{"name":"val hostAndPort: NetworkHostAndPort?","description":"net.corda.testing.node.internal.RpcBrokerHandle.hostAndPort","location":"docs/net.corda.testing.node.internal/-rpc-broker-handle/host-and-port.html","searchKeys":["hostAndPort","val hostAndPort: NetworkHostAndPort?","net.corda.testing.node.internal.RpcBrokerHandle.hostAndPort"]},{"name":"val id: Actor.Id","description":"net.corda.core.context.Actor.id","location":"docs/net.corda.core.context/-actor/id.html","searchKeys":["id","val id: Actor.Id","net.corda.core.context.Actor.id"]},{"name":"val id: Int","description":"net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.id","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-peer-handle/id.html","searchKeys":["id","val id: Int","net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.id"]},{"name":"val id: Int","description":"net.corda.testing.node.StartedMockNode.id","location":"docs/net.corda.testing.node/-started-mock-node/id.html","searchKeys":["id","val id: Int","net.corda.testing.node.StartedMockNode.id"]},{"name":"val id: Int","description":"net.corda.testing.node.UnstartedMockNode.id","location":"docs/net.corda.testing.node/-unstarted-mock-node/id.html","searchKeys":["id","val id: Int","net.corda.testing.node.UnstartedMockNode.id"]},{"name":"val id: Int","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.id","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/id.html","searchKeys":["id","val id: Int","net.corda.testing.node.internal.InternalMockNetwork.MockNode.id"]},{"name":"val id: Int","description":"net.corda.testing.node.internal.MockNodeArgs.id","location":"docs/net.corda.testing.node.internal/-mock-node-args/id.html","searchKeys":["id","val id: Int","net.corda.testing.node.internal.MockNodeArgs.id"]},{"name":"val id: SecureHash","description":"net.corda.core.transactions.ComponentVisibilityException.id","location":"docs/net.corda.core.transactions/-component-visibility-exception/id.html","searchKeys":["id","val id: SecureHash","net.corda.core.transactions.ComponentVisibilityException.id"]},{"name":"val id: SecureHash","description":"net.corda.core.transactions.FilteredTransactionVerificationException.id","location":"docs/net.corda.core.transactions/-filtered-transaction-verification-exception/id.html","searchKeys":["id","val id: SecureHash","net.corda.core.transactions.FilteredTransactionVerificationException.id"]},{"name":"val id: StateMachineRunId","description":"net.corda.core.flows.KilledFlowException.id","location":"docs/net.corda.core.flows/-killed-flow-exception/id.html","searchKeys":["id","val id: StateMachineRunId","net.corda.core.flows.KilledFlowException.id"]},{"name":"val id: StateMachineRunId","description":"net.corda.core.messaging.StateMachineInfo.id","location":"docs/net.corda.core.messaging/-state-machine-info/id.html","searchKeys":["id","val id: StateMachineRunId","net.corda.core.messaging.StateMachineInfo.id"]},{"name":"val id: String","description":"net.corda.testing.internal.vault.UniqueDummyLinearStateSchema.UniquePersistentLinearDummyState.id","location":"docs/net.corda.testing.internal.vault/-unique-dummy-linear-state-schema/-unique-persistent-linear-dummy-state/id.html","searchKeys":["id","val id: String","net.corda.testing.internal.vault.UniqueDummyLinearStateSchema.UniquePersistentLinearDummyState.id"]},{"name":"val id: UUID","description":"net.corda.core.contracts.UniqueIdentifier.id","location":"docs/net.corda.core.contracts/-unique-identifier/id.html","searchKeys":["id","val id: UUID","net.corda.core.contracts.UniqueIdentifier.id"]},{"name":"val id: UUID","description":"net.corda.core.internal.telemetry.TelemetryId.id","location":"docs/net.corda.core.internal.telemetry/-telemetry-id/id.html","searchKeys":["id","val id: UUID","net.corda.core.internal.telemetry.TelemetryId.id"]},{"name":"val identity: Party","description":"net.corda.core.node.NotaryInfo.identity","location":"docs/net.corda.core.node/-notary-info/identity.html","searchKeys":["identity","val identity: Party","net.corda.core.node.NotaryInfo.identity"]},{"name":"val identity: Party","description":"net.corda.testing.driver.NotaryHandle.identity","location":"docs/net.corda.testing.driver/-notary-handle/identity.html","searchKeys":["identity","val identity: Party","net.corda.testing.driver.NotaryHandle.identity"]},{"name":"val identityService: IdentityService","description":"net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.identityService","location":"docs/net.corda.client.jackson/-jackson-support/-identity-object-mapper/identity-service.html","searchKeys":["identityService","val identityService: IdentityService","net.corda.client.jackson.JacksonSupport.IdentityObjectMapper.identityService"]},{"name":"val ids: List<AttachmentId>","description":"net.corda.core.serialization.MissingAttachmentsRuntimeException.ids","location":"docs/net.corda.core.serialization/-missing-attachments-runtime-exception/ids.html","searchKeys":["ids","val ids: List<AttachmentId>","net.corda.core.serialization.MissingAttachmentsRuntimeException.ids"]},{"name":"val ids: List<SecureHash>","description":"net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException.ids","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-untrusted-attachments-exception/ids.html","searchKeys":["ids","val ids: List<SecureHash>","net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException.ids"]},{"name":"val ids: List<SecureHash>","description":"net.corda.core.serialization.MissingAttachmentsException.ids","location":"docs/net.corda.core.serialization/-missing-attachments-exception/ids.html","searchKeys":["ids","val ids: List<SecureHash>","net.corda.core.serialization.MissingAttachmentsException.ids"]},{"name":"val impersonatedActor: Actor? = null","description":"net.corda.core.context.InvocationContext.impersonatedActor","location":"docs/net.corda.core.context/-invocation-context/impersonated-actor.html","searchKeys":["impersonatedActor","val impersonatedActor: Actor? = null","net.corda.core.context.InvocationContext.impersonatedActor"]},{"name":"val inFlight: Boolean","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.inFlight","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/in-flight.html","searchKeys":["inFlight","val inFlight: Boolean","net.corda.core.flows.MaybeSerializedSignedTransaction.inFlight"]},{"name":"val inMemoryDB: Boolean","description":"net.corda.testing.node.internal.DriverDSLImpl.inMemoryDB","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/in-memory-d-b.html","searchKeys":["inMemoryDB","val inMemoryDB: Boolean","net.corda.testing.node.internal.DriverDSLImpl.inMemoryDB"]},{"name":"val inMemoryDB: Boolean = false","description":"net.corda.testing.driver.DriverParameters.inMemoryDB","location":"docs/net.corda.testing.driver/-driver-parameters/in-memory-d-b.html","searchKeys":["inMemoryDB","val inMemoryDB: Boolean = false","net.corda.testing.driver.DriverParameters.inMemoryDB"]},{"name":"val inOut: TransactionVerificationException.Direction","description":"net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException.inOut","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-missing-encumbrance-exception/in-out.html","searchKeys":["inOut","val inOut: TransactionVerificationException.Direction","net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException.inOut"]},{"name":"val index: Int","description":"net.corda.core.contracts.StateRef.index","location":"docs/net.corda.core.contracts/-state-ref/--index--.html","searchKeys":["index","val index: Int","net.corda.core.contracts.StateRef.index"]},{"name":"val info: NodeInfo","description":"net.corda.testing.node.StartedMockNode.info","location":"docs/net.corda.testing.node/-started-mock-node/info.html","searchKeys":["info","val info: NodeInfo","net.corda.testing.node.StartedMockNode.info"]},{"name":"val initialTx: SignedTransaction?","description":"net.corda.core.internal.ResolveTransactionsFlow.initialTx","location":"docs/net.corda.core.internal/-resolve-transactions-flow/initial-tx.html","searchKeys":["initialTx","val initialTx: SignedTransaction?","net.corda.core.internal.ResolveTransactionsFlow.initialTx"]},{"name":"val initiatedBy: List<CordaX500Name>? = null","description":"net.corda.core.flows.FlowRecoveryQuery.initiatedBy","location":"docs/net.corda.core.flows/-flow-recovery-query/initiated-by.html","searchKeys":["initiatedBy","val initiatedBy: List<CordaX500Name>? = null","net.corda.core.flows.FlowRecoveryQuery.initiatedBy"]},{"name":"val initiatingSession: FlowSession","description":"net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.initiatingSession","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-acceptor/initiating-session.html","searchKeys":["initiatingSession","val initiatingSession: FlowSession","net.corda.core.flows.AbstractStateReplacementFlow.Acceptor.initiatingSession"]},{"name":"val initiator: CordaX500Name","description":"net.corda.core.flows.TransactionMetadata.initiator","location":"docs/net.corda.core.flows/-transaction-metadata/initiator.html","searchKeys":["initiator","val initiator: CordaX500Name","net.corda.core.flows.TransactionMetadata.initiator"]},{"name":"val initiator: FlowInitiator","description":"net.corda.core.messaging.StateMachineInfo.initiator","location":"docs/net.corda.core.messaging/-state-machine-info/initiator.html","searchKeys":["initiator","val initiator: FlowInitiator","net.corda.core.messaging.StateMachineInfo.initiator"]},{"name":"val inputStates: List<ContractState>","description":"net.corda.core.transactions.LedgerTransaction.inputStates","location":"docs/net.corda.core.transactions/-ledger-transaction/input-states.html","searchKeys":["inputStates","val inputStates: List<ContractState>","net.corda.core.transactions.LedgerTransaction.inputStates"]},{"name":"val inputStream: InputStream","description":"net.corda.core.internal.InputStreamAndHash.inputStream","location":"docs/net.corda.core.internal/-input-stream-and-hash/input-stream.html","searchKeys":["inputStream","val inputStream: InputStream","net.corda.core.internal.InputStreamAndHash.inputStream"]},{"name":"val inputs: List<StateRef>","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.inputs","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/inputs.html","searchKeys":["inputs","val inputs: List<StateRef>","net.corda.core.internal.ContractUpgradeTransactionBuilder.inputs"]},{"name":"val inputs: List<StateRef>","description":"net.corda.core.internal.NotaryChangeTransactionBuilder.inputs","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/inputs.html","searchKeys":["inputs","val inputs: List<StateRef>","net.corda.core.internal.NotaryChangeTransactionBuilder.inputs"]},{"name":"val inputs: List<StateRef>","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.inputs","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/inputs.html","searchKeys":["inputs","val inputs: List<StateRef>","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.inputs"]},{"name":"val inputs: List<StateRef>","description":"net.corda.core.transactions.SignedTransaction.inputs","location":"docs/net.corda.core.transactions/-signed-transaction/inputs.html","searchKeys":["inputs","val inputs: List<StateRef>","net.corda.core.transactions.SignedTransaction.inputs"]},{"name":"val inputs: List<T>","description":"net.corda.core.transactions.LedgerTransaction.InOutGroup.inputs","location":"docs/net.corda.core.transactions/-ledger-transaction/-in-out-group/inputs.html","searchKeys":["inputs","val inputs: List<T>","net.corda.core.transactions.LedgerTransaction.InOutGroup.inputs"]},{"name":"val instance: AtomicReference<AbstractCashSelection>","description":"net.corda.finance.workflows.asset.selection.AbstractCashSelection.Companion.instance","location":"docs/net.corda.finance.workflows.asset.selection/-abstract-cash-selection/-companion/instance.html","searchKeys":["instance","val instance: AtomicReference<AbstractCashSelection>","net.corda.finance.workflows.asset.selection.AbstractCashSelection.Companion.instance"]},{"name":"val intermediateCa: <Error class: unknown class>","description":"net.corda.testing.node.internal.network.CrlServer.intermediateCa","location":"docs/net.corda.testing.node.internal.network/-crl-server/intermediate-ca.html","searchKeys":["intermediateCa","val intermediateCa: <Error class: unknown class>","net.corda.testing.node.internal.network.CrlServer.intermediateCa"]},{"name":"val interpreter: L","description":"net.corda.testing.dsl.LedgerDSL.interpreter","location":"docs/net.corda.testing.dsl/-ledger-d-s-l/interpreter.html","searchKeys":["interpreter","val interpreter: L","net.corda.testing.dsl.LedgerDSL.interpreter"]},{"name":"val invalidClassName: String","description":"net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.invalidClassName","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-package-ownership-exception/invalid-class-name.html","searchKeys":["invalidClassName","val invalidClassName: String","net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.invalidClassName"]},{"name":"val inverse: Obligation.Lifecycle","description":"net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle.inverse","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-set-lifecycle/inverse.html","searchKeys":["inverse","val inverse: Obligation.Lifecycle","net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle.inverse"]},{"name":"val invocationContext: InvocationContext","description":"net.corda.core.flows.FlowInitiator.invocationContext","location":"docs/net.corda.core.flows/-flow-initiator/invocation-context.html","searchKeys":["invocationContext","val invocationContext: InvocationContext","net.corda.core.flows.FlowInitiator.invocationContext"]},{"name":"val invocationContext: InvocationContext","description":"net.corda.core.messaging.StateMachineInfo.invocationContext","location":"docs/net.corda.core.messaging/-state-machine-info/invocation-context.html","searchKeys":["invocationContext","val invocationContext: InvocationContext","net.corda.core.messaging.StateMachineInfo.invocationContext"]},{"name":"val invocationId: Trace.InvocationId","description":"net.corda.core.context.Trace.invocationId","location":"docs/net.corda.core.context/-trace/invocation-id.html","searchKeys":["invocationId","val invocationId: Trace.InvocationId","net.corda.core.context.Trace.invocationId"]},{"name":"val isDebug: Boolean","description":"net.corda.testing.node.internal.DriverDSLImpl.isDebug","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/is-debug.html","searchKeys":["isDebug","val isDebug: Boolean","net.corda.testing.node.internal.DriverDSLImpl.isDebug"]},{"name":"val isDebug: Boolean = false","description":"net.corda.testing.driver.DriverParameters.isDebug","location":"docs/net.corda.testing.driver/-driver-parameters/is-debug.html","searchKeys":["isDebug","val isDebug: Boolean = false","net.corda.testing.driver.DriverParameters.isDebug"]},{"name":"val isDefault: Boolean","description":"net.corda.core.node.services.vault.PageSpecification.isDefault","location":"docs/net.corda.core.node.services.vault/-page-specification/is-default.html","searchKeys":["isDefault","val isDefault: Boolean","net.corda.core.node.services.vault.PageSpecification.isDefault"]},{"name":"val isFinality: Boolean","description":"net.corda.core.flows.SignedTransactionWithDistributionList.isFinality","location":"docs/net.corda.core.flows/-signed-transaction-with-distribution-list/is-finality.html","searchKeys":["isFinality","val isFinality: Boolean","net.corda.core.flows.SignedTransactionWithDistributionList.isFinality"]},{"name":"val isIdentity: Boolean","description":"net.corda.core.internal.CertRole.isIdentity","location":"docs/net.corda.core.internal/-cert-role/is-identity.html","searchKeys":["isIdentity","val isIdentity: Boolean","net.corda.core.internal.CertRole.isIdentity"]},{"name":"val isKilled: Boolean","description":"net.corda.core.flows.FlowLogic.isKilled","location":"docs/net.corda.core.flows/-flow-logic/is-killed.html","searchKeys":["isKilled","val isKilled: Boolean","net.corda.core.flows.FlowLogic.isKilled"]},{"name":"val isLoaded: Boolean = true","description":"net.corda.core.internal.cordapp.CordappImpl.isLoaded","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/is-loaded.html","searchKeys":["isLoaded","val isLoaded: Boolean = true","net.corda.core.internal.cordapp.CordappImpl.isLoaded"]},{"name":"val isModified: Boolean","description":"net.corda.finance.contracts.DateRollConvention.isModified","location":"docs/net.corda.finance.contracts/-date-roll-convention/is-modified.html","searchKeys":["isModified","val isModified: Boolean","net.corda.finance.contracts.DateRollConvention.isModified"]},{"name":"val isSigned: Boolean","description":"net.corda.core.contracts.ContractAttachment.isSigned","location":"docs/net.corda.core.contracts/-contract-attachment/is-signed.html","searchKeys":["isSigned","val isSigned: Boolean","net.corda.core.contracts.ContractAttachment.isSigned"]},{"name":"val isSignedCondition: ColumnPredicate<Boolean>? = null","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.isSignedCondition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/is-signed-condition.html","searchKeys":["isSignedCondition","val isSignedCondition: ColumnPredicate<Boolean>? = null","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.isSignedCondition"]},{"name":"val isStarted: Boolean","description":"net.corda.testing.node.UnstartedMockNode.isStarted","location":"docs/net.corda.testing.node/-unstarted-mock-node/is-started.html","searchKeys":["isStarted","val isStarted: Boolean","net.corda.testing.node.UnstartedMockNode.isStarted"]},{"name":"val isTrustRoot: Boolean","description":"net.corda.core.internal.AttachmentTrustInfo.isTrustRoot","location":"docs/net.corda.core.internal/-attachment-trust-info/is-trust-root.html","searchKeys":["isTrustRoot","val isTrustRoot: Boolean","net.corda.core.internal.AttachmentTrustInfo.isTrustRoot"]},{"name":"val isTrusted: Boolean","description":"net.corda.core.internal.AttachmentTrustInfo.isTrusted","location":"docs/net.corda.core.internal/-attachment-trust-info/is-trusted.html","searchKeys":["isTrusted","val isTrusted: Boolean","net.corda.core.internal.AttachmentTrustInfo.isTrusted"]},{"name":"val isVirtual: Boolean = false","description":"net.corda.core.internal.cordapp.CordappImpl.isVirtual","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/is-virtual.html","searchKeys":["isVirtual","val isVirtual: Boolean = false","net.corda.core.internal.cordapp.CordappImpl.isVirtual"]},{"name":"val isWellKnown: Boolean","description":"net.corda.core.internal.CertRole.isWellKnown","location":"docs/net.corda.core.internal/-cert-role/is-well-known.html","searchKeys":["isWellKnown","val isWellKnown: Boolean","net.corda.core.internal.CertRole.isWellKnown"]},{"name":"val issuableCurrencies: List<Currency>","description":"net.corda.finance.internal.CashConfiguration.issuableCurrencies","location":"docs/net.corda.finance.internal/-cash-configuration/issuable-currencies.html","searchKeys":["issuableCurrencies","val issuableCurrencies: List<Currency>","net.corda.finance.internal.CashConfiguration.issuableCurrencies"]},{"name":"val issuableCurrencies: List<Currency>","description":"net.corda.finance.internal.ConfigHolder.issuableCurrencies","location":"docs/net.corda.finance.internal/-config-holder/issuable-currencies.html","searchKeys":["issuableCurrencies","val issuableCurrencies: List<Currency>","net.corda.finance.internal.ConfigHolder.issuableCurrencies"]},{"name":"val issuance: PartyAndReference","description":"net.corda.finance.contracts.CommercialPaper.State.issuance","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/issuance.html","searchKeys":["issuance","val issuance: PartyAndReference","net.corda.finance.contracts.CommercialPaper.State.issuance"]},{"name":"val issueRef: OpaqueBytes","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.issueRef","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-issue-and-payment-request/issue-ref.html","searchKeys":["issueRef","val issueRef: OpaqueBytes","net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.issueRef"]},{"name":"val issueRef: OpaqueBytes","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.issueRef","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/issue-ref.html","searchKeys":["issueRef","val issueRef: OpaqueBytes","net.corda.finance.flows.CashIssueAndPaymentFlow.issueRef"]},{"name":"val issueRef: OpaqueBytes","description":"net.corda.finance.flows.CashIssueFlow.IssueRequest.issueRef","location":"docs/net.corda.finance.flows/-cash-issue-flow/-issue-request/issue-ref.html","searchKeys":["issueRef","val issueRef: OpaqueBytes","net.corda.finance.flows.CashIssueFlow.IssueRequest.issueRef"]},{"name":"val issuer: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.issuer","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/issuer.html","searchKeys":["issuer","val issuer: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.issuer"]},{"name":"val issuer: PartyAndReference","description":"net.corda.core.contracts.Issued.issuer","location":"docs/net.corda.core.contracts/-issued/issuer.html","searchKeys":["issuer","val issuer: PartyAndReference","net.corda.core.contracts.Issued.issuer"]},{"name":"val issuerConstraint: Set<Party>","description":"net.corda.finance.flows.CashPaymentFlow.PaymentRequest.issuerConstraint","location":"docs/net.corda.finance.flows/-cash-payment-flow/-payment-request/issuer-constraint.html","searchKeys":["issuerConstraint","val issuerConstraint: Set<Party>","net.corda.finance.flows.CashPaymentFlow.PaymentRequest.issuerConstraint"]},{"name":"val issuerConstraint: Set<Party>","description":"net.corda.finance.flows.CashPaymentFlow.issuerConstraint","location":"docs/net.corda.finance.flows/-cash-payment-flow/issuer-constraint.html","searchKeys":["issuerConstraint","val issuerConstraint: Set<Party>","net.corda.finance.flows.CashPaymentFlow.issuerConstraint"]},{"name":"val issuerRef: List<OpaqueBytes>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.issuerRef","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/issuer-ref.html","searchKeys":["issuerRef","val issuerRef: List<OpaqueBytes>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.issuerRef"]},{"name":"val issuerRef: OpaqueBytes","description":"net.corda.finance.flows.CashExitFlow.ExitRequest.issuerRef","location":"docs/net.corda.finance.flows/-cash-exit-flow/-exit-request/issuer-ref.html","searchKeys":["issuerRef","val issuerRef: OpaqueBytes","net.corda.finance.flows.CashExitFlow.ExitRequest.issuerRef"]},{"name":"val jarFile: Path","description":"net.corda.core.internal.cordapp.CordappImpl.jarFile","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/jar-file.html","searchKeys":["jarFile","val jarFile: Path","net.corda.core.internal.cordapp.CordappImpl.jarFile"]},{"name":"val jarHash: SecureHash.SHA256","description":"net.corda.core.cordapp.CordappInfo.jarHash","location":"docs/net.corda.core.cordapp/-cordapp-info/jar-hash.html","searchKeys":["jarHash","val jarHash: SecureHash.SHA256","net.corda.core.cordapp.CordappInfo.jarHash"]},{"name":"val jmxHttpServerPortAllocation: PortAllocation","description":"net.corda.testing.driver.JmxPolicy.jmxHttpServerPortAllocation","location":"docs/net.corda.testing.driver/-jmx-policy/jmx-http-server-port-allocation.html","searchKeys":["jmxHttpServerPortAllocation","val jmxHttpServerPortAllocation: PortAllocation","net.corda.testing.driver.JmxPolicy.jmxHttpServerPortAllocation"]},{"name":"val jmxPolicy: JmxPolicy","description":"net.corda.testing.driver.DriverParameters.jmxPolicy","location":"docs/net.corda.testing.driver/-driver-parameters/jmx-policy.html","searchKeys":["jmxPolicy","val jmxPolicy: JmxPolicy","net.corda.testing.driver.DriverParameters.jmxPolicy"]},{"name":"val jmxPolicy: JmxPolicy","description":"net.corda.testing.node.internal.DriverDSLImpl.jmxPolicy","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/jmx-policy.html","searchKeys":["jmxPolicy","val jmxPolicy: JmxPolicy","net.corda.testing.node.internal.DriverDSLImpl.jmxPolicy"]},{"name":"val key: PublicKey","description":"net.corda.core.contracts.SignatureAttachmentConstraint.key","location":"docs/net.corda.core.contracts/-signature-attachment-constraint/key.html","searchKeys":["key","val key: PublicKey","net.corda.core.contracts.SignatureAttachmentConstraint.key"]},{"name":"val keySize: Int?","description":"net.corda.core.crypto.SignatureScheme.keySize","location":"docs/net.corda.core.crypto/-signature-scheme/key-size.html","searchKeys":["keySize","val keySize: Int?","net.corda.core.crypto.SignatureScheme.keySize"]},{"name":"val keyStorePath: Path?","description":"net.corda.testing.node.internal.CustomCordapp.SigningInfo.keyStorePath","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-signing-info/key-store-path.html","searchKeys":["keyStorePath","val keyStorePath: Path?","net.corda.testing.node.internal.CustomCordapp.SigningInfo.keyStorePath"]},{"name":"val kotlinMetadataVersion: KotlinMetadataVersion?","description":"net.corda.core.internal.cordapp.LanguageVersion.Bytecode.kotlinMetadataVersion","location":"docs/net.corda.core.internal.cordapp/-language-version/-bytecode/kotlin-metadata-version.html","searchKeys":["kotlinMetadataVersion","val kotlinMetadataVersion: KotlinMetadataVersion?","net.corda.core.internal.cordapp.LanguageVersion.Bytecode.kotlinMetadataVersion"]},{"name":"val languageMinorVersion: <Error class: unknown class>","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.languageMinorVersion","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/language-minor-version.html","searchKeys":["languageMinorVersion","val languageMinorVersion: <Error class: unknown class>","net.corda.core.internal.cordapp.KotlinMetadataVersion.languageMinorVersion"]},{"name":"val languageVersion: LanguageVersion","description":"net.corda.core.internal.cordapp.CordappImpl.languageVersion","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/language-version.html","searchKeys":["languageVersion","val languageVersion: LanguageVersion","net.corda.core.internal.cordapp.CordappImpl.languageVersion"]},{"name":"val latestAcceptedParametersMap: <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.latestAcceptedParametersMap","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/latest-accepted-parameters-map.html","searchKeys":["latestAcceptedParametersMap","val latestAcceptedParametersMap: <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.latestAcceptedParametersMap"]},{"name":"val leafKeys: Set<PublicKey>","description":"net.corda.core.crypto.CompositeKey.leafKeys","location":"docs/net.corda.core.crypto/-composite-key/leaf-keys.html","searchKeys":["leafKeys","val leafKeys: Set<PublicKey>","net.corda.core.crypto.CompositeKey.leafKeys"]},{"name":"val left: CriteriaExpression<O, Boolean>","description":"net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.left","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-binary-logical/left.html","searchKeys":["left","val left: CriteriaExpression<O, Boolean>","net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.left"]},{"name":"val left: MerkleTree","description":"net.corda.core.crypto.MerkleTree.Node.left","location":"docs/net.corda.core.crypto/-merkle-tree/-node/left.html","searchKeys":["left","val left: MerkleTree","net.corda.core.crypto.MerkleTree.Node.left"]},{"name":"val left: PartialMerkleTree.PartialTree","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.left","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-node/left.html","searchKeys":["left","val left: PartialMerkleTree.PartialTree","net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.left"]},{"name":"val leftArrow: String","description":"net.corda.core.internal.Emoji.leftArrow","location":"docs/net.corda.core.internal/-emoji/left-arrow.html","searchKeys":["leftArrow","val leftArrow: String","net.corda.core.internal.Emoji.leftArrow"]},{"name":"val legacyAttachment: ContractAttachment? = null","description":"net.corda.core.internal.cordapp.ContractAttachmentWithLegacy.legacyAttachment","location":"docs/net.corda.core.internal.cordapp/-contract-attachment-with-legacy/legacy-attachment.html","searchKeys":["legacyAttachment","val legacyAttachment: ContractAttachment? = null","net.corda.core.internal.cordapp.ContractAttachmentWithLegacy.legacyAttachment"]},{"name":"val legacyAttachments: List<SecureHash>","description":"net.corda.core.transactions.TraversableTransaction.legacyAttachments","location":"docs/net.corda.core.transactions/-traversable-transaction/legacy-attachments.html","searchKeys":["legacyAttachments","val legacyAttachments: List<SecureHash>","net.corda.core.transactions.TraversableTransaction.legacyAttachments"]},{"name":"val legacyContractAttachment: Attachment","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.legacyContractAttachment","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/legacy-contract-attachment.html","searchKeys":["legacyContractAttachment","val legacyContractAttachment: Attachment","net.corda.core.transactions.ContractUpgradeLedgerTransaction.legacyContractAttachment"]},{"name":"val legacyContractAttachmentId: SecureHash","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.legacyContractAttachmentId","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/legacy-contract-attachment-id.html","searchKeys":["legacyContractAttachmentId","val legacyContractAttachmentId: SecureHash","net.corda.core.internal.ContractUpgradeTransactionBuilder.legacyContractAttachmentId"]},{"name":"val legacyContractAttachmentId: SecureHash","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.legacyContractAttachmentId","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/legacy-contract-attachment-id.html","searchKeys":["legacyContractAttachmentId","val legacyContractAttachmentId: SecureHash","net.corda.core.transactions.ContractUpgradeWireTransaction.legacyContractAttachmentId"]},{"name":"val legacyContracts: Collection<TestCordapp>","description":"net.corda.testing.driver.NodeParameters.legacyContracts","location":"docs/net.corda.testing.driver/-node-parameters/legacy-contracts.html","searchKeys":["legacyContracts","val legacyContracts: Collection<TestCordapp>","net.corda.testing.driver.NodeParameters.legacyContracts"]},{"name":"val legalIdentities: List<Party>","description":"net.corda.core.node.NodeInfo.legalIdentities","location":"docs/net.corda.core.node/-node-info/legal-identities.html","searchKeys":["legalIdentities","val legalIdentities: List<Party>","net.corda.core.node.NodeInfo.legalIdentities"]},{"name":"val legalIdentitiesAndCerts: List<PartyAndCertificate>","description":"net.corda.core.node.NodeInfo.legalIdentitiesAndCerts","location":"docs/net.corda.core.node/-node-info/legal-identities-and-certs.html","searchKeys":["legalIdentitiesAndCerts","val legalIdentitiesAndCerts: List<PartyAndCertificate>","net.corda.core.node.NodeInfo.legalIdentitiesAndCerts"]},{"name":"val legalName: CordaX500Name? = null","description":"net.corda.testing.node.MockNodeParameters.legalName","location":"docs/net.corda.testing.node/-mock-node-parameters/legal-name.html","searchKeys":["legalName","val legalName: CordaX500Name? = null","net.corda.testing.node.MockNodeParameters.legalName"]},{"name":"val legalName: CordaX500Name? = null","description":"net.corda.testing.node.internal.InternalMockNodeParameters.legalName","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/legal-name.html","searchKeys":["legalName","val legalName: CordaX500Name? = null","net.corda.testing.node.internal.InternalMockNodeParameters.legalName"]},{"name":"val legalNameFullRules: List<LegalNameValidator.Rule<String>>","description":"net.corda.core.internal.LegalNameValidator.Rule.Companion.legalNameFullRules","location":"docs/net.corda.core.internal/-legal-name-validator/-rule/-companion/legal-name-full-rules.html","searchKeys":["legalNameFullRules","val legalNameFullRules: List<LegalNameValidator.Rule<String>>","net.corda.core.internal.LegalNameValidator.Rule.Companion.legalNameFullRules"]},{"name":"val legalNameRules: List<LegalNameValidator.Rule<String>>","description":"net.corda.core.internal.LegalNameValidator.Rule.Companion.legalNameRules","location":"docs/net.corda.core.internal/-legal-name-validator/-rule/-companion/legal-name-rules.html","searchKeys":["legalNameRules","val legalNameRules: List<LegalNameValidator.Rule<String>>","net.corda.core.internal.LegalNameValidator.Rule.Companion.legalNameRules"]},{"name":"val length: Duration?","description":"net.corda.core.contracts.TimeWindow.length","location":"docs/net.corda.core.contracts/-time-window/length.html","searchKeys":["length","val length: Duration?","net.corda.core.contracts.TimeWindow.length"]},{"name":"val licence: String","description":"net.corda.core.cordapp.CordappInfo.licence","location":"docs/net.corda.core.cordapp/-cordapp-info/licence.html","searchKeys":["licence","val licence: String","net.corda.core.cordapp.CordappInfo.licence"]},{"name":"val lifecycle: Obligation.Lifecycle","description":"net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle.lifecycle","location":"docs/net.corda.finance.contracts.asset/-obligation/-commands/-set-lifecycle/lifecycle.html","searchKeys":["lifecycle","val lifecycle: Obligation.Lifecycle","net.corda.finance.contracts.asset.Obligation.Commands.SetLifecycle.lifecycle"]},{"name":"val lightBulb: String","description":"net.corda.core.internal.Emoji.lightBulb","location":"docs/net.corda.core.internal/-emoji/light-bulb.html","searchKeys":["lightBulb","val lightBulb: String","net.corda.core.internal.Emoji.lightBulb"]},{"name":"val linearBoolean: Boolean = true","description":"net.corda.testing.internal.vault.DummyLinearContract.State.linearBoolean","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/linear-boolean.html","searchKeys":["linearBoolean","val linearBoolean: Boolean = true","net.corda.testing.internal.vault.DummyLinearContract.State.linearBoolean"]},{"name":"val linearNumber: Long = 123","description":"net.corda.testing.internal.vault.DummyLinearContract.State.linearNumber","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/linear-number.html","searchKeys":["linearNumber","val linearNumber: Long = 123","net.corda.testing.internal.vault.DummyLinearContract.State.linearNumber"]},{"name":"val linearString: String","description":"net.corda.testing.internal.vault.DummyLinearContract.State.linearString","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/linear-string.html","searchKeys":["linearString","val linearString: String","net.corda.testing.internal.vault.DummyLinearContract.State.linearString"]},{"name":"val linearTimestamp: Instant","description":"net.corda.testing.internal.vault.DummyLinearContract.State.linearTimestamp","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/linear-timestamp.html","searchKeys":["linearTimestamp","val linearTimestamp: Instant","net.corda.testing.internal.vault.DummyLinearContract.State.linearTimestamp"]},{"name":"val listenAddress: NetworkHostAndPort","description":"net.corda.testing.driver.WebserverHandle.listenAddress","location":"docs/net.corda.testing.driver/-webserver-handle/listen-address.html","searchKeys":["listenAddress","val listenAddress: NetworkHostAndPort","net.corda.testing.driver.WebserverHandle.listenAddress"]},{"name":"val locality: String","description":"net.corda.core.identity.CordaX500Name.locality","location":"docs/net.corda.core.identity/-corda-x500-name/locality.html","searchKeys":["locality","val locality: String","net.corda.core.identity.CordaX500Name.locality"]},{"name":"val lock: ReentrantLock","description":"net.corda.core.internal.ThreadBox.lock","location":"docs/net.corda.core.internal/-thread-box/lock.html","searchKeys":["lock","val lock: ReentrantLock","net.corda.core.internal.ThreadBox.lock"]},{"name":"val lockId: String?","description":"net.corda.core.node.services.Vault.StateMetadata.lockId","location":"docs/net.corda.core.node.services/-vault/-state-metadata/lock-id.html","searchKeys":["lockId","val lockId: String?","net.corda.core.node.services.Vault.StateMetadata.lockId"]},{"name":"val lockIds: List<UUID>","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition.lockIds","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-condition/lock-ids.html","searchKeys":["lockIds","val lockIds: List<UUID>","net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition.lockIds"]},{"name":"val lockUpdateTime: Instant?","description":"net.corda.core.node.services.Vault.StateMetadata.lockUpdateTime","location":"docs/net.corda.core.node.services/-vault/-state-metadata/lock-update-time.html","searchKeys":["lockUpdateTime","val lockUpdateTime: Instant?","net.corda.core.node.services.Vault.StateMetadata.lockUpdateTime"]},{"name":"val logLevelOverride: String? = null","description":"net.corda.testing.driver.NodeParameters.logLevelOverride","location":"docs/net.corda.testing.driver/-node-parameters/log-level-override.html","searchKeys":["logLevelOverride","val logLevelOverride: String? = null","net.corda.testing.driver.NodeParameters.logLevelOverride"]},{"name":"val logger: <Error class: unknown class>","description":"net.corda.core.flows.FlowLogic.logger","location":"docs/net.corda.core.flows/-flow-logic/logger.html","searchKeys":["logger","val logger: <Error class: unknown class>","net.corda.core.flows.FlowLogic.logger"]},{"name":"val logger: <Error class: unknown class>","description":"net.corda.core.internal.WaitForStateConsumption.Companion.logger","location":"docs/net.corda.core.internal/-wait-for-state-consumption/-companion/logger.html","searchKeys":["logger","val logger: <Error class: unknown class>","net.corda.core.internal.WaitForStateConsumption.Companion.logger"]},{"name":"val logicRef: FlowLogicRef","description":"net.corda.core.contracts.ScheduledActivity.logicRef","location":"docs/net.corda.core.contracts/-scheduled-activity/logic-ref.html","searchKeys":["logicRef","val logicRef: FlowLogicRef","net.corda.core.contracts.ScheduledActivity.logicRef"]},{"name":"val major: Int","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.major","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/major.html","searchKeys":["major","val major: Int","net.corda.core.internal.cordapp.KotlinMetadataVersion.major"]},{"name":"val mappedTypes: Iterable<Class<*>>","description":"net.corda.core.schemas.MappedSchema.mappedTypes","location":"docs/net.corda.core.schemas/-mapped-schema/mapped-types.html","searchKeys":["mappedTypes","val mappedTypes: Iterable<Class<*>>","net.corda.core.schemas.MappedSchema.mappedTypes"]},{"name":"val mapper: <Error class: unknown class>","description":"net.corda.testing.http.HttpApi.mapper","location":"docs/net.corda.testing.http/-http-api/mapper.html","searchKeys":["mapper","val mapper: <Error class: unknown class>","net.corda.testing.http.HttpApi.mapper"]},{"name":"val matchingCriteria: FlowRecoveryQuery?","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.matchingCriteria","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/matching-criteria.html","searchKeys":["matchingCriteria","val matchingCriteria: FlowRecoveryQuery?","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.matchingCriteria"]},{"name":"val maturityDate: Instant","description":"net.corda.finance.contracts.CommercialPaper.State.maturityDate","location":"docs/net.corda.finance.contracts/-commercial-paper/-state/maturity-date.html","searchKeys":["maturityDate","val maturityDate: Instant","net.corda.finance.contracts.CommercialPaper.State.maturityDate"]},{"name":"val maxAttempts: Int = 5","description":"net.corda.client.rpc.GracefulReconnect.maxAttempts","location":"docs/net.corda.client.rpc/-graceful-reconnect/max-attempts.html","searchKeys":["maxAttempts","val maxAttempts: Int = 5","net.corda.client.rpc.GracefulReconnect.maxAttempts"]},{"name":"val maxMessageSize: Int","description":"net.corda.core.node.NetworkParameters.maxMessageSize","location":"docs/net.corda.core.node/-network-parameters/max-message-size.html","searchKeys":["maxMessageSize","val maxMessageSize: Int","net.corda.core.node.NetworkParameters.maxMessageSize"]},{"name":"val maxRestartCount: Int","description":"net.corda.testing.node.MockNetFlowTimeOut.maxRestartCount","location":"docs/net.corda.testing.node/-mock-net-flow-time-out/max-restart-count.html","searchKeys":["maxRestartCount","val maxRestartCount: Int","net.corda.testing.node.MockNetFlowTimeOut.maxRestartCount"]},{"name":"val maxTransactionSize: Int","description":"net.corda.core.node.NetworkParameters.maxTransactionSize","location":"docs/net.corda.core.node/-network-parameters/max-transaction-size.html","searchKeys":["maxTransactionSize","val maxTransactionSize: Int","net.corda.core.node.NetworkParameters.maxTransactionSize"]},{"name":"val maximumHeapSize: String","description":"net.corda.testing.driver.NodeParameters.maximumHeapSize","location":"docs/net.corda.testing.driver/-node-parameters/maximum-heap-size.html","searchKeys":["maximumHeapSize","val maximumHeapSize: String","net.corda.testing.driver.NodeParameters.maximumHeapSize"]},{"name":"val merkleTree: MerkleTree","description":"net.corda.core.transactions.WireTransaction.merkleTree","location":"docs/net.corda.core.transactions/-wire-transaction/merkle-tree.html","searchKeys":["merkleTree","val merkleTree: MerkleTree","net.corda.core.transactions.WireTransaction.merkleTree"]},{"name":"val message: String","description":"net.corda.core.internal.telemetry.SetStatusEvent.message","location":"docs/net.corda.core.internal.telemetry/-set-status-event/message.html","searchKeys":["message","val message: String","net.corda.core.internal.telemetry.SetStatusEvent.message"]},{"name":"val messageData: ByteSequence","description":"net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.messageData","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-message-transfer/message-data.html","searchKeys":["messageData","val messageData: ByteSequence","net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.messageData"]},{"name":"val messagingNetwork: InMemoryMessagingNetwork","description":"net.corda.testing.node.internal.InternalMockNetwork.messagingNetwork","location":"docs/net.corda.testing.node.internal/-internal-mock-network/messaging-network.html","searchKeys":["messagingNetwork","val messagingNetwork: InMemoryMessagingNetwork","net.corda.testing.node.internal.InternalMockNetwork.messagingNetwork"]},{"name":"val messagingService: <Error class: unknown class>","description":"net.corda.testing.node.internal.MessagingServiceSpy.messagingService","location":"docs/net.corda.testing.node.internal/-messaging-service-spy/messaging-service.html","searchKeys":["messagingService","val messagingService: <Error class: unknown class>","net.corda.testing.node.internal.MessagingServiceSpy.messagingService"]},{"name":"val metadata: TransactionMetadata?","description":"net.corda.core.flows.FlowTransactionInfo.metadata","location":"docs/net.corda.core.flows/-flow-transaction-info/metadata.html","searchKeys":["metadata","val metadata: TransactionMetadata?","net.corda.core.flows.FlowTransactionInfo.metadata"]},{"name":"val method: Method","description":"net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.method","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-parsed-method-call/method.html","searchKeys":["method","val method: Method","net.corda.client.jackson.StringToMethodCallParser.ParsedMethodCall.method"]},{"name":"val method: Method","description":"net.corda.testing.node.internal.RandomRpcUser.Companion.Call.method","location":"docs/net.corda.testing.node.internal/-random-rpc-user/-companion/-call/method.html","searchKeys":["method","val method: Method","net.corda.testing.node.internal.RandomRpcUser.Companion.Call.method"]},{"name":"val methodName: String","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnknownMethod.methodName","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-unknown-method/method-name.html","searchKeys":["methodName","val methodName: String","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.UnknownMethod.methodName"]},{"name":"val methodParamNames: Map<String, List<String>>","description":"net.corda.client.jackson.StringToMethodCallParser.methodParamNames","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/method-param-names.html","searchKeys":["methodParamNames","val methodParamNames: Map<String, List<String>>","net.corda.client.jackson.StringToMethodCallParser.methodParamNames"]},{"name":"val minimumPlatformVersion: Int","description":"net.corda.core.cordapp.CordappInfo.minimumPlatformVersion","location":"docs/net.corda.core.cordapp/-cordapp-info/minimum-platform-version.html","searchKeys":["minimumPlatformVersion","val minimumPlatformVersion: Int","net.corda.core.cordapp.CordappInfo.minimumPlatformVersion"]},{"name":"val minimumPlatformVersion: Int","description":"net.corda.core.node.NetworkParameters.minimumPlatformVersion","location":"docs/net.corda.core.node/-network-parameters/minimum-platform-version.html","searchKeys":["minimumPlatformVersion","val minimumPlatformVersion: Int","net.corda.core.node.NetworkParameters.minimumPlatformVersion"]},{"name":"val minor: Int","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.minor","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/minor.html","searchKeys":["minor","val minor: Int","net.corda.core.internal.cordapp.KotlinMetadataVersion.minor"]},{"name":"val missing: Int","description":"net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException.missing","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-transaction-missing-encumbrance-exception/missing.html","searchKeys":["missing","val missing: Int","net.corda.core.contracts.TransactionVerificationException.TransactionMissingEncumbranceException.missing"]},{"name":"val missing: Set<PublicKey>","description":"net.corda.core.transactions.SignedTransaction.SignaturesMissingException.missing","location":"docs/net.corda.core.transactions/-signed-transaction/-signatures-missing-exception/missing.html","searchKeys":["missing","val missing: Set<PublicKey>","net.corda.core.transactions.SignedTransaction.SignaturesMissingException.missing"]},{"name":"val mockNet: InternalMockNetwork","description":"net.corda.testing.node.internal.InternalMockNetwork.MockNode.mockNet","location":"docs/net.corda.testing.node.internal/-internal-mock-network/-mock-node/mock-net.html","searchKeys":["mockNet","val mockNet: InternalMockNetwork","net.corda.testing.node.internal.InternalMockNetwork.MockNode.mockNet"]},{"name":"val modification: M","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.modification","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/modification.html","searchKeys":["modification","val modification: M","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.modification"]},{"name":"val modification: M","description":"net.corda.core.flows.AbstractStateReplacementFlow.Proposal.modification","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-proposal/modification.html","searchKeys":["modification","val modification: M","net.corda.core.flows.AbstractStateReplacementFlow.Proposal.modification"]},{"name":"val modifiedTime: Instant","description":"net.corda.core.node.NetworkParameters.modifiedTime","location":"docs/net.corda.core.node/-network-parameters/modified-time.html","searchKeys":["modifiedTime","val modifiedTime: Instant","net.corda.core.node.NetworkParameters.modifiedTime"]},{"name":"val msg: String","description":"net.corda.client.rpc.PermissionException.msg","location":"docs/net.corda.client.rpc/-permission-exception/msg.html","searchKeys":["msg","val msg: String","net.corda.client.rpc.PermissionException.msg"]},{"name":"val myOptionalKeys: Iterable<PublicKey>?","description":"net.corda.core.flows.CollectSignaturesFlow.myOptionalKeys","location":"docs/net.corda.core.flows/-collect-signatures-flow/my-optional-keys.html","searchKeys":["myOptionalKeys","val myOptionalKeys: Iterable<PublicKey>?","net.corda.core.flows.CollectSignaturesFlow.myOptionalKeys"]},{"name":"val name: CordaX500Name","description":"net.corda.core.identity.Party.name","location":"docs/net.corda.core.identity/-party/name.html","searchKeys":["name","val name: CordaX500Name","net.corda.core.identity.Party.name"]},{"name":"val name: CordaX500Name","description":"net.corda.core.identity.PartyAndCertificate.name","location":"docs/net.corda.core.identity/-party-and-certificate/name.html","searchKeys":["name","val name: CordaX500Name","net.corda.core.identity.PartyAndCertificate.name"]},{"name":"val name: CordaX500Name","description":"net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.name","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-peer-handle/name.html","searchKeys":["name","val name: CordaX500Name","net.corda.testing.node.InMemoryMessagingNetwork.PeerHandle.name"]},{"name":"val name: CordaX500Name","description":"net.corda.testing.node.MockNetworkNotarySpec.name","location":"docs/net.corda.testing.node/-mock-network-notary-spec/name.html","searchKeys":["name","val name: CordaX500Name","net.corda.testing.node.MockNetworkNotarySpec.name"]},{"name":"val name: CordaX500Name","description":"net.corda.testing.node.NotarySpec.name","location":"docs/net.corda.testing.node/-notary-spec/name.html","searchKeys":["name","val name: CordaX500Name","net.corda.testing.node.NotarySpec.name"]},{"name":"val name: String","description":"net.corda.core.cordapp.CordappInfo.name","location":"docs/net.corda.core.cordapp/-cordapp-info/name.html","searchKeys":["name","val name: String","net.corda.core.cordapp.CordappInfo.name"]},{"name":"val name: String","description":"net.corda.core.internal.DeclaredField.name","location":"docs/net.corda.core.internal/-declared-field/name.html","searchKeys":["name","val name: String","net.corda.core.internal.DeclaredField.name"]},{"name":"val name: String","description":"net.corda.core.internal.ToggleField.name","location":"docs/net.corda.core.internal/-toggle-field/name.html","searchKeys":["name","val name: String","net.corda.core.internal.ToggleField.name"]},{"name":"val name: String","description":"net.corda.core.internal.telemetry.StartSpanEvent.name","location":"docs/net.corda.core.internal.telemetry/-start-span-event/name.html","searchKeys":["name","val name: String","net.corda.core.internal.telemetry.StartSpanEvent.name"]},{"name":"val name: String","description":"net.corda.core.internal.telemetry.StartSpanForFlowEvent.name","location":"docs/net.corda.core.internal.telemetry/-start-span-for-flow-event/name.html","searchKeys":["name","val name: String","net.corda.core.internal.telemetry.StartSpanForFlowEvent.name"]},{"name":"val name: String","description":"net.corda.core.node.services.vault.Column.name","location":"docs/net.corda.core.node.services.vault/-column/name.html","searchKeys":["name","val name: String","net.corda.core.node.services.vault.Column.name"]},{"name":"val name: String","description":"net.corda.core.node.services.vault.FieldInfo.name","location":"docs/net.corda.core.node.services.vault/-field-info/name.html","searchKeys":["name","val name: String","net.corda.core.node.services.vault.FieldInfo.name"]},{"name":"val name: String","description":"net.corda.core.schemas.MappedSchema.name","location":"docs/net.corda.core.schemas/-mapped-schema/name.html","searchKeys":["name","val name: String","net.corda.core.schemas.MappedSchema.name"]},{"name":"val name: String","description":"net.corda.finance.contracts.FixOf.name","location":"docs/net.corda.finance.contracts/-fix-of/name.html","searchKeys":["name","val name: String","net.corda.finance.contracts.FixOf.name"]},{"name":"val name: String","description":"net.corda.finance.contracts.Tenor.name","location":"docs/net.corda.finance.contracts/-tenor/name.html","searchKeys":["name","val name: String","net.corda.finance.contracts.Tenor.name"]},{"name":"val name: String","description":"net.corda.testing.node.internal.CustomCordapp.name","location":"docs/net.corda.testing.node.internal/-custom-cordapp/name.html","searchKeys":["name","val name: String","net.corda.testing.node.internal.CustomCordapp.name"]},{"name":"val network: InternalMockNetwork","description":"net.corda.testing.node.internal.MockNodeArgs.network","location":"docs/net.corda.testing.node.internal/-mock-node-args/network.html","searchKeys":["network","val network: InternalMockNetwork","net.corda.testing.node.internal.MockNodeArgs.network"]},{"name":"val networkParameters: NetworkParameters","description":"net.corda.testing.driver.DriverParameters.networkParameters","location":"docs/net.corda.testing.driver/-driver-parameters/network-parameters.html","searchKeys":["networkParameters","val networkParameters: NetworkParameters","net.corda.testing.driver.DriverParameters.networkParameters"]},{"name":"val networkParameters: NetworkParameters","description":"net.corda.testing.node.MockNetwork.networkParameters","location":"docs/net.corda.testing.node/-mock-network/network-parameters.html","searchKeys":["networkParameters","val networkParameters: NetworkParameters","net.corda.testing.node.MockNetwork.networkParameters"]},{"name":"val networkParameters: NetworkParameters","description":"net.corda.testing.node.MockNetworkParameters.networkParameters","location":"docs/net.corda.testing.node/-mock-network-parameters/network-parameters.html","searchKeys":["networkParameters","val networkParameters: NetworkParameters","net.corda.testing.node.MockNetworkParameters.networkParameters"]},{"name":"val networkParameters: NetworkParameters","description":"net.corda.testing.node.internal.DriverDSLImpl.networkParameters","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/network-parameters.html","searchKeys":["networkParameters","val networkParameters: NetworkParameters","net.corda.testing.node.internal.DriverDSLImpl.networkParameters"]},{"name":"val networkParametersCopier: <Error class: unknown class>","description":"net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap.networkParametersCopier","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-local-network-map/network-parameters-copier.html","searchKeys":["networkParametersCopier","val networkParametersCopier: <Error class: unknown class>","net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap.networkParametersCopier"]},{"name":"val networkParametersHash: SecureHash","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.networkParametersHash","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/network-parameters-hash.html","searchKeys":["networkParametersHash","val networkParametersHash: SecureHash","net.corda.core.internal.ContractUpgradeTransactionBuilder.networkParametersHash"]},{"name":"val networkParametersHash: SecureHash","description":"net.corda.core.internal.NotaryChangeTransactionBuilder.networkParametersHash","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/network-parameters-hash.html","searchKeys":["networkParametersHash","val networkParametersHash: SecureHash","net.corda.core.internal.NotaryChangeTransactionBuilder.networkParametersHash"]},{"name":"val networkParametersHash: SecureHash?","description":"net.corda.core.transactions.SignedTransaction.networkParametersHash","location":"docs/net.corda.core.transactions/-signed-transaction/network-parameters-hash.html","searchKeys":["networkParametersHash","val networkParametersHash: SecureHash?","net.corda.core.transactions.SignedTransaction.networkParametersHash"]},{"name":"val networkSendManuallyPumped: Boolean","description":"net.corda.testing.node.MockNetwork.networkSendManuallyPumped","location":"docs/net.corda.testing.node/-mock-network/network-send-manually-pumped.html","searchKeys":["networkSendManuallyPumped","val networkSendManuallyPumped: Boolean","net.corda.testing.node.MockNetwork.networkSendManuallyPumped"]},{"name":"val networkSendManuallyPumped: Boolean","description":"net.corda.testing.node.internal.InternalMockNetwork.networkSendManuallyPumped","location":"docs/net.corda.testing.node.internal/-internal-mock-network/network-send-manually-pumped.html","searchKeys":["networkSendManuallyPumped","val networkSendManuallyPumped: Boolean","net.corda.testing.node.internal.InternalMockNetwork.networkSendManuallyPumped"]},{"name":"val networkSendManuallyPumped: Boolean = false","description":"net.corda.testing.node.MockNetworkParameters.networkSendManuallyPumped","location":"docs/net.corda.testing.node/-mock-network-parameters/network-send-manually-pumped.html","searchKeys":["networkSendManuallyPumped","val networkSendManuallyPumped: Boolean = false","net.corda.testing.node.MockNetworkParameters.networkSendManuallyPumped"]},{"name":"val new: String","description":"net.corda.core.serialization.CordaSerializationTransformEnumDefault.new","location":"docs/net.corda.core.serialization/-corda-serialization-transform-enum-default/new.html","searchKeys":["new","val new: String","net.corda.core.serialization.CordaSerializationTransformEnumDefault.new"]},{"name":"val newApi: Boolean","description":"net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.newApi","location":"docs/net.corda.core.flows/-finality-flow/-extra-constructor-args/new-api.html","searchKeys":["newApi","val newApi: Boolean","net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.newApi"]},{"name":"val newNotary: Party","description":"net.corda.core.internal.NotaryChangeTransactionBuilder.newNotary","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/new-notary.html","searchKeys":["newNotary","val newNotary: Party","net.corda.core.internal.NotaryChangeTransactionBuilder.newNotary"]},{"name":"val newNotary: Party","description":"net.corda.core.transactions.NotaryChangeLedgerTransaction.newNotary","location":"docs/net.corda.core.transactions/-notary-change-ledger-transaction/new-notary.html","searchKeys":["newNotary","val newNotary: Party","net.corda.core.transactions.NotaryChangeLedgerTransaction.newNotary"]},{"name":"val newNotary: Party","description":"net.corda.core.transactions.NotaryChangeWireTransaction.newNotary","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/new-notary.html","searchKeys":["newNotary","val newNotary: Party","net.corda.core.transactions.NotaryChangeWireTransaction.newNotary"]},{"name":"val newStep: ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.Change.Position.newStep","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-position/new-step.html","searchKeys":["newStep","val newStep: ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.Change.Position.newStep"]},{"name":"val newspaper: String","description":"net.corda.core.internal.Emoji.newspaper","location":"docs/net.corda.core.internal/-emoji/newspaper.html","searchKeys":["newspaper","val newspaper: String","net.corda.core.internal.Emoji.newspaper"]},{"name":"val nextNodeId: Int","description":"net.corda.testing.node.MockNetwork.nextNodeId","location":"docs/net.corda.testing.node/-mock-network/next-node-id.html","searchKeys":["nextNodeId","val nextNodeId: Int","net.corda.testing.node.MockNetwork.nextNodeId"]},{"name":"val noEntry: String","description":"net.corda.core.internal.Emoji.noEntry","location":"docs/net.corda.core.internal/-emoji/no-entry.html","searchKeys":["noEntry","val noEntry: String","net.corda.core.internal.Emoji.noEntry"]},{"name":"val node: PublicKey","description":"net.corda.core.crypto.CompositeKey.NodeAndWeight.node","location":"docs/net.corda.core.crypto/-composite-key/-node-and-weight/node.html","searchKeys":["node","val node: PublicKey","net.corda.core.crypto.CompositeKey.NodeAndWeight.node"]},{"name":"val nodeHandles: CordaFuture<List<NodeHandle>>","description":"net.corda.testing.driver.NotaryHandle.nodeHandles","location":"docs/net.corda.testing.driver/-notary-handle/node-handles.html","searchKeys":["nodeHandles","val nodeHandles: CordaFuture<List<NodeHandle>>","net.corda.testing.driver.NotaryHandle.nodeHandles"]},{"name":"val nodeHostAndPorts: List<NetworkHostAndPort>","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.nodeHostAndPorts","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/node-host-and-ports.html","searchKeys":["nodeHostAndPorts","val nodeHostAndPorts: List<NetworkHostAndPort>","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.nodeHostAndPorts"]},{"name":"val nodeInfoMap: <Error class: unknown class>","description":"net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.nodeInfoMap","location":"docs/net.corda.testing.node.internal.network/-network-map-server/-in-memory-network-map-service/node-info-map.html","searchKeys":["nodeInfoMap","val nodeInfoMap: <Error class: unknown class>","net.corda.testing.node.internal.network.NetworkMapServer.InMemoryNetworkMapService.nodeInfoMap"]},{"name":"val nodeInfosCopier: <Error class: unknown class>","description":"net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap.nodeInfosCopier","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-local-network-map/node-infos-copier.html","searchKeys":["nodeInfosCopier","val nodeInfosCopier: <Error class: unknown class>","net.corda.testing.node.internal.DriverDSLImpl.LocalNetworkMap.nodeInfosCopier"]},{"name":"val nodeJvmArgs: List<String>","description":"net.corda.testing.node.internal.nodeJvmArgs","location":"docs/net.corda.testing.node.internal/node-jvm-args.html","searchKeys":["nodeJvmArgs","val nodeJvmArgs: List<String>","net.corda.testing.node.internal.nodeJvmArgs"]},{"name":"val nodes: List<InternalMockNetwork.MockNode>","description":"net.corda.testing.node.internal.InternalMockNetwork.nodes","location":"docs/net.corda.testing.node.internal/-internal-mock-network/nodes.html","searchKeys":["nodes","val nodes: List<InternalMockNetwork.MockNode>","net.corda.testing.node.internal.InternalMockNetwork.nodes"]},{"name":"val nonSerialised: SignedTransaction?","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.nonSerialised","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/non-serialised.html","searchKeys":["nonSerialised","val nonSerialised: SignedTransaction?","net.corda.core.flows.MaybeSerializedSignedTransaction.nonSerialised"]},{"name":"val nonce: SecureHash","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent.nonce","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/-filtered-component/nonce.html","searchKeys":["nonce","val nonce: SecureHash","net.corda.core.transactions.ContractUpgradeFilteredTransaction.FilteredComponent.nonce"]},{"name":"val nonce: SecureHash","description":"net.corda.testing.internal.vault.DummyLinearContract.State.nonce","location":"docs/net.corda.testing.internal.vault/-dummy-linear-contract/-state/nonce.html","searchKeys":["nonce","val nonce: SecureHash","net.corda.testing.internal.vault.DummyLinearContract.State.nonce"]},{"name":"val nonces: List<SecureHash>","description":"net.corda.core.transactions.FilteredComponentGroup.nonces","location":"docs/net.corda.core.transactions/-filtered-component-group/nonces.html","searchKeys":["nonces","val nonces: List<SecureHash>","net.corda.core.transactions.FilteredComponentGroup.nonces"]},{"name":"val notaries: List<NotaryInfo>","description":"net.corda.core.node.NetworkParameters.notaries","location":"docs/net.corda.core.node/-network-parameters/notaries.html","searchKeys":["notaries","val notaries: List<NotaryInfo>","net.corda.core.node.NetworkParameters.notaries"]},{"name":"val notary: AbstractParty?","description":"net.corda.core.node.services.Vault.StateMetadata.notary","location":"docs/net.corda.core.node.services/-vault/-state-metadata/notary.html","searchKeys":["notary","val notary: AbstractParty?","net.corda.core.node.services.Vault.StateMetadata.notary"]},{"name":"val notary: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.notary","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/notary.html","searchKeys":["notary","val notary: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.notary"]},{"name":"val notary: MockNetNotaryConfig? = null","description":"net.corda.testing.node.MockNodeConfigOverrides.notary","location":"docs/net.corda.testing.node/-mock-node-config-overrides/notary.html","searchKeys":["notary","val notary: MockNetNotaryConfig? = null","net.corda.testing.node.MockNodeConfigOverrides.notary"]},{"name":"val notary: Party","description":"net.corda.core.contracts.TransactionState.notary","location":"docs/net.corda.core.contracts/-transaction-state/notary.html","searchKeys":["notary","val notary: Party","net.corda.core.contracts.TransactionState.notary"]},{"name":"val notary: Party","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.notary","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/notary.html","searchKeys":["notary","val notary: Party","net.corda.core.internal.ContractUpgradeTransactionBuilder.notary"]},{"name":"val notary: Party","description":"net.corda.core.internal.NotaryChangeTransactionBuilder.notary","location":"docs/net.corda.core.internal/-notary-change-transaction-builder/notary.html","searchKeys":["notary","val notary: Party","net.corda.core.internal.NotaryChangeTransactionBuilder.notary"]},{"name":"val notary: Party","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.notary","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-issue-and-payment-request/notary.html","searchKeys":["notary","val notary: Party","net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.notary"]},{"name":"val notary: Party","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.notary","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/notary.html","searchKeys":["notary","val notary: Party","net.corda.finance.flows.CashIssueAndPaymentFlow.notary"]},{"name":"val notary: Party","description":"net.corda.finance.flows.CashIssueFlow.IssueRequest.notary","location":"docs/net.corda.finance.flows/-cash-issue-flow/-issue-request/notary.html","searchKeys":["notary","val notary: Party","net.corda.finance.flows.CashIssueFlow.IssueRequest.notary"]},{"name":"val notary: Party","description":"net.corda.finance.flows.TwoPartyDealFlow.AutoOffer.notary","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-auto-offer/notary.html","searchKeys":["notary","val notary: Party","net.corda.finance.flows.TwoPartyDealFlow.AutoOffer.notary"]},{"name":"val notary: Party?","description":"net.corda.core.transactions.SignedTransaction.notary","location":"docs/net.corda.core.transactions/-signed-transaction/notary.html","searchKeys":["notary","val notary: Party?","net.corda.core.transactions.SignedTransaction.notary"]},{"name":"val notary: Party? = null","description":"net.corda.finance.flows.CashPaymentFlow.PaymentRequest.notary","location":"docs/net.corda.finance.flows/-cash-payment-flow/-payment-request/notary.html","searchKeys":["notary","val notary: Party? = null","net.corda.finance.flows.CashPaymentFlow.PaymentRequest.notary"]},{"name":"val notary: Party? = null","description":"net.corda.finance.flows.CashPaymentFlow.notary","location":"docs/net.corda.finance.flows/-cash-payment-flow/notary.html","searchKeys":["notary","val notary: Party? = null","net.corda.finance.flows.CashPaymentFlow.notary"]},{"name":"val notaryChangeTx: NotaryChangeWireTransaction","description":"net.corda.core.transactions.SignedTransaction.notaryChangeTx","location":"docs/net.corda.core.transactions/-signed-transaction/notary-change-tx.html","searchKeys":["notaryChangeTx","val notaryChangeTx: NotaryChangeWireTransaction","net.corda.core.transactions.SignedTransaction.notaryChangeTx"]},{"name":"val notaryCustomOverrides: Map<String, Any?>","description":"net.corda.testing.driver.DriverParameters.notaryCustomOverrides","location":"docs/net.corda.testing.driver/-driver-parameters/notary-custom-overrides.html","searchKeys":["notaryCustomOverrides","val notaryCustomOverrides: Map<String, Any?>","net.corda.testing.driver.DriverParameters.notaryCustomOverrides"]},{"name":"val notaryCustomOverrides: Map<String, Any?>","description":"net.corda.testing.node.internal.DriverDSLImpl.notaryCustomOverrides","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/notary-custom-overrides.html","searchKeys":["notaryCustomOverrides","val notaryCustomOverrides: Map<String, Any?>","net.corda.testing.node.internal.DriverDSLImpl.notaryCustomOverrides"]},{"name":"val notaryHandleTimeout: Duration","description":"net.corda.testing.driver.DriverParameters.notaryHandleTimeout","location":"docs/net.corda.testing.driver/-driver-parameters/notary-handle-timeout.html","searchKeys":["notaryHandleTimeout","val notaryHandleTimeout: Duration","net.corda.testing.driver.DriverParameters.notaryHandleTimeout"]},{"name":"val notaryHandleTimeout: Duration","description":"net.corda.testing.node.internal.DriverDSLImpl.notaryHandleTimeout","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/notary-handle-timeout.html","searchKeys":["notaryHandleTimeout","val notaryHandleTimeout: Duration","net.corda.testing.node.internal.DriverDSLImpl.notaryHandleTimeout"]},{"name":"val notaryNodes: List<StartedMockNode>","description":"net.corda.testing.node.MockNetwork.notaryNodes","location":"docs/net.corda.testing.node/-mock-network/notary-nodes.html","searchKeys":["notaryNodes","val notaryNodes: List<StartedMockNode>","net.corda.testing.node.MockNetwork.notaryNodes"]},{"name":"val notaryNodes: List<TestStartedNode>","description":"net.corda.testing.node.internal.InternalMockNetwork.notaryNodes","location":"docs/net.corda.testing.node.internal/-internal-mock-network/notary-nodes.html","searchKeys":["notaryNodes","val notaryNodes: List<TestStartedNode>","net.corda.testing.node.internal.InternalMockNetwork.notaryNodes"]},{"name":"val notaryService: Class<out NotaryService>? = null","description":"net.corda.core.internal.cordapp.CordappImpl.notaryService","location":"docs/net.corda.core.internal.cordapp/-cordapp-impl/notary-service.html","searchKeys":["notaryService","val notaryService: Class<out NotaryService>? = null","net.corda.core.internal.cordapp.CordappImpl.notaryService"]},{"name":"val notarySpecs: List<MockNetworkNotarySpec>","description":"net.corda.testing.node.MockNetwork.notarySpecs","location":"docs/net.corda.testing.node/-mock-network/notary-specs.html","searchKeys":["notarySpecs","val notarySpecs: List<MockNetworkNotarySpec>","net.corda.testing.node.MockNetwork.notarySpecs"]},{"name":"val notarySpecs: List<MockNetworkNotarySpec>","description":"net.corda.testing.node.MockNetworkParameters.notarySpecs","location":"docs/net.corda.testing.node/-mock-network-parameters/notary-specs.html","searchKeys":["notarySpecs","val notarySpecs: List<MockNetworkNotarySpec>","net.corda.testing.node.MockNetworkParameters.notarySpecs"]},{"name":"val notarySpecs: List<MockNetworkNotarySpec>","description":"net.corda.testing.node.internal.InternalMockNetwork.notarySpecs","location":"docs/net.corda.testing.node.internal/-internal-mock-network/notary-specs.html","searchKeys":["notarySpecs","val notarySpecs: List<MockNetworkNotarySpec>","net.corda.testing.node.internal.InternalMockNetwork.notarySpecs"]},{"name":"val notarySpecs: List<NotarySpec>","description":"net.corda.testing.driver.DriverParameters.notarySpecs","location":"docs/net.corda.testing.driver/-driver-parameters/notary-specs.html","searchKeys":["notarySpecs","val notarySpecs: List<NotarySpec>","net.corda.testing.driver.DriverParameters.notarySpecs"]},{"name":"val notarySpecs: List<NotarySpec>","description":"net.corda.testing.node.internal.DriverDSLImpl.notarySpecs","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/notary-specs.html","searchKeys":["notarySpecs","val notarySpecs: List<NotarySpec>","net.corda.testing.node.internal.DriverDSLImpl.notarySpecs"]},{"name":"val obj: T","description":"net.corda.core.serialization.ObjectWithCompatibleContext.obj","location":"docs/net.corda.core.serialization/-object-with-compatible-context/obj.html","searchKeys":["obj","val obj: T","net.corda.core.serialization.ObjectWithCompatibleContext.obj"]},{"name":"val obligor: AbstractParty","description":"net.corda.finance.contracts.asset.Obligation.State.obligor","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/obligor.html","searchKeys":["obligor","val obligor: AbstractParty","net.corda.finance.contracts.asset.Obligation.State.obligor"]},{"name":"val observerSessions: Collection<FlowSession>","description":"net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.observerSessions","location":"docs/net.corda.core.flows/-finality-flow/-extra-constructor-args/observer-sessions.html","searchKeys":["observerSessions","val observerSessions: Collection<FlowSession>","net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.observerSessions"]},{"name":"val observerSessions: Set<FlowSession>","description":"net.corda.core.flows.SendTransactionFlow.observerSessions","location":"docs/net.corda.core.flows/-send-transaction-flow/observer-sessions.html","searchKeys":["observerSessions","val observerSessions: Set<FlowSession>","net.corda.core.flows.SendTransactionFlow.observerSessions"]},{"name":"val observersPool: ExecutorService","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.observersPool","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/observers-pool.html","searchKeys":["observersPool","val observersPool: ExecutorService","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.observersPool"]},{"name":"val of: FixOf","description":"net.corda.finance.contracts.Fix.of","location":"docs/net.corda.finance.contracts/-fix/of.html","searchKeys":["of","val of: FixOf","net.corda.finance.contracts.Fix.of"]},{"name":"val ofStep: ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.Change.Rendering.ofStep","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-rendering/of-step.html","searchKeys":["ofStep","val ofStep: ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.Change.Rendering.ofStep"]},{"name":"val ofTenor: Tenor","description":"net.corda.finance.contracts.FixOf.ofTenor","location":"docs/net.corda.finance.contracts/-fix-of/of-tenor.html","searchKeys":["ofTenor","val ofTenor: Tenor","net.corda.finance.contracts.FixOf.ofTenor"]},{"name":"val offset: Int","description":"net.corda.core.utilities.ByteSequence.offset","location":"docs/net.corda.core.utilities/-byte-sequence/offset.html","searchKeys":["offset","val offset: Int","net.corda.core.utilities.ByteSequence.offset"]},{"name":"val offset: LocalDate.(Long) -> LocalDate","description":"net.corda.finance.contracts.Frequency.offset","location":"docs/net.corda.finance.contracts/-frequency/offset.html","searchKeys":["offset","val offset: LocalDate.(Long) -> LocalDate","net.corda.finance.contracts.Frequency.offset"]},{"name":"val old: String","description":"net.corda.core.serialization.CordaSerializationTransformEnumDefault.old","location":"docs/net.corda.core.serialization/-corda-serialization-transform-enum-default/old.html","searchKeys":["old","val old: String","net.corda.core.serialization.CordaSerializationTransformEnumDefault.old"]},{"name":"val oldParticipants: Collection<Party>","description":"net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.oldParticipants","location":"docs/net.corda.core.flows/-finality-flow/-extra-constructor-args/old-participants.html","searchKeys":["oldParticipants","val oldParticipants: Collection<Party>","net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.oldParticipants"]},{"name":"val onDisconnect: () -> Unit","description":"net.corda.client.rpc.GracefulReconnect.onDisconnect","location":"docs/net.corda.client.rpc/-graceful-reconnect/on-disconnect.html","searchKeys":["onDisconnect","val onDisconnect: () -> Unit","net.corda.client.rpc.GracefulReconnect.onDisconnect"]},{"name":"val onReconnect: () -> Unit","description":"net.corda.client.rpc.GracefulReconnect.onReconnect","location":"docs/net.corda.client.rpc/-graceful-reconnect/on-reconnect.html","searchKeys":["onReconnect","val onReconnect: () -> Unit","net.corda.client.rpc.GracefulReconnect.onReconnect"]},{"name":"val onStopCallback: () -> Unit","description":"net.corda.testing.driver.internal.OutOfProcessImpl.onStopCallback","location":"docs/net.corda.testing.driver.internal/-out-of-process-impl/on-stop-callback.html","searchKeys":["onStopCallback","val onStopCallback: () -> Unit","net.corda.testing.driver.internal.OutOfProcessImpl.onStopCallback"]},{"name":"val opaqueData: ByteArray","description":"net.corda.core.flows.DistributionList.ReceiverDistributionList.opaqueData","location":"docs/net.corda.core.flows/-distribution-list/-receiver-distribution-list/opaque-data.html","searchKeys":["opaqueData","val opaqueData: ByteArray","net.corda.core.flows.DistributionList.ReceiverDistributionList.opaqueData"]},{"name":"val openTelemetryEnabled: Boolean","description":"net.corda.client.rpc.internal.RPCClientTelemetry.openTelemetryEnabled","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/open-telemetry-enabled.html","searchKeys":["openTelemetryEnabled","val openTelemetryEnabled: Boolean","net.corda.client.rpc.internal.RPCClientTelemetry.openTelemetryEnabled"]},{"name":"val operation: FlowAsyncOperation<T>","description":"net.corda.core.internal.FlowIORequest.ExecuteAsyncOperation.operation","location":"docs/net.corda.core.internal/-flow-i-o-request/-execute-async-operation/operation.html","searchKeys":["operation","val operation: FlowAsyncOperation<T>","net.corda.core.internal.FlowIORequest.ExecuteAsyncOperation.operation"]},{"name":"val operator: BinaryComparisonOperator","description":"net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison.operator","location":"docs/net.corda.core.node.services.vault/-column-predicate/-binary-comparison/operator.html","searchKeys":["operator","val operator: BinaryComparisonOperator","net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison.operator"]},{"name":"val operator: BinaryLogicalOperator","description":"net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.operator","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-binary-logical/operator.html","searchKeys":["operator","val operator: BinaryLogicalOperator","net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.operator"]},{"name":"val operator: CollectionOperator","description":"net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression.operator","location":"docs/net.corda.core.node.services.vault/-column-predicate/-collection-expression/operator.html","searchKeys":["operator","val operator: CollectionOperator","net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression.operator"]},{"name":"val operator: EqualityComparisonOperator","description":"net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison.operator","location":"docs/net.corda.core.node.services.vault/-column-predicate/-equality-comparison/operator.html","searchKeys":["operator","val operator: EqualityComparisonOperator","net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison.operator"]},{"name":"val operator: LikenessOperator","description":"net.corda.core.node.services.vault.ColumnPredicate.Likeness.operator","location":"docs/net.corda.core.node.services.vault/-column-predicate/-likeness/operator.html","searchKeys":["operator","val operator: LikenessOperator","net.corda.core.node.services.vault.ColumnPredicate.Likeness.operator"]},{"name":"val operator: NullOperator","description":"net.corda.core.node.services.vault.ColumnPredicate.NullExpression.operator","location":"docs/net.corda.core.node.services.vault/-column-predicate/-null-expression/operator.html","searchKeys":["operator","val operator: NullOperator","net.corda.core.node.services.vault.ColumnPredicate.NullExpression.operator"]},{"name":"val orderBy: Sort.Direction?","description":"net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.orderBy","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-aggregate-function-expression/order-by.html","searchKeys":["orderBy","val orderBy: Sort.Direction?","net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.orderBy"]},{"name":"val organisation: String","description":"net.corda.core.identity.CordaX500Name.organisation","location":"docs/net.corda.core.identity/-corda-x500-name/organisation.html","searchKeys":["organisation","val organisation: String","net.corda.core.identity.CordaX500Name.organisation"]},{"name":"val organisationUnit: String?","description":"net.corda.core.identity.CordaX500Name.organisationUnit","location":"docs/net.corda.core.identity/-corda-x500-name/organisation-unit.html","searchKeys":["organisationUnit","val organisationUnit: String?","net.corda.core.identity.CordaX500Name.organisationUnit"]},{"name":"val origin: InvocationOrigin","description":"net.corda.core.context.InvocationContext.origin","location":"docs/net.corda.core.context/-invocation-context/origin.html","searchKeys":["origin","val origin: InvocationOrigin","net.corda.core.context.InvocationContext.origin"]},{"name":"val originalErrorId: Long?","description":"net.corda.core.flows.UnexpectedFlowEndException.originalErrorId","location":"docs/net.corda.core.flows/-unexpected-flow-end-exception/original-error-id.html","searchKeys":["originalErrorId","val originalErrorId: Long?","net.corda.core.flows.UnexpectedFlowEndException.originalErrorId"]},{"name":"val originalList: List<T>","description":"net.corda.core.internal.LazyMappedList.originalList","location":"docs/net.corda.core.internal/-lazy-mapped-list/original-list.html","searchKeys":["originalList","val originalList: List<T>","net.corda.core.internal.LazyMappedList.originalList"]},{"name":"val originalState: StateAndRef<S>","description":"net.corda.core.flows.AbstractStateReplacementFlow.Instigator.originalState","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-instigator/original-state.html","searchKeys":["originalState","val originalState: StateAndRef<S>","net.corda.core.flows.AbstractStateReplacementFlow.Instigator.originalState"]},{"name":"val otherResults: List<Any>","description":"net.corda.core.node.services.Vault.Page.otherResults","location":"docs/net.corda.core.node.services/-vault/-page/other-results.html","searchKeys":["otherResults","val otherResults: List<Any>","net.corda.core.node.services.Vault.Page.otherResults"]},{"name":"val otherSessions: Set<FlowSession>","description":"net.corda.core.flows.DataVendingFlow.otherSessions","location":"docs/net.corda.core.flows/-data-vending-flow/other-sessions.html","searchKeys":["otherSessions","val otherSessions: Set<FlowSession>","net.corda.core.flows.DataVendingFlow.otherSessions"]},{"name":"val otherSide: FlowSession","description":"net.corda.core.internal.ResolveTransactionsFlow.otherSide","location":"docs/net.corda.core.internal/-resolve-transactions-flow/other-side.html","searchKeys":["otherSide","val otherSide: FlowSession","net.corda.core.internal.ResolveTransactionsFlow.otherSide"]},{"name":"val otherSideSession: FlowSession","description":"net.corda.core.flows.DataVendingFlow.otherSideSession","location":"docs/net.corda.core.flows/-data-vending-flow/other-side-session.html","searchKeys":["otherSideSession","val otherSideSession: FlowSession","net.corda.core.flows.DataVendingFlow.otherSideSession"]},{"name":"val otherSideSession: FlowSession","description":"net.corda.core.flows.SignTransactionFlow.otherSideSession","location":"docs/net.corda.core.flows/-sign-transaction-flow/other-side-session.html","searchKeys":["otherSideSession","val otherSideSession: FlowSession","net.corda.core.flows.SignTransactionFlow.otherSideSession"]},{"name":"val otherSideSession: FlowSession","description":"net.corda.core.internal.notary.NotaryServiceFlow.otherSideSession","location":"docs/net.corda.core.internal.notary/-notary-service-flow/other-side-session.html","searchKeys":["otherSideSession","val otherSideSession: FlowSession","net.corda.core.internal.notary.NotaryServiceFlow.otherSideSession"]},{"name":"val ourIdentity: Party","description":"net.corda.core.flows.FlowLogic.ourIdentity","location":"docs/net.corda.core.flows/-flow-logic/our-identity.html","searchKeys":["ourIdentity","val ourIdentity: Party","net.corda.core.flows.FlowLogic.ourIdentity"]},{"name":"val ourIdentityAndCert: PartyAndCertificate","description":"net.corda.core.flows.FlowLogic.ourIdentityAndCert","location":"docs/net.corda.core.flows/-flow-logic/our-identity-and-cert.html","searchKeys":["ourIdentityAndCert","val ourIdentityAndCert: PartyAndCertificate","net.corda.core.flows.FlowLogic.ourIdentityAndCert"]},{"name":"val outputNotary: Party","description":"net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType.outputNotary","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-notary-change-in-wrong-transaction-type/output-notary.html","searchKeys":["outputNotary","val outputNotary: Party","net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType.outputNotary"]},{"name":"val outputStates: List<ContractState>","description":"net.corda.core.transactions.BaseTransaction.outputStates","location":"docs/net.corda.core.transactions/-base-transaction/output-states.html","searchKeys":["outputStates","val outputStates: List<ContractState>","net.corda.core.transactions.BaseTransaction.outputStates"]},{"name":"val outputs: List<T>","description":"net.corda.core.transactions.LedgerTransaction.InOutGroup.outputs","location":"docs/net.corda.core.transactions/-ledger-transaction/-in-out-group/outputs.html","searchKeys":["outputs","val outputs: List<T>","net.corda.core.transactions.LedgerTransaction.InOutGroup.outputs"]},{"name":"val ownableState: OwnableState","description":"net.corda.core.contracts.CommandAndState.ownableState","location":"docs/net.corda.core.contracts/-command-and-state/ownable-state.html","searchKeys":["ownableState","val ownableState: OwnableState","net.corda.core.contracts.CommandAndState.ownableState"]},{"name":"val owner: List<AbstractParty>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.owner","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/owner.html","searchKeys":["owner","val owner: List<AbstractParty>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.owner"]},{"name":"val owningKey: PublicKey","description":"net.corda.core.identity.AbstractParty.owningKey","location":"docs/net.corda.core.identity/-abstract-party/owning-key.html","searchKeys":["owningKey","val owningKey: PublicKey","net.corda.core.identity.AbstractParty.owningKey"]},{"name":"val owningKey: PublicKey","description":"net.corda.core.identity.PartyAndCertificate.owningKey","location":"docs/net.corda.core.identity/-party-and-certificate/owning-key.html","searchKeys":["owningKey","val owningKey: PublicKey","net.corda.core.identity.PartyAndCertificate.owningKey"]},{"name":"val owningLegalIdentity: CordaX500Name","description":"net.corda.core.context.Actor.owningLegalIdentity","location":"docs/net.corda.core.context/-actor/owning-legal-identity.html","searchKeys":["owningLegalIdentity","val owningLegalIdentity: CordaX500Name","net.corda.core.context.Actor.owningLegalIdentity"]},{"name":"val owningLegalIdentity: CordaX500Name","description":"net.corda.core.context.InvocationOrigin.Service.owningLegalIdentity","location":"docs/net.corda.core.context/-invocation-origin/-service/owning-legal-identity.html","searchKeys":["owningLegalIdentity","val owningLegalIdentity: CordaX500Name","net.corda.core.context.InvocationOrigin.Service.owningLegalIdentity"]},{"name":"val p: <Error class: unknown class>","description":"net.corda.core.crypto.internal.Curve25519.p","location":"docs/net.corda.core.crypto.internal/-curve25519/p.html","searchKeys":["p","val p: <Error class: unknown class>","net.corda.core.crypto.internal.Curve25519.p"]},{"name":"val packageName: String","description":"net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.packageName","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-package-ownership-exception/package-name.html","searchKeys":["packageName","val packageName: String","net.corda.core.contracts.TransactionVerificationException.PackageOwnershipException.packageName"]},{"name":"val packageOwnership: Map<String, PublicKey>","description":"net.corda.core.node.NetworkParameters.packageOwnership","location":"docs/net.corda.core.node/-network-parameters/package-ownership.html","searchKeys":["packageOwnership","val packageOwnership: Map<String, PublicKey>","net.corda.core.node.NetworkParameters.packageOwnership"]},{"name":"val packages: Set<String>","description":"net.corda.testing.node.internal.CustomCordapp.packages","location":"docs/net.corda.testing.node.internal/-custom-cordapp/packages.html","searchKeys":["packages","val packages: Set<String>","net.corda.testing.node.internal.CustomCordapp.packages"]},{"name":"val pageNumber: Int","description":"net.corda.core.node.services.vault.PageSpecification.pageNumber","location":"docs/net.corda.core.node.services.vault/-page-specification/page-number.html","searchKeys":["pageNumber","val pageNumber: Int","net.corda.core.node.services.vault.PageSpecification.pageNumber"]},{"name":"val pageSize: Int","description":"net.corda.core.node.services.vault.PageSpecification.pageSize","location":"docs/net.corda.core.node.services.vault/-page-specification/page-size.html","searchKeys":["pageSize","val pageSize: Int","net.corda.core.node.services.vault.PageSpecification.pageSize"]},{"name":"val paperclip: String","description":"net.corda.core.internal.Emoji.paperclip","location":"docs/net.corda.core.internal/-emoji/paperclip.html","searchKeys":["paperclip","val paperclip: String","net.corda.core.internal.Emoji.paperclip"]},{"name":"val paramName: String","description":"net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.MissingParameter.paramName","location":"docs/net.corda.client.jackson/-string-to-method-call-parser/-unparseable-call-exception/-missing-parameter/param-name.html","searchKeys":["paramName","val paramName: String","net.corda.client.jackson.StringToMethodCallParser.UnparseableCallException.MissingParameter.paramName"]},{"name":"val parameters: LedgerRecoveryParameters","description":"net.corda.core.flows.LedgerRecoveryFlow.ExtraConstructorArgs.parameters","location":"docs/net.corda.core.flows/-ledger-recovery-flow/-extra-constructor-args/parameters.html","searchKeys":["parameters","val parameters: LedgerRecoveryParameters","net.corda.core.flows.LedgerRecoveryFlow.ExtraConstructorArgs.parameters"]},{"name":"val parameters: NetworkParameters","description":"net.corda.core.messaging.ParametersUpdateInfo.parameters","location":"docs/net.corda.core.messaging/-parameters-update-info/parameters.html","searchKeys":["parameters","val parameters: NetworkParameters","net.corda.core.messaging.ParametersUpdateInfo.parameters"]},{"name":"val params: NetworkParameters","description":"net.corda.core.serialization.internal.AttachmentsClassLoader.params","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader/params.html","searchKeys":["params","val params: NetworkParameters","net.corda.core.serialization.internal.AttachmentsClassLoader.params"]},{"name":"val params: NetworkParameters","description":"net.corda.core.serialization.internal.AttachmentsClassLoaderKey.params","location":"docs/net.corda.core.serialization.internal/-attachments-class-loader-key/params.html","searchKeys":["params","val params: NetworkParameters","net.corda.core.serialization.internal.AttachmentsClassLoaderKey.params"]},{"name":"val parent: ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.Change.Structural.parent","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-structural/parent.html","searchKeys":["parent","val parent: ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.Change.Structural.parent"]},{"name":"val parentCertsChain: List<X509Certificate>","description":"net.corda.core.internal.DigitalSignatureWithCert.parentCertsChain","location":"docs/net.corda.core.internal/-digital-signature-with-cert/parent-certs-chain.html","searchKeys":["parentCertsChain","val parentCertsChain: List<X509Certificate>","net.corda.core.internal.DigitalSignatureWithCert.parentCertsChain"]},{"name":"val partialMerkleTree: PartialMerkleTree","description":"net.corda.core.transactions.FilteredComponentGroup.partialMerkleTree","location":"docs/net.corda.core.transactions/-filtered-component-group/partial-merkle-tree.html","searchKeys":["partialMerkleTree","val partialMerkleTree: PartialMerkleTree","net.corda.core.transactions.FilteredComponentGroup.partialMerkleTree"]},{"name":"val partialMerkleTree: PartialMerkleTree?","description":"net.corda.core.crypto.TransactionSignature.partialMerkleTree","location":"docs/net.corda.core.crypto/-transaction-signature/partial-merkle-tree.html","searchKeys":["partialMerkleTree","val partialMerkleTree: PartialMerkleTree?","net.corda.core.crypto.TransactionSignature.partialMerkleTree"]},{"name":"val partiallySignedTx: SignedTransaction","description":"net.corda.core.flows.CollectSignatureFlow.partiallySignedTx","location":"docs/net.corda.core.flows/-collect-signature-flow/partially-signed-tx.html","searchKeys":["partiallySignedTx","val partiallySignedTx: SignedTransaction","net.corda.core.flows.CollectSignatureFlow.partiallySignedTx"]},{"name":"val partiallySignedTx: SignedTransaction","description":"net.corda.core.flows.CollectSignaturesFlow.partiallySignedTx","location":"docs/net.corda.core.flows/-collect-signatures-flow/partially-signed-tx.html","searchKeys":["partiallySignedTx","val partiallySignedTx: SignedTransaction","net.corda.core.flows.CollectSignaturesFlow.partiallySignedTx"]},{"name":"val participantSessions: Set<FlowSession>","description":"net.corda.core.flows.SendTransactionFlow.participantSessions","location":"docs/net.corda.core.flows/-send-transaction-flow/participant-sessions.html","searchKeys":["participantSessions","val participantSessions: Set<FlowSession>","net.corda.core.flows.SendTransactionFlow.participantSessions"]},{"name":"val party: AbstractParty","description":"net.corda.core.contracts.PartyAndReference.party","location":"docs/net.corda.core.contracts/-party-and-reference/party.html","searchKeys":["party","val party: AbstractParty","net.corda.core.contracts.PartyAndReference.party"]},{"name":"val party: AbstractParty","description":"net.corda.finance.contracts.asset.PartyAndAmount.party","location":"docs/net.corda.finance.contracts.asset/-party-and-amount/party.html","searchKeys":["party","val party: AbstractParty","net.corda.finance.contracts.asset.PartyAndAmount.party"]},{"name":"val party: CordaX500Name","description":"net.corda.core.context.InvocationOrigin.Peer.party","location":"docs/net.corda.core.context/-invocation-origin/-peer/party.html","searchKeys":["party","val party: CordaX500Name","net.corda.core.context.InvocationOrigin.Peer.party"]},{"name":"val party: Party","description":"net.corda.core.flows.FlowInitiator.Peer.party","location":"docs/net.corda.core.flows/-flow-initiator/-peer/party.html","searchKeys":["party","val party: Party","net.corda.core.flows.FlowInitiator.Peer.party"]},{"name":"val party: Party","description":"net.corda.core.identity.PartyAndCertificate.party","location":"docs/net.corda.core.identity/-party-and-certificate/party.html","searchKeys":["party","val party: Party","net.corda.core.identity.PartyAndCertificate.party"]},{"name":"val party: Party","description":"net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle.party","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-distributed-service-handle/party.html","searchKeys":["party","val party: Party","net.corda.testing.node.InMemoryMessagingNetwork.DistributedServiceHandle.party"]},{"name":"val partyKeys: Set<AbstractParty>","description":"net.corda.finance.contracts.asset.BilateralNetState.partyKeys","location":"docs/net.corda.finance.contracts.asset/-bilateral-net-state/party-keys.html","searchKeys":["partyKeys","val partyKeys: Set<AbstractParty>","net.corda.finance.contracts.asset.BilateralNetState.partyKeys"]},{"name":"val password: String","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.password","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/password.html","searchKeys":["password","val password: String","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.password"]},{"name":"val password: String","description":"net.corda.testing.node.User.password","location":"docs/net.corda.testing.node/-user/password.html","searchKeys":["password","val password: String","net.corda.testing.node.User.password"]},{"name":"val patch: Int = 0","description":"net.corda.core.internal.cordapp.KotlinMetadataVersion.patch","location":"docs/net.corda.core.internal.cordapp/-kotlin-metadata-version/patch.html","searchKeys":["patch","val patch: Int = 0","net.corda.core.internal.cordapp.KotlinMetadataVersion.patch"]},{"name":"val path: String","description":"net.corda.core.contracts.TransactionVerificationException.OverlappingAttachmentsException.path","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-overlapping-attachments-exception/path.html","searchKeys":["path","val path: String","net.corda.core.contracts.TransactionVerificationException.OverlappingAttachmentsException.path"]},{"name":"val payToIdentity: PartyAndCertificate","description":"net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo.payToIdentity","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller-trade-info/pay-to-identity.html","searchKeys":["payToIdentity","val payToIdentity: PartyAndCertificate","net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo.payToIdentity"]},{"name":"val payload: Any","description":"net.corda.core.flows.DataVendingFlow.payload","location":"docs/net.corda.core.flows/-data-vending-flow/payload.html","searchKeys":["payload","val payload: Any","net.corda.core.flows.DataVendingFlow.payload"]},{"name":"val payload: T","description":"net.corda.finance.flows.TwoPartyDealFlow.Handshake.payload","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-handshake/payload.html","searchKeys":["payload","val payload: T","net.corda.finance.flows.TwoPartyDealFlow.Handshake.payload"]},{"name":"val peersToStatesToRecord: Map<CordaX500Name, StatesToRecord>","description":"net.corda.core.flows.DistributionList.SenderDistributionList.peersToStatesToRecord","location":"docs/net.corda.core.flows/-distribution-list/-sender-distribution-list/peers-to-states-to-record.html","searchKeys":["peersToStatesToRecord","val peersToStatesToRecord: Map<CordaX500Name, StatesToRecord>","net.corda.core.flows.DistributionList.SenderDistributionList.peersToStatesToRecord"]},{"name":"val permissions: Set<String>","description":"net.corda.testing.node.User.permissions","location":"docs/net.corda.testing.node/-user/permissions.html","searchKeys":["permissions","val permissions: Set<String>","net.corda.testing.node.User.permissions"]},{"name":"val platformVersion: Int","description":"net.corda.core.crypto.SignatureMetadata.platformVersion","location":"docs/net.corda.core.crypto/-signature-metadata/platform-version.html","searchKeys":["platformVersion","val platformVersion: Int","net.corda.core.crypto.SignatureMetadata.platformVersion"]},{"name":"val platformVersion: Int","description":"net.corda.core.flows.NotarisationRequestSignature.platformVersion","location":"docs/net.corda.core.flows/-notarisation-request-signature/platform-version.html","searchKeys":["platformVersion","val platformVersion: Int","net.corda.core.flows.NotarisationRequestSignature.platformVersion"]},{"name":"val platformVersion: Int","description":"net.corda.core.node.NodeDiagnosticInfo.platformVersion","location":"docs/net.corda.core.node/-node-diagnostic-info/platform-version.html","searchKeys":["platformVersion","val platformVersion: Int","net.corda.core.node.NodeDiagnosticInfo.platformVersion"]},{"name":"val platformVersion: Int","description":"net.corda.core.node.NodeInfo.platformVersion","location":"docs/net.corda.core.node/-node-info/platform-version.html","searchKeys":["platformVersion","val platformVersion: Int","net.corda.core.node.NodeInfo.platformVersion"]},{"name":"val platformVersion: Int","description":"net.corda.core.node.services.diagnostics.NodeVersionInfo.platformVersion","location":"docs/net.corda.core.node.services.diagnostics/-node-version-info/platform-version.html","searchKeys":["platformVersion","val platformVersion: Int","net.corda.core.node.services.diagnostics.NodeVersionInfo.platformVersion"]},{"name":"val port: Int","description":"net.corda.core.utilities.NetworkHostAndPort.port","location":"docs/net.corda.core.utilities/-network-host-and-port/port.html","searchKeys":["port","val port: Int","net.corda.core.utilities.NetworkHostAndPort.port"]},{"name":"val portAllocation: PortAllocation","description":"net.corda.testing.driver.DriverParameters.portAllocation","location":"docs/net.corda.testing.driver/-driver-parameters/port-allocation.html","searchKeys":["portAllocation","val portAllocation: PortAllocation","net.corda.testing.driver.DriverParameters.portAllocation"]},{"name":"val portAllocation: PortAllocation","description":"net.corda.testing.node.internal.DriverDSLImpl.portAllocation","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/port-allocation.html","searchKeys":["portAllocation","val portAllocation: PortAllocation","net.corda.testing.node.internal.DriverDSLImpl.portAllocation"]},{"name":"val portCounter: AtomicInteger","description":"net.corda.testing.driver.PortAllocation.Incremental.portCounter","location":"docs/net.corda.testing.driver/-port-allocation/-incremental/port-counter.html","searchKeys":["portCounter","val portCounter: AtomicInteger","net.corda.testing.driver.PortAllocation.Incremental.portCounter"]},{"name":"val predicate: ColumnPredicate<C>","description":"net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.predicate","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-aggregate-function-expression/predicate.html","searchKeys":["predicate","val predicate: ColumnPredicate<C>","net.corda.core.node.services.vault.CriteriaExpression.AggregateFunctionExpression.predicate"]},{"name":"val predicate: ColumnPredicate<C>","description":"net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression.predicate","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-column-predicate-expression/predicate.html","searchKeys":["predicate","val predicate: ColumnPredicate<C>","net.corda.core.node.services.vault.CriteriaExpression.ColumnPredicateExpression.predicate"]},{"name":"val predicate: ColumnPredicate<Instant>","description":"net.corda.core.node.services.vault.QueryCriteria.TimeCondition.predicate","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-condition/predicate.html","searchKeys":["predicate","val predicate: ColumnPredicate<Instant>","net.corda.core.node.services.vault.QueryCriteria.TimeCondition.predicate"]},{"name":"val premigrateH2Database: Boolean = true","description":"net.corda.testing.driver.DriverParameters.premigrateH2Database","location":"docs/net.corda.testing.driver/-driver-parameters/premigrate-h2-database.html","searchKeys":["premigrateH2Database","val premigrateH2Database: Boolean = true","net.corda.testing.driver.DriverParameters.premigrateH2Database"]},{"name":"val premigrateH2Database: Boolean = true","description":"net.corda.testing.node.internal.DriverDSLImpl.premigrateH2Database","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/premigrate-h2-database.html","searchKeys":["premigrateH2Database","val premigrateH2Database: Boolean = true","net.corda.testing.node.internal.DriverDSLImpl.premigrateH2Database"]},{"name":"val previousNode: NodeInfo","description":"net.corda.core.node.services.NetworkMapCache.MapChange.Modified.previousNode","location":"docs/net.corda.core.node.services/-network-map-cache/-map-change/-modified/previous-node.html","searchKeys":["previousNode","val previousNode: NodeInfo","net.corda.core.node.services.NetworkMapCache.MapChange.Modified.previousNode"]},{"name":"val previousPageAnchor: StateRef? = null","description":"net.corda.core.node.services.Vault.Page.previousPageAnchor","location":"docs/net.corda.core.node.services/-vault/-page/previous-page-anchor.html","searchKeys":["previousPageAnchor","val previousPageAnchor: StateRef? = null","net.corda.core.node.services.Vault.Page.previousPageAnchor"]},{"name":"val price: Amount<Currency>","description":"net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo.price","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-seller-trade-info/price.html","searchKeys":["price","val price: Amount<Currency>","net.corda.finance.flows.TwoPartyTradeFlow.SellerTradeInfo.price"]},{"name":"val primaryIdentity: AnonymousParty","description":"net.corda.finance.flows.TwoPartyDealFlow.Handshake.primaryIdentity","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-handshake/primary-identity.html","searchKeys":["primaryIdentity","val primaryIdentity: AnonymousParty","net.corda.finance.flows.TwoPartyDealFlow.Handshake.primaryIdentity"]},{"name":"val privacySalt: PrivacySalt","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.privacySalt","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/privacy-salt.html","searchKeys":["privacySalt","val privacySalt: PrivacySalt","net.corda.core.transactions.ContractUpgradeLedgerTransaction.privacySalt"]},{"name":"val privacySalt: PrivacySalt","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.privacySalt","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/privacy-salt.html","searchKeys":["privacySalt","val privacySalt: PrivacySalt","net.corda.core.transactions.ContractUpgradeWireTransaction.privacySalt"]},{"name":"val privacySalt: PrivacySalt","description":"net.corda.core.transactions.LedgerTransaction.privacySalt","location":"docs/net.corda.core.transactions/-ledger-transaction/privacy-salt.html","searchKeys":["privacySalt","val privacySalt: PrivacySalt","net.corda.core.transactions.LedgerTransaction.privacySalt"]},{"name":"val privacySalt: PrivacySalt","description":"net.corda.core.transactions.WireTransaction.privacySalt","location":"docs/net.corda.core.transactions/-wire-transaction/privacy-salt.html","searchKeys":["privacySalt","val privacySalt: PrivacySalt","net.corda.core.transactions.WireTransaction.privacySalt"]},{"name":"val process: Process","description":"net.corda.testing.driver.WebserverHandle.process","location":"docs/net.corda.testing.driver/-webserver-handle/process.html","searchKeys":["process","val process: Process","net.corda.testing.driver.WebserverHandle.process"]},{"name":"val processes: <Error class: unknown class>","description":"net.corda.testing.node.internal.DriverDSLImpl.State.processes","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/-state/processes.html","searchKeys":["processes","val processes: <Error class: unknown class>","net.corda.testing.node.internal.DriverDSLImpl.State.processes"]},{"name":"val produced: Set<StateAndRef<U>>","description":"net.corda.core.node.services.Vault.Update.produced","location":"docs/net.corda.core.node.services/-vault/-update/produced.html","searchKeys":["produced","val produced: Set<StateAndRef<U>>","net.corda.core.node.services.Vault.Update.produced"]},{"name":"val product: P","description":"net.corda.core.contracts.Issued.product","location":"docs/net.corda.core.contracts/-issued/product.html","searchKeys":["product","val product: P","net.corda.core.contracts.Issued.product"]},{"name":"val product: P","description":"net.corda.finance.contracts.asset.Obligation.Terms.product","location":"docs/net.corda.finance.contracts.asset/-obligation/-terms/product.html","searchKeys":["product","val product: P","net.corda.finance.contracts.asset.Obligation.Terms.product"]},{"name":"val progressTracker: ProgressTracker","description":"net.corda.core.utilities.ProgressTracker.Change.progressTracker","location":"docs/net.corda.core.utilities/-progress-tracker/-change/progress-tracker.html","searchKeys":["progressTracker","val progressTracker: ProgressTracker","net.corda.core.utilities.ProgressTracker.Change.progressTracker"]},{"name":"val progressTrackerStepAndUpdates: DataFeed<String, String>?","description":"net.corda.core.messaging.StateMachineInfo.progressTrackerStepAndUpdates","location":"docs/net.corda.core.messaging/-state-machine-info/progress-tracker-step-and-updates.html","searchKeys":["progressTrackerStepAndUpdates","val progressTrackerStepAndUpdates: DataFeed<String, String>?","net.corda.core.messaging.StateMachineInfo.progressTrackerStepAndUpdates"]},{"name":"val providedName: CordaX500Name? = null","description":"net.corda.testing.driver.NodeParameters.providedName","location":"docs/net.corda.testing.driver/-node-parameters/provided-name.html","searchKeys":["providedName","val providedName: CordaX500Name? = null","net.corda.testing.driver.NodeParameters.providedName"]},{"name":"val providerName: String","description":"net.corda.core.crypto.SignatureScheme.providerName","location":"docs/net.corda.core.crypto/-signature-scheme/provider-name.html","searchKeys":["providerName","val providerName: String","net.corda.core.crypto.SignatureScheme.providerName"]},{"name":"val publishNotaries: (List<NotaryInfo>) -> Unit","description":"net.corda.testing.node.internal.CompatibilityZoneParams.publishNotaries","location":"docs/net.corda.testing.node.internal/-compatibility-zone-params/publish-notaries.html","searchKeys":["publishNotaries","val publishNotaries: (List<NotaryInfo>) -> Unit","net.corda.testing.node.internal.CompatibilityZoneParams.publishNotaries"]},{"name":"val quantity: ColumnPredicate<Long>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.quantity","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-asset-query-criteria/quantity.html","searchKeys":["quantity","val quantity: ColumnPredicate<Long>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleAssetQueryCriteria.quantity"]},{"name":"val quantity: ColumnPredicate<Long>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.quantity","location":"docs/net.corda.core.node.services.vault/-query-criteria/-fungible-state-query-criteria/quantity.html","searchKeys":["quantity","val quantity: ColumnPredicate<Long>? = null","net.corda.core.node.services.vault.QueryCriteria.FungibleStateQueryCriteria.quantity"]},{"name":"val quantity: Long","description":"net.corda.core.contracts.Amount.quantity","location":"docs/net.corda.core.contracts/-amount/quantity.html","searchKeys":["quantity","val quantity: Long","net.corda.core.contracts.Amount.quantity"]},{"name":"val quantity: Long","description":"net.corda.finance.contracts.asset.Obligation.State.quantity","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/quantity.html","searchKeys":["quantity","val quantity: Long","net.corda.finance.contracts.asset.Obligation.State.quantity"]},{"name":"val quantityDelta: Long","description":"net.corda.core.contracts.AmountTransfer.quantityDelta","location":"docs/net.corda.core.contracts/-amount-transfer/quantity-delta.html","searchKeys":["quantityDelta","val quantityDelta: Long","net.corda.core.contracts.AmountTransfer.quantityDelta"]},{"name":"val random: SplittableRandom","description":"net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random.random","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-service-peer-allocation-strategy/-random/random.html","searchKeys":["random","val random: SplittableRandom","net.corda.testing.node.InMemoryMessagingNetwork.ServicePeerAllocationStrategy.Random.random"]},{"name":"val raw: SerializedBytes<T>","description":"net.corda.core.crypto.SignedData.raw","location":"docs/net.corda.core.crypto/-signed-data/raw.html","searchKeys":["raw","val raw: SerializedBytes<T>","net.corda.core.crypto.SignedData.raw"]},{"name":"val raw: SerializedBytes<T>","description":"net.corda.core.internal.SignedDataWithCert.raw","location":"docs/net.corda.core.internal/-signed-data-with-cert/raw.html","searchKeys":["raw","val raw: SerializedBytes<T>","net.corda.core.internal.SignedDataWithCert.raw"]},{"name":"val reason: String","description":"net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection.reason","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-invalid-constraint-rejection/reason.html","searchKeys":["reason","val reason: String","net.corda.core.contracts.TransactionVerificationException.InvalidConstraintRejection.reason"]},{"name":"val reason: String","description":"net.corda.core.crypto.MerkleTreeException.reason","location":"docs/net.corda.core.crypto/-merkle-tree-exception/reason.html","searchKeys":["reason","val reason: String","net.corda.core.crypto.MerkleTreeException.reason"]},{"name":"val reason: String","description":"net.corda.core.transactions.ComponentVisibilityException.reason","location":"docs/net.corda.core.transactions/-component-visibility-exception/reason.html","searchKeys":["reason","val reason: String","net.corda.core.transactions.ComponentVisibilityException.reason"]},{"name":"val reason: String","description":"net.corda.core.transactions.FilteredTransactionVerificationException.reason","location":"docs/net.corda.core.transactions/-filtered-transaction-verification-exception/reason.html","searchKeys":["reason","val reason: String","net.corda.core.transactions.FilteredTransactionVerificationException.reason"]},{"name":"val receivedMessages: <Error class: unknown class><InMemoryMessagingNetwork.MessageTransfer>","description":"net.corda.testing.node.InMemoryMessagingNetwork.receivedMessages","location":"docs/net.corda.testing.node/-in-memory-messaging-network/received-messages.html","searchKeys":["receivedMessages","val receivedMessages: <Error class: unknown class><InMemoryMessagingNetwork.MessageTransfer>","net.corda.testing.node.InMemoryMessagingNetwork.receivedMessages"]},{"name":"val receiverRecords: List<ReceiverDistributionRecord>","description":"net.corda.core.flows.DistributionRecords.receiverRecords","location":"docs/net.corda.core.flows/-distribution-records/receiver-records.html","searchKeys":["receiverRecords","val receiverRecords: List<ReceiverDistributionRecord>","net.corda.core.flows.DistributionRecords.receiverRecords"]},{"name":"val receiverStatesToRecord: StatesToRecord","description":"net.corda.core.flows.DistributionList.ReceiverDistributionList.receiverStatesToRecord","location":"docs/net.corda.core.flows/-distribution-list/-receiver-distribution-list/receiver-states-to-record.html","searchKeys":["receiverStatesToRecord","val receiverStatesToRecord: StatesToRecord","net.corda.core.flows.DistributionList.ReceiverDistributionList.receiverStatesToRecord"]},{"name":"val receiverStatesToRecord: StatesToRecord","description":"net.corda.core.flows.ReceiverDistributionRecord.receiverStatesToRecord","location":"docs/net.corda.core.flows/-receiver-distribution-record/receiver-states-to-record.html","searchKeys":["receiverStatesToRecord","val receiverStatesToRecord: StatesToRecord","net.corda.core.flows.ReceiverDistributionRecord.receiverStatesToRecord"]},{"name":"val receiverStatesToRecord: StatesToRecord","description":"net.corda.core.flows.SenderDistributionRecord.receiverStatesToRecord","location":"docs/net.corda.core.flows/-sender-distribution-record/receiver-states-to-record.html","searchKeys":["receiverStatesToRecord","val receiverStatesToRecord: StatesToRecord","net.corda.core.flows.SenderDistributionRecord.receiverStatesToRecord"]},{"name":"val recipient: AbstractParty?","description":"net.corda.finance.flows.AbstractCashFlow.Result.recipient","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-result/recipient.html","searchKeys":["recipient","val recipient: AbstractParty?","net.corda.finance.flows.AbstractCashFlow.Result.recipient"]},{"name":"val recipient: Party","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.recipient","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/-issue-and-payment-request/recipient.html","searchKeys":["recipient","val recipient: Party","net.corda.finance.flows.CashIssueAndPaymentFlow.IssueAndPaymentRequest.recipient"]},{"name":"val recipient: Party","description":"net.corda.finance.flows.CashIssueAndPaymentFlow.recipient","location":"docs/net.corda.finance.flows/-cash-issue-and-payment-flow/recipient.html","searchKeys":["recipient","val recipient: Party","net.corda.finance.flows.CashIssueAndPaymentFlow.recipient"]},{"name":"val recipient: Party","description":"net.corda.finance.flows.CashPaymentFlow.PaymentRequest.recipient","location":"docs/net.corda.finance.flows/-cash-payment-flow/-payment-request/recipient.html","searchKeys":["recipient","val recipient: Party","net.corda.finance.flows.CashPaymentFlow.PaymentRequest.recipient"]},{"name":"val recipient: Party","description":"net.corda.finance.flows.CashPaymentFlow.recipient","location":"docs/net.corda.finance.flows/-cash-payment-flow/recipient.html","searchKeys":["recipient","val recipient: Party","net.corda.finance.flows.CashPaymentFlow.recipient"]},{"name":"val recipients: MessageRecipients","description":"net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.recipients","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-message-transfer/recipients.html","searchKeys":["recipients","val recipients: MessageRecipients","net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.recipients"]},{"name":"val reconnectingRPCConnection: ReconnectingCordaRPCOps.ReconnectingRPCConnection","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.reconnectingRPCConnection","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/reconnecting-r-p-c-connection.html","searchKeys":["reconnectingRPCConnection","val reconnectingRPCConnection: ReconnectingCordaRPCOps.ReconnectingRPCConnection","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.reconnectingRPCConnection"]},{"name":"val recordedTime: Instant","description":"net.corda.core.node.services.Vault.StateMetadata.recordedTime","location":"docs/net.corda.core.node.services/-vault/-state-metadata/recorded-time.html","searchKeys":["recordedTime","val recordedTime: Instant","net.corda.core.node.services.Vault.StateMetadata.recordedTime"]},{"name":"val recordedTransactionCount: Long = 0","description":"net.corda.core.internal.ResolveTransactionsFlowStats.recordedTransactionCount","location":"docs/net.corda.core.internal/-resolve-transactions-flow-stats/recorded-transaction-count.html","searchKeys":["recordedTransactionCount","val recordedTransactionCount: Long = 0","net.corda.core.internal.ResolveTransactionsFlowStats.recordedTransactionCount"]},{"name":"val recoverAll: Boolean","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.recoverAll","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/recover-all.html","searchKeys":["recoverAll","val recoverAll: Boolean","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.recoverAll"]},{"name":"val recoveryBatchSize: Int = 1000","description":"net.corda.core.flows.LedgerRecoveryParameters.recoveryBatchSize","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/recovery-batch-size.html","searchKeys":["recoveryBatchSize","val recoveryBatchSize: Int = 1000","net.corda.core.flows.LedgerRecoveryParameters.recoveryBatchSize"]},{"name":"val recoveryMaximumBackupInterval: Duration? = null","description":"net.corda.core.node.NetworkParameters.recoveryMaximumBackupInterval","location":"docs/net.corda.core.node/-network-parameters/recovery-maximum-backup-interval.html","searchKeys":["recoveryMaximumBackupInterval","val recoveryMaximumBackupInterval: Duration? = null","net.corda.core.node.NetworkParameters.recoveryMaximumBackupInterval"]},{"name":"val recoveryMode: Boolean = false","description":"net.corda.core.internal.ResolveTransactionsFlow.recoveryMode","location":"docs/net.corda.core.internal/-resolve-transactions-flow/recovery-mode.html","searchKeys":["recoveryMode","val recoveryMode: Boolean = false","net.corda.core.internal.ResolveTransactionsFlow.recoveryMode"]},{"name":"val recoveryPeers: Collection<Party>","description":"net.corda.core.flows.LedgerRecoveryParameters.recoveryPeers","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/recovery-peers.html","searchKeys":["recoveryPeers","val recoveryPeers: Collection<Party>","net.corda.core.flows.LedgerRecoveryParameters.recoveryPeers"]},{"name":"val ref: Any? = null","description":"net.corda.core.contracts.SourceAndAmount.ref","location":"docs/net.corda.core.contracts/-source-and-amount/ref.html","searchKeys":["ref","val ref: Any? = null","net.corda.core.contracts.SourceAndAmount.ref"]},{"name":"val ref: StateRef","description":"net.corda.core.contracts.ScheduledStateRef.ref","location":"docs/net.corda.core.contracts/-scheduled-state-ref/ref.html","searchKeys":["ref","val ref: StateRef","net.corda.core.contracts.ScheduledStateRef.ref"]},{"name":"val ref: StateRef","description":"net.corda.core.contracts.StateAndRef.ref","location":"docs/net.corda.core.contracts/-state-and-ref/ref.html","searchKeys":["ref","val ref: StateRef","net.corda.core.contracts.StateAndRef.ref"]},{"name":"val ref: StateRef","description":"net.corda.core.internal.SerializedStateAndRef.ref","location":"docs/net.corda.core.internal/-serialized-state-and-ref/ref.html","searchKeys":["ref","val ref: StateRef","net.corda.core.internal.SerializedStateAndRef.ref"]},{"name":"val ref: StateRef","description":"net.corda.core.node.services.Vault.StateMetadata.ref","location":"docs/net.corda.core.node.services/-vault/-state-metadata/ref.html","searchKeys":["ref","val ref: StateRef","net.corda.core.node.services.Vault.StateMetadata.ref"]},{"name":"val reference: OpaqueBytes","description":"net.corda.core.contracts.PartyAndReference.reference","location":"docs/net.corda.core.contracts/-party-and-reference/reference.html","searchKeys":["reference","val reference: OpaqueBytes","net.corda.core.contracts.PartyAndReference.reference"]},{"name":"val referenceStates: List<ContractState>","description":"net.corda.core.transactions.LedgerTransaction.referenceStates","location":"docs/net.corda.core.transactions/-ledger-transaction/reference-states.html","searchKeys":["referenceStates","val referenceStates: List<ContractState>","net.corda.core.transactions.LedgerTransaction.referenceStates"]},{"name":"val references: List<StateRef>","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.references","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/references.html","searchKeys":["references","val references: List<StateRef>","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.references"]},{"name":"val references: List<StateRef>","description":"net.corda.core.transactions.SignedTransaction.references","location":"docs/net.corda.core.transactions/-signed-transaction/references.html","searchKeys":["references","val references: List<StateRef>","net.corda.core.transactions.SignedTransaction.references"]},{"name":"val references: Set<StateAndRef<U>>","description":"net.corda.core.node.services.Vault.Update.references","location":"docs/net.corda.core.node.services/-vault/-update/references.html","searchKeys":["references","val references: Set<StateAndRef<U>>","net.corda.core.node.services.Vault.Update.references"]},{"name":"val releaseVersion: String","description":"net.corda.core.node.services.diagnostics.NodeVersionInfo.releaseVersion","location":"docs/net.corda.core.node.services.diagnostics/-node-version-info/release-version.html","searchKeys":["releaseVersion","val releaseVersion: String","net.corda.core.node.services.diagnostics.NodeVersionInfo.releaseVersion"]},{"name":"val relevancyStatus: Vault.RelevancyStatus? = null","description":"net.corda.core.node.services.Vault.StateMetadata.relevancyStatus","location":"docs/net.corda.core.node.services/-vault/-state-metadata/relevancy-status.html","searchKeys":["relevancyStatus","val relevancyStatus: Vault.RelevancyStatus? = null","net.corda.core.node.services.Vault.StateMetadata.relevancyStatus"]},{"name":"val requestSignature: NotarisationRequestSignature","description":"net.corda.core.flows.NotarisationPayload.requestSignature","location":"docs/net.corda.core.flows/-notarisation-payload/request-signature.html","searchKeys":["requestSignature","val requestSignature: NotarisationRequestSignature","net.corda.core.flows.NotarisationPayload.requestSignature"]},{"name":"val requestSignature: NotarisationRequestSignature","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.requestSignature","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/request-signature.html","searchKeys":["requestSignature","val requestSignature: NotarisationRequestSignature","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.requestSignature"]},{"name":"val requested: Int","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch.requested","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-size-mismatch/requested.html","searchKeys":["requested","val requested: Int","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedSizeMismatch.requested"]},{"name":"val requested: SecureHash","description":"net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch.requested","location":"docs/net.corda.core.internal/-fetch-data-flow/-downloaded-vs-requested-data-mismatch/requested.html","searchKeys":["requested","val requested: SecureHash","net.corda.core.internal.FetchDataFlow.DownloadedVsRequestedDataMismatch.requested"]},{"name":"val requested: SecureHash","description":"net.corda.core.internal.FetchDataFlow.HashNotFound.requested","location":"docs/net.corda.core.internal/-fetch-data-flow/-hash-not-found/requested.html","searchKeys":["requested","val requested: SecureHash","net.corda.core.internal.FetchDataFlow.HashNotFound.requested"]},{"name":"val requested: SecureHash","description":"net.corda.core.internal.FetchDataFlow.IllegalTransactionRequest.requested","location":"docs/net.corda.core.internal/-fetch-data-flow/-illegal-transaction-request/requested.html","searchKeys":["requested","val requested: SecureHash","net.corda.core.internal.FetchDataFlow.IllegalTransactionRequest.requested"]},{"name":"val requested: SecureHash","description":"net.corda.core.internal.FetchDataFlow.MissingNetworkParameters.requested","location":"docs/net.corda.core.internal/-fetch-data-flow/-missing-network-parameters/requested.html","searchKeys":["requested","val requested: SecureHash","net.corda.core.internal.FetchDataFlow.MissingNetworkParameters.requested"]},{"name":"val requiredSigningKeys: Set<PublicKey>","description":"net.corda.core.transactions.WireTransaction.requiredSigningKeys","location":"docs/net.corda.core.transactions/-wire-transaction/required-signing-keys.html","searchKeys":["requiredSigningKeys","val requiredSigningKeys: Set<PublicKey>","net.corda.core.transactions.WireTransaction.requiredSigningKeys"]},{"name":"val resolvableTransactionHashesCount: Long = 0","description":"net.corda.core.internal.ResolveTransactionsFlowStats.resolvableTransactionHashesCount","location":"docs/net.corda.core.internal/-resolve-transactions-flow-stats/resolvable-transaction-hashes-count.html","searchKeys":["resolvableTransactionHashesCount","val resolvableTransactionHashesCount: Long = 0","net.corda.core.internal.ResolveTransactionsFlowStats.resolvableTransactionHashesCount"]},{"name":"val result: Try<*>","description":"net.corda.core.messaging.StateMachineUpdate.Removed.result","location":"docs/net.corda.core.messaging/-state-machine-update/-removed/result.html","searchKeys":["result","val result: Try<*>","net.corda.core.messaging.StateMachineUpdate.Removed.result"]},{"name":"val revision: String","description":"net.corda.core.node.NodeDiagnosticInfo.revision","location":"docs/net.corda.core.node/-node-diagnostic-info/revision.html","searchKeys":["revision","val revision: String","net.corda.core.node.NodeDiagnosticInfo.revision"]},{"name":"val revision: String","description":"net.corda.core.node.services.diagnostics.NodeVersionInfo.revision","location":"docs/net.corda.core.node.services.diagnostics/-node-version-info/revision.html","searchKeys":["revision","val revision: String","net.corda.core.node.services.diagnostics.NodeVersionInfo.revision"]},{"name":"val revokedIntermediateCerts: MutableList<X509Certificate>","description":"net.corda.testing.node.internal.network.CrlServer.revokedIntermediateCerts","location":"docs/net.corda.testing.node.internal.network/-crl-server/revoked-intermediate-certs.html","searchKeys":["revokedIntermediateCerts","val revokedIntermediateCerts: MutableList<X509Certificate>","net.corda.testing.node.internal.network.CrlServer.revokedIntermediateCerts"]},{"name":"val revokedNodeCerts: MutableList<X509Certificate>","description":"net.corda.testing.node.internal.network.CrlServer.revokedNodeCerts","location":"docs/net.corda.testing.node.internal.network/-crl-server/revoked-node-certs.html","searchKeys":["revokedNodeCerts","val revokedNodeCerts: MutableList<X509Certificate>","net.corda.testing.node.internal.network.CrlServer.revokedNodeCerts"]},{"name":"val right: CriteriaExpression<O, Boolean>","description":"net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.right","location":"docs/net.corda.core.node.services.vault/-criteria-expression/-binary-logical/right.html","searchKeys":["right","val right: CriteriaExpression<O, Boolean>","net.corda.core.node.services.vault.CriteriaExpression.BinaryLogical.right"]},{"name":"val right: MerkleTree","description":"net.corda.core.crypto.MerkleTree.Node.right","location":"docs/net.corda.core.crypto/-merkle-tree/-node/right.html","searchKeys":["right","val right: MerkleTree","net.corda.core.crypto.MerkleTree.Node.right"]},{"name":"val right: PartialMerkleTree.PartialTree","description":"net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.right","location":"docs/net.corda.core.crypto/-partial-merkle-tree/-partial-tree/-node/right.html","searchKeys":["right","val right: PartialMerkleTree.PartialTree","net.corda.core.crypto.PartialMerkleTree.PartialTree.Node.right"]},{"name":"val rightArrow: String","description":"net.corda.core.internal.Emoji.rightArrow","location":"docs/net.corda.core.internal/-emoji/right-arrow.html","searchKeys":["rightArrow","val rightArrow: String","net.corda.core.internal.Emoji.rightArrow"]},{"name":"val rightFromLiteral: C","description":"net.corda.core.node.services.vault.ColumnPredicate.Between.rightFromLiteral","location":"docs/net.corda.core.node.services.vault/-column-predicate/-between/right-from-literal.html","searchKeys":["rightFromLiteral","val rightFromLiteral: C","net.corda.core.node.services.vault.ColumnPredicate.Between.rightFromLiteral"]},{"name":"val rightLiteral: C","description":"net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison.rightLiteral","location":"docs/net.corda.core.node.services.vault/-column-predicate/-binary-comparison/right-literal.html","searchKeys":["rightLiteral","val rightLiteral: C","net.corda.core.node.services.vault.ColumnPredicate.BinaryComparison.rightLiteral"]},{"name":"val rightLiteral: C","description":"net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison.rightLiteral","location":"docs/net.corda.core.node.services.vault/-column-predicate/-equality-comparison/right-literal.html","searchKeys":["rightLiteral","val rightLiteral: C","net.corda.core.node.services.vault.ColumnPredicate.EqualityComparison.rightLiteral"]},{"name":"val rightLiteral: Collection<C>","description":"net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression.rightLiteral","location":"docs/net.corda.core.node.services.vault/-column-predicate/-collection-expression/right-literal.html","searchKeys":["rightLiteral","val rightLiteral: Collection<C>","net.corda.core.node.services.vault.ColumnPredicate.CollectionExpression.rightLiteral"]},{"name":"val rightLiteral: String","description":"net.corda.core.node.services.vault.ColumnPredicate.Likeness.rightLiteral","location":"docs/net.corda.core.node.services.vault/-column-predicate/-likeness/right-literal.html","searchKeys":["rightLiteral","val rightLiteral: String","net.corda.core.node.services.vault.ColumnPredicate.Likeness.rightLiteral"]},{"name":"val rightToLiteral: C","description":"net.corda.core.node.services.vault.ColumnPredicate.Between.rightToLiteral","location":"docs/net.corda.core.node.services.vault/-column-predicate/-between/right-to-literal.html","searchKeys":["rightToLiteral","val rightToLiteral: C","net.corda.core.node.services.vault.ColumnPredicate.Between.rightToLiteral"]},{"name":"val root: PartialMerkleTree.PartialTree","description":"net.corda.core.crypto.PartialMerkleTree.root","location":"docs/net.corda.core.crypto/-partial-merkle-tree/root.html","searchKeys":["root","val root: PartialMerkleTree.PartialTree","net.corda.core.crypto.PartialMerkleTree.root"]},{"name":"val root: URL","description":"net.corda.testing.http.HttpApi.root","location":"docs/net.corda.testing.http/-http-api/root.html","searchKeys":["root","val root: URL","net.corda.testing.http.HttpApi.root"]},{"name":"val rootCa: <Error class: unknown class>","description":"net.corda.testing.node.internal.network.CrlServer.rootCa","location":"docs/net.corda.testing.node.internal.network/-crl-server/root-ca.html","searchKeys":["rootCa","val rootCa: <Error class: unknown class>","net.corda.testing.node.internal.network.CrlServer.rootCa"]},{"name":"val rootCert: X509Certificate? = null","description":"net.corda.testing.node.internal.CompatibilityZoneParams.rootCert","location":"docs/net.corda.testing.node.internal/-compatibility-zone-params/root-cert.html","searchKeys":["rootCert","val rootCert: X509Certificate? = null","net.corda.testing.node.internal.CompatibilityZoneParams.rootCert"]},{"name":"val rpc: CordaRPCOps","description":"net.corda.client.jackson.JacksonSupport.RpcObjectMapper.rpc","location":"docs/net.corda.client.jackson/-jackson-support/-rpc-object-mapper/rpc.html","searchKeys":["rpc","val rpc: CordaRPCOps","net.corda.client.jackson.JacksonSupport.RpcObjectMapper.rpc"]},{"name":"val rpcAddress: NetworkHostAndPort? = null","description":"net.corda.testing.driver.NodeParameters.rpcAddress","location":"docs/net.corda.testing.driver/-node-parameters/rpc-address.html","searchKeys":["rpcAddress","val rpcAddress: NetworkHostAndPort? = null","net.corda.testing.driver.NodeParameters.rpcAddress"]},{"name":"val rpcConfiguration: CordaRPCClientConfiguration","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.rpcConfiguration","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/rpc-configuration.html","searchKeys":["rpcConfiguration","val rpcConfiguration: CordaRPCClientConfiguration","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.rpcConfiguration"]},{"name":"val rpcServer: <Error class: unknown class>","description":"net.corda.testing.node.internal.RpcServerHandle.rpcServer","location":"docs/net.corda.testing.node.internal/-rpc-server-handle/rpc-server.html","searchKeys":["rpcServer","val rpcServer: <Error class: unknown class>","net.corda.testing.node.internal.RpcServerHandle.rpcServer"]},{"name":"val rpcServerUser: User","description":"net.corda.testing.node.internal.rpcServerUser","location":"docs/net.corda.testing.node.internal/rpc-server-user.html","searchKeys":["rpcServerUser","val rpcServerUser: User","net.corda.testing.node.internal.rpcServerUser"]},{"name":"val rpcTestUser: User","description":"net.corda.testing.node.internal.rpcTestUser","location":"docs/net.corda.testing.node.internal/rpc-test-user.html","searchKeys":["rpcTestUser","val rpcTestUser: User","net.corda.testing.node.internal.rpcTestUser"]},{"name":"val rpcUsers: List<User>","description":"net.corda.testing.driver.NodeParameters.rpcUsers","location":"docs/net.corda.testing.driver/-node-parameters/rpc-users.html","searchKeys":["rpcUsers","val rpcUsers: List<User>","net.corda.testing.driver.NodeParameters.rpcUsers"]},{"name":"val rpcUsers: List<User>","description":"net.corda.testing.node.NotarySpec.rpcUsers","location":"docs/net.corda.testing.node/-notary-spec/rpc-users.html","searchKeys":["rpcUsers","val rpcUsers: List<User>","net.corda.testing.node.NotarySpec.rpcUsers"]},{"name":"val runId: StateMachineRunId","description":"net.corda.core.flows.FlowLogic.runId","location":"docs/net.corda.core.flows/-flow-logic/run-id.html","searchKeys":["runId","val runId: StateMachineRunId","net.corda.core.flows.FlowLogic.runId"]},{"name":"val santaClaus: String","description":"net.corda.core.internal.Emoji.santaClaus","location":"docs/net.corda.core.internal/-emoji/santa-claus.html","searchKeys":["santaClaus","val santaClaus: String","net.corda.core.internal.Emoji.santaClaus"]},{"name":"val scanPackage: String","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.scanPackage","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/scan-package.html","searchKeys":["scanPackage","val scanPackage: String","net.corda.testing.node.internal.ScanPackageTestCordapp.scanPackage"]},{"name":"val scheduledState: ScheduledStateRef","description":"net.corda.core.context.InvocationOrigin.Scheduled.scheduledState","location":"docs/net.corda.core.context/-invocation-origin/-scheduled/scheduled-state.html","searchKeys":["scheduledState","val scheduledState: ScheduledStateRef","net.corda.core.context.InvocationOrigin.Scheduled.scheduledState"]},{"name":"val scheduledState: ScheduledStateRef","description":"net.corda.core.flows.FlowInitiator.Scheduled.scheduledState","location":"docs/net.corda.core.flows/-flow-initiator/-scheduled/scheduled-state.html","searchKeys":["scheduledState","val scheduledState: ScheduledStateRef","net.corda.core.flows.FlowInitiator.Scheduled.scheduledState"]},{"name":"val schemeCodeName: String","description":"net.corda.core.crypto.SignatureScheme.schemeCodeName","location":"docs/net.corda.core.crypto/-signature-scheme/scheme-code-name.html","searchKeys":["schemeCodeName","val schemeCodeName: String","net.corda.core.crypto.SignatureScheme.schemeCodeName"]},{"name":"val schemeNumberID: Int","description":"net.corda.core.crypto.SignatureMetadata.schemeNumberID","location":"docs/net.corda.core.crypto/-signature-metadata/scheme-number-i-d.html","searchKeys":["schemeNumberID","val schemeNumberID: Int","net.corda.core.crypto.SignatureMetadata.schemeNumberID"]},{"name":"val schemeNumberID: Int","description":"net.corda.core.crypto.SignatureScheme.schemeNumberID","location":"docs/net.corda.core.crypto/-signature-scheme/scheme-number-i-d.html","searchKeys":["schemeNumberID","val schemeNumberID: Int","net.corda.core.crypto.SignatureScheme.schemeNumberID"]},{"name":"val secondaryIdentity: AnonymousParty","description":"net.corda.finance.flows.TwoPartyDealFlow.Handshake.secondaryIdentity","location":"docs/net.corda.finance.flows/-two-party-deal-flow/-handshake/secondary-identity.html","searchKeys":["secondaryIdentity","val secondaryIdentity: AnonymousParty","net.corda.finance.flows.TwoPartyDealFlow.Handshake.secondaryIdentity"]},{"name":"val sender: InMemoryMessagingNetwork.PeerHandle","description":"net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.sender","location":"docs/net.corda.testing.node/-in-memory-messaging-network/-message-transfer/sender.html","searchKeys":["sender","val sender: InMemoryMessagingNetwork.PeerHandle","net.corda.testing.node.InMemoryMessagingNetwork.MessageTransfer.sender"]},{"name":"val senderRecords: List<SenderDistributionRecord>","description":"net.corda.core.flows.DistributionRecords.senderRecords","location":"docs/net.corda.core.flows/-distribution-records/sender-records.html","searchKeys":["senderRecords","val senderRecords: List<SenderDistributionRecord>","net.corda.core.flows.DistributionRecords.senderRecords"]},{"name":"val senderStatesToRecord: StatesToRecord","description":"net.corda.core.flows.DistributionList.SenderDistributionList.senderStatesToRecord","location":"docs/net.corda.core.flows/-distribution-list/-sender-distribution-list/sender-states-to-record.html","searchKeys":["senderStatesToRecord","val senderStatesToRecord: StatesToRecord","net.corda.core.flows.DistributionList.SenderDistributionList.senderStatesToRecord"]},{"name":"val senderStatesToRecord: StatesToRecord","description":"net.corda.core.flows.SendTransactionFlow.senderStatesToRecord","location":"docs/net.corda.core.flows/-send-transaction-flow/sender-states-to-record.html","searchKeys":["senderStatesToRecord","val senderStatesToRecord: StatesToRecord","net.corda.core.flows.SendTransactionFlow.senderStatesToRecord"]},{"name":"val senderStatesToRecord: StatesToRecord","description":"net.corda.core.flows.SenderDistributionRecord.senderStatesToRecord","location":"docs/net.corda.core.flows/-sender-distribution-record/sender-states-to-record.html","searchKeys":["senderStatesToRecord","val senderStatesToRecord: StatesToRecord","net.corda.core.flows.SenderDistributionRecord.senderStatesToRecord"]},{"name":"val sentMessages: <Error class: unknown class><InMemoryMessagingNetwork.MessageTransfer>","description":"net.corda.testing.node.InMemoryMessagingNetwork.sentMessages","location":"docs/net.corda.testing.node/-in-memory-messaging-network/sent-messages.html","searchKeys":["sentMessages","val sentMessages: <Error class: unknown class><InMemoryMessagingNetwork.MessageTransfer>","net.corda.testing.node.InMemoryMessagingNetwork.sentMessages"]},{"name":"val serial: Long","description":"net.corda.core.node.NodeInfo.serial","location":"docs/net.corda.core.node/-node-info/serial.html","searchKeys":["serial","val serial: Long","net.corda.core.node.NodeInfo.serial"]},{"name":"val serialized: SerializedBytes<SignedTransaction>?","description":"net.corda.core.flows.MaybeSerializedSignedTransaction.serialized","location":"docs/net.corda.core.flows/-maybe-serialized-signed-transaction/serialized.html","searchKeys":["serialized","val serialized: SerializedBytes<SignedTransaction>?","net.corda.core.flows.MaybeSerializedSignedTransaction.serialized"]},{"name":"val serializedComponents: List<OpaqueBytes>","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.serializedComponents","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/serialized-components.html","searchKeys":["serializedComponents","val serializedComponents: List<OpaqueBytes>","net.corda.core.transactions.ContractUpgradeWireTransaction.serializedComponents"]},{"name":"val serializedComponents: List<OpaqueBytes>","description":"net.corda.core.transactions.NotaryChangeWireTransaction.serializedComponents","location":"docs/net.corda.core.transactions/-notary-change-wire-transaction/serialized-components.html","searchKeys":["serializedComponents","val serializedComponents: List<OpaqueBytes>","net.corda.core.transactions.NotaryChangeWireTransaction.serializedComponents"]},{"name":"val serializedState: SerializedTransactionState","description":"net.corda.core.internal.SerializedStateAndRef.serializedState","location":"docs/net.corda.core.internal/-serialized-state-and-ref/serialized-state.html","searchKeys":["serializedState","val serializedState: SerializedTransactionState","net.corda.core.internal.SerializedStateAndRef.serializedState"]},{"name":"val serializedTelemetry: SerializedTelemetry? = null","description":"net.corda.core.context.InvocationContext.serializedTelemetry","location":"docs/net.corda.core.context/-invocation-context/serialized-telemetry.html","searchKeys":["serializedTelemetry","val serializedTelemetry: SerializedTelemetry? = null","net.corda.core.context.InvocationContext.serializedTelemetry"]},{"name":"val serializedTelemetryData: Map<String, OpaqueBytes>","description":"net.corda.core.internal.telemetry.SerializedTelemetry.serializedTelemetryData","location":"docs/net.corda.core.internal.telemetry/-serialized-telemetry/serialized-telemetry-data.html","searchKeys":["serializedTelemetryData","val serializedTelemetryData: Map<String, OpaqueBytes>","net.corda.core.internal.telemetry.SerializedTelemetry.serializedTelemetryData"]},{"name":"val serverControl: <Error class: unknown class>","description":"net.corda.testing.node.internal.RpcBrokerHandle.serverControl","location":"docs/net.corda.testing.node.internal/-rpc-broker-handle/server-control.html","searchKeys":["serverControl","val serverControl: <Error class: unknown class>","net.corda.testing.node.internal.RpcBrokerHandle.serverControl"]},{"name":"val service: SinglePartyNotaryService","description":"net.corda.core.internal.notary.NotaryServiceFlow.service","location":"docs/net.corda.core.internal.notary/-notary-service-flow/service.html","searchKeys":["service","val service: SinglePartyNotaryService","net.corda.core.internal.notary.NotaryServiceFlow.service"]},{"name":"val service: SinglePartyNotaryService","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.service","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/service.html","searchKeys":["service","val service: SinglePartyNotaryService","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.service"]},{"name":"val serviceClassName: String","description":"net.corda.core.context.InvocationOrigin.Service.serviceClassName","location":"docs/net.corda.core.context/-invocation-origin/-service/service-class-name.html","searchKeys":["serviceClassName","val serviceClassName: String","net.corda.core.context.InvocationOrigin.Service.serviceClassName"]},{"name":"val serviceClassName: String","description":"net.corda.core.flows.FlowInitiator.Service.serviceClassName","location":"docs/net.corda.core.flows/-flow-initiator/-service/service-class-name.html","searchKeys":["serviceClassName","val serviceClassName: String","net.corda.core.flows.FlowInitiator.Service.serviceClassName"]},{"name":"val serviceHub: ServiceHub","description":"net.corda.core.flows.FlowLogic.serviceHub","location":"docs/net.corda.core.flows/-flow-logic/service-hub.html","searchKeys":["serviceHub","val serviceHub: ServiceHub","net.corda.core.flows.FlowLogic.serviceHub"]},{"name":"val serviceId: AuthServiceId","description":"net.corda.core.context.Actor.serviceId","location":"docs/net.corda.core.context/-actor/service-id.html","searchKeys":["serviceId","val serviceId: AuthServiceId","net.corda.core.context.Actor.serviceId"]},{"name":"val serviceLegalName: CordaX500Name? = null","description":"net.corda.testing.node.MockNetNotaryConfig.serviceLegalName","location":"docs/net.corda.testing.node/-mock-net-notary-config/service-legal-name.html","searchKeys":["serviceLegalName","val serviceLegalName: CordaX500Name? = null","net.corda.testing.node.MockNetNotaryConfig.serviceLegalName"]},{"name":"val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy","description":"net.corda.testing.node.MockNetwork.servicePeerAllocationStrategy","location":"docs/net.corda.testing.node/-mock-network/service-peer-allocation-strategy.html","searchKeys":["servicePeerAllocationStrategy","val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy","net.corda.testing.node.MockNetwork.servicePeerAllocationStrategy"]},{"name":"val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy","description":"net.corda.testing.node.MockNetworkParameters.servicePeerAllocationStrategy","location":"docs/net.corda.testing.node/-mock-network-parameters/service-peer-allocation-strategy.html","searchKeys":["servicePeerAllocationStrategy","val servicePeerAllocationStrategy: InMemoryMessagingNetwork.ServicePeerAllocationStrategy","net.corda.testing.node.MockNetworkParameters.servicePeerAllocationStrategy"]},{"name":"val services: ServiceHub","description":"net.corda.core.internal.WaitForStateConsumption.services","location":"docs/net.corda.core.internal/-wait-for-state-consumption/services.html","searchKeys":["services","val services: ServiceHub","net.corda.core.internal.WaitForStateConsumption.services"]},{"name":"val services: ServiceHub","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.services","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/services.html","searchKeys":["services","val services: ServiceHub","net.corda.testing.dsl.TestLedgerDSLInterpreter.services"]},{"name":"val services: ServiceHub","description":"net.corda.testing.node.StartedMockNode.services","location":"docs/net.corda.testing.node/-started-mock-node/services.html","searchKeys":["services","val services: ServiceHub","net.corda.testing.node.StartedMockNode.services"]},{"name":"val services: ServicesForResolution","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.services","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/services.html","searchKeys":["services","val services: ServicesForResolution","net.corda.testing.dsl.TestTransactionDSLInterpreter.services"]},{"name":"val session: FlowSession","description":"net.corda.core.flows.CollectSignatureFlow.session","location":"docs/net.corda.core.flows/-collect-signature-flow/session.html","searchKeys":["session","val session: FlowSession","net.corda.core.flows.CollectSignatureFlow.session"]},{"name":"val sessionId: Trace.SessionId","description":"net.corda.core.context.Trace.sessionId","location":"docs/net.corda.core.context/-trace/session-id.html","searchKeys":["sessionId","val sessionId: Trace.SessionId","net.corda.core.context.Trace.sessionId"]},{"name":"val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>","description":"net.corda.core.internal.FlowIORequest.Send.sessionToMessage","location":"docs/net.corda.core.internal/-flow-i-o-request/-send/session-to-message.html","searchKeys":["sessionToMessage","val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>","net.corda.core.internal.FlowIORequest.Send.sessionToMessage"]},{"name":"val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>","description":"net.corda.core.internal.FlowIORequest.SendAndReceive.sessionToMessage","location":"docs/net.corda.core.internal/-flow-i-o-request/-send-and-receive/session-to-message.html","searchKeys":["sessionToMessage","val sessionToMessage: Map<FlowSession, SerializedBytes<Any>>","net.corda.core.internal.FlowIORequest.SendAndReceive.sessionToMessage"]},{"name":"val sessions: Collection<FlowSession>","description":"net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.sessions","location":"docs/net.corda.core.flows/-finality-flow/-extra-constructor-args/sessions.html","searchKeys":["sessions","val sessions: Collection<FlowSession>","net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.sessions"]},{"name":"val sessions: NonEmptySet<FlowSession>","description":"net.corda.core.internal.FlowIORequest.CloseSessions.sessions","location":"docs/net.corda.core.internal/-flow-i-o-request/-close-sessions/sessions.html","searchKeys":["sessions","val sessions: NonEmptySet<FlowSession>","net.corda.core.internal.FlowIORequest.CloseSessions.sessions"]},{"name":"val sessions: NonEmptySet<FlowSession>","description":"net.corda.core.internal.FlowIORequest.GetFlowInfo.sessions","location":"docs/net.corda.core.internal/-flow-i-o-request/-get-flow-info/sessions.html","searchKeys":["sessions","val sessions: NonEmptySet<FlowSession>","net.corda.core.internal.FlowIORequest.GetFlowInfo.sessions"]},{"name":"val sessions: NonEmptySet<FlowSession>","description":"net.corda.core.internal.FlowIORequest.Receive.sessions","location":"docs/net.corda.core.internal/-flow-i-o-request/-receive/sessions.html","searchKeys":["sessions","val sessions: NonEmptySet<FlowSession>","net.corda.core.internal.FlowIORequest.Receive.sessions"]},{"name":"val sessionsToCollectFrom: Collection<FlowSession>","description":"net.corda.core.flows.CollectSignaturesFlow.sessionsToCollectFrom","location":"docs/net.corda.core.flows/-collect-signatures-flow/sessions-to-collect-from.html","searchKeys":["sessionsToCollectFrom","val sessionsToCollectFrom: Collection<FlowSession>","net.corda.core.flows.CollectSignaturesFlow.sessionsToCollectFrom"]},{"name":"val sha256: SecureHash.SHA256","description":"net.corda.core.internal.InputStreamAndHash.sha256","location":"docs/net.corda.core.internal/-input-stream-and-hash/sha256.html","searchKeys":["sha256","val sha256: SecureHash.SHA256","net.corda.core.internal.InputStreamAndHash.sha256"]},{"name":"val sha2_256: DigestService","description":"net.corda.core.crypto.DigestService.Companion.sha2_256","location":"docs/net.corda.core.crypto/-digest-service/-companion/sha2_256.html","searchKeys":["sha2_256","val sha2_256: DigestService","net.corda.core.crypto.DigestService.Companion.sha2_256"]},{"name":"val sha2_384: DigestService","description":"net.corda.core.crypto.DigestService.Companion.sha2_384","location":"docs/net.corda.core.crypto/-digest-service/-companion/sha2_384.html","searchKeys":["sha2_384","val sha2_384: DigestService","net.corda.core.crypto.DigestService.Companion.sha2_384"]},{"name":"val sha2_512: DigestService","description":"net.corda.core.crypto.DigestService.Companion.sha2_512","location":"docs/net.corda.core.crypto/-digest-service/-companion/sha2_512.html","searchKeys":["sha2_512","val sha2_512: DigestService","net.corda.core.crypto.DigestService.Companion.sha2_512"]},{"name":"val shortName: String","description":"net.corda.core.cordapp.CordappInfo.shortName","location":"docs/net.corda.core.cordapp/-cordapp-info/short-name.html","searchKeys":["shortName","val shortName: String","net.corda.core.cordapp.CordappInfo.shortName"]},{"name":"val shouldRetrySend: Boolean","description":"net.corda.core.internal.FlowIORequest.SendAndReceive.shouldRetrySend","location":"docs/net.corda.core.internal/-flow-i-o-request/-send-and-receive/should-retry-send.html","searchKeys":["shouldRetrySend","val shouldRetrySend: Boolean","net.corda.core.internal.FlowIORequest.SendAndReceive.shouldRetrySend"]},{"name":"val shutdown: () -> Unit","description":"net.corda.testing.node.internal.RpcBrokerHandle.shutdown","location":"docs/net.corda.testing.node.internal/-rpc-broker-handle/shutdown.html","searchKeys":["shutdown","val shutdown: () -> Unit","net.corda.testing.node.internal.RpcBrokerHandle.shutdown"]},{"name":"val sig: DigitalSignature.WithKey","description":"net.corda.core.crypto.SignedData.sig","location":"docs/net.corda.core.crypto/-signed-data/sig.html","searchKeys":["sig","val sig: DigitalSignature.WithKey","net.corda.core.crypto.SignedData.sig"]},{"name":"val sig: DigitalSignatureWithCert","description":"net.corda.core.internal.SignedDataWithCert.sig","location":"docs/net.corda.core.internal/-signed-data-with-cert/sig.html","searchKeys":["sig","val sig: DigitalSignatureWithCert","net.corda.core.internal.SignedDataWithCert.sig"]},{"name":"val signature: TransactionSignature","description":"net.corda.core.internal.notary.UniquenessProvider.Result.Success.signature","location":"docs/net.corda.core.internal.notary/-uniqueness-provider/-result/-success/signature.html","searchKeys":["signature","val signature: TransactionSignature","net.corda.core.internal.notary.UniquenessProvider.Result.Success.signature"]},{"name":"val signatureCount: Int","description":"net.corda.testing.node.internal.CustomCordapp.SigningInfo.signatureCount","location":"docs/net.corda.testing.node.internal/-custom-cordapp/-signing-info/signature-count.html","searchKeys":["signatureCount","val signatureCount: Int","net.corda.testing.node.internal.CustomCordapp.SigningInfo.signatureCount"]},{"name":"val signatureMetadata: SignatureMetadata","description":"net.corda.core.crypto.SignableData.signatureMetadata","location":"docs/net.corda.core.crypto/-signable-data/signature-metadata.html","searchKeys":["signatureMetadata","val signatureMetadata: SignatureMetadata","net.corda.core.crypto.SignableData.signatureMetadata"]},{"name":"val signatureMetadata: SignatureMetadata","description":"net.corda.core.crypto.TransactionSignature.signatureMetadata","location":"docs/net.corda.core.crypto/-transaction-signature/signature-metadata.html","searchKeys":["signatureMetadata","val signatureMetadata: SignatureMetadata","net.corda.core.crypto.TransactionSignature.signatureMetadata"]},{"name":"val signatureName: String","description":"net.corda.core.crypto.SignatureScheme.signatureName","location":"docs/net.corda.core.crypto/-signature-scheme/signature-name.html","searchKeys":["signatureName","val signatureName: String","net.corda.core.crypto.SignatureScheme.signatureName"]},{"name":"val signatureOID: <Error class: unknown class>","description":"net.corda.core.crypto.SignatureScheme.signatureOID","location":"docs/net.corda.core.crypto/-signature-scheme/signature-o-i-d.html","searchKeys":["signatureOID","val signatureOID: <Error class: unknown class>","net.corda.core.crypto.SignatureScheme.signatureOID"]},{"name":"val signatures: List<TransactionSignature>","description":"net.corda.core.flows.NotarisationResponse.signatures","location":"docs/net.corda.core.flows/-notarisation-response/signatures.html","searchKeys":["signatures","val signatures: List<TransactionSignature>","net.corda.core.flows.NotarisationResponse.signatures"]},{"name":"val signed: Boolean = false","description":"net.corda.testing.node.internal.ScanPackageTestCordapp.signed","location":"docs/net.corda.testing.node.internal/-scan-package-test-cordapp/signed.html","searchKeys":["signed","val signed: Boolean = false","net.corda.testing.node.internal.ScanPackageTestCordapp.signed"]},{"name":"val signed: Boolean = false","description":"net.corda.testing.node.internal.UriTestCordapp.signed","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/signed.html","searchKeys":["signed","val signed: Boolean = false","net.corda.testing.node.internal.UriTestCordapp.signed"]},{"name":"val signedTransaction: SignedTransaction","description":"net.corda.core.flows.NotarisationPayload.signedTransaction","location":"docs/net.corda.core.flows/-notarisation-payload/signed-transaction.html","searchKeys":["signedTransaction","val signedTransaction: SignedTransaction","net.corda.core.flows.NotarisationPayload.signedTransaction"]},{"name":"val signers: List<PublicKey>","description":"net.corda.core.contracts.Command.signers","location":"docs/net.corda.core.contracts/-command/signers.html","searchKeys":["signers","val signers: List<PublicKey>","net.corda.core.contracts.Command.signers"]},{"name":"val signers: List<PublicKey>","description":"net.corda.core.contracts.CommandWithParties.signers","location":"docs/net.corda.core.contracts/-command-with-parties/signers.html","searchKeys":["signers","val signers: List<PublicKey>","net.corda.core.contracts.CommandWithParties.signers"]},{"name":"val signersCondition: ColumnPredicate<List<PublicKey>>? = null","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.signersCondition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/signers-condition.html","searchKeys":["signersCondition","val signersCondition: ColumnPredicate<List<PublicKey>>? = null","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.signersCondition"]},{"name":"val signingInfo: CustomCordapp.SigningInfo? = null","description":"net.corda.testing.node.internal.CustomCordapp.signingInfo","location":"docs/net.corda.testing.node.internal/-custom-cordapp/signing-info.html","searchKeys":["signingInfo","val signingInfo: CustomCordapp.SigningInfo? = null","net.corda.testing.node.internal.CustomCordapp.signingInfo"]},{"name":"val signingKeys: List<PublicKey>","description":"net.corda.core.flows.CollectSignatureFlow.signingKeys","location":"docs/net.corda.core.flows/-collect-signature-flow/signing-keys.html","searchKeys":["signingKeys","val signingKeys: List<PublicKey>","net.corda.core.flows.CollectSignatureFlow.signingKeys"]},{"name":"val signingParties: List<Party>","description":"net.corda.core.contracts.CommandWithParties.signingParties","location":"docs/net.corda.core.contracts/-command-with-parties/signing-parties.html","searchKeys":["signingParties","val signingParties: List<Party>","net.corda.core.contracts.CommandWithParties.signingParties"]},{"name":"val sigs: List<TransactionSignature>","description":"net.corda.core.crypto.CompositeSignaturesWithKeys.sigs","location":"docs/net.corda.core.crypto/-composite-signatures-with-keys/sigs.html","searchKeys":["sigs","val sigs: List<TransactionSignature>","net.corda.core.crypto.CompositeSignaturesWithKeys.sigs"]},{"name":"val simpleLogTelemetryEnabled: Boolean","description":"net.corda.client.rpc.internal.RPCClientTelemetry.simpleLogTelemetryEnabled","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/simple-log-telemetry-enabled.html","searchKeys":["simpleLogTelemetryEnabled","val simpleLogTelemetryEnabled: Boolean","net.corda.client.rpc.internal.RPCClientTelemetry.simpleLogTelemetryEnabled"]},{"name":"val size: Int","description":"net.corda.core.flows.DistributionRecords.size","location":"docs/net.corda.core.flows/-distribution-records/size.html","searchKeys":["size","val size: Int","net.corda.core.flows.DistributionRecords.size"]},{"name":"val size: Int","description":"net.corda.core.utilities.ByteSequence.size","location":"docs/net.corda.core.utilities/-byte-sequence/size.html","searchKeys":["size","val size: Int","net.corda.core.utilities.ByteSequence.size"]},{"name":"val skippedRecordingTransactionCount: Long = 0","description":"net.corda.core.internal.ResolveTransactionsFlowStats.skippedRecordingTransactionCount","location":"docs/net.corda.core.internal/-resolve-transactions-flow-stats/skipped-recording-transaction-count.html","searchKeys":["skippedRecordingTransactionCount","val skippedRecordingTransactionCount: Long = 0","net.corda.core.internal.ResolveTransactionsFlowStats.skippedRecordingTransactionCount"]},{"name":"val skullAndCrossbones: String","description":"net.corda.core.internal.Emoji.skullAndCrossbones","location":"docs/net.corda.core.internal/-emoji/skull-and-crossbones.html","searchKeys":["skullAndCrossbones","val skullAndCrossbones: String","net.corda.core.internal.Emoji.skullAndCrossbones"]},{"name":"val sleepingFace: String","description":"net.corda.core.internal.Emoji.sleepingFace","location":"docs/net.corda.core.internal/-emoji/sleeping-face.html","searchKeys":["sleepingFace","val sleepingFace: String","net.corda.core.internal.Emoji.sleepingFace"]},{"name":"val snapshot: A","description":"net.corda.core.messaging.DataFeed.snapshot","location":"docs/net.corda.core.messaging/-data-feed/snapshot.html","searchKeys":["snapshot","val snapshot: A","net.corda.core.messaging.DataFeed.snapshot"]},{"name":"val softLockingCondition: QueryCriteria.SoftLockingCondition? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.softLockingCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/soft-locking-condition.html","searchKeys":["softLockingCondition","val softLockingCondition: QueryCriteria.SoftLockingCondition? = null","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.softLockingCondition"]},{"name":"val soon: String","description":"net.corda.core.internal.Emoji.soon","location":"docs/net.corda.core.internal/-emoji/soon.html","searchKeys":["soon","val soon: String","net.corda.core.internal.Emoji.soon"]},{"name":"val sortAttribute: AttachmentSort.AttachmentSortAttribute","description":"net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn.sortAttribute","location":"docs/net.corda.core.node.services.vault/-attachment-sort/-attachment-sort-column/sort-attribute.html","searchKeys":["sortAttribute","val sortAttribute: AttachmentSort.AttachmentSortAttribute","net.corda.core.node.services.vault.AttachmentSort.AttachmentSortColumn.sortAttribute"]},{"name":"val sortAttribute: SortAttribute","description":"net.corda.core.node.services.vault.Sort.SortColumn.sortAttribute","location":"docs/net.corda.core.node.services.vault/-sort/-sort-column/sort-attribute.html","searchKeys":["sortAttribute","val sortAttribute: SortAttribute","net.corda.core.node.services.vault.Sort.SortColumn.sortAttribute"]},{"name":"val source: <Error class: unknown class><T>","description":"net.corda.core.observable.internal.OnResilientSubscribe.source","location":"docs/net.corda.core.observable.internal/-on-resilient-subscribe/source.html","searchKeys":["source","val source: <Error class: unknown class><T>","net.corda.core.observable.internal.OnResilientSubscribe.source"]},{"name":"val source: P","description":"net.corda.core.contracts.AmountTransfer.source","location":"docs/net.corda.core.contracts/-amount-transfer/source.html","searchKeys":["source","val source: P","net.corda.core.contracts.AmountTransfer.source"]},{"name":"val source: P","description":"net.corda.core.contracts.SourceAndAmount.source","location":"docs/net.corda.core.contracts/-source-and-amount/source.html","searchKeys":["source","val source: P","net.corda.core.contracts.SourceAndAmount.source"]},{"name":"val spanStartEndEventsEnabled: Boolean","description":"net.corda.client.rpc.internal.RPCClientTelemetry.spanStartEndEventsEnabled","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/span-start-end-events-enabled.html","searchKeys":["spanStartEndEventsEnabled","val spanStartEndEventsEnabled: Boolean","net.corda.client.rpc.internal.RPCClientTelemetry.spanStartEndEventsEnabled"]},{"name":"val sslConfiguration: ClientRpcSslOptions? = null","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.sslConfiguration","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/ssl-configuration.html","searchKeys":["sslConfiguration","val sslConfiguration: ClientRpcSslOptions? = null","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.sslConfiguration"]},{"name":"val stackFrames: List<FlowStackSnapshot.Frame>","description":"net.corda.core.flows.FlowStackSnapshot.stackFrames","location":"docs/net.corda.core.flows/-flow-stack-snapshot/stack-frames.html","searchKeys":["stackFrames","val stackFrames: List<FlowStackSnapshot.Frame>","net.corda.core.flows.FlowStackSnapshot.stackFrames"]},{"name":"val stackObjects: List<Any?>","description":"net.corda.core.flows.FlowStackSnapshot.Frame.stackObjects","location":"docs/net.corda.core.flows/-flow-stack-snapshot/-frame/stack-objects.html","searchKeys":["stackObjects","val stackObjects: List<Any?>","net.corda.core.flows.FlowStackSnapshot.Frame.stackObjects"]},{"name":"val stackTraceElement: StackTraceElement","description":"net.corda.core.flows.FlowStackSnapshot.Frame.stackTraceElement","location":"docs/net.corda.core.flows/-flow-stack-snapshot/-frame/stack-trace-element.html","searchKeys":["stackTraceElement","val stackTraceElement: StackTraceElement","net.corda.core.flows.FlowStackSnapshot.Frame.stackTraceElement"]},{"name":"val startInProcess: Boolean = true","description":"net.corda.testing.node.NotarySpec.startInProcess","location":"docs/net.corda.testing.node/-notary-spec/start-in-process.html","searchKeys":["startInProcess","val startInProcess: Boolean = true","net.corda.testing.node.NotarySpec.startInProcess"]},{"name":"val startInSameProcess: Boolean? = null","description":"net.corda.testing.driver.NodeParameters.startInSameProcess","location":"docs/net.corda.testing.driver/-node-parameters/start-in-same-process.html","searchKeys":["startInSameProcess","val startInSameProcess: Boolean? = null","net.corda.testing.driver.NodeParameters.startInSameProcess"]},{"name":"val startJmxHttpServer: Boolean = false","description":"net.corda.testing.driver.JmxPolicy.startJmxHttpServer","location":"docs/net.corda.testing.driver/-jmx-policy/start-jmx-http-server.html","searchKeys":["startJmxHttpServer","val startJmxHttpServer: Boolean = false","net.corda.testing.driver.JmxPolicy.startJmxHttpServer"]},{"name":"val startNodesInProcess: Boolean","description":"net.corda.testing.node.internal.DriverDSLImpl.startNodesInProcess","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/start-nodes-in-process.html","searchKeys":["startNodesInProcess","val startNodesInProcess: Boolean","net.corda.testing.node.internal.DriverDSLImpl.startNodesInProcess"]},{"name":"val startNodesInProcess: Boolean = false","description":"net.corda.testing.driver.DriverParameters.startNodesInProcess","location":"docs/net.corda.testing.driver/-driver-parameters/start-nodes-in-process.html","searchKeys":["startNodesInProcess","val startNodesInProcess: Boolean = false","net.corda.testing.driver.DriverParameters.startNodesInProcess"]},{"name":"val started: StartedMockNode","description":"net.corda.testing.node.UnstartedMockNode.started","location":"docs/net.corda.testing.node/-unstarted-mock-node/started.html","searchKeys":["started","val started: StartedMockNode","net.corda.testing.node.UnstartedMockNode.started"]},{"name":"val state: ContractState","description":"net.corda.core.contracts.StateAndContract.state","location":"docs/net.corda.core.contracts/-state-and-contract/state.html","searchKeys":["state","val state: ContractState","net.corda.core.contracts.StateAndContract.state"]},{"name":"val state: ContractState","description":"net.corda.core.internal.StatePointerSearch.state","location":"docs/net.corda.core.internal/-state-pointer-search/state.html","searchKeys":["state","val state: ContractState","net.corda.core.internal.StatePointerSearch.state"]},{"name":"val state: String?","description":"net.corda.core.identity.CordaX500Name.state","location":"docs/net.corda.core.identity/-corda-x500-name/state.html","searchKeys":["state","val state: String?","net.corda.core.identity.CordaX500Name.state"]},{"name":"val state: TransactionState<T>","description":"net.corda.core.contracts.StateAndRef.state","location":"docs/net.corda.core.contracts/-state-and-ref/state.html","searchKeys":["state","val state: TransactionState<T>","net.corda.core.contracts.StateAndRef.state"]},{"name":"val stateAndRef: StateAndRef<*>","description":"net.corda.core.flows.ContractUpgradeFlow.Authorise.stateAndRef","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-authorise/state-and-ref.html","searchKeys":["stateAndRef","val stateAndRef: StateAndRef<*>","net.corda.core.flows.ContractUpgradeFlow.Authorise.stateAndRef"]},{"name":"val stateAndRef: StateAndRef<T>","description":"net.corda.core.contracts.ReferencedStateAndRef.stateAndRef","location":"docs/net.corda.core.contracts/-referenced-state-and-ref/state-and-ref.html","searchKeys":["stateAndRef","val stateAndRef: StateAndRef<T>","net.corda.core.contracts.ReferencedStateAndRef.stateAndRef"]},{"name":"val stateMachineInfo: StateMachineInfo","description":"net.corda.core.messaging.StateMachineUpdate.Added.stateMachineInfo","location":"docs/net.corda.core.messaging/-state-machine-update/-added/state-machine-info.html","searchKeys":["stateMachineInfo","val stateMachineInfo: StateMachineInfo","net.corda.core.messaging.StateMachineUpdate.Added.stateMachineInfo"]},{"name":"val stateMachineRunId: StateMachineRunId","description":"net.corda.core.flows.FlowTransactionInfo.stateMachineRunId","location":"docs/net.corda.core.flows/-flow-transaction-info/state-machine-run-id.html","searchKeys":["stateMachineRunId","val stateMachineRunId: StateMachineRunId","net.corda.core.flows.FlowTransactionInfo.stateMachineRunId"]},{"name":"val stateMachineRunId: StateMachineRunId","description":"net.corda.core.messaging.StateMachineTransactionMapping.stateMachineRunId","location":"docs/net.corda.core.messaging/-state-machine-transaction-mapping/state-machine-run-id.html","searchKeys":["stateMachineRunId","val stateMachineRunId: StateMachineRunId","net.corda.core.messaging.StateMachineTransactionMapping.stateMachineRunId"]},{"name":"val stateRef: StateRef","description":"net.corda.core.flows.AbstractStateReplacementFlow.Proposal.stateRef","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-proposal/state-ref.html","searchKeys":["stateRef","val stateRef: StateRef","net.corda.core.flows.AbstractStateReplacementFlow.Proposal.stateRef"]},{"name":"val stateRef: StateRef","description":"net.corda.core.flows.ContractUpgradeFlow.Deauthorise.stateRef","location":"docs/net.corda.core.flows/-contract-upgrade-flow/-deauthorise/state-ref.html","searchKeys":["stateRef","val stateRef: StateRef","net.corda.core.flows.ContractUpgradeFlow.Deauthorise.stateRef"]},{"name":"val stateRef: StateRef","description":"net.corda.core.transactions.ReferenceStateRef.stateRef","location":"docs/net.corda.core.transactions/-reference-state-ref/state-ref.html","searchKeys":["stateRef","val stateRef: StateRef","net.corda.core.transactions.ReferenceStateRef.stateRef"]},{"name":"val stateRefs: List<StateRef>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.stateRefs","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/state-refs.html","searchKeys":["stateRefs","val stateRefs: List<StateRef>? = null","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.stateRefs"]},{"name":"val stateRefs: Set<StateRef>","description":"net.corda.core.internal.WaitForStateConsumption.stateRefs","location":"docs/net.corda.core.internal/-wait-for-state-consumption/state-refs.html","searchKeys":["stateRefs","val stateRefs: Set<StateRef>","net.corda.core.internal.WaitForStateConsumption.stateRefs"]},{"name":"val stateTypes: Vault.StateStatus","description":"net.corda.core.node.services.Vault.Page.stateTypes","location":"docs/net.corda.core.node.services/-vault/-page/state-types.html","searchKeys":["stateTypes","val stateTypes: Vault.StateStatus","net.corda.core.node.services.Vault.Page.stateTypes"]},{"name":"val states: Iterable<StateAndRef<T>>","description":"net.corda.core.node.services.Vault.states","location":"docs/net.corda.core.node.services/-vault/states.html","searchKeys":["states","val states: Iterable<StateAndRef<T>>","net.corda.core.node.services.Vault.states"]},{"name":"val states: List<StateAndRef<T>>","description":"net.corda.core.node.services.Vault.Page.states","location":"docs/net.corda.core.node.services/-vault/-page/states.html","searchKeys":["states","val states: List<StateAndRef<T>>","net.corda.core.node.services.Vault.Page.states"]},{"name":"val states: List<TransactionState<ContractState>>","description":"net.corda.core.transactions.MissingContractAttachments.states","location":"docs/net.corda.core.transactions/-missing-contract-attachments/states.html","searchKeys":["states","val states: List<TransactionState<ContractState>>","net.corda.core.transactions.MissingContractAttachments.states"]},{"name":"val statesMetadata: List<Vault.StateMetadata>","description":"net.corda.core.node.services.Vault.Page.statesMetadata","location":"docs/net.corda.core.node.services/-vault/-page/states-metadata.html","searchKeys":["statesMetadata","val statesMetadata: List<Vault.StateMetadata>","net.corda.core.node.services.Vault.Page.statesMetadata"]},{"name":"val statesToConsume: List<StateRef>","description":"net.corda.core.flows.NotarisationRequest.statesToConsume","location":"docs/net.corda.core.flows/-notarisation-request/states-to-consume.html","searchKeys":["statesToConsume","val statesToConsume: List<StateRef>","net.corda.core.flows.NotarisationRequest.statesToConsume"]},{"name":"val statesToRecord: StatesToRecord","description":"net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.statesToRecord","location":"docs/net.corda.core.flows/-finality-flow/-extra-constructor-args/states-to-record.html","searchKeys":["statesToRecord","val statesToRecord: StatesToRecord","net.corda.core.flows.FinalityFlow.ExtraConstructorArgs.statesToRecord"]},{"name":"val statesToRecord: StatesToRecord","description":"net.corda.core.internal.ResolveTransactionsFlow.statesToRecord","location":"docs/net.corda.core.internal/-resolve-transactions-flow/states-to-record.html","searchKeys":["statesToRecord","val statesToRecord: StatesToRecord","net.corda.core.internal.ResolveTransactionsFlow.statesToRecord"]},{"name":"val status: TransactionStatus","description":"net.corda.core.flows.FlowTransactionInfo.status","location":"docs/net.corda.core.flows/-flow-transaction-info/status.html","searchKeys":["status","val status: TransactionStatus","net.corda.core.flows.FlowTransactionInfo.status"]},{"name":"val status: TransactionStatus","description":"net.corda.core.node.services.SignedTransactionWithStatus.status","location":"docs/net.corda.core.node.services/-signed-transaction-with-status/status.html","searchKeys":["status","val status: TransactionStatus","net.corda.core.node.services.SignedTransactionWithStatus.status"]},{"name":"val status: Vault.StateStatus","description":"net.corda.core.node.services.Vault.StateMetadata.status","location":"docs/net.corda.core.node.services/-vault/-state-metadata/status.html","searchKeys":["status","val status: Vault.StateStatus","net.corda.core.node.services.Vault.StateMetadata.status"]},{"name":"val steps: <Error class: unknown class>","description":"net.corda.core.utilities.ProgressTracker.steps","location":"docs/net.corda.core.utilities/-progress-tracker/steps.html","searchKeys":["steps","val steps: <Error class: unknown class>","net.corda.core.utilities.ProgressTracker.steps"]},{"name":"val stepsTreeChanges: <Error class: unknown class><List<<Error class: unknown class><Int, String>>>","description":"net.corda.core.utilities.ProgressTracker.stepsTreeChanges","location":"docs/net.corda.core.utilities/-progress-tracker/steps-tree-changes.html","searchKeys":["stepsTreeChanges","val stepsTreeChanges: <Error class: unknown class><List<<Error class: unknown class><Int, String>>>","net.corda.core.utilities.ProgressTracker.stepsTreeChanges"]},{"name":"val stepsTreeIndexChanges: <Error class: unknown class><Int>","description":"net.corda.core.utilities.ProgressTracker.stepsTreeIndexChanges","location":"docs/net.corda.core.utilities/-progress-tracker/steps-tree-index-changes.html","searchKeys":["stepsTreeIndexChanges","val stepsTreeIndexChanges: <Error class: unknown class><Int>","net.corda.core.utilities.ProgressTracker.stepsTreeIndexChanges"]},{"name":"val stx: SignedTransaction","description":"net.corda.core.flows.AbstractStateReplacementFlow.UpgradeTx.stx","location":"docs/net.corda.core.flows/-abstract-state-replacement-flow/-upgrade-tx/stx.html","searchKeys":["stx","val stx: SignedTransaction","net.corda.core.flows.AbstractStateReplacementFlow.UpgradeTx.stx"]},{"name":"val stx: SignedTransaction","description":"net.corda.core.flows.SendTransactionFlow.stx","location":"docs/net.corda.core.flows/-send-transaction-flow/stx.html","searchKeys":["stx","val stx: SignedTransaction","net.corda.core.flows.SendTransactionFlow.stx"]},{"name":"val stx: SignedTransaction","description":"net.corda.core.flows.SignedTransactionWithDistributionList.stx","location":"docs/net.corda.core.flows/-signed-transaction-with-distribution-list/stx.html","searchKeys":["stx","val stx: SignedTransaction","net.corda.core.flows.SignedTransactionWithDistributionList.stx"]},{"name":"val stx: SignedTransaction","description":"net.corda.core.node.services.SignedTransactionWithStatus.stx","location":"docs/net.corda.core.node.services/-signed-transaction-with-status/stx.html","searchKeys":["stx","val stx: SignedTransaction","net.corda.core.node.services.SignedTransactionWithStatus.stx"]},{"name":"val stx: SignedTransaction","description":"net.corda.finance.flows.AbstractCashFlow.Result.stx","location":"docs/net.corda.finance.flows/-abstract-cash-flow/-result/stx.html","searchKeys":["stx","val stx: SignedTransaction","net.corda.finance.flows.AbstractCashFlow.Result.stx"]},{"name":"val sunEcProvider: <Error class: unknown class>","description":"net.corda.core.crypto.internal.sunEcProvider","location":"docs/net.corda.core.crypto.internal/sun-ec-provider.html","searchKeys":["sunEcProvider","val sunEcProvider: <Error class: unknown class>","net.corda.core.crypto.internal.sunEcProvider"]},{"name":"val supportedCurrencies: <Error class: unknown class>","description":"net.corda.finance.internal.ConfigHolder.Companion.supportedCurrencies","location":"docs/net.corda.finance.internal/-config-holder/-companion/supported-currencies.html","searchKeys":["supportedCurrencies","val supportedCurrencies: <Error class: unknown class>","net.corda.finance.internal.ConfigHolder.Companion.supportedCurrencies"]},{"name":"val supportedCurrencies: List<Currency>","description":"net.corda.finance.internal.CashConfiguration.supportedCurrencies","location":"docs/net.corda.finance.internal/-cash-configuration/supported-currencies.html","searchKeys":["supportedCurrencies","val supportedCurrencies: List<Currency>","net.corda.finance.internal.CashConfiguration.supportedCurrencies"]},{"name":"val systemProperties: Map<String, String>","description":"net.corda.testing.driver.DriverParameters.systemProperties","location":"docs/net.corda.testing.driver/-driver-parameters/system-properties.html","searchKeys":["systemProperties","val systemProperties: Map<String, String>","net.corda.testing.driver.DriverParameters.systemProperties"]},{"name":"val systemProperties: Map<String, String>","description":"net.corda.testing.driver.NodeParameters.systemProperties","location":"docs/net.corda.testing.driver/-node-parameters/system-properties.html","searchKeys":["systemProperties","val systemProperties: Map<String, String>","net.corda.testing.driver.NodeParameters.systemProperties"]},{"name":"val systemProperties: Map<String, String>","description":"net.corda.testing.node.internal.DriverDSLImpl.systemProperties","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/system-properties.html","searchKeys":["systemProperties","val systemProperties: Map<String, String>","net.corda.testing.node.internal.DriverDSLImpl.systemProperties"]},{"name":"val targetPlatformVersion: Int","description":"net.corda.core.cordapp.CordappInfo.targetPlatformVersion","location":"docs/net.corda.core.cordapp/-cordapp-info/target-platform-version.html","searchKeys":["targetPlatformVersion","val targetPlatformVersion: Int","net.corda.core.cordapp.CordappInfo.targetPlatformVersion"]},{"name":"val targetPlatformVersion: Int","description":"net.corda.testing.node.internal.CustomCordapp.targetPlatformVersion","location":"docs/net.corda.testing.node.internal/-custom-cordapp/target-platform-version.html","searchKeys":["targetPlatformVersion","val targetPlatformVersion: Int","net.corda.testing.node.internal.CustomCordapp.targetPlatformVersion"]},{"name":"val telemetryDataItem: TelemetryDataItem?","description":"net.corda.core.internal.telemetry.StartSpanForFlowEvent.telemetryDataItem","location":"docs/net.corda.core.internal.telemetry/-start-span-for-flow-event/telemetry-data-item.html","searchKeys":["telemetryDataItem","val telemetryDataItem: TelemetryDataItem?","net.corda.core.internal.telemetry.StartSpanForFlowEvent.telemetryDataItem"]},{"name":"val telemetryId: UUID","description":"net.corda.core.internal.telemetry.EndSpanEvent.telemetryId","location":"docs/net.corda.core.internal.telemetry/-end-span-event/telemetry-id.html","searchKeys":["telemetryId","val telemetryId: UUID","net.corda.core.internal.telemetry.EndSpanEvent.telemetryId"]},{"name":"val telemetryId: UUID","description":"net.corda.core.internal.telemetry.EndSpanForFlowEvent.telemetryId","location":"docs/net.corda.core.internal.telemetry/-end-span-for-flow-event/telemetry-id.html","searchKeys":["telemetryId","val telemetryId: UUID","net.corda.core.internal.telemetry.EndSpanForFlowEvent.telemetryId"]},{"name":"val telemetryId: UUID","description":"net.corda.core.internal.telemetry.RecordExceptionEvent.telemetryId","location":"docs/net.corda.core.internal.telemetry/-record-exception-event/telemetry-id.html","searchKeys":["telemetryId","val telemetryId: UUID","net.corda.core.internal.telemetry.RecordExceptionEvent.telemetryId"]},{"name":"val telemetryId: UUID","description":"net.corda.core.internal.telemetry.SetStatusEvent.telemetryId","location":"docs/net.corda.core.internal.telemetry/-set-status-event/telemetry-id.html","searchKeys":["telemetryId","val telemetryId: UUID","net.corda.core.internal.telemetry.SetStatusEvent.telemetryId"]},{"name":"val telemetryId: UUID","description":"net.corda.core.internal.telemetry.StartSpanEvent.telemetryId","location":"docs/net.corda.core.internal.telemetry/-start-span-event/telemetry-id.html","searchKeys":["telemetryId","val telemetryId: UUID","net.corda.core.internal.telemetry.StartSpanEvent.telemetryId"]},{"name":"val telemetryId: UUID","description":"net.corda.core.internal.telemetry.StartSpanForFlowEvent.telemetryId","location":"docs/net.corda.core.internal.telemetry/-start-span-for-flow-event/telemetry-id.html","searchKeys":["telemetryId","val telemetryId: UUID","net.corda.core.internal.telemetry.StartSpanForFlowEvent.telemetryId"]},{"name":"val telemetryService: TelemetryServiceImpl","description":"net.corda.client.rpc.internal.RPCClientTelemetry.telemetryService","location":"docs/net.corda.client.rpc.internal/-r-p-c-client-telemetry/telemetry-service.html","searchKeys":["telemetryService","val telemetryService: TelemetryServiceImpl","net.corda.client.rpc.internal.RPCClientTelemetry.telemetryService"]},{"name":"val telemetryStatusCode: TelemetryStatusCode","description":"net.corda.core.internal.telemetry.SetStatusEvent.telemetryStatusCode","location":"docs/net.corda.core.internal.telemetry/-set-status-event/telemetry-status-code.html","searchKeys":["telemetryStatusCode","val telemetryStatusCode: TelemetryStatusCode","net.corda.core.internal.telemetry.SetStatusEvent.telemetryStatusCode"]},{"name":"val tempFolder: <Error class: unknown class>","description":"net.corda.testing.node.internal.NodeBasedTest.tempFolder","location":"docs/net.corda.testing.node.internal/-node-based-test/temp-folder.html","searchKeys":["tempFolder","val tempFolder: <Error class: unknown class>","net.corda.testing.node.internal.NodeBasedTest.tempFolder"]},{"name":"val template: Obligation.Terms<P>","description":"net.corda.finance.contracts.asset.Obligation.State.template","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/template.html","searchKeys":["template","val template: Obligation.Terms<P>","net.corda.finance.contracts.asset.Obligation.State.template"]},{"name":"val testDirectory: Path","description":"net.corda.testing.node.internal.InternalMockNetwork.testDirectory","location":"docs/net.corda.testing.node.internal/-internal-mock-network/test-directory.html","searchKeys":["testDirectory","val testDirectory: Path","net.corda.testing.node.internal.InternalMockNetwork.testDirectory"]},{"name":"val testSerialization: <Error class: unknown class>","description":"net.corda.testing.node.internal.NodeBasedTest.testSerialization","location":"docs/net.corda.testing.node.internal/-node-based-test/test-serialization.html","searchKeys":["testSerialization","val testSerialization: <Error class: unknown class>","net.corda.testing.node.internal.NodeBasedTest.testSerialization"]},{"name":"val threadPerNode: Boolean","description":"net.corda.testing.node.MockNetwork.threadPerNode","location":"docs/net.corda.testing.node/-mock-network/thread-per-node.html","searchKeys":["threadPerNode","val threadPerNode: Boolean","net.corda.testing.node.MockNetwork.threadPerNode"]},{"name":"val threadPerNode: Boolean","description":"net.corda.testing.node.internal.InternalMockNetwork.threadPerNode","location":"docs/net.corda.testing.node.internal/-internal-mock-network/thread-per-node.html","searchKeys":["threadPerNode","val threadPerNode: Boolean","net.corda.testing.node.internal.InternalMockNetwork.threadPerNode"]},{"name":"val threadPerNode: Boolean = false","description":"net.corda.testing.node.MockNetworkParameters.threadPerNode","location":"docs/net.corda.testing.node/-mock-network-parameters/thread-per-node.html","searchKeys":["threadPerNode","val threadPerNode: Boolean = false","net.corda.testing.node.MockNetworkParameters.threadPerNode"]},{"name":"val threshold: Int","description":"net.corda.core.crypto.CompositeKey.threshold","location":"docs/net.corda.core.crypto/-composite-key/threshold.html","searchKeys":["threshold","val threshold: Int","net.corda.core.crypto.CompositeKey.threshold"]},{"name":"val throwable: Throwable","description":"net.corda.core.internal.telemetry.RecordExceptionEvent.throwable","location":"docs/net.corda.core.internal.telemetry/-record-exception-event/throwable.html","searchKeys":["throwable","val throwable: Throwable","net.corda.core.internal.telemetry.RecordExceptionEvent.throwable"]},{"name":"val time: Instant","description":"net.corda.core.flows.FlowStackSnapshot.time","location":"docs/net.corda.core.flows/-flow-stack-snapshot/time.html","searchKeys":["time","val time: Instant","net.corda.core.flows.FlowStackSnapshot.time"]},{"name":"val timeCondition: QueryCriteria.TimeCondition? = null","description":"net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.timeCondition","location":"docs/net.corda.core.node.services.vault/-query-criteria/-vault-query-criteria/time-condition.html","searchKeys":["timeCondition","val timeCondition: QueryCriteria.TimeCondition? = null","net.corda.core.node.services.vault.QueryCriteria.VaultQueryCriteria.timeCondition"]},{"name":"val timeTolerance: Duration","description":"net.corda.finance.contracts.asset.Obligation.Terms.timeTolerance","location":"docs/net.corda.finance.contracts.asset/-obligation/-terms/time-tolerance.html","searchKeys":["timeTolerance","val timeTolerance: Duration","net.corda.finance.contracts.asset.Obligation.Terms.timeTolerance"]},{"name":"val timeWindow: RecoveryTimeWindow? = null","description":"net.corda.core.flows.LedgerRecoveryParameters.timeWindow","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/time-window.html","searchKeys":["timeWindow","val timeWindow: RecoveryTimeWindow? = null","net.corda.core.flows.LedgerRecoveryParameters.timeWindow"]},{"name":"val timeWindow: TimeWindow?","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.timeWindow","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/time-window.html","searchKeys":["timeWindow","val timeWindow: TimeWindow?","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.timeWindow"]},{"name":"val timeWindow: TimeWindow?","description":"net.corda.core.transactions.LedgerTransaction.timeWindow","location":"docs/net.corda.core.transactions/-ledger-transaction/time-window.html","searchKeys":["timeWindow","val timeWindow: TimeWindow?","net.corda.core.transactions.LedgerTransaction.timeWindow"]},{"name":"val timeWindow: TimeWindow?","description":"net.corda.core.transactions.TraversableTransaction.timeWindow","location":"docs/net.corda.core.transactions/-traversable-transaction/time-window.html","searchKeys":["timeWindow","val timeWindow: TimeWindow?","net.corda.core.transactions.TraversableTransaction.timeWindow"]},{"name":"val timeframe: FlowTimeWindow? = null","description":"net.corda.core.flows.FlowRecoveryQuery.timeframe","location":"docs/net.corda.core.flows/-flow-recovery-query/timeframe.html","searchKeys":["timeframe","val timeframe: FlowTimeWindow? = null","net.corda.core.flows.FlowRecoveryQuery.timeframe"]},{"name":"val timeout: Duration","description":"net.corda.testing.node.MockNetFlowTimeOut.timeout","location":"docs/net.corda.testing.node/-mock-net-flow-time-out/timeout.html","searchKeys":["timeout","val timeout: Duration","net.corda.testing.node.MockNetFlowTimeOut.timeout"]},{"name":"val timestamp: Instant","description":"net.corda.core.flows.DistributionRecordKey.timestamp","location":"docs/net.corda.core.flows/-distribution-record-key/timestamp.html","searchKeys":["timestamp","val timestamp: Instant","net.corda.core.flows.DistributionRecordKey.timestamp"]},{"name":"val timestamp: Instant","description":"net.corda.core.flows.FlowTransactionInfo.timestamp","location":"docs/net.corda.core.flows/-flow-transaction-info/timestamp.html","searchKeys":["timestamp","val timestamp: Instant","net.corda.core.flows.FlowTransactionInfo.timestamp"]},{"name":"val timestamp: Instant","description":"net.corda.core.utilities.Id.timestamp","location":"docs/net.corda.core.utilities/-id/timestamp.html","searchKeys":["timestamp","val timestamp: Instant","net.corda.core.utilities.Id.timestamp"]},{"name":"val timestampDiscriminator: Int","description":"net.corda.core.flows.DistributionRecordKey.timestampDiscriminator","location":"docs/net.corda.core.flows/-distribution-record-key/timestamp-discriminator.html","searchKeys":["timestampDiscriminator","val timestampDiscriminator: Int","net.corda.core.flows.DistributionRecordKey.timestampDiscriminator"]},{"name":"val to: String","description":"net.corda.core.serialization.CordaSerializationTransformRename.to","location":"docs/net.corda.core.serialization/-corda-serialization-transform-rename/to.html","searchKeys":["to","val to: String","net.corda.core.serialization.CordaSerializationTransformRename.to"]},{"name":"val token: T","description":"net.corda.core.contracts.Amount.token","location":"docs/net.corda.core.contracts/-amount/token.html","searchKeys":["token","val token: T","net.corda.core.contracts.Amount.token"]},{"name":"val token: T","description":"net.corda.core.contracts.AmountTransfer.token","location":"docs/net.corda.core.contracts/-amount-transfer/token.html","searchKeys":["token","val token: T","net.corda.core.contracts.AmountTransfer.token"]},{"name":"val topLevelTracker: ProgressTracker","description":"net.corda.core.utilities.ProgressTracker.topLevelTracker","location":"docs/net.corda.core.utilities/-progress-tracker/top-level-tracker.html","searchKeys":["topLevelTracker","val topLevelTracker: ProgressTracker","net.corda.core.utilities.ProgressTracker.topLevelTracker"]},{"name":"val totalErrors: Long","description":"net.corda.core.flows.LedgerRecoveryResult.totalErrors","location":"docs/net.corda.core.flows/-ledger-recovery-result/total-errors.html","searchKeys":["totalErrors","val totalErrors: Long","net.corda.core.flows.LedgerRecoveryResult.totalErrors"]},{"name":"val totalRecoveredInFlightTransactions: Long","description":"net.corda.core.flows.LedgerRecoveryResult.totalRecoveredInFlightTransactions","location":"docs/net.corda.core.flows/-ledger-recovery-result/total-recovered-in-flight-transactions.html","searchKeys":["totalRecoveredInFlightTransactions","val totalRecoveredInFlightTransactions: Long","net.corda.core.flows.LedgerRecoveryResult.totalRecoveredInFlightTransactions"]},{"name":"val totalRecoveredRecords: Long","description":"net.corda.core.flows.LedgerRecoveryResult.totalRecoveredRecords","location":"docs/net.corda.core.flows/-ledger-recovery-result/total-recovered-records.html","searchKeys":["totalRecoveredRecords","val totalRecoveredRecords: Long","net.corda.core.flows.LedgerRecoveryResult.totalRecoveredRecords"]},{"name":"val totalRecoveredTransactions: Long","description":"net.corda.core.flows.LedgerRecoveryResult.totalRecoveredTransactions","location":"docs/net.corda.core.flows/-ledger-recovery-result/total-recovered-transactions.html","searchKeys":["totalRecoveredTransactions","val totalRecoveredTransactions: Long","net.corda.core.flows.LedgerRecoveryResult.totalRecoveredTransactions"]},{"name":"val totalStatesAvailable: Long","description":"net.corda.core.node.services.Vault.Page.totalStatesAvailable","location":"docs/net.corda.core.node.services/-vault/-page/total-states-available.html","searchKeys":["totalStatesAvailable","val totalStatesAvailable: Long","net.corda.core.node.services.Vault.Page.totalStatesAvailable"]},{"name":"val trace: Trace","description":"net.corda.core.context.InvocationContext.trace","location":"docs/net.corda.core.context/-invocation-context/trace.html","searchKeys":["trace","val trace: Trace","net.corda.core.context.InvocationContext.trace"]},{"name":"val traceId: UUID","description":"net.corda.core.internal.telemetry.SimpleLogContext.traceId","location":"docs/net.corda.core.internal.telemetry/-simple-log-context/trace-id.html","searchKeys":["traceId","val traceId: UUID","net.corda.core.internal.telemetry.SimpleLogContext.traceId"]},{"name":"val tracker: ProgressTracker","description":"net.corda.core.utilities.ProgressTracker.Change.Position.tracker","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-position/tracker.html","searchKeys":["tracker","val tracker: ProgressTracker","net.corda.core.utilities.ProgressTracker.Change.Position.tracker"]},{"name":"val tracker: ProgressTracker","description":"net.corda.core.utilities.ProgressTracker.Change.Rendering.tracker","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-rendering/tracker.html","searchKeys":["tracker","val tracker: ProgressTracker","net.corda.core.utilities.ProgressTracker.Change.Rendering.tracker"]},{"name":"val tracker: ProgressTracker","description":"net.corda.core.utilities.ProgressTracker.Change.Structural.tracker","location":"docs/net.corda.core.utilities/-progress-tracker/-change/-structural/tracker.html","searchKeys":["tracker","val tracker: ProgressTracker","net.corda.core.utilities.ProgressTracker.Change.Structural.tracker"]},{"name":"val transaction: Any","description":"net.corda.core.flows.NotarisationPayload.transaction","location":"docs/net.corda.core.flows/-notarisation-payload/transaction.html","searchKeys":["transaction","val transaction: Any","net.corda.core.flows.NotarisationPayload.transaction"]},{"name":"val transaction: SignedTransaction","description":"net.corda.core.flows.FinalityFlow.transaction","location":"docs/net.corda.core.flows/-finality-flow/transaction.html","searchKeys":["transaction","val transaction: SignedTransaction","net.corda.core.flows.FinalityFlow.transaction"]},{"name":"val transactionBuilder: TransactionBuilder","description":"net.corda.testing.dsl.TestTransactionDSLInterpreter.transactionBuilder","location":"docs/net.corda.testing.dsl/-test-transaction-d-s-l-interpreter/transaction-builder.html","searchKeys":["transactionBuilder","val transactionBuilder: TransactionBuilder","net.corda.testing.dsl.TestTransactionDSLInterpreter.transactionBuilder"]},{"name":"val transactionId: SecureHash","description":"net.corda.core.flows.NotarisationRequest.transactionId","location":"docs/net.corda.core.flows/-notarisation-request/transaction-id.html","searchKeys":["transactionId","val transactionId: SecureHash","net.corda.core.flows.NotarisationRequest.transactionId"]},{"name":"val transactionId: SecureHash","description":"net.corda.core.messaging.StateMachineTransactionMapping.transactionId","location":"docs/net.corda.core.messaging/-state-machine-transaction-mapping/transaction-id.html","searchKeys":["transactionId","val transactionId: SecureHash","net.corda.core.messaging.StateMachineTransactionMapping.transactionId"]},{"name":"val transactionsToVerify: List<WireTransaction>","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.transactionsToVerify","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/transactions-to-verify.html","searchKeys":["transactionsToVerify","val transactionsToVerify: List<WireTransaction>","net.corda.testing.dsl.TestLedgerDSLInterpreter.transactionsToVerify"]},{"name":"val transactionsUnverified: List<WireTransaction>","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.transactionsUnverified","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/transactions-unverified.html","searchKeys":["transactionsUnverified","val transactionsUnverified: List<WireTransaction>","net.corda.testing.dsl.TestLedgerDSLInterpreter.transactionsUnverified"]},{"name":"val transform: (T, Int) -> U","description":"net.corda.core.internal.LazyMappedList.transform","location":"docs/net.corda.core.internal/-lazy-mapped-list/transform.html","searchKeys":["transform","val transform: (T, Int) -> U","net.corda.core.internal.LazyMappedList.transform"]},{"name":"val trustRootFileName: String?","description":"net.corda.core.internal.AttachmentTrustInfo.trustRootFileName","location":"docs/net.corda.core.internal/-attachment-trust-info/trust-root-file-name.html","searchKeys":["trustRootFileName","val trustRootFileName: String?","net.corda.core.internal.AttachmentTrustInfo.trustRootFileName"]},{"name":"val trustRootId: AttachmentId?","description":"net.corda.core.internal.AttachmentTrustInfo.trustRootId","location":"docs/net.corda.core.internal/-attachment-trust-info/trust-root-id.html","searchKeys":["trustRootId","val trustRootId: AttachmentId?","net.corda.core.internal.AttachmentTrustInfo.trustRootId"]},{"name":"val trustStorePassword: String","description":"net.corda.core.messaging.ClientRpcSslOptions.trustStorePassword","location":"docs/net.corda.core.messaging/-client-rpc-ssl-options/trust-store-password.html","searchKeys":["trustStorePassword","val trustStorePassword: String","net.corda.core.messaging.ClientRpcSslOptions.trustStorePassword"]},{"name":"val trustStorePath: Path","description":"net.corda.core.messaging.ClientRpcSslOptions.trustStorePath","location":"docs/net.corda.core.messaging/-client-rpc-ssl-options/trust-store-path.html","searchKeys":["trustStorePath","val trustStorePath: Path","net.corda.core.messaging.ClientRpcSslOptions.trustStorePath"]},{"name":"val trustStoreProvider: String","description":"net.corda.core.messaging.ClientRpcSslOptions.trustStoreProvider","location":"docs/net.corda.core.messaging/-client-rpc-ssl-options/trust-store-provider.html","searchKeys":["trustStoreProvider","val trustStoreProvider: String","net.corda.core.messaging.ClientRpcSslOptions.trustStoreProvider"]},{"name":"val tx: TransactionBuilder","description":"net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx.tx","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-buyer/-shared-tx/tx.html","searchKeys":["tx","val tx: TransactionBuilder","net.corda.finance.flows.TwoPartyTradeFlow.Buyer.SharedTx.tx"]},{"name":"val tx: WireTransaction","description":"net.corda.core.transactions.SignedTransaction.tx","location":"docs/net.corda.core.transactions/-signed-transaction/tx.html","searchKeys":["tx","val tx: WireTransaction","net.corda.core.transactions.SignedTransaction.tx"]},{"name":"val txBits: SerializedBytes<CoreTransaction>","description":"net.corda.core.transactions.SignedTransaction.txBits","location":"docs/net.corda.core.transactions/-signed-transaction/tx-bits.html","searchKeys":["txBits","val txBits: SerializedBytes<CoreTransaction>","net.corda.core.transactions.SignedTransaction.txBits"]},{"name":"val txHashes: Set<SecureHash>","description":"net.corda.core.internal.ResolveTransactionsFlow.txHashes","location":"docs/net.corda.core.internal/-resolve-transactions-flow/tx-hashes.html","searchKeys":["txHashes","val txHashes: Set<SecureHash>","net.corda.core.internal.ResolveTransactionsFlow.txHashes"]},{"name":"val txId: SecureHash","description":"net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException.txId","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-untrusted-attachments-exception/tx-id.html","searchKeys":["txId","val txId: SecureHash","net.corda.core.contracts.TransactionVerificationException.UntrustedAttachmentsException.txId"]},{"name":"val txId: SecureHash","description":"net.corda.core.contracts.TransactionVerificationException.txId","location":"docs/net.corda.core.contracts/-transaction-verification-exception/tx-id.html","searchKeys":["txId","val txId: SecureHash","net.corda.core.contracts.TransactionVerificationException.txId"]},{"name":"val txId: SecureHash","description":"net.corda.core.crypto.SignableData.txId","location":"docs/net.corda.core.crypto/-signable-data/tx-id.html","searchKeys":["txId","val txId: SecureHash","net.corda.core.crypto.SignableData.txId"]},{"name":"val txId: SecureHash","description":"net.corda.core.flows.NotaryError.Conflict.txId","location":"docs/net.corda.core.flows/-notary-error/-conflict/tx-id.html","searchKeys":["txId","val txId: SecureHash","net.corda.core.flows.NotaryError.Conflict.txId"]},{"name":"val txId: SecureHash","description":"net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.txId","location":"docs/net.corda.core.internal.notary/-single-party-notary-service/-commit-operation/tx-id.html","searchKeys":["txId","val txId: SecureHash","net.corda.core.internal.notary.SinglePartyNotaryService.CommitOperation.txId"]},{"name":"val txId: SecureHash? = null","description":"net.corda.core.flows.NotaryException.txId","location":"docs/net.corda.core.flows/-notary-exception/tx-id.html","searchKeys":["txId","val txId: SecureHash? = null","net.corda.core.flows.NotaryException.txId"]},{"name":"val txId: String","description":"net.corda.core.flows.FlowTransactionInfo.txId","location":"docs/net.corda.core.flows/-flow-transaction-info/tx-id.html","searchKeys":["txId","val txId: String","net.corda.core.flows.FlowTransactionInfo.txId"]},{"name":"val txIds: Collection<SecureHash>","description":"net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.txIds","location":"docs/net.corda.core.flows/-finality-recovery-flow/-extra-constructor-args/tx-ids.html","searchKeys":["txIds","val txIds: Collection<SecureHash>","net.corda.core.flows.FinalityRecoveryFlow.ExtraConstructorArgs.txIds"]},{"name":"val txNotary: Party","description":"net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType.txNotary","location":"docs/net.corda.core.contracts/-transaction-verification-exception/-notary-change-in-wrong-transaction-type/tx-notary.html","searchKeys":["txNotary","val txNotary: Party","net.corda.core.contracts.TransactionVerificationException.NotaryChangeInWrongTransactionType.txNotary"]},{"name":"val txTimeWindow: TimeWindow","description":"net.corda.core.flows.NotaryError.TimeWindowInvalid.txTimeWindow","location":"docs/net.corda.core.flows/-notary-error/-time-window-invalid/tx-time-window.html","searchKeys":["txTimeWindow","val txTimeWindow: TimeWindow","net.corda.core.flows.NotaryError.TimeWindowInvalid.txTimeWindow"]},{"name":"val txhash: SecureHash","description":"net.corda.core.contracts.StateRef.txhash","location":"docs/net.corda.core.contracts/-state-ref/txhash.html","searchKeys":["txhash","val txhash: SecureHash","net.corda.core.contracts.StateRef.txhash"]},{"name":"val txnId: SecureHash","description":"net.corda.core.flows.DistributionRecordKey.txnId","location":"docs/net.corda.core.flows/-distribution-record-key/txn-id.html","searchKeys":["txnId","val txnId: SecureHash","net.corda.core.flows.DistributionRecordKey.txnId"]},{"name":"val type: AggregateFunctionType","description":"net.corda.core.node.services.vault.ColumnPredicate.AggregateFunction.type","location":"docs/net.corda.core.node.services.vault/-column-predicate/-aggregate-function/type.html","searchKeys":["type","val type: AggregateFunctionType","net.corda.core.node.services.vault.ColumnPredicate.AggregateFunction.type"]},{"name":"val type: QueryCriteria.SoftLockingType","description":"net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition.type","location":"docs/net.corda.core.node.services.vault/-query-criteria/-soft-locking-condition/type.html","searchKeys":["type","val type: QueryCriteria.SoftLockingType","net.corda.core.node.services.vault.QueryCriteria.SoftLockingCondition.type"]},{"name":"val type: QueryCriteria.TimeInstantType","description":"net.corda.core.node.services.vault.QueryCriteria.TimeCondition.type","location":"docs/net.corda.core.node.services.vault/-query-criteria/-time-condition/type.html","searchKeys":["type","val type: QueryCriteria.TimeInstantType","net.corda.core.node.services.vault.QueryCriteria.TimeCondition.type"]},{"name":"val type: StateConsumptionDetails.ConsumedStateType","description":"net.corda.core.flows.StateConsumptionDetails.type","location":"docs/net.corda.core.flows/-state-consumption-details/type.html","searchKeys":["type","val type: StateConsumptionDetails.ConsumedStateType","net.corda.core.flows.StateConsumptionDetails.type"]},{"name":"val type: String","description":"net.corda.core.cordapp.CordappInfo.type","location":"docs/net.corda.core.cordapp/-cordapp-info/type.html","searchKeys":["type","val type: String","net.corda.core.cordapp.CordappInfo.type"]},{"name":"val type: String","description":"net.corda.core.flows.IllegalFlowLogicException.type","location":"docs/net.corda.core.flows/-illegal-flow-logic-exception/type.html","searchKeys":["type","val type: String","net.corda.core.flows.IllegalFlowLogicException.type"]},{"name":"val type: Vault.UpdateType","description":"net.corda.core.node.services.Vault.Update.type","location":"docs/net.corda.core.node.services/-vault/-update/type.html","searchKeys":["type","val type: Vault.UpdateType","net.corda.core.node.services.Vault.Update.type"]},{"name":"val typeDescriptor: String?","description":"net.corda.core.serialization.internal.MissingSerializerException.typeDescriptor","location":"docs/net.corda.core.serialization.internal/-missing-serializer-exception/type-descriptor.html","searchKeys":["typeDescriptor","val typeDescriptor: String?","net.corda.core.serialization.internal.MissingSerializerException.typeDescriptor"]},{"name":"val typeName: String","description":"net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.typeName","location":"docs/net.corda.finance.flows/-two-party-trade-flow/-asset-mismatch-exception/type-name.html","searchKeys":["typeName","val typeName: String","net.corda.finance.flows.TwoPartyTradeFlow.AssetMismatchException.typeName"]},{"name":"val typeNames: List<String>","description":"net.corda.core.serialization.internal.MissingSerializerException.typeNames","location":"docs/net.corda.core.serialization.internal/-missing-serializer-exception/type-names.html","searchKeys":["typeNames","val typeNames: List<String>","net.corda.core.serialization.internal.MissingSerializerException.typeNames"]},{"name":"val uid: UniqueIdentifier","description":"net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState.uid","location":"docs/net.corda.testing.internal.vault/-dummy-deal-state-schema-v1/-persistent-dummy-deal-state/uid.html","searchKeys":["uid","val uid: UniqueIdentifier","net.corda.testing.internal.vault.DummyDealStateSchemaV1.PersistentDummyDealState.uid"]},{"name":"val uid: UniqueIdentifier","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.uid","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/uid.html","searchKeys":["uid","val uid: UniqueIdentifier","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.uid"]},{"name":"val untilTime: Instant","description":"net.corda.core.flows.ComparableRecoveryTimeWindow.untilTime","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/until-time.html","searchKeys":["untilTime","val untilTime: Instant","net.corda.core.flows.ComparableRecoveryTimeWindow.untilTime"]},{"name":"val untilTime: Instant","description":"net.corda.core.flows.RecoveryTimeWindow.untilTime","location":"docs/net.corda.core.flows/-recovery-time-window/until-time.html","searchKeys":["untilTime","val untilTime: Instant","net.corda.core.flows.RecoveryTimeWindow.untilTime"]},{"name":"val untilTime: Instant? = null","description":"net.corda.core.flows.FlowTimeWindow.untilTime","location":"docs/net.corda.core.flows/-flow-time-window/until-time.html","searchKeys":["untilTime","val untilTime: Instant? = null","net.corda.core.flows.FlowTimeWindow.untilTime"]},{"name":"val untilTimestampDiscriminator: Int","description":"net.corda.core.flows.ComparableRecoveryTimeWindow.untilTimestampDiscriminator","location":"docs/net.corda.core.flows/-comparable-recovery-time-window/until-timestamp-discriminator.html","searchKeys":["untilTimestampDiscriminator","val untilTimestampDiscriminator: Int","net.corda.core.flows.ComparableRecoveryTimeWindow.untilTimestampDiscriminator"]},{"name":"val updateDeadline: Instant","description":"net.corda.core.messaging.ParametersUpdateInfo.updateDeadline","location":"docs/net.corda.core.messaging/-parameters-update-info/update-deadline.html","searchKeys":["updateDeadline","val updateDeadline: Instant","net.corda.core.messaging.ParametersUpdateInfo.updateDeadline"]},{"name":"val updates: <Error class: unknown class><B>","description":"net.corda.core.messaging.DataFeed.updates","location":"docs/net.corda.core.messaging/-data-feed/updates.html","searchKeys":["updates","val updates: <Error class: unknown class><B>","net.corda.core.messaging.DataFeed.updates"]},{"name":"val upgradedContractAttachment: Attachment","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.upgradedContractAttachment","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/upgraded-contract-attachment.html","searchKeys":["upgradedContractAttachment","val upgradedContractAttachment: Attachment","net.corda.core.transactions.ContractUpgradeLedgerTransaction.upgradedContractAttachment"]},{"name":"val upgradedContractAttachmentId: SecureHash","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.upgradedContractAttachmentId","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/upgraded-contract-attachment-id.html","searchKeys":["upgradedContractAttachmentId","val upgradedContractAttachmentId: SecureHash","net.corda.core.internal.ContractUpgradeTransactionBuilder.upgradedContractAttachmentId"]},{"name":"val upgradedContractAttachmentId: SecureHash","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.upgradedContractAttachmentId","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/upgraded-contract-attachment-id.html","searchKeys":["upgradedContractAttachmentId","val upgradedContractAttachmentId: SecureHash","net.corda.core.transactions.ContractUpgradeWireTransaction.upgradedContractAttachmentId"]},{"name":"val upgradedContractClassName: ContractClassName","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.upgradedContractClassName","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/upgraded-contract-class-name.html","searchKeys":["upgradedContractClassName","val upgradedContractClassName: ContractClassName","net.corda.core.internal.ContractUpgradeTransactionBuilder.upgradedContractClassName"]},{"name":"val upgradedContractClassName: ContractClassName","description":"net.corda.core.transactions.ContractUpgradeLedgerTransaction.upgradedContractClassName","location":"docs/net.corda.core.transactions/-contract-upgrade-ledger-transaction/upgraded-contract-class-name.html","searchKeys":["upgradedContractClassName","val upgradedContractClassName: ContractClassName","net.corda.core.transactions.ContractUpgradeLedgerTransaction.upgradedContractClassName"]},{"name":"val upgradedContractClassName: ContractClassName","description":"net.corda.core.transactions.ContractUpgradeWireTransaction.upgradedContractClassName","location":"docs/net.corda.core.transactions/-contract-upgrade-wire-transaction/upgraded-contract-class-name.html","searchKeys":["upgradedContractClassName","val upgradedContractClassName: ContractClassName","net.corda.core.transactions.ContractUpgradeWireTransaction.upgradedContractClassName"]},{"name":"val uploadDateCondition: ColumnPredicate<Instant>? = null","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.uploadDateCondition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/upload-date-condition.html","searchKeys":["uploadDateCondition","val uploadDateCondition: ColumnPredicate<Instant>? = null","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.uploadDateCondition"]},{"name":"val uploader: String?","description":"net.corda.core.contracts.ContractAttachment.uploader","location":"docs/net.corda.core.contracts/-contract-attachment/uploader.html","searchKeys":["uploader","val uploader: String?","net.corda.core.contracts.ContractAttachment.uploader"]},{"name":"val uploader: String?","description":"net.corda.core.internal.AbstractAttachment.uploader","location":"docs/net.corda.core.internal/-abstract-attachment/uploader.html","searchKeys":["uploader","val uploader: String?","net.corda.core.internal.AbstractAttachment.uploader"]},{"name":"val uploader: String?","description":"net.corda.core.internal.AttachmentTrustInfo.uploader","location":"docs/net.corda.core.internal/-attachment-trust-info/uploader.html","searchKeys":["uploader","val uploader: String?","net.corda.core.internal.AttachmentTrustInfo.uploader"]},{"name":"val uploaderCondition: ColumnPredicate<String>? = null","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.uploaderCondition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/uploader-condition.html","searchKeys":["uploaderCondition","val uploaderCondition: ColumnPredicate<String>? = null","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.uploaderCondition"]},{"name":"val uri: String","description":"net.corda.core.contracts.LegalProseReference.uri","location":"docs/net.corda.core.contracts/-legal-prose-reference/uri.html","searchKeys":["uri","val uri: String","net.corda.core.contracts.LegalProseReference.uri"]},{"name":"val uri: URI","description":"net.corda.testing.node.internal.UriTestCordapp.uri","location":"docs/net.corda.testing.node.internal/-uri-test-cordapp/uri.html","searchKeys":["uri","val uri: URI","net.corda.testing.node.internal.UriTestCordapp.uri"]},{"name":"val useAllNetworkNodes: Boolean = false","description":"net.corda.core.flows.LedgerRecoveryParameters.useAllNetworkNodes","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/use-all-network-nodes.html","searchKeys":["useAllNetworkNodes","val useAllNetworkNodes: Boolean = false","net.corda.core.flows.LedgerRecoveryParameters.useAllNetworkNodes"]},{"name":"val useTestClock: Boolean","description":"net.corda.testing.node.internal.DriverDSLImpl.useTestClock","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/use-test-clock.html","searchKeys":["useTestClock","val useTestClock: Boolean","net.corda.testing.node.internal.DriverDSLImpl.useTestClock"]},{"name":"val useTestClock: Boolean = false","description":"net.corda.testing.driver.DriverParameters.useTestClock","location":"docs/net.corda.testing.driver/-driver-parameters/use-test-clock.html","searchKeys":["useTestClock","val useTestClock: Boolean = false","net.corda.testing.driver.DriverParameters.useTestClock"]},{"name":"val useTimeWindowNarrowing: Boolean = true","description":"net.corda.core.flows.LedgerRecoveryParameters.useTimeWindowNarrowing","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/use-time-window-narrowing.html","searchKeys":["useTimeWindowNarrowing","val useTimeWindowNarrowing: Boolean = true","net.corda.core.flows.LedgerRecoveryParameters.useTimeWindowNarrowing"]},{"name":"val username: String","description":"net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.username","location":"docs/net.corda.client.rpc.internal/-reconnecting-corda-r-p-c-ops/-reconnecting-r-p-c-connection/username.html","searchKeys":["username","val username: String","net.corda.client.rpc.internal.ReconnectingCordaRPCOps.ReconnectingRPCConnection.username"]},{"name":"val username: String","description":"net.corda.core.flows.FlowInitiator.RPC.username","location":"docs/net.corda.core.flows/-flow-initiator/-r-p-c/username.html","searchKeys":["username","val username: String","net.corda.core.flows.FlowInitiator.RPC.username"]},{"name":"val username: String","description":"net.corda.testing.node.User.username","location":"docs/net.corda.testing.node/-user/username.html","searchKeys":["username","val username: String","net.corda.testing.node.User.username"]},{"name":"val uuid: List<UUID>? = null","description":"net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.uuid","location":"docs/net.corda.core.node.services.vault/-query-criteria/-linear-state-query-criteria/uuid.html","searchKeys":["uuid","val uuid: List<UUID>? = null","net.corda.core.node.services.vault.QueryCriteria.LinearStateQueryCriteria.uuid"]},{"name":"val uuid: UUID","description":"net.corda.core.flows.StateMachineRunId.uuid","location":"docs/net.corda.core.flows/-state-machine-run-id/uuid.html","searchKeys":["uuid","val uuid: UUID","net.corda.core.flows.StateMachineRunId.uuid"]},{"name":"val validParents: NonEmptySet<CertRole?>","description":"net.corda.core.internal.CertRole.validParents","location":"docs/net.corda.core.internal/-cert-role/valid-parents.html","searchKeys":["validParents","val validParents: NonEmptySet<CertRole?>","net.corda.core.internal.CertRole.validParents"]},{"name":"val validating: Boolean","description":"net.corda.core.node.NotaryInfo.validating","location":"docs/net.corda.core.node/-notary-info/validating.html","searchKeys":["validating","val validating: Boolean","net.corda.core.node.NotaryInfo.validating"]},{"name":"val validating: Boolean","description":"net.corda.testing.driver.NotaryHandle.validating","location":"docs/net.corda.testing.driver/-notary-handle/validating.html","searchKeys":["validating","val validating: Boolean","net.corda.testing.driver.NotaryHandle.validating"]},{"name":"val validating: Boolean","description":"net.corda.testing.node.MockNetNotaryConfig.validating","location":"docs/net.corda.testing.node/-mock-net-notary-config/validating.html","searchKeys":["validating","val validating: Boolean","net.corda.testing.node.MockNetNotaryConfig.validating"]},{"name":"val validating: Boolean = true","description":"net.corda.testing.node.MockNetworkNotarySpec.validating","location":"docs/net.corda.testing.node/-mock-network-notary-spec/validating.html","searchKeys":["validating","val validating: Boolean = true","net.corda.testing.node.MockNetworkNotarySpec.validating"]},{"name":"val validating: Boolean = true","description":"net.corda.testing.node.NotarySpec.validating","location":"docs/net.corda.testing.node/-notary-spec/validating.html","searchKeys":["validating","val validating: Boolean = true","net.corda.testing.node.NotarySpec.validating"]},{"name":"val value: A","description":"net.corda.core.utilities.Try.Success.value","location":"docs/net.corda.core.utilities/-try/-success/value.html","searchKeys":["value","val value: A","net.corda.core.utilities.Try.Success.value"]},{"name":"val value: Array<out CordaSerializationTransformEnumDefault>","description":"net.corda.core.serialization.CordaSerializationTransformEnumDefaults.value","location":"docs/net.corda.core.serialization/-corda-serialization-transform-enum-defaults/value.html","searchKeys":["value","val value: Array<out CordaSerializationTransformEnumDefault>","net.corda.core.serialization.CordaSerializationTransformEnumDefaults.value"]},{"name":"val value: Array<out CordaSerializationTransformRename>","description":"net.corda.core.serialization.CordaSerializationTransformRenames.value","location":"docs/net.corda.core.serialization/-corda-serialization-transform-renames/value.html","searchKeys":["value","val value: Array<out CordaSerializationTransformRename>","net.corda.core.serialization.CordaSerializationTransformRenames.value"]},{"name":"val value: BigDecimal","description":"net.corda.finance.contracts.Fix.value","location":"docs/net.corda.finance.contracts/-fix/value.html","searchKeys":["value","val value: BigDecimal","net.corda.finance.contracts.Fix.value"]},{"name":"val value: BigInteger","description":"net.corda.core.crypto.internal.Curve25519.ModP.value","location":"docs/net.corda.core.crypto.internal/-curve25519/-mod-p/value.html","searchKeys":["value","val value: BigInteger","net.corda.core.crypto.internal.Curve25519.ModP.value"]},{"name":"val value: KClass<out Contract>","description":"net.corda.core.contracts.BelongsToContract.value","location":"docs/net.corda.core.contracts/-belongs-to-contract/value.html","searchKeys":["value","val value: KClass<out Contract>","net.corda.core.contracts.BelongsToContract.value"]},{"name":"val value: KClass<out FlowLogic<*>>","description":"net.corda.core.flows.InitiatedBy.value","location":"docs/net.corda.core.flows/-initiated-by/value.html","searchKeys":["value","val value: KClass<out FlowLogic<*>>","net.corda.core.flows.InitiatedBy.value"]},{"name":"val value: Long","description":"net.corda.finance.contracts.DateRollDirection.value","location":"docs/net.corda.finance.contracts/-date-roll-direction/value.html","searchKeys":["value","val value: Long","net.corda.finance.contracts.DateRollDirection.value"]},{"name":"val value: String","description":"net.corda.core.context.Actor.Id.value","location":"docs/net.corda.core.context/-actor/-id/value.html","searchKeys":["value","val value: String","net.corda.core.context.Actor.Id.value"]},{"name":"val value: String","description":"net.corda.core.context.AuthServiceId.value","location":"docs/net.corda.core.context/-auth-service-id/value.html","searchKeys":["value","val value: String","net.corda.core.context.AuthServiceId.value"]},{"name":"val value: T","description":"net.corda.core.contracts.Command.value","location":"docs/net.corda.core.contracts/-command/value.html","searchKeys":["value","val value: T","net.corda.core.contracts.Command.value"]},{"name":"val value: T","description":"net.corda.core.contracts.CommandWithParties.value","location":"docs/net.corda.core.contracts/-command-with-parties/value.html","searchKeys":["value","val value: T","net.corda.core.contracts.CommandWithParties.value"]},{"name":"val value: VALUE","description":"net.corda.core.utilities.Id.value","location":"docs/net.corda.core.utilities/-id/value.html","searchKeys":["value","val value: VALUE","net.corda.core.utilities.Id.value"]},{"name":"val vendor: String","description":"net.corda.core.cordapp.CordappInfo.vendor","location":"docs/net.corda.core.cordapp/-cordapp-info/vendor.html","searchKeys":["vendor","val vendor: String","net.corda.core.cordapp.CordappInfo.vendor"]},{"name":"val vendor: String","description":"net.corda.core.node.NodeDiagnosticInfo.vendor","location":"docs/net.corda.core.node/-node-diagnostic-info/vendor.html","searchKeys":["vendor","val vendor: String","net.corda.core.node.NodeDiagnosticInfo.vendor"]},{"name":"val vendor: String","description":"net.corda.core.node.services.diagnostics.NodeVersionInfo.vendor","location":"docs/net.corda.core.node.services.diagnostics/-node-version-info/vendor.html","searchKeys":["vendor","val vendor: String","net.corda.core.node.services.diagnostics.NodeVersionInfo.vendor"]},{"name":"val verboseLogging: Boolean = false","description":"net.corda.core.flows.LedgerRecoveryParameters.verboseLogging","location":"docs/net.corda.core.flows/-ledger-recovery-parameters/verbose-logging.html","searchKeys":["verboseLogging","val verboseLogging: Boolean = false","net.corda.core.flows.LedgerRecoveryParameters.verboseLogging"]},{"name":"val verifier: IternabilityVerifier<T>","description":"net.corda.core.internal.utilities.PrivateInterner.verifier","location":"docs/net.corda.core.internal.utilities/-private-interner/verifier.html","searchKeys":["verifier","val verifier: IternabilityVerifier<T>","net.corda.core.internal.utilities.PrivateInterner.verifier"]},{"name":"val verifierType: VerifierType","description":"net.corda.testing.driver.NodeParameters.verifierType","location":"docs/net.corda.testing.driver/-node-parameters/verifier-type.html","searchKeys":["verifierType","val verifierType: VerifierType","net.corda.testing.driver.NodeParameters.verifierType"]},{"name":"val verifierType: VerifierType","description":"net.corda.testing.node.NotarySpec.verifierType","location":"docs/net.corda.testing.node/-notary-spec/verifier-type.html","searchKeys":["verifierType","val verifierType: VerifierType","net.corda.testing.node.NotarySpec.verifierType"]},{"name":"val verifyKey: CompositeKey","description":"net.corda.core.crypto.CompositeSignature.State.verifyKey","location":"docs/net.corda.core.crypto/-composite-signature/-state/verify-key.html","searchKeys":["verifyKey","val verifyKey: CompositeKey","net.corda.core.crypto.CompositeSignature.State.verifyKey"]},{"name":"val version: <Error class: unknown class>","description":"net.corda.testing.node.internal.InternalMockNodeParameters.version","location":"docs/net.corda.testing.node.internal/-internal-mock-node-parameters/version.html","searchKeys":["version","val version: <Error class: unknown class>","net.corda.testing.node.internal.InternalMockNodeParameters.version"]},{"name":"val version: <Error class: unknown class>","description":"net.corda.testing.node.internal.MockNodeArgs.version","location":"docs/net.corda.testing.node.internal/-mock-node-args/version.html","searchKeys":["version","val version: <Error class: unknown class>","net.corda.testing.node.internal.MockNodeArgs.version"]},{"name":"val version: Int","description":"net.corda.client.rpc.RPCSinceVersion.version","location":"docs/net.corda.client.rpc/-r-p-c-since-version/version.html","searchKeys":["version","val version: Int","net.corda.client.rpc.RPCSinceVersion.version"]},{"name":"val version: Int","description":"net.corda.core.contracts.ContractAttachment.version","location":"docs/net.corda.core.contracts/-contract-attachment/version.html","searchKeys":["version","val version: Int","net.corda.core.contracts.ContractAttachment.version"]},{"name":"val version: Int","description":"net.corda.core.schemas.MappedSchema.version","location":"docs/net.corda.core.schemas/-mapped-schema/version.html","searchKeys":["version","val version: Int","net.corda.core.schemas.MappedSchema.version"]},{"name":"val version: Int","description":"net.corda.core.serialization.DeprecatedConstructorForDeserialization.version","location":"docs/net.corda.core.serialization/-deprecated-constructor-for-deserialization/version.html","searchKeys":["version","val version: Int","net.corda.core.serialization.DeprecatedConstructorForDeserialization.version"]},{"name":"val version: Int = 1","description":"net.corda.core.flows.InitiatingFlow.version","location":"docs/net.corda.core.flows/-initiating-flow/version.html","searchKeys":["version","val version: Int = 1","net.corda.core.flows.InitiatingFlow.version"]},{"name":"val version: String","description":"net.corda.core.cordapp.CordappInfo.version","location":"docs/net.corda.core.cordapp/-cordapp-info/version.html","searchKeys":["version","val version: String","net.corda.core.cordapp.CordappInfo.version"]},{"name":"val version: String","description":"net.corda.core.node.NodeDiagnosticInfo.version","location":"docs/net.corda.core.node/-node-diagnostic-info/version.html","searchKeys":["version","val version: String","net.corda.core.node.NodeDiagnosticInfo.version"]},{"name":"val versionCondition: ColumnPredicate<Int>? = null","description":"net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.versionCondition","location":"docs/net.corda.core.node.services.vault/-attachment-query-criteria/-attachments-query-criteria/version-condition.html","searchKeys":["versionCondition","val versionCondition: ColumnPredicate<Int>? = null","net.corda.core.node.services.vault.AttachmentQueryCriteria.AttachmentsQueryCriteria.versionCondition"]},{"name":"val versionId: Int","description":"net.corda.core.cordapp.Cordapp.Info.Contract.versionId","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract/version-id.html","searchKeys":["versionId","val versionId: Int","net.corda.core.cordapp.Cordapp.Info.Contract.versionId"]},{"name":"val versionId: Int","description":"net.corda.core.cordapp.Cordapp.Info.Workflow.versionId","location":"docs/net.corda.core.cordapp/-cordapp/-info/-workflow/version-id.html","searchKeys":["versionId","val versionId: Int","net.corda.core.cordapp.Cordapp.Info.Workflow.versionId"]},{"name":"val versionId: Int = 1","description":"net.corda.testing.node.internal.CustomCordapp.versionId","location":"docs/net.corda.testing.node.internal/-custom-cordapp/version-id.html","searchKeys":["versionId","val versionId: Int = 1","net.corda.testing.node.internal.CustomCordapp.versionId"]},{"name":"val visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>","description":"net.corda.core.transactions.ContractUpgradeFilteredTransaction.visibleComponents","location":"docs/net.corda.core.transactions/-contract-upgrade-filtered-transaction/visible-components.html","searchKeys":["visibleComponents","val visibleComponents: Map<Int, ContractUpgradeFilteredTransaction.FilteredComponent>","net.corda.core.transactions.ContractUpgradeFilteredTransaction.visibleComponents"]},{"name":"val waitForAllNodesToFinish: Boolean","description":"net.corda.testing.node.internal.DriverDSLImpl.waitForAllNodesToFinish","location":"docs/net.corda.testing.node.internal/-driver-d-s-l-impl/wait-for-all-nodes-to-finish.html","searchKeys":["waitForAllNodesToFinish","val waitForAllNodesToFinish: Boolean","net.corda.testing.node.internal.DriverDSLImpl.waitForAllNodesToFinish"]},{"name":"val waitForAllNodesToFinish: Boolean = false","description":"net.corda.testing.driver.DriverParameters.waitForAllNodesToFinish","location":"docs/net.corda.testing.driver/-driver-parameters/wait-for-all-nodes-to-finish.html","searchKeys":["waitForAllNodesToFinish","val waitForAllNodesToFinish: Boolean = false","net.corda.testing.driver.DriverParameters.waitForAllNodesToFinish"]},{"name":"val waitTime: Duration","description":"net.corda.core.flows.WaitTimeUpdate.waitTime","location":"docs/net.corda.core.flows/-wait-time-update/wait-time.html","searchKeys":["waitTime","val waitTime: Duration","net.corda.core.flows.WaitTimeUpdate.waitTime"]},{"name":"val wakeUpAfter: Instant","description":"net.corda.core.internal.FlowIORequest.Sleep.wakeUpAfter","location":"docs/net.corda.core.internal/-flow-i-o-request/-sleep/wake-up-after.html","searchKeys":["wakeUpAfter","val wakeUpAfter: Instant","net.corda.core.internal.FlowIORequest.Sleep.wakeUpAfter"]},{"name":"val warningSign: String","description":"net.corda.core.internal.Emoji.warningSign","location":"docs/net.corda.core.internal/-emoji/warning-sign.html","searchKeys":["warningSign","val warningSign: String","net.corda.core.internal.Emoji.warningSign"]},{"name":"val weight: Int","description":"net.corda.core.crypto.CompositeKey.NodeAndWeight.weight","location":"docs/net.corda.core.crypto/-composite-key/-node-and-weight/weight.html","searchKeys":["weight","val weight: Int","net.corda.core.crypto.CompositeKey.NodeAndWeight.weight"]},{"name":"val whitelistedContractImplementations: Map<String, List<AttachmentId>>","description":"net.corda.core.internal.AttachmentWithContext.whitelistedContractImplementations","location":"docs/net.corda.core.internal/-attachment-with-context/whitelisted-contract-implementations.html","searchKeys":["whitelistedContractImplementations","val whitelistedContractImplementations: Map<String, List<AttachmentId>>","net.corda.core.internal.AttachmentWithContext.whitelistedContractImplementations"]},{"name":"val whitelistedContractImplementations: Map<String, List<AttachmentId>>","description":"net.corda.core.node.NetworkParameters.whitelistedContractImplementations","location":"docs/net.corda.core.node/-network-parameters/whitelisted-contract-implementations.html","searchKeys":["whitelistedContractImplementations","val whitelistedContractImplementations: Map<String, List<AttachmentId>>","net.corda.core.node.NetworkParameters.whitelistedContractImplementations"]},{"name":"val wireTransactions: List<WireTransaction>","description":"net.corda.testing.dsl.TestLedgerDSLInterpreter.wireTransactions","location":"docs/net.corda.testing.dsl/-test-ledger-d-s-l-interpreter/wire-transactions.html","searchKeys":["wireTransactions","val wireTransactions: List<WireTransaction>","net.corda.testing.dsl.TestLedgerDSLInterpreter.wireTransactions"]},{"name":"val workflow: Cordapp.Info.Workflow","description":"net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.workflow","location":"docs/net.corda.core.cordapp/-cordapp/-info/-contract-and-workflow/workflow.html","searchKeys":["workflow","val workflow: Cordapp.Info.Workflow","net.corda.core.cordapp.Cordapp.Info.ContractAndWorkflow.workflow"]},{"name":"val x500Principal: X500Principal","description":"net.corda.core.identity.CordaX500Name.x500Principal","location":"docs/net.corda.core.identity/-corda-x500-name/x500-principal.html","searchKeys":["x500Principal","val x500Principal: X500Principal","net.corda.core.identity.CordaX500Name.x500Principal"]},{"name":"val zeroHash: SecureHash","description":"net.corda.core.crypto.DigestService.zeroHash","location":"docs/net.corda.core.crypto/-digest-service/zero-hash.html","searchKeys":["zeroHash","val zeroHash: SecureHash","net.corda.core.crypto.DigestService.zeroHash"]},{"name":"val zeroHash: SecureHash.SHA256","description":"net.corda.core.crypto.SecureHash.Companion.zeroHash","location":"docs/net.corda.core.crypto/-secure-hash/-companion/zero-hash.html","searchKeys":["zeroHash","val zeroHash: SecureHash.SHA256","net.corda.core.crypto.SecureHash.Companion.zeroHash"]},{"name":"var className: String?","description":"net.corda.testing.node.MockNetworkNotarySpec.className","location":"docs/net.corda.testing.node/-mock-network-notary-spec/class-name.html","searchKeys":["className","var className: String?","net.corda.testing.node.MockNetworkNotarySpec.className"]},{"name":"var currency: String","description":"net.corda.finance.schemas.CashSchemaV1.PersistentCashState.currency","location":"docs/net.corda.finance.schemas/-cash-schema-v1/-persistent-cash-state/currency.html","searchKeys":["currency","var currency: String","net.corda.finance.schemas.CashSchemaV1.PersistentCashState.currency"]},{"name":"var currency: String","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.currency","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/currency.html","searchKeys":["currency","var currency: String","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.currency"]},{"name":"var currency: String","description":"net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.currency","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/-persistent-cash-state/currency.html","searchKeys":["currency","var currency: String","net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.currency"]},{"name":"var currency: String","description":"net.corda.finance.test.SampleCashSchemaV2.PersistentCashState.currency","location":"docs/net.corda.finance.test/-sample-cash-schema-v2/-persistent-cash-state/currency.html","searchKeys":["currency","var currency: String","net.corda.finance.test.SampleCashSchemaV2.PersistentCashState.currency"]},{"name":"var currency: String","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.currency","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/currency.html","searchKeys":["currency","var currency: String","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.currency"]},{"name":"var currentStep: ProgressTracker.Step","description":"net.corda.core.utilities.ProgressTracker.currentStep","location":"docs/net.corda.core.utilities/-progress-tracker/current-step.html","searchKeys":["currentStep","var currentStep: ProgressTracker.Step","net.corda.core.utilities.ProgressTracker.currentStep"]},{"name":"var delay: Duration?","description":"net.corda.testing.node.internal.network.CrlServer.delay","location":"docs/net.corda.testing.node.internal.network/-crl-server/delay.html","searchKeys":["delay","var delay: Duration?","net.corda.testing.node.internal.network.CrlServer.delay"]},{"name":"var externalId: String?","description":"net.corda.core.schemas.CommonSchemaV1.LinearState.externalId","location":"docs/net.corda.core.schemas/-common-schema-v1/-linear-state/external-id.html","searchKeys":["externalId","var externalId: String?","net.corda.core.schemas.CommonSchemaV1.LinearState.externalId"]},{"name":"var externalId: String?","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.externalId","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/external-id.html","searchKeys":["externalId","var externalId: String?","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.externalId"]},{"name":"var faceValue: Long","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.faceValue","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/face-value.html","searchKeys":["faceValue","var faceValue: Long","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.faceValue"]},{"name":"var faceValueIssuerPartyHash: String","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.faceValueIssuerPartyHash","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/face-value-issuer-party-hash.html","searchKeys":["faceValueIssuerPartyHash","var faceValueIssuerPartyHash: String","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.faceValueIssuerPartyHash"]},{"name":"var faceValueIssuerRef: ByteArray","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.faceValueIssuerRef","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/face-value-issuer-ref.html","searchKeys":["faceValueIssuerRef","var faceValueIssuerRef: ByteArray","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.faceValueIssuerRef"]},{"name":"var index: Int","description":"net.corda.core.schemas.PersistentStateRef.index","location":"docs/net.corda.core.schemas/-persistent-state-ref/--index--.html","searchKeys":["index","var index: Int","net.corda.core.schemas.PersistentStateRef.index"]},{"name":"var issuancePartyHash: String","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.issuancePartyHash","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/issuance-party-hash.html","searchKeys":["issuancePartyHash","var issuancePartyHash: String","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.issuancePartyHash"]},{"name":"var issuanceRef: ByteArray","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.issuanceRef","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/issuance-ref.html","searchKeys":["issuanceRef","var issuanceRef: ByteArray","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.issuanceRef"]},{"name":"var issuer: AbstractParty","description":"net.corda.core.schemas.CommonSchemaV1.FungibleState.issuer","location":"docs/net.corda.core.schemas/-common-schema-v1/-fungible-state/issuer.html","searchKeys":["issuer","var issuer: AbstractParty","net.corda.core.schemas.CommonSchemaV1.FungibleState.issuer"]},{"name":"var issuer: AbstractParty?","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.issuer","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/issuer.html","searchKeys":["issuer","var issuer: AbstractParty?","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.issuer"]},{"name":"var issuerPartyHash: String","description":"net.corda.finance.schemas.CashSchemaV1.PersistentCashState.issuerPartyHash","location":"docs/net.corda.finance.schemas/-cash-schema-v1/-persistent-cash-state/issuer-party-hash.html","searchKeys":["issuerPartyHash","var issuerPartyHash: String","net.corda.finance.schemas.CashSchemaV1.PersistentCashState.issuerPartyHash"]},{"name":"var issuerPartyHash: String","description":"net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.issuerPartyHash","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/-persistent-cash-state/issuer-party-hash.html","searchKeys":["issuerPartyHash","var issuerPartyHash: String","net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.issuerPartyHash"]},{"name":"var issuerRef: ByteArray","description":"net.corda.core.schemas.CommonSchemaV1.FungibleState.issuerRef","location":"docs/net.corda.core.schemas/-common-schema-v1/-fungible-state/issuer-ref.html","searchKeys":["issuerRef","var issuerRef: ByteArray","net.corda.core.schemas.CommonSchemaV1.FungibleState.issuerRef"]},{"name":"var issuerRef: ByteArray","description":"net.corda.finance.schemas.CashSchemaV1.PersistentCashState.issuerRef","location":"docs/net.corda.finance.schemas/-cash-schema-v1/-persistent-cash-state/issuer-ref.html","searchKeys":["issuerRef","var issuerRef: ByteArray","net.corda.finance.schemas.CashSchemaV1.PersistentCashState.issuerRef"]},{"name":"var issuerRef: ByteArray","description":"net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.issuerRef","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/-persistent-cash-state/issuer-ref.html","searchKeys":["issuerRef","var issuerRef: ByteArray","net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.issuerRef"]},{"name":"var issuerRef: ByteArray","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.issuerRef","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/issuer-ref.html","searchKeys":["issuerRef","var issuerRef: ByteArray","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.issuerRef"]},{"name":"var lifecycle: Obligation.Lifecycle","description":"net.corda.finance.contracts.asset.Obligation.State.lifecycle","location":"docs/net.corda.finance.contracts.asset/-obligation/-state/lifecycle.html","searchKeys":["lifecycle","var lifecycle: Obligation.Lifecycle","net.corda.finance.contracts.asset.Obligation.State.lifecycle"]},{"name":"var linearBoolean: Boolean","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearBoolean","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/linear-boolean.html","searchKeys":["linearBoolean","var linearBoolean: Boolean","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearBoolean"]},{"name":"var linearBoolean: Boolean","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearBoolean","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/linear-boolean.html","searchKeys":["linearBoolean","var linearBoolean: Boolean","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearBoolean"]},{"name":"var linearNumber: Long","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearNumber","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/linear-number.html","searchKeys":["linearNumber","var linearNumber: Long","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearNumber"]},{"name":"var linearNumber: Long","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearNumber","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/linear-number.html","searchKeys":["linearNumber","var linearNumber: Long","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearNumber"]},{"name":"var linearString: String?","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearString","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/linear-string.html","searchKeys":["linearString","var linearString: String?","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearString"]},{"name":"var linearString: String?","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearString","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/linear-string.html","searchKeys":["linearString","var linearString: String?","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearString"]},{"name":"var linearTimestamp: Instant","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearTimestamp","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/linear-timestamp.html","searchKeys":["linearTimestamp","var linearTimestamp: Instant","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.linearTimestamp"]},{"name":"var linearTimestamp: Instant","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearTimestamp","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v2/-persistent-dummy-linear-state/linear-timestamp.html","searchKeys":["linearTimestamp","var linearTimestamp: Instant","net.corda.testing.internal.vault.DummyLinearStateSchemaV2.PersistentDummyLinearState.linearTimestamp"]},{"name":"var lockId: UUID","description":"net.corda.core.transactions.TransactionBuilder.lockId","location":"docs/net.corda.core.transactions/-transaction-builder/lock-id.html","searchKeys":["lockId","var lockId: UUID","net.corda.core.transactions.TransactionBuilder.lockId"]},{"name":"var maturity: Instant","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.maturity","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/maturity.html","searchKeys":["maturity","var maturity: Instant","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.maturity"]},{"name":"var maximumHeapSize: String","description":"net.corda.testing.node.NotarySpec.maximumHeapSize","location":"docs/net.corda.testing.node/-notary-spec/maximum-heap-size.html","searchKeys":["maximumHeapSize","var maximumHeapSize: String","net.corda.testing.node.NotarySpec.maximumHeapSize"]},{"name":"var networkParameters: NetworkParameters","description":"net.corda.testing.node.internal.InternalMockNetwork.networkParameters","location":"docs/net.corda.testing.node.internal/-internal-mock-network/network-parameters.html","searchKeys":["networkParameters","var networkParameters: NetworkParameters","net.corda.testing.node.internal.InternalMockNetwork.networkParameters"]},{"name":"var networkParameters: NetworkParameters","description":"net.corda.testing.node.internal.network.NetworkMapServer.networkParameters","location":"docs/net.corda.testing.node.internal.network/-network-map-server/network-parameters.html","searchKeys":["networkParameters","var networkParameters: NetworkParameters","net.corda.testing.node.internal.network.NetworkMapServer.networkParameters"]},{"name":"var nextNodeId: Int","description":"net.corda.testing.node.internal.InternalMockNetwork.nextNodeId","location":"docs/net.corda.testing.node.internal/-internal-mock-network/next-node-id.html","searchKeys":["nextNodeId","var nextNodeId: Int","net.corda.testing.node.internal.InternalMockNetwork.nextNodeId"]},{"name":"var nodeSerializationEnv: SerializationEnvironment?","description":"net.corda.core.serialization.internal.nodeSerializationEnv","location":"docs/net.corda.core.serialization.internal/node-serialization-env.html","searchKeys":["nodeSerializationEnv","var nodeSerializationEnv: SerializationEnvironment?","net.corda.core.serialization.internal.nodeSerializationEnv"]},{"name":"var notary: Party?","description":"net.corda.core.transactions.TransactionBuilder.notary","location":"docs/net.corda.core.transactions/-transaction-builder/notary.html","searchKeys":["notary","var notary: Party?","net.corda.core.transactions.TransactionBuilder.notary"]},{"name":"var originalErrorId: Long?","description":"net.corda.core.flows.FlowException.originalErrorId","location":"docs/net.corda.core.flows/-flow-exception/original-error-id.html","searchKeys":["originalErrorId","var originalErrorId: Long?","net.corda.core.flows.FlowException.originalErrorId"]},{"name":"var owner: AbstractParty","description":"net.corda.core.schemas.CommonSchemaV1.FungibleState.owner","location":"docs/net.corda.core.schemas/-common-schema-v1/-fungible-state/owner.html","searchKeys":["owner","var owner: AbstractParty","net.corda.core.schemas.CommonSchemaV1.FungibleState.owner"]},{"name":"var owner: AbstractParty?","description":"net.corda.finance.schemas.CashSchemaV1.PersistentCashState.owner","location":"docs/net.corda.finance.schemas/-cash-schema-v1/-persistent-cash-state/owner.html","searchKeys":["owner","var owner: AbstractParty?","net.corda.finance.schemas.CashSchemaV1.PersistentCashState.owner"]},{"name":"var owner: AbstractParty?","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.owner","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/owner.html","searchKeys":["owner","var owner: AbstractParty?","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.owner"]},{"name":"var ownerHash: String","description":"net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.ownerHash","location":"docs/net.corda.finance.schemas/-commercial-paper-schema-v1/-persistent-commercial-paper-state/owner-hash.html","searchKeys":["ownerHash","var ownerHash: String","net.corda.finance.schemas.CommercialPaperSchemaV1.PersistentCommercialPaperState.ownerHash"]},{"name":"var ownerHash: String","description":"net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.ownerHash","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/-persistent-cash-state/owner-hash.html","searchKeys":["ownerHash","var ownerHash: String","net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.ownerHash"]},{"name":"var parent: ProgressTracker?","description":"net.corda.core.utilities.ProgressTracker.parent","location":"docs/net.corda.core.utilities/-progress-tracker/parent.html","searchKeys":["parent","var parent: ProgressTracker?","net.corda.core.utilities.ProgressTracker.parent"]},{"name":"var participants: MutableSet<AbstractParty>","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.participants","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/participants.html","searchKeys":["participants","var participants: MutableSet<AbstractParty>","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.participants"]},{"name":"var participants: MutableSet<AbstractParty>?","description":"net.corda.core.schemas.CommonSchemaV1.LinearState.participants","location":"docs/net.corda.core.schemas/-common-schema-v1/-linear-state/participants.html","searchKeys":["participants","var participants: MutableSet<AbstractParty>?","net.corda.core.schemas.CommonSchemaV1.LinearState.participants"]},{"name":"var participants: MutableSet<AbstractParty?>?","description":"net.corda.core.schemas.CommonSchemaV1.FungibleState.participants","location":"docs/net.corda.core.schemas/-common-schema-v1/-fungible-state/participants.html","searchKeys":["participants","var participants: MutableSet<AbstractParty?>?","net.corda.core.schemas.CommonSchemaV1.FungibleState.participants"]},{"name":"var participants: MutableSet<AbstractParty?>?","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.participants","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/participants.html","searchKeys":["participants","var participants: MutableSet<AbstractParty?>?","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.participants"]},{"name":"var pennies: Long","description":"net.corda.finance.schemas.CashSchemaV1.PersistentCashState.pennies","location":"docs/net.corda.finance.schemas/-cash-schema-v1/-persistent-cash-state/pennies.html","searchKeys":["pennies","var pennies: Long","net.corda.finance.schemas.CashSchemaV1.PersistentCashState.pennies"]},{"name":"var pennies: Long","description":"net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.pennies","location":"docs/net.corda.finance.test/-sample-cash-schema-v1/-persistent-cash-state/pennies.html","searchKeys":["pennies","var pennies: Long","net.corda.finance.test.SampleCashSchemaV1.PersistentCashState.pennies"]},{"name":"var pennies: Long","description":"net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.pennies","location":"docs/net.corda.finance.test/-sample-cash-schema-v3/-persistent-cash-state/pennies.html","searchKeys":["pennies","var pennies: Long","net.corda.finance.test.SampleCashSchemaV3.PersistentCashState.pennies"]},{"name":"var privacySalt: PrivacySalt","description":"net.corda.core.internal.ContractUpgradeTransactionBuilder.privacySalt","location":"docs/net.corda.core.internal/-contract-upgrade-transaction-builder/privacy-salt.html","searchKeys":["privacySalt","var privacySalt: PrivacySalt","net.corda.core.internal.ContractUpgradeTransactionBuilder.privacySalt"]},{"name":"var quantity: Long","description":"net.corda.core.schemas.CommonSchemaV1.FungibleState.quantity","location":"docs/net.corda.core.schemas/-common-schema-v1/-fungible-state/quantity.html","searchKeys":["quantity","var quantity: Long","net.corda.core.schemas.CommonSchemaV1.FungibleState.quantity"]},{"name":"var spy: MessagingServiceSpy?","description":"net.corda.testing.node.internal.MockNodeMessagingService.spy","location":"docs/net.corda.testing.node.internal/-mock-node-messaging-service/spy.html","searchKeys":["spy","var spy: MessagingServiceSpy?","net.corda.testing.node.internal.MockNodeMessagingService.spy"]},{"name":"var statistics: ResolveTransactionsFlowStats","description":"net.corda.core.internal.ResolveTransactionsFlow.statistics","location":"docs/net.corda.core.internal/-resolve-transactions-flow/statistics.html","searchKeys":["statistics","var statistics: ResolveTransactionsFlowStats","net.corda.core.internal.ResolveTransactionsFlow.statistics"]},{"name":"var stepIndex: Int","description":"net.corda.core.utilities.ProgressTracker.stepIndex","location":"docs/net.corda.core.utilities/-progress-tracker/step-index.html","searchKeys":["stepIndex","var stepIndex: Int","net.corda.core.utilities.ProgressTracker.stepIndex"]},{"name":"var stepsTreeIndex: Int","description":"net.corda.core.utilities.ProgressTracker.stepsTreeIndex","location":"docs/net.corda.core.utilities/-progress-tracker/steps-tree-index.html","searchKeys":["stepsTreeIndex","var stepsTreeIndex: Int","net.corda.core.utilities.ProgressTracker.stepsTreeIndex"]},{"name":"var txId: String","description":"net.corda.core.schemas.PersistentStateRef.txId","location":"docs/net.corda.core.schemas/-persistent-state-ref/tx-id.html","searchKeys":["txId","var txId: String","net.corda.core.schemas.PersistentStateRef.txId"]},{"name":"var uuid: UUID","description":"net.corda.core.schemas.CommonSchemaV1.LinearState.uuid","location":"docs/net.corda.core.schemas/-common-schema-v1/-linear-state/uuid.html","searchKeys":["uuid","var uuid: UUID","net.corda.core.schemas.CommonSchemaV1.LinearState.uuid"]},{"name":"var uuid: UUID","description":"net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.uuid","location":"docs/net.corda.testing.internal.vault/-dummy-linear-state-schema-v1/-persistent-dummy-linear-state/uuid.html","searchKeys":["uuid","var uuid: UUID","net.corda.testing.internal.vault.DummyLinearStateSchemaV1.PersistentDummyLinearState.uuid"]},{"name":"var value: T","description":"net.corda.core.internal.DeclaredField.value","location":"docs/net.corda.core.internal/-declared-field/value.html","searchKeys":["value","var value: T","net.corda.core.internal.DeclaredField.value"]},{"name":"var version: String","description":"net.corda.testing.node.internal.network.NetworkMapServer.version","location":"docs/net.corda.testing.node.internal.network/-network-map-server/version.html","searchKeys":["version","var version: String","net.corda.testing.node.internal.network.NetworkMapServer.version"]}]
